"use strict";
// Copyright (C) Microsoft Corporation. All rights reserved.
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-extra");
const path = require("path");
const diagnosticMessages_generated_1 = require("../diagnosticMessages.generated");
const locale_generated_1 = require("../locale.generated");
const constants = require("../constants");
const manifesttypesgenerator_1 = require("../manifesttypesgenerator");
class GenerateManifestTypesTask {
    constructor() {
        this._manifestTypesGenerator = new manifesttypesgenerator_1.ManifestTypesGenerator();
    }
    getDescription() {
        return locale_generated_1.translate(diagnosticMessages_generated_1.strings.task_generate_manifest_types.key);
    }
    setOptions(options) {
        this._options = options;
    }
    run(context) {
        return context.mapControls((control) => {
            return Promise.resolve(this.generateManifestTypes(control));
        });
    }
    // Generates ManifestTypes.d.ts file from control manifest
    generateManifestTypes(context) {
        const comment = `/*\n*This is auto generated from the ControlManifest.Input.xml file\n*/\n\n` +
            `// Define IInputs and IOutputs Type. They should match with ControlManifest.\n`;
        const code = comment + this._manifestTypesGenerator.generateManifestTypes(context.getControlManifest().getManifestData());
        const generatedDir = path.join(context.getControlPath(), constants.TYPING_FOLDER_NAME);
        fs.ensureDirSync(generatedDir);
        fs.writeFileSync(path.join(generatedDir, constants.MANIFEST_TYPE_FILE_NAME), code);
    }
}
exports.GenerateManifestTypesTask = GenerateManifestTypesTask;
