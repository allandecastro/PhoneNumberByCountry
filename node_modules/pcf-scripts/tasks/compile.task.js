"use strict";
// Copyright (C) Microsoft Corporation. All rights reserved.
Object.defineProperty(exports, "__esModule", { value: true });
const fs = require("fs-extra");
const path = require("path");
const webpack = require("webpack");
const webpackconfig_1 = require("../webpackconfig");
const diagnosticMessages_generated_1 = require("../diagnosticMessages.generated");
const constants = require("../constants");
const locale_generated_1 = require("../locale.generated");
class CompileTask {
    getDescription() {
        return locale_generated_1.translate(diagnosticMessages_generated_1.strings.task_compile_and_bundle.key);
    }
    setOptions(options) {
        this._options = options;
    }
    run(context) {
        return this.runBuild(context, false);
    }
    runBuild(context, isWatch) {
        const buildMode = context.getBuildMode();
        const outDir = context.getOutDir();
        if (!outDir) {
            context.getDiagnostic().push(diagnosticMessages_generated_1.strings.buildconfig_no_outdir);
            return Promise.reject();
        }
        return context.mapControls((control) => {
            const controlOutputDir = path.resolve(outDir, control.getControlFolderName());
            const config = webpackconfig_1.getWebpackConfig(control, controlOutputDir, buildMode, isWatch);
            const bundlePath = path.join(controlOutputDir, constants.BUNDLE_NAME);
            fs.ensureDirSync(controlOutputDir);
            return new Promise((resolve, reject) => webpack(config, (error, stats) => {
                const stub = webpackconfig_1.generateStub(control.getControlNamespace(), control.getControlName());
                fs.appendFileSync(bundlePath, stub, 'utf8');
                let colorize = false;
                if (this._options && this._options.colorize) {
                    colorize = true;
                }
                console.log(`[Webpack stats]:\n${stats.toString({ chunks: false, colors: colorize })}`);
                if (error) {
                    context.getDiagnostic().pushA(diagnosticMessages_generated_1.strings.build_error_generic, [error.message]);
                    return reject();
                }
                else if (stats.hasErrors()) {
                    context.getDiagnostic().push(diagnosticMessages_generated_1.strings.bundling_error);
                    return reject();
                }
                return resolve();
            }));
        });
    }
}
exports.CompileTask = CompileTask;
class CompileTaskForWatch extends CompileTask {
    run(context) {
        return this.runBuild(context, true);
    }
}
exports.CompileTaskForWatch = CompileTaskForWatch;
