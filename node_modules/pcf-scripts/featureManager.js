"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.FeatureManager = void 0;
const fs = require("fs");
const path = require("path");
const constants = require("./constants");
const buildFlags = require('./featureflags.json');
class FeatureManager {
    constructor() {
        this._featureFlags = {};
        const configPath = path.resolve('.', constants.FEATURE_CONFIG_FILE_NAME);
        try {
            if (fs.existsSync(configPath)) {
                const featureConfig = fs.readFileSync(configPath);
                this._featureOverrides = JSON.parse(featureConfig.toString());
            }
            else {
                this._featureOverrides = {};
            }
        }
        catch (error) {
            console.error(`[FeatureManager] [Error] Error reading feature configuration from ${configPath}:\n${error}`);
        }
        const featureManager = this;
        Object.keys(buildFlags).forEach(function (key) {
            let val = featureManager._featureOverrides[key] ? featureManager._featureOverrides[key] : buildFlags[key];
            featureManager._featureFlags[key] = val;
        });
    }
    isFeatureEnabled(feature) {
        const featureState = this._featureFlags[feature];
        return featureState === 'on' ? true : false;
    }
}
exports.FeatureManager = FeatureManager;
