"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const locale_generated_1 = require("./locale.generated");
const constants = require("./constants");
class DiagnosticManager {
    constructor() {
        this._diagnostics = [];
    }
    length() {
        return this._diagnostics.length;
    }
    push(diag) {
        this._diagnostics.push({ diag: diag, args: undefined });
    }
    pushA(diag, args) {
        this._diagnostics.push({ diag: diag, args: args });
    }
    pop() {
        return this._diagnostics.pop();
    }
    clear() {
        this._diagnostics = [];
    }
    hasErrors() {
        let hasError = false;
        if (this._diagnostics.length > 0) {
            for (let i = 0; i < this._diagnostics.length; i++) {
                if (this._diagnostics[i].diag.category === 'Error') {
                    hasError = true;
                    break;
                }
            }
        }
        return hasError;
    }
    flush(colorize) {
        this._diagnostics.forEach((entry) => {
            let message = entry.diag.message;
            if (entry.diag.key && entry.args) {
                message = locale_generated_1.translateA(entry.diag.key, entry.args);
            }
            else if (entry.diag.key) {
                message = locale_generated_1.translate(entry.diag.key);
            }
            if (colorize && entry.diag.category === 'Error') {
                console.log(constants.COLOR_RED_RESET, `[pcf-${entry.diag.code}] [${entry.diag.category}] ${message}`);
            }
            else {
                console.log(`[pcf-${entry.diag.code}] [${entry.diag.category}] ${message}`);
            }
        });
    }
}
exports.DiagnosticManager = DiagnosticManager;
