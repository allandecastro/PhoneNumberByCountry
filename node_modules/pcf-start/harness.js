!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=146)}([function(e,t){e.exports=React},function(e,t,n){"use strict";n.r(t),n.d(t,"ManifestType",function(){return o});var o=function(){function e(){}return e.TwoOptions="TwoOptions",e.DateAndTimeDateOnly="DateAndTime.DateOnly",e.DateAndTimeDateAndTime="DateAndTime.DateAndTime",e.Decimal="Decimal",e.FP="FP",e.WholeNone="Whole.None",e.WholeDuration="Whole.Duration",e.WholeTimeZone="Whole.TimeZone",e.WholeLanguage="Whole.Language",e.LookupSimple="Lookup.Simple",e.LookupCustomer="Lookup.Customer",e.LookupOwner="Lookup.Owner",e.LookupPartyList="Lookup.PartyList",e.LookupRegarding="Lookup.Regarding",e.LookupMultiEntity="Lookup.MultiEntity",e.MultiSelectPicklist="MultiSelectPicklist",e.Multiple="Multiple",e.Currency="Currency",e.OptionSet="OptionSet",e.StatusOptionSet="StatusOptionSet",e.EntityNameOptionSet="EntityNameOptionSet",e.SingleLineEmail="SingleLine.Email",e.SingleLineText="SingleLine.Text",e.SingleLineTextArea="SingleLine.TextArea",e.SingleLineURL="SingleLine.URL",e.SingleLineTickerSymbol="SingleLine.Ticker",e.SingleLinePhone="SingleLine.Phone",e.Grid="Grid",e.BusinessProcessFlow="BusinessProcessFlow",e.WebResourceHtmlControl="WebResource.HTML",e.TimelineWall="TimelineWall",e.QuickForm="Form.QuickForm",e.Card="Card",e.Dashboard="Dashboard",e.Search="Search",e.SearchWidget="SearchWidget.SearchWidget",e.KbArticle="KbArticle",e.KbContent="KbContent",e.PowerBI="PowerBI",e.MicrosoftFlow="MicrosoftFlow",e.EmailEngagementRecipientActivity="emailrecipientactivitycontrol",e.ReferencePanelSearchWidget="SearchWidget.ReferencePanelSearchWidget",e.Timer="Timer",e.SingleLineAddress="SingleLine.Address",e.GlobalFilter="GlobalFilter",e.AppliedFilters="AppliedFilters",e.ReferencePanel="ReferencePanel",e.EmailEngagementActions="emailengagementactionscontrol",e.SocialInsightsControl="SocialInsightsControl",e.ClassIdControlMap={"fd2a7985-3187-444e-908d-6624b21f69c0":"iframe","270bd3db-d9af-4782-9025-509e298dec0a":"lookup","f3015350-44a2-4aa0-97b5-00166532b5e9":"regarding","cbfb742c-14e7-4a17-96bb-1a13f7f64aa2":"partylist","aa987274-ce4e-4271-a803-66164311a958":"duration","c6d124ca-7eda-4a60-aea9-7fb8d318b68f":"integer","0d2c745a-e5a8-4c8f-ba63-c6d3bb604660":"float","533b9e00-756b-4312-95a0-dc888637ac78":"money","c3efe0c3-0ec6-42be-8349-cbd9079dfd8e":"decimal","ada2203e-b4cd-49be-9ddf-234642b43b52":"email","6f3fb987-393b-4d2d-859f-9d0f0349b6ad":"emailbody","4273edbd-ac1d-40d3-9fb2-095c621b552d":"text","e0dece4b-6fc8-4a8f-a065-082708572369":"memo","71716b6c-711e-476c-8ab8-5d11542bfb47":"url","1e1fc551-f7a8-43af-ac34-a8dc35c7b6d4":"tickersymbol","3ef39988-22bb-4f0b-bbbe-64b5a3748aee":"picklist","5d68b988-0661-4db2-bc3e-17598ad3be6c":"status","5b773807-9fb2-42db-97c3-7a91eff8adff":"datetime","67fac785-cd58-4f9f-abb3-4b7ddc6ed5ed":"boolean","b0c6723a-8503-4fd7-bb28-c8a06ac933c2":"boolean","671a9387-ca5a-4d1e-8ab7-06e39ddcf6b5":"language","e7a81278-8635-4d9e-8d4d-59480b391c5b":"subgrid","7c624a0b-f59e-493d-9583-638d34759266":"timezone","3246f906-1f71-45f7-b11f-d7be0f9d04c9":"connection","821acf1a-7e46-4a0c-965d-fe14a57d78c7":"connectionroleojbjecttypecodelist","9fdf5f91-88b1-47f4-ad53-c11efc01a01d":"webResourceHtml","587cdf98-c1d5-4bde-8473-14a0bc7644a7":"webResourceImage","080677db-86ec-4544-ac42-f927e74b491f":"webResourceSilverlight","8c54228c-1b25-4909-a12a-f2b968bb0d62":"powerBITile","06375649-c143-495e-a496-c962e5b4488e":"notes","5c5600e0-1d6e-4205-a272-be80da87fd42":"quickformcollection","b68b05f0-a46d-43f8-843b-917920af806a":"referencepanelquickformcollection","02d4264b-47e2-4b4c-aa95-f439f3f4d458":"referencepanelsubgrid","1f179106-fa28-4495-961e-f6bd93c21974":"interactionwall","62b0df79-0464-470f-8af7-4483cfea0c7d":"bingmap","86b9e25e-695e-4fef-ac69-f05cfa96739c":"socialInsight","76b9e25e-695e-4fef-ac69-f05cfa96739c":"orgInsights","9c5ca0a1-ab4d-4781-be7e-8dfbe867b87e":"timercontrol","e616a57f-20e0-4534-8662-a101b5ddf4e0":"searchwidget","03c5aed6-ee88-404e-b63c-4c53429c8bfb":"kbarticle","1b9fc842-b45e-4fc1-b080-81e96b6d857f":"kbcontent","7ccd1494-1f7a-4e3a-8bde-f32069daeb9f":"referencepanelsearchwidget","ee9078c8-6946-4e2c-b8f8-35e65f4be6a8":"queuecontainer","f130d8ae-ce5b-43c5-bed1-1a6a5856cf3d":"multiplepiechart","6fae836f-fc01-48de-9b63-9b68a8fd86b8":"tagcontrol","f9a8a302-114e-466a-b582-6771b2ae0d92":"customControl","c8bfbbef-6851-4401-a0cc-7450062fe085":"aci","8c10015a-b339-4982-9474-a95fe05631a5":"phone","d2561f53-b292-42d9-b222-478e40ffe29f":"dashboard","7c7059a6-74d9-4b02-80ad-19bc60426393":"search","39354e4a-5015-4d74-8031-ea9eb73a1322":"label","fff0e632-9d7b-4f21-bbc1-05d1567ad144":"globalfilter","9c310a73-a360-42c5-8943-47a06f1b51ea":"appliedfilters"},e}()},function(e,t,n){"use strict";n.r(t),n.d(t,"XrmProxy",function(){return r}),n.d(t,"default",function(){return i});var o=n(16),r=function(){function e(){this._navigationContext={openAlertDialog:o.e,openErrorDialog:o.g,openConfirmDialog:o.f,openFile:null,openUrl:null,openWebResource:null,openDialog:null,openForm:null,openTaskFlow:null},this._userSettings={userId:"{00000000-0000-0000-0000-000000000000}",getTimeZoneOffsetMinutes:o.d,isHighContrastEnabled:null,isRTL:!1,languageId:1033,userName:"",securityRoles:[],pagingLimit:null},this._orgSettings={languageId:null,uniqueName:null,isAutoSaveEnabled:null,attributes:null},this._utils={beginSecureSessionForResource:null,getEntityMetadata:null,getEntitiesMetadata:null,getResourceString:null,isFeatureEnabled:null,isDisruptiveFeatureEnabled:null,lookupObjects:null,getEntityName:null,getFormId:null,canOpenUrl:null},this._page={getClientUrl:null},this._reporting={reportSuccess:null,reportFailure:null,reportEvent:null},this._diagnostics={traceError:null,traceWarning:null,traceInfo:null,traceDebug:null},this._intelligenceApi={getPredictionSchemaAsync:null,predictAsync:null,getPreTrainedModelIdAsync:null,getLabelsForObjectDetectionModelAsync:null},this._client={getClient:o.a,getClientState:o.b,getFormFactor:o.c},this._applicationUI={addGlobalNotification:null,clearGlobalNotification:null,clearGlobalNotifications:null},this._webApiContext={online:{retrieveRecord:null,retrieveMultipleRecords:null,updateRecord:null,createRecord:null,deleteRecord:null,execute:null,executeMultiple:null},offline:{retrieveRecord:null,retrieveMultipleRecords:null,updateRecord:null,createRecord:null,deleteRecord:null,execute:null,executeMultiple:null}},this._initialized=!1}return Object.defineProperty(e.prototype,"Initialized",{get:function(){return this._initialized},set:function(e){this._initialized=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"OrgSettings",{get:function(){return this._orgSettings},set:function(e){this._orgSettings=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"UserSettings",{get:function(){return this._userSettings},set:function(e){this._userSettings=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"Offline",{get:function(){return this._offline},set:function(e){this._offline=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"Utils",{get:function(){return this._utils},set:function(e){this._utils=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"Page",{get:function(){return this._page},set:function(e){this._page=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"Reporting",{get:function(){return this._reporting},set:function(e){this._reporting=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"Diagnostics",{get:function(){return this._diagnostics},set:function(e){this._diagnostics=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"IntelligenceApi",{get:function(){return this._intelligenceApi},set:function(e){this._intelligenceApi=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"Client",{get:function(){return this._client},set:function(e){this._client=e},enumerable:!0,configurable:!0}),e.prototype.setUserSettings=function(e){this._userSettings=e},e.prototype.setOrgSettings=function(e){this._orgSettings=e},e.prototype.setOffline=function(e){this._offline=e},e.prototype.setUtils=function(e){this._utils=e},e.prototype.setPage=function(e){this._page=e},e.prototype.setReporting=function(e){this._reporting=e},e.prototype.setIntelligenceApi=function(e){this._intelligenceApi=e},e.prototype.setDiagnostics=function(e){this._diagnostics=e},e.prototype.setClient=function(e){this._client=e},e.prototype.setNavigationContext=function(e){this._navigationContext=e},e.prototype.setDeviceContext=function(e){this._deviceContext=e},e.prototype.setExternalContext=function(e){this._externalContext=e},e.prototype.setApplicationUI=function(e){this._applicationUI=e},e.prototype.setWebApi=function(e){this._webApiContext=e},e.prototype.openForm=function(e,t){return this._navigationContext.openForm(e,t)},e.prototype.openUrl=function(e,t){return this._navigationContext.openUrl(e,t)},e.prototype.openFile=function(e,t){return this._navigationContext.openFile(e,t)},e.prototype.openAlertDialog=function(e,t){return this._navigationContext.openAlertDialog(e,t)},e.prototype.openConfirmDialog=function(e,t){return this._navigationContext.openConfirmDialog(e,t)},e.prototype.openDialog=function(e,t,n){return this._navigationContext.openDialog(e,t,n)},e.prototype.openErrorDialog=function(e){return this._navigationContext.openErrorDialog(e)},e.prototype.openTaskFlow=function(e,t,n){return this._navigationContext.openTaskFlow(e,t,n)},e.prototype.openWebResource=function(e,t,n){return this._navigationContext.openWebResource(e,t,n)},e.prototype.captureImage=function(e){return this._deviceContext.captureImage(e)},e.prototype.captureAudio=function(){return this._deviceContext.captureAudio()},e.prototype.captureVideo=function(){return this._deviceContext.captureVideo()},e.prototype.pickFile=function(e){return this._deviceContext.pickFile(e)},e.prototype.getBarcodeValue=function(){return this._deviceContext.getBarcodeValue()},e.prototype.getCurrentPosition=function(){return this._deviceContext.getCurrentPosition()},e.prototype.getAvailableExternalContexts=function(){return this._externalContext.getAvailableExternalContexts()},e.prototype.getExternalContextProperty=function(e,t,n){return this._externalContext.getExternalContextProperty(e,t,n)},e.prototype.invokeExternalContextAction=function(e,t,n){return this._externalContext.invokeExternalContextAction(e,t,n)},e.prototype.removeExternalContextPropertyListener=function(e,t,n){return this._externalContext.removeExternalContextPropertyListener(e,t,n)},e.prototype.addGlobalNotification=function(e,t,n,o,r,i){return this._applicationUI.addGlobalNotification(e,t,n,o,r,i)},e.prototype.clearGlobalNotification=function(e){return this._applicationUI.clearGlobalNotification(e)},e.prototype.clearGlobalNotifications=function(){return this._applicationUI.clearGlobalNotifications()},e.prototype._getWebApiContext=function(){return"Offline"===this._client.getClientState()?this._webApiContext.offline:this._webApiContext.online},e.prototype.retrieveRecord=function(e,t,n){return this._getWebApiContext().retrieveRecord(e,t,n)},e.prototype.createRecord=function(e,t){return this._getWebApiContext().createRecord(e,t)},e.prototype.updateRecord=function(e,t,n){return this._getWebApiContext().updateRecord(e,t,n)},e.prototype.deleteRecord=function(e,t){return this._getWebApiContext().deleteRecord(e,t)},e.prototype.retrieveMultipleRecords=function(e,t,n){return this._getWebApiContext().retrieveMultipleRecords(e,t,n)},e.prototype.execute=function(e){return this._getWebApiContext().execute(e)},e.prototype.executeMultiple=function(e){var t=this._getWebApiContext();return t.executeMultiple?t.executeMultiple(e):Promise.resolve(null)},e}(),i=new r},function(e,t,n){"use strict";function o(e){return null==e}function r(e){return o(e)||!e.length}function i(e){return!o(e)&&e.constructor===Array}n.d(t,"c",function(){return o}),n.d(t,"b",function(){return r}),n.d(t,"a",function(){return i})},function(e,t,n){"use strict";function o(e){return e.style?(Object.assign(e.style,function(e){if(!e)return{};var t={};null!=e.borderBottomWidth&&(t.borderBottomWidth=r(e.borderBottomWidth));null!=e.borderLeftWidth&&(t.borderLeftWidth=r(e.borderLeftWidth));null!=e.borderRightWidth&&(t.borderRightWidth=r(e.borderRightWidth));null!=e.borderTopWidth&&(t.borderTopWidth=r(e.borderTopWidth));null!=e.borderWidth&&(t.borderWidth=r(e.borderWidth));null!=e.height&&(t.height=r(e.height));null!=e.width&&(t.width=r(e.width));null!=e.minWidth&&(t.minWidth=r(e.minWidth));null!=e.minHeight&&(t.minHeight=r(e.minHeight));null!=e.maxWidth&&(t.maxWidth=r(e.maxWidth));null!=e.maxHeight&&(t.maxHeight=r(e.maxHeight));null!=e.margin&&(t.margin=r(e.margin));null!=e.marginBottom&&(t.marginBottom=r(e.marginBottom));null!=e.marginLeft&&(t.marginLeft=r(e.marginLeft));null!=e.marginRight&&(t.marginRight=r(e.marginRight));null!=e.marginTop&&(t.marginTop=r(e.marginTop));null!=e.padding&&(t.padding=r(e.padding));null!=e.paddingBottom&&(t.paddingBottom=r(e.paddingBottom));null!=e.paddingLeft&&(t.paddingLeft=r(e.paddingLeft));null!=e.paddingRight&&(t.paddingRight=r(e.paddingRight));null!=e.paddingTop&&(t.paddingTop=r(e.paddingTop));null!=e.position&&(t.position=r(e.position));null!=e.bottom&&(t.bottom=r(e.bottom));null!=e.right&&(t.right=r(e.right));null!=e.top&&(t.top=r(e.top));null!=e.left&&(t.left=r(e.left));null!=e.flex&&(t.flex=(n=e.flex,o=Number(n),isNaN(o)?n:o));var n,o;null!=e.animationDirection&&(t.animationDirection=e.animationDirection);null!=e.animationDuration&&(t.animationDuration=e.animationDuration);null!=e.animationFillMode&&(t.animationFillMode=e.animationFillMode);null!=e.animationIterationCount&&(t.animationIterationCount=e.animationIterationCount);null!=e.animationName&&(t.animationName=e.animationName);null!=e.backgroundColor&&(t.backgroundColor=e.backgroundColor);return t}(e.style)),e.style):{}}function r(e){return"number"==typeof e?e.toString()+"px":e}n.d(t,"b",function(){return o}),n.d(t,"a",function(){return i});var i=function(e){return function(t){return t.renderRule(o,e)}}},function(e,t,n){"use strict";n.d(t,"a",function(){return u});var o,r=n(0),i=n(9),a=n(28),s=(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),l=!!window.navigator.userAgent.match("MSIE")||!!window.navigator.userAgent.match("Trident"),c=!!window.navigator.userAgent.match("Edge"),u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return s(t,e),t.prototype.getElementName=function(){return"div"},t.prototype.getElementProps=function(){return null},t.prototype.hasAriaProperty=function(){return!!(this.props.accessibilityLabel||this.props.accessibilityChecked||this.props.accessibilityLive||this.props.accessibilityRelevant||this.props.accessibilityAtomic||this.props.labelledByElementId||this.props.describedByElementId||this.props.controlsElementId||this.props.ownsElementId||this.props.accessibilityRequired||"boolean"==typeof this.props.accessibilityExpanded||"boolean"==typeof this.props.accessibilityHasPopup||"boolean"==typeof this.props.accessibilityReadOnly||"boolean"==typeof this.props.accessibilityDisabled||"number"==typeof this.props.accessibilityLevel||"boolean"==typeof this.props.accessibilityHidden||"boolean"==typeof this.props.isSelected||this.props.activeDescendantId||this.props.accessibilityCurrent||"number"==typeof this.props.accessibilityValueMin||"number"==typeof this.props.accessibilityValueMax||"number"==typeof this.props.accessibilityValueNow||"boolean"==typeof this.props.accessibilityModal||this.props.accessibilityValueText||this.props.role||this.props.accessibilityAriaOrientation)},t.prototype.getElementPropsInternal=function(){var e={};e.id=this.props.id,this.props.hidden&&(e[i.D]=!0),this.props.accessibilityLabel&&(e[i.m]=this.props.accessibilityLabel),this.props.accessibilityChecked&&(e[i.e]=this.props.accessibilityChecked),this.props.accessibilityLive&&(e[i.p]=this.props.accessibilityLive),this.props.accessibilityRelevant&&(e[i.v]=this.props.accessibilityRelevant),this.props.accessibilityAtomic&&(e[i.c]=this.props.accessibilityAtomic),this.props.labelledByElementId&&(e[i.n]=this.props.labelledByElementId),this.props.describedByElementId&&(e[i.h]=this.props.describedByElementId),this.props.controlsElementId&&(e[i.f]=this.props.controlsElementId),this.props.ownsElementId&&(e[i.t]=this.props.ownsElementId),this.props.accessibilityRequired&&(e[i.w]=this.props.accessibilityRequired),"boolean"==typeof this.props.accessibilityExpanded&&(e[i.j]=this.props.accessibilityExpanded),"boolean"==typeof this.props.accessibilityHasPopup&&(e[i.k]=this.props.accessibilityHasPopup),"boolean"==typeof this.props.accessibilityReadOnly&&(e[i.u]=this.props.accessibilityReadOnly),"boolean"==typeof this.props.accessibilityDisabled&&(e[i.i]=this.props.accessibilityDisabled),"number"==typeof this.props.accessibilityLevel&&(e[i.o]=this.props.accessibilityLevel),"boolean"==typeof this.props.accessibilityHidden&&(e[i.l]=this.props.accessibilityHidden),"boolean"==typeof this.props.isSelected&&(e[i.x]=this.props.isSelected),this.props.activeDescendantId&&(e[i.b]=this.props.activeDescendantId),this.props.accessibilityCurrent&&(e[i.g]=this.props.accessibilityCurrent),"number"==typeof this.props.accessibilityValueMin&&(e[i.z]=this.props.accessibilityValueMin),"number"==typeof this.props.accessibilityValueMax&&(e[i.y]=this.props.accessibilityValueMax),"number"==typeof this.props.accessibilityValueNow&&(e[i.A]=this.props.accessibilityValueNow),"boolean"==typeof this.props.accessibilityModal&&(e[i.q]=this.props.accessibilityModal),this.props.accessibilityValueText&&(e[i.B]=this.props.accessibilityValueText),this.props.role&&(e[i.E]=this.props.role),this.props.title&&(e[i.F]=this.props.title),this.props.accessibilityAriaOrientation&&(e[i.s]=this.props.accessibilityAriaOrientation),"number"==typeof this.props.tabIndex&&(e.tabIndex=this.props.tabIndex);var t=this.props[a.a.LearningPathAttributeName];if(t&&(e[a.a.LearningPathAttributeName]=t),this.props.testhooks){var n=this.props.testhooks;for(var o in n)e["data-"+o]=n[o]}null!=this.props.onClick&&(e.onClick=this.props.onClick),null!=this.props.onDoubleClick&&(e.onDoubleClick=this.props.onDoubleClick),null!=this.props.onDrag&&(e.onDrag=this.props.onDrag),null!=this.props.onDragEnd&&(e.onDragEnd=this.props.onDragEnd),null!=this.props.onDragEnter&&(e.onDragEnter=this.props.onDragEnter),null!=this.props.onDragExit&&(e.onDragExit=this.props.onDragExit),null!=this.props.onDragLeave&&(e.onDragLeave=this.props.onDragLeave),null!=this.props.onDragOver&&(e.onDragOver=this.props.onDragOver),null!=this.props.onDragStart&&(e.onDragStart=this.props.onDragStart),null!=this.props.onDrop&&(e.onDrop=this.props.onDrop),null!=this.props.onClickCapture&&(e.onClickCapture=this.props.onClickCapture),null!=this.props.onPointerOver&&(e.onPointerOver=this.props.onPointerOver),null!=this.props.onPointerOut&&(e.onPointerOut=this.props.onPointerOut),null!=this.props.onPointerUp&&(e.onPointerUp=this.props.onPointerUp),null!=this.props.onPointerDown&&(e.onPointerDown=this.props.onPointerDown),null!=this.props.onPointerEnter&&(e.onPointerEnter=this.props.onPointerEnter),null!=this.props.onPointerLeave&&(e.onPointerLeave=this.props.onPointerLeave),null!=this.props.onPointerMove&&(e.onPointerMove=this.props.onPointerMove),null!=this.props.onPointerCancel&&(e.onPointerCancel=this.props.onPointerCancel),null!=this.props.onBlur&&(e.onBlur=this.props.onBlur),null!=this.props.onFocus&&(e.onFocus=this.props.onFocus),null!=this.props.onMouseEnter&&(e.onMouseEnter=this.props.onMouseEnter),null!=this.props.onMouseLeave&&(e.onMouseLeave=this.props.onMouseLeave),null!=this.props.onKeyDown&&(e.onKeyDown=this.props.onKeyDown),null!=this.props.onKeyUp&&(e.onKeyUp=this.props.onKeyUp),null!=this.props.onScroll&&(e.onScroll=this.props.onScroll),Object.assign(e,this.getElementProps()),e.children=null,e.style=this.getElementStyle();var r=this.getElementClassName()+" "+this.getFlexClassName(e.style);return r.length>0&&(e.className=r,e.style={}),e},t.prototype.getElementStyle=function(){return this.props.style},t.prototype.getElementClassName=function(){return(this.props.styles?this.props.styles:"")+(this.props.explicitStyles?" "+this.props.explicitStyles:"")},t.prototype.getFlexClassName=function(e){return""},t.prototype.getElementChildren=function(){var e=this.props.children;if(Array.isArray(e)){if(0===e.length)return null;if(e.length>1&&window.DEBUG){var t=e.filter(function(e){return r.isValidElement(e)});if(t.length>1)for(var n={},o=0;o<t.length;o++){var i=t[o];if(!i.key){var a=i.key||i.type.name;n[a]&&console.warn("The React child should have a unique key within the parent's scope:",a,", current element id/key =",this.props.id,", this element type:",this.constructor.name),n[a]=a}}}}return"string"==typeof e&&0===e.length?null:e},t.isElementScrollable=function(e){return"auto"===e.overflow||"auto"===e.overflowX||"auto"===e.overflowY||"scroll"===e.overflow||"scroll"===e.overflowX||"scroll"===e.overflowY},t.prototype.render=function(){return r.createElement(this.getElementName(),this.getElementPropsInternal(),this.getElementChildren())},Object.defineProperty(t.prototype,"isIE",{get:function(){return l},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"isEdge",{get:function(){return c},enumerable:!0,configurable:!0}),t}(r.Component)},function(e,t,n){e.exports=n(181)},function(e,t,n){"use strict";n.d(t,"b",function(){return i}),n.d(t,"a",function(){return r});var o=n(2),r="CustomControlFramework",i=new(function(){function e(){}return e.prototype.reportUsage=function(e,t){var n={eventName:"uci_controlframework_usage",eventParameters:this.generateEventParams(e,null,null,t)};o.default.Reporting.reportEvent(n)},e.prototype.reportEventFailure=function(e,t,n,i,a,s){var l=e.manifest?e.manifest.ConstructorName:e.configuration.CustomControlId;s&&"ControlFramework"===s&&(l=r+"."+l),o.default.Reporting.reportFailure(l,t,a,this.generateEventParams(e,n,i))},e.prototype.reportEventSuccess=function(e,t){var n=e.manifest?e.manifest.ConstructorName:e.configuration.CustomControlId;n=r+"."+n,o.default.Reporting.reportSuccess(n,this.generateEventParams(e,t))},e.prototype.generateEventParams=function(e,t,n,o){var r=[],i={name:"ControlName",value:e?e.controlId:""},a={name:"ControlId",value:e&&e.manifest?e.manifest.CustomControlId:""},s={name:"APIName",value:t},l={name:"HostPage",value:e?e.pageType:""},c={name:"ResourceArrayLength",value:e&&e.manifest?e.manifest.Properties.Resources.length:""};if(r.push(i),r.push(a),r.push(l),r.push(c),o){var u={name:"ControlLoadStatus",value:o};r.push(u)}if(t&&r.push(s),n){var p={name:"ParentCCContext",value:n};r.push(p)}if(e.propBagData){var d={name:"Entity",value:e.propBagData&&e.propBagData.modeData?e.propBagData.modeData.entityTypeName:null};r.push(d)}return r},e}())},function(e,t,n){"use strict";n.d(t,"a",function(){return m});var o,r=n(0),i=n(10),a=n(15),s=n(5),l=n(19),c=n(6),u=n(4),p=n(20),d=(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),h=function(e){function t(t){var n=e.call(this,t)||this;return n._subscriber=null,n._mountedElement=null,n._getReference=n._getReference.bind(n),n}return d(t,e),t.prototype.getElementName=function(){return this.props.semanticTag||"div"},t.prototype.getFlexClassName=function(e){return Object(a.b)(e?e.display:null)},t.prototype.componentDidMount=function(){this.props.isRequestedMeasuring&&(this._subscriber={forceMeasure:this.props.forceMeasure,getComponent:this.getComponent.bind(this),onMeasure:this.props.onMeasuring},l.a.getInstance().addMeasuringSubscribers(this._subscriber))},t.prototype.componentDidUpdate=function(){this.props.isRequestedMeasuring&&(this._mountedElement=i.findDOMNode(this))},t.prototype._getReference=function(e){e&&this.props.isRequestedMeasuring&&(this._mountedElement=i.findDOMNode(e))},t.prototype.getComponent=function(){return this._mountedElement},t.prototype.componentWillUnmount=function(){this.props.isRequestedMeasuring&&l.a.getInstance().removeMeasuringSubscribers(this._subscriber)},t.prototype.getElementStyle=function(){if(this.props.style)return Object(a.a)(this.props.style)},t.prototype.getElementClassName=function(){var n=e.prototype.getElementClassName.call(this);return this.props&&this.props.className&&(n+=" "+this.props.className),this.props.style&&t.isElementScrollable(this.props.style)&&(n+=p.a.getInstance().getDisableScrollStyle()&&!this.props.isWithinATopMostSeeMore?" webkitScrollAuto":" webkitScroll"),n},t.prototype.getElementProps=function(){var e={id:this.props.id,accessKey:""===this.props.accessKey?null:this.props.accessKey,ref:this.props.isRequestedMeasuring?this._getReference:void 0};return"boolean"==typeof this.props.isRTL&&(e.dir=this.props.isRTL?"rtl":"ltr"),this.isIE||this.hasAriaProperty()||"number"==typeof this.props.tabIndex||this.props.semanticTag&&"div"!==this.props.semanticTag&&"span"!==this.props.semanticTag||(e.role="presentation"),e},t.prototype.render=function(){return r.createElement(this.getElementName(),this.getElementPropsInternal(),this.getElementChildren())},t.displayName="View",t}(s.a);function f(e){return e&&e.style?Object.assign(e.style,Object(u.b)(e)):{}}var m=c.connect(function(e){return function(t){return t.renderRule(f,e)}})(h)},function(e,t,n){"use strict";n.d(t,"E",function(){return o}),n.d(t,"F",function(){return r}),n.d(t,"a",function(){return i}),n.d(t,"D",function(){return a}),n.d(t,"C",function(){return s}),n.d(t,"b",function(){return l}),n.d(t,"c",function(){return c}),n.d(t,"d",function(){return u}),n.d(t,"f",function(){return p}),n.d(t,"e",function(){return d}),n.d(t,"h",function(){return h}),n.d(t,"i",function(){return f}),n.d(t,"j",function(){return m}),n.d(t,"k",function(){return y}),n.d(t,"l",function(){return b}),n.d(t,"m",function(){return g}),n.d(t,"n",function(){return _}),n.d(t,"o",function(){return v}),n.d(t,"p",function(){return C}),n.d(t,"q",function(){return E}),n.d(t,"r",function(){return I}),n.d(t,"t",function(){return P}),n.d(t,"v",function(){return w}),n.d(t,"u",function(){return S}),n.d(t,"w",function(){return O}),n.d(t,"x",function(){return D}),n.d(t,"g",function(){return T}),n.d(t,"y",function(){return F}),n.d(t,"z",function(){return x}),n.d(t,"A",function(){return M}),n.d(t,"B",function(){return A}),n.d(t,"s",function(){return k});var o="role",r="title",i="accessKey",a="hidden",s="disabled",l="aria-activedescendant",c="aria-atomic",u="aria-autocomplete",p="aria-controls",d="aria-checked",h="aria-describedby",f="aria-disabled",m="aria-expanded",y="aria-haspopup",b="aria-hidden",g="aria-label",_="aria-labelledby",v="aria-level",C="aria-live",E="aria-modal",I="aria-multiline",P="aria-owns",w="aria-relevant",S="aria-readonly",O="aria-required",D="aria-selected",T="aria-current",F="aria-valuemax",x="aria-valuemin",M="aria-valuenow",A="aria-valuetext",k="aria-orientation"},function(e,t){e.exports=ReactDOM},function(e,t,n){"use strict";n.d(t,"a",function(){return r}),n.d(t,"b",function(){return i});var o=/^\{?([0-9a-f]{8}(-?)[0-9a-f]{4}\2[a-f\d]{4}\2[0-9a-f]{4}\2[0-9a-f]{12})}?$/;function r(e,t){var n=o.exec(e.toLocaleLowerCase()),r=o.exec(t.toLocaleLowerCase());return n[1]===r[1]}function i(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var t=16*Math.random()|0;return("x"===e?t:3&t|8).toString(16)})}},function(e,t,n){"use strict";n.d(t,"e",function(){return p}),n.d(t,"b",function(){return d}),n.d(t,"g",function(){return y}),n.d(t,"a",function(){return b}),n.d(t,"f",function(){return _}),n.d(t,"m",function(){return v}),n.d(t,"d",function(){return h}),n.d(t,"c",function(){return f}),n.d(t,"i",function(){return C}),n.d(t,"h",function(){return m}),n.d(t,"k",function(){return E}),n.d(t,"l",function(){return I}),n.d(t,"j",function(){return P});var o,r=n(2),i=n(3),a=n(1),s=n(7),l=n(13),c="-",u="Mscrm.OpenRecordItem";function p(e,t,n){if(n)return n;if(!t)return t;var o=d(e);return(o?o+c:"")+t}function d(e){if(e.configuration&&e.configuration.CustomControlId===l.b)return function(e){return e.descriptor.DomId+c+e.descriptor.Id}(e);var t="";e.descriptor&&(t=e.descriptor.DomId?e.descriptor.DomId:"");var n=e.controlId?e.controlId:"";return(t?t+c:"")+(n||"")}function h(e,t){var n=e&&e.controlId?e.controlId:"";return t?(n?n+c:"")+t:n||""}function f(e){return Object(i.c)(e)||Object(i.c)(e.propBagData)||Object(i.c)(e.propBagData.accessibilityData)||Object(i.c)(e.propBagData.accessibilityData.assignedTabIndex)?0:e.propBagData.accessibilityData.assignedTabIndex}function m(){if(void 0===o){if(window.matchMedia("(-ms-high-contrast: active)").matches)o=!0;else{var e=document.getElementsByTagName("html");o=null!=e[0].getAttribute("hc")}}return o}function y(e,t,n){var o=g(e,t,n);if(o&&null!==o){var r=document.getElementById(o);r&&null!==r&&r.focus()}}function b(e,t,n){var o=g(e,t,n);if(o&&null!==o){var r=document.getElementById(o);r&&null!==r&&r.blur()}}function g(e,t,n){if(t)return!0===n?t:p(e,t)}function _(e,t){var n=t.organizationUniqueName?t.organizationUniqueName:"";return!!t.usePathBasedUrls&&t.usePathBasedUrls&&n?"/"+n+e:e}function v(e,t,n,o,i){if(o){var a=o.entityName||o.LogicalName,l=o.id||o.Id&&o.Id.toString(),c=function(e,t){var n=t&&e.dynamicData?e.dynamicData.parameters[t]:null;return e.actions&&e.actions.getRecordSetQueryKey&&null!==n?e.actions.getRecordSetQueryKey(n):null}(e,n),p=function(){try{var t={entityName:a,entityId:l,recordSetQueryKey:c};if(e.parentDefinedControlProps&&e.parentDefinedControlProps.propertyBagOverrides&&e.parentDefinedControlProps.propertyBagOverrides.openForm)e.parentDefinedControlProps.propertyBagOverrides.openForm(t);else{if(!t.entityName)throw new Error("EntityName was not passed in to method, cannot call openForm");r.default.openForm(t)}}catch(t){var n="";try{n=JSON.stringify(e)}catch(e){n="Unable to parse ownProps"}try{e.propBagMethods.navigation&&e.propBagMethods.navigation.openEditForm&&e.propBagMethods.navigation.openEditForm(o)}catch(e){r.default.Reporting.reportFailure(s.a+".Utilities",t,"propBagMethods.navigation.openEditForm failed",[{name:"ownProps",value:n},{name:"APIName",value:s.a+".Utilities.CustomControlHelper.openDatasetItemAction"}])}r.default.Reporting.reportFailure(s.a+".Utilities",t,"XrmProxyInstance.openForm failed",[{name:"ownProps",value:n},{name:"APIName",value:s.a+"Utilities.CustomControlHelper.openFormAction"}])}};if(a===t.getTargetEntityType())if(t.retrieveRecordCommand){var d=i&&i.CommandButtonId?i.CommandButtonId:u;t.retrieveRecordCommand([l],[d],!1,!1,!1).then(function(e){e&&e.length>0?e[0].execute():p()},function(){p()})}else p();else p()}}function C(e){var t,n=d(e).split(c);for(t=0;t<n.length-1;t++)if("id"!==n[t]&&isNaN(Number(n[t])))return n[t];return""}function E(e){if(e&&e.Properties&&e.Properties.DataSetDefinitions){var t=e.Properties.DataSetDefinitions;for(var n in t)if(e.Properties.DataSetDefinitions[n]&&e.Properties.DataSetDefinitions[n].Primary){for(var o=!1,r=0,i=e.Properties.Properties;r<i.length;r++){if(0===i[r].Usage){o=!0;break}}return!o}}return!1}function I(e){if(e&&e.Parameters)for(var t in e.Parameters)if(e.Parameters[t]&&e.Parameters[t].Type===a.ManifestType.QuickForm)return!0;return!1}function P(e){var t,n,o=function(e){if(e&&e.Parameters)for(var t in e.Parameters)if(e.Parameters[t]&&e.Parameters[t].Type===a.ManifestType.QuickForm&&e.Parameters[t].Primary)return t;return"value"}(e.configuration),r=e.dynamicData.parameters[o];if(r&&r.getLatestData){var i=r.getLatestData();t=i?i.entityName:w(e.configuration,1),n=i?i.recordId:function(e){return w(e,2)}(e.configuration)}return{recordId:n,entityTypeName:t}}function w(e,t){var n;if(e&&e.Parameters&&e.Parameters.value){var o=e.Parameters.value,r=o.Value?o.Value.split("|"):null;r&&r.length>t&&(n=r[t])}return n}},function(e,t,n){"use strict";n.d(t,"a",function(){return a}),n.d(t,"f",function(){return _e}),n.d(t,"h",function(){return Ce}),n.d(t,"g",function(){return Ee}),n.d(t,"e",function(){return ve}),n.d(t,"b",function(){return u}),n.d(t,"c",function(){return V}),n.d(t,"d",function(){return ce}),n.d(t,"i",function(){return pe});var o,r,i,a,s=n(1),l=n(11),c=n(2),u="MscrmControls.Containers.FieldSectionItem",p="MscrmControls.FieldControls.DummyControl",d="MscrmControls.FieldControls.LabelControl",h="MscrmControls.Grid.GridControl",f="MscrmControls.Grid.ReadOnlyGrid",m="MscrmControls.SharepointAssociatedGrid.SharepointControl",y="MscrmControls.Containers.RelevanceSearchControl",b="MscrmControls.KbSearchControl.KbSearchControl",g="MscrmControls.KbArticleControl.KbArticleControl",_="MscrmControls.KbContentControl.KbContentControl",v="MscrmControls.EmailEngagement.EmailView",C="MscrmControls.ActivityControls.ActivityEditorControl",E="MscrmControls.Calendar.CalendarControl",I="MscrmControls.EmailEngagement.EmailEngagementActionsControl",P="MscrmControls.SocialInsightsControl.SocialInsightsControl",w="MscrmControls.Containers.DashboardControl",S="MscrmControls.Chart.ChartControl",O="MscrmControls.Map.MapControl",D="mapcontrol",T="62b0df79-0464-470f-8af7-4483cfea0c7d",F="{E7A81278-8635-4D9E-8D4D-59480B391C5B}",x="{02d4264b-47e2-4b4c-aa95-f439f3f4d458}",M="{39354E4A-5015-4D74-8031-EA9EB73A1322}",A="{e616a57f-20e0-4534-8662-a101b5ddf4e0}",k="{03c5aed6-ee88-404e-b63c-4c53429c8bfb}",R="{1b9fc842-b45e-4fc1-b080-81e96b6d857f}",L="{26E9760F-7454-40DE-BB07-F6DCCCB82040}",N="{7CCD1494-1F7A-4E3A-8BDE-F32069DAEB9F}",U="{6F3FB987-393B-4d2d-859F-9D0F0349B6AD}",B="{F94DB24F-263D-44A7-B38E-A35E9854812B}",j="{F454228D-1D25-4319-E12F-D27968BC0234}",W="{86b9e25e-695e-4fef-ac69-f05cfa96739c}",V="{fd2a7985-3187-444e-908d-6624b21f69c0}",H="3ef39988-22bb-4f0b-bbbe-64b5a3748aee",K="67fac785-cd58-4f9f-abb3-4b7ddc6ed5ed",z="b0c6723a-8503-4fd7-bb28-c8a06ac933c2",G={"3ef39988-22bb-4f0b-bbbe-64b5a3748aee":"picklist","67fac785-cd58-4f9f-abb3-4b7ddc6ed5ed":"radio","b0c6723a-8503-4fd7-bb28-c8a06ac933c2":"checkbox"},q="{4E3600FA-B9C8-49F4-B69A-51EBA06D9BDF}",Y="{FE4BC089-8901-466C-A41B-1C1090F204D4}",$="MscrmControls.Containers.QuickForm",Q="MscrmControls.Containers.QuickFormCardControl",X="MscrmControls.WebResource.WebResourceHtmlControl",Z="MscrmControls.TimelineWallControl.TimelineWall",J="CC_ReadOnlyGrid_Name",ee="value",te={},ne={},oe={},re={},ie={},ae={},se={},le={};!function(e){e[e.Read=0]="Read",e[e.Edit=1]="Edit",e[e.Both=2]="Both"}(o||(o={})),function(e){e[e.Normal=0]="Normal",e[e.Card=1]="Card"}(r||(r={})),function(e){e[e.Text=0]="Text",e[e.Icon=1]="Icon"}(i||(i={})),function(e){e[e.GridContainer=0]="GridContainer",e[e.DashboardContainer=1]="DashboardContainer",e[e.QuickCreateForm=2]="QuickCreateForm",e[e.FieldSectionContainer=3]="FieldSectionContainer",e[e.TimelineContainer=4]="TimelineContainer",e[e.ChartControl=5]="ChartControl",e[e.WebresourceControl=6]="WebresourceControl",e[e.DummyControl=7]="DummyControl",e[e.CalendarControl=8]="CalendarControl"}(a||(a={}));var ce={"MscrmControls.MultiSelectPicklist.UpdMSPicklistControl":"MscrmControls.MultiSelectPicklist.MultiSelectPicklistControl"},ue={};function pe(e,t){ue[e]=t}function de(e){for(var t in e.Parameters){var n=e.Parameters[t];if(n.Primary)return n}return null}function he(e){return{Usage:1,Static:!0,Type:s.ManifestType.SingleLineText,Value:JSON.stringify(e),Primary:!1}}function fe(e){return{Usage:1,Static:!0,Type:s.ManifestType.SingleLineText,Value:G[e],Primary:!1}}function me(e,t){if(e.CustomControlId!==u)return null;var n=de(e);return function(e){return e&&e===z||e===K||e===H}(t)?{valueSpecification:he(n),twoOptionRenderParam:fe(t)}:{valueSpecification:he(n)}}function ye(e){return null==e}function be(e,t,n,a,h,f,m){if(!t){if(e===D&&Object(l.a)(T,h)){var E=e+"-"+f.Parameters.AddressField;return re[E]||(re[E]={FormFactor:2,CustomControlId:u,Name:e,Version:"1.0.0",Parameters:{value:{Usage:0,Static:!1,Type:s.ManifestType.SingleLineAddress,Value:f.Parameters.AddressField,Primary:!0},controlMode:{Usage:2,Static:!0,Type:"Enum",Value:o.Read,Primary:!1}},ShouldOverrideControlVisible:!1}),re[E]}if(n===y)return te[e]||(te[e]={FormFactor:2,CustomControlId:y,Name:e,Version:"1.0.0",Parameters:{value:{Type:s.ManifestType.Search,Primary:!0}},ShouldOverrideControlVisible:!1}),te[e];if(h&&(Object(l.a)(A,h)||Object(l.a)(N,h))){if(!te[e]){var w=f&&f.Parameters&&"true"===f.Parameters.EnableAutoSuggestions&&"0"===f.Parameters.AutoSuggestionSource?f.Parameters.SearchForAutoSuggestionsUsing:void 0;te[e]={FormFactor:2,CustomControlId:b,Name:e,Version:"1.0.0",Parameters:{value:{Type:s.ManifestType.SearchWidget,Primary:!0},AutoSuggestionField:{Type:"all",Primary:!1,Static:!1,Usage:0,Value:w}},ShouldOverrideControlVisible:!1}}return te[e]}return h&&Object(l.a)(h,k)&&(te[e]={FormFactor:2,CustomControlId:g,Name:e,Version:"1.0.0",Parameters:{value:{Type:s.ManifestType.KbArticle,Primary:!0}},ShouldOverrideControlVisible:!1}),h&&Object(l.a)(h,R)&&(te[e]={FormFactor:2,CustomControlId:_,Name:e,Version:"1.0.0",Parameters:{value:{Type:s.ManifestType.KbContent,Primary:!0}},ShouldOverrideControlVisible:!1}),h&&Object(l.a)(L,h)?(te[e]||(te[e]={FormFactor:2,CustomControlId:v,Name:e,Version:"1.0.0",Parameters:{value:{Type:s.ManifestType.EmailEngagementRecipientActivity,Primary:!0}},ShouldOverrideControlVisible:!1}),te[e]):!ye(c.default)&&!ye(c.default.Utils)&&!ye(c.default.Utils.isFeatureEnabled)&&c.default.Utils.isFeatureEnabled("EmailEngagementComposeForUCI")&&h&&Object(l.a)(j,h)?(te[e]||(te[e]={FormFactor:2,CustomControlId:I,Name:e,Version:"1.0.0",Parameters:{value:{Type:s.ManifestType.EmailEngagementActions,Primary:!0},toparams:{Usage:0,Static:!1,Type:s.ManifestType.LookupPartyList,Value:"to",Primary:!1},ccparams:{Usage:0,Static:!1,Type:s.ManifestType.LookupPartyList,Value:"cc",Primary:!1},directioncode:{Usage:0,Static:!1,Type:s.ManifestType.TwoOptions,Value:"directioncode",Primary:!1},isemailfollowed:{Usage:0,Static:!1,Type:s.ManifestType.TwoOptions,Value:"isemailfollowed",Primary:!1},followemailuserpreference:{Usage:0,Static:!1,Type:s.ManifestType.TwoOptions,Value:"followemailuserpreference",Primary:!1},emailreminderstatus:{Usage:0,Static:!1,Type:s.ManifestType.OptionSet,Value:"emailreminderstatus",Primary:!1},emailremindertype:{Usage:0,Static:!1,Type:s.ManifestType.OptionSet,Value:"emailremindertype",Primary:!1},emailremindertext:{Usage:0,Static:!1,Type:s.ManifestType.SingleLineText,Value:"emailremindertext",Primary:!1},emailreminderexpirytime:{Usage:0,Static:!1,Type:s.ManifestType.DateAndTimeDateAndTime,Value:"emailreminderexpirytime",Primary:!1},delayedemailsendtime:{Usage:0,Static:!1,Type:s.ManifestType.DateAndTimeDateAndTime,Value:"delayedemailsendtime",Primary:!1},statuscode:{Usage:0,Static:!1,Type:s.ManifestType.OptionSet,Value:"statuscode",Primary:!1}},ShouldOverrideControlVisible:!1}),te[e]):n===s.ManifestType.WebResourceHtmlControl?(se[e]||(se[e]={FormFactor:2,CustomControlId:X,Name:e,Version:"1.0.0",Parameters:{value:{Usage:0,Type:s.ManifestType.WebResourceHtmlControl,Value:null,Static:!1,Primary:!0}},ShouldOverrideControlVisible:!1}),se[e]):n===s.ManifestType.TimelineWall?{FormFactor:2,CustomControlId:Z,Name:e,Version:"1.0.0",Parameters:{value:{Type:s.ManifestType.TimelineWall,Primary:!0}},ShouldOverrideControlVisible:!1}:c.default&&c.default.Utils&&c.default.Utils.isFeatureEnabled&&!c.default.Utils.isFeatureEnabled("SocialInsightsMapping")||!h||!Object(l.a)(W,h)?(oe[e]||(oe[e]={FormFactor:2,CustomControlId:p,Name:e,Version:"1.0.0",Parameters:{value:{Usage:1,Static:!0,Type:h||n,Value:null,Primary:!0},controlMode:{Usage:1,Static:!0,Type:"Enum",Value:o.Both,Primary:!1}},ShouldOverrideControlVisible:!1}),oe[e]):(ne[e]||(ne[e]={FormFactor:2,CustomControlId:P,Name:e,Version:"1.0.0",Parameters:{value:{Type:s.ManifestType.SocialInsightsControl,Primary:!0}},ShouldOverrideControlVisible:!1}),ne[e])}if(h&&(Object(l.a)(U,h)||Object(l.a)(B,h)))return(n.includes("memo")||n===s.ManifestType.SingleLineText||n===s.ManifestType.SingleLineTextArea||n===s.ManifestType.Multiple)&&(te[e]||(te[e]={FormFactor:2,CustomControlId:C,Name:e,Version:"1.0.0",Parameters:{value:{Usage:0,Static:!1,Type:n,Value:t,Primary:!0},isUnsafe:{Usage:1,Static:!1,Type:s.ManifestType.WholeNone,Value:"isunsafe",Primary:!1}},ShouldOverrideControlVisible:!1})),te[e];if(h&&Object(l.a)(M,h))return le[e]||(le[e]={FormFactor:2,CustomControlId:d,Name:e,Version:"1.0.0",Parameters:{value:{Type:s.ManifestType.SingleLineText,Static:!0,Primary:!0}},ShouldOverrideControlVisible:!1}),le[e];if(n===s.ManifestType.QuickForm){var S=Ie(f,m);return ie[e]&&ie[e].Parameters[ee].Value===S||(ie[e]={FormFactor:2,CustomControlId:$,Name:e,Version:"1.0.0",Parameters:{value:{Usage:0,Type:s.ManifestType.QuickForm,Value:S,Static:!1,Primary:!0,FirstDataRequestType:m&&m.chartDataRequestType?m.chartDataRequestType:1}},ShouldOverrideControlVisible:!1}),ie[e]}if(n===s.ManifestType.Card){S=Ie(f,m);return ae[e]&&ae[e].Parameters[ee].Value===S||(ae[e]={FormFactor:2,CustomControlId:Q,Name:e,Version:"1.0.0",Parameters:{value:{Usage:0,Type:s.ManifestType.QuickForm,Value:S,Static:!1,Primary:!0}},ShouldOverrideControlVisible:!1}),ae[e]}var O=function(e,t){var n,o=e?e.split("."):[null,null],r=o[0],i=o[1];r||(r="string");i&&"null"!==i&&"undefined"!==i||(i=t&&s.ManifestType.ClassIdControlMap[t]||"text");switch(r){case"boolean":n=s.ManifestType.TwoOptions;break;case"customer":n=s.ManifestType.LookupCustomer;break;case"datetime":switch(i.toLowerCase()){case"date":case"0":n=s.ManifestType.DateAndTimeDateOnly;break;case"datetime":case"dateandtime":case"1":n=s.ManifestType.DateAndTimeDateAndTime;break;default:n=s.ManifestType.DateAndTimeDateOnly}break;case"decimal":n=s.ManifestType.Decimal;break;case"float":case"double":n=s.ManifestType.FP;break;case"integer":switch(i.toLowerCase()){case"duration":case"1":n=s.ManifestType.WholeDuration;break;case"timezone":case"2":n=s.ManifestType.WholeTimeZone;break;case"language":case"3":n=s.ManifestType.WholeLanguage;break;default:n=s.ManifestType.WholeNone}break;case"lookup":switch(i.toLowerCase()){case"connection":case"regarding":case"1":case"2":n=s.ManifestType.LookupRegarding;break;default:n=s.ManifestType.LookupSimple}break;case"memo":n=s.ManifestType.Multiple;break;case"money":n=s.ManifestType.Currency;break;case"owner":n=s.ManifestType.LookupOwner;break;case"partylist":n=s.ManifestType.LookupPartyList;break;case"multiselectpicklist":n=s.ManifestType.MultiSelectPicklist;break;case"picklist":case"state":n=s.ManifestType.OptionSet;break;case"status":n=s.ManifestType.StatusOptionSet;break;case"text":case"string":switch(i.toLowerCase()){case"email":case"0":n=s.ManifestType.SingleLineEmail;break;case"textarea":case"2":n=s.ManifestType.Multiple;break;case"url":case"3":n=s.ManifestType.SingleLineURL;break;case"tickersymbol":case"4":n=s.ManifestType.SingleLineTickerSymbol;break;case"phone":case"7":n=s.ManifestType.SingleLinePhone;break;case"memo":n=s.ManifestType.Multiple;break;default:n=s.ManifestType.SingleLineText}break;case"Timer":n=s.ManifestType.Timer;break;default:n=s.ManifestType.SingleLineText}return n}(n,h),F=function(e){return e===s.ManifestType.Timer?o.Read:o.Both}(O),x=function(e){return e===s.ManifestType.Timer?2:1}(O),V=(a?a.toLowerCase()+"-":"")+e;return re[V]||(re[V]={FormFactor:2,CustomControlId:u,Name:e,Version:"1.0.0",Parameters:{value:{Usage:0,Static:!1,Type:O,Value:t,Primary:!0},controlMode:{Usage:x,Static:!0,Type:"Enum",Value:F,Primary:!1},displayMode:{Usage:x,Static:!0,Type:"Enum",Value:r.Normal,Primary:!1},labelMode:{Usage:x,Static:!0,Type:"Enum",Value:i.Text,Primary:!1}},ShouldOverrideControlVisible:!1}),re[V]}function ge(e,t){if("sharepointdocument"===e.TargetEntityType)return{Grid:{Type:s.ManifestType.Grid,ViewId:e.DefaultViewId||e.ViewId,TargetEntityType:e.TargetEntityType,EnableViewPicker:e.EnableViewPicker,RelationshipName:e.RelationshipName,Columns:[],Primary:!0,DataSetUIOptions:{displayQuickFind:!1,displayIndex:!1,displayCommandBar:!0,displayViewSelector:!0}},EnableEditing:{Usage:1,Static:!0,Type:"Enum",Value:"No",Primary:!1},EnableGroupBy:{Usage:1,Static:!0,Type:"Enum",Value:"No",Primary:!1},EnableFiltering:{Usage:1,Static:!0,Type:"Enum",Value:"No",Primary:!1}};if("connection"===e.TargetEntityType&&e.ViewId&&(e.ViewId.toUpperCase()===Y||e.ViewId.toUpperCase()===q)&&(ye(c.default)||ye(c.default.Utils)||ye(c.default.Utils.isFeatureEnabled)||!c.default.Utils.isFeatureEnabled("DisableEditableGridControlOnPhone")||ye(c.default.Client.getFormFactor)||3!==c.default.Client.getFormFactor()))return{Grid:{Type:s.ManifestType.Grid,ViewId:e.DefaultViewId||e.ViewId,TargetEntityType:e.TargetEntityType,EnableViewPicker:e.EnableViewPicker,RelationshipName:e.RelationshipName,Columns:[],Primary:!0},EnableEditing:{Usage:1,Static:!0,Type:"Enum",Value:"Yes",Primary:!1},EnableGroupBy:{Usage:1,Static:!0,Type:"Enum",Value:"No",Primary:!1},EnableFiltering:{Usage:1,Static:!0,Type:"Enum",Value:"No",Primary:!1}};var n={Grid:{Type:s.ManifestType.Grid,ViewId:e.DefaultViewId||e.ViewId,TargetEntityType:e.TargetEntityType,EnableViewPicker:e.EnableViewPicker,RelationshipName:e.RelationshipName,Columns:[],Primary:!0},EnableEditing:{Usage:1,Static:!0,Type:"Enum",Value:"No",Primary:!1},EnableGroupBy:{Usage:1,Static:!0,Type:"Enum",Value:"No",Primary:!1},EnableFiltering:{Usage:1,Static:!0,Type:"Enum",Value:"No",Primary:!1}};return t&&(n.EnableFiltering.Value="Yes"),n}function _e(e,t,n,o,r,i){var a,c,u,p,d;i&&(Object(l.a)(i,F)||Object(l.a)(i,x))?(c=e,u=o.Parameters,void 0===p&&(p=!1),a={FormFactor:1,DisplayNameKey:J,CustomControlId:(d=u.TargetEntityType,"sharepointdocument"===d?m:"connection"===d?h:f),Name:c,Version:"1.0.0",Parameters:ge(u,p),ShouldOverrideControlVisible:!1,isDefaultConfig:!0}):a=be(e,t,n,r,i,o);var y=de(a);y&&function(e,t){switch(e.Type){case s.ManifestType.Grid:var n=t.Parameters,o=e;o.EnableViewPicker="true"===n.EnableViewPicker,o.RelationshipName=n.RelationshipName,o.TargetEntityType=n.TargetEntityType,o.ViewId=n.ViewId||n.DefaultViewId||n.defaultviewid;break;case s.ManifestType.LookupSimple:n=t.Parameters;var r=e;r.EnableViewPicker=n.DisableViewPicker&&"true"!==n.DisableViewPicker||!n.DisableViewPicker,r.TargetEntityType=n.TargetEntityType,r.ViewId=n.ViewId||n.DefaultViewId||n.defaultviewid,r.AllowFilterOff="true"===n.AllowFilterOff,r.AvailableViewIds=n.AvailableViewIds,r.DependentAttributeName=n.DependentAttributeName,r.DependentAttributeType=n.DependentAttributeType,r.DisableQuickFind="true"===n.DisableQuickFind,r.ExtraCondition=n.ExtraCondition,r.FilterRelationshipName=n.FilterRelationshipName,r.DisableMru=n.DisableMru;for(var i=0;i<n.length;i++){var a=n[i];if(a&&a.TargetEntities&&a.TargetEntities.length){a.TargetEntities.length>1&&(r.Type=s.ManifestType.LookupMultiEntity);var c=a.TargetEntities[0];!r.ViewId&&c.DefaultViewId&&(r.ViewId=c.DefaultViewId),!r.TargetEntityType&&c.EntityLogicalName&&(r.TargetEntityType=c.EntityLogicalName)}}break;case s.ManifestType.SingleLineText:Object(l.a)(M,t.ClassId.guid)&&(e.Value=t.Label);break;case s.ManifestType.Timer:var u=t.Parameters;e.TimerParameters=function(e){var t={};return t.CancelConditionName=e.CancelConditionName,t.CancelConditionValue=e.CancelConditionValue,t.FailureConditionName=e.FailureConditionName,t.FailureConditionValue=e.FailureConditionValue,t.FailureTimeField=e.FailureTimeField,t.PauseConditionName=e.PauseConditionName,t.PauseConditionValue=e.PauseConditionValue,t.SuccessConditionName=e.SuccessConditionName,t.SuccessConditionValue=e.SuccessConditionValue,t.WarningConditionName=e.WarningConditionName,t.WarningConditionValue=e.WarningConditionValue,t}(u)}}(y,o);var b=me(a,i);return null!==b&&Object.assign(a.Parameters,b),a}function ve(e){switch(e){case f:case h:return a.GridContainer;case w:return a.DashboardContainer;case $:return a.QuickCreateForm;case u:return a.FieldSectionContainer;case Z:return a.TimelineContainer;case S:return a.ChartControl;case X:return a.WebresourceControl;case E:return a.CalendarControl;case p:return a.DummyControl}}function Ce(e,t){var n,o;switch(e){case"TwoOptions":n="MscrmControls.FieldControls.CheckboxControl";break;case"Currency":n="MscrmControls.FieldControls.CurrencyControl";break;case"Decimal":n="MscrmControls.FieldControls.DecimalNumberControl";break;case"SingleLine.Email":n="MscrmControls.FieldControls.EmailAddressControl";break;case"FP":n="MscrmControls.FieldControls.FloatingPointNumberInput";break;case"Whole.Language":n="MscrmControls.FieldControls.LanguagePickerControl";break;case"OptionSet":n="MscrmControls.FieldControls.OptionSet";break;case"StatusOptionSet":n="MscrmControls.FieldControls.PicklistStatusControl";break;case"SingleLine.Phone":n="MscrmControls.FieldControls.PhoneNumberControl";break;case"SingleLine.Text":case"Multiple":n="MscrmControls.FieldControls.TextBoxControl";break;case"SingleLine.Ticker":n="MscrmControls.FieldControls.TickerSymbolControl";break;case"Whole.TimeZone":n="MscrmControls.FieldControls.TimeZonePickListControl";break;case"SingleLine.URL":n="MscrmControls.FieldControls.UrlControl";break;case"Whole.None":n="MscrmControls.FieldControls.WholeNumberControl";break;case"Whole.Duration":n="MscrmControls.FieldControls.DurationControl";break;case"Lookup.PartyList":case"Lookup.Regarding":case"Lookup.Simple":case"Lookup.Owner":case"Lookup.Customer":case"Lookup.MultiEntity":n=function(e,t){return"Lookup.Simple"===e&&t&&t.Targets&&1===t.Targets.length&&"subject"===t.Targets[0]?"MscrmControls.FieldControls.SubjectTreeControl":"MscrmControls.FieldControls.SimpleLookupControl"}(e,t);break;case"MultiSelectPicklist":n="MscrmControls.MultiSelectPicklist.UpdMSPicklistControl";break;case"DateAndTime.DateOnly":case"DateAndTime.DateAndTime":n="MscrmControls.FieldControls.DateTimeControl";break;case"Grid":n="MscrmControls.Grid.ReadOnlyGrid";break;case"SearchWidget":case"SearchWidget.SearchWidget":case"ReferencePanelSearchWidget":n="MscrmControls.KbSearchControl.KbSearchControl";break;case"KbArticle":n="MscrmControls.KbArticleControl.KbArticleControl";break;case"KbContent":n="MscrmControls.KbContentControl.KbContentControl";break;case"Timer":n="MscrmControls.FieldControls.TimerControl";break;case s.ManifestType.SingleLineAddress:n=O;break;case"SingleLine.TextArea":default:n="MscrmControls.FieldControls.DummyControl"}return o=n,n=ue.hasOwnProperty(o)?ue[o]:o}function Ee(e){if(!e)return null;var t=de(e);return t?Ce(t.Type):null}function Ie(e,t){var n=t?t.quickFormId:"00000000-0000-0000-0000-000000000000",o=e?e.DataFieldName:"";return n+(o?"|"+o:"")}},function(e,t,n){"use strict";n.d(t,"a",function(){return r});var o={createMarker:function(){},startStopwatch:function(){return function(){}},createRetroactiveStopwatch:function(){}},r=new(function(){function e(){this._creator=null}return e.prototype.setPerformanceHooks=function(e,t,n,o,r){this._creator=e,this._addKpi=t,this._addKpiOnIdle=n,this._trackWork=o,this._scheduleControlUpdate=r},e.prototype.createPerformanceEvent=function(e,t,n){return void 0===t&&(t=3),void 0===n&&(n="CustomControlsFramework"),this._creator&&t>2?this._creator(e,n):o},e.prototype.startLifecycleStopwatch=function(e,t,n){return this.createPerformanceEvent(e,void 0,"CustomControls").startStopwatch({controlId:t,manifestControlName:n})},e.prototype.addKeyPerformanceIndicator=function(e,t,n){this._addKpi&&this._addKpi(e,t,n)},e.prototype.addKeyPerformanceIndicatorOnIdle=function(e,t){this._addKpiOnIdle&&this._addKpiOnIdle(e,t)},e.prototype.trackWork=function(e){return this._trackWork?this._trackWork(e):function(){}},e.prototype.scheduleControlUpdate=function(e){this._scheduleControlUpdate?this._scheduleControlUpdate(e):e()},e}())},function(e,t,n){"use strict";function o(e){if(!e)return null;var t={};return t.display=e.display?e.display:"flex",t}function r(e){return!e||"flex"!==e&&"inlineflexbox"!==e?"":"flex"===e?"flexbox":"inlineflexbox"}n.d(t,"a",function(){return o}),n.d(t,"b",function(){return r})},function(e,t,n){"use strict";function o(e){return e?e.getTimezoneOffset():0}function r(){return""}function i(){return"Web"}function a(){return 1}function s(e){window.open(e,"_blank")}function l(e){return alert(e.text),Promise.resolve({})}function c(e){return alert((e.message||"")+(e.errorCode?" ("+e.errorCode+")\n\n":"\n\n")+(e.details||"")),Promise.resolve({})}function u(e){var t=confirm((e.title?e.title+"\n"+(e.subtitle?e.subtitle+"\n":"\n"):"")+e.text);return Promise.resolve({confirmed:t})}n.d(t,"d",function(){return o}),n.d(t,"b",function(){return r}),n.d(t,"a",function(){return i}),n.d(t,"c",function(){return a}),n.d(t,"h",function(){return s}),n.d(t,"e",function(){return l}),n.d(t,"g",function(){return c}),n.d(t,"f",function(){return u})},function(e,t,n){(function(){var t,o,r,i,a,s,l,c,u,p,d,h,f={}.hasOwnProperty;h=n(26),d=h.isObject,p=h.isFunction,u=h.isEmpty,a=null,t=null,o=null,r=null,i=null,l=null,c=null,s=null,e.exports=function(){function e(e){this.parent=e,this.parent&&(this.options=this.parent.options,this.stringify=this.parent.stringify),this.children=[],a||(a=n(52),t=n(53),o=n(54),r=n(55),i=n(56),l=n(61),c=n(62),s=n(63))}return e.prototype.element=function(e,t,n){var o,r,i,a,s,l,c,h,m,y;if(l=null,null==t&&(t={}),t=t.valueOf(),d(t)||(n=(m=[t,n])[0],t=m[1]),null!=e&&(e=e.valueOf()),Array.isArray(e))for(i=0,c=e.length;i<c;i++)r=e[i],l=this.element(r);else if(p(e))l=this.element(e.apply());else if(d(e)){for(s in e)if(f.call(e,s))if(y=e[s],p(y)&&(y=y.apply()),d(y)&&u(y)&&(y=null),!this.options.ignoreDecorators&&this.stringify.convertAttKey&&0===s.indexOf(this.stringify.convertAttKey))l=this.attribute(s.substr(this.stringify.convertAttKey.length),y);else if(!this.options.separateArrayItems&&Array.isArray(y))for(a=0,h=y.length;a<h;a++)r=y[a],(o={})[s]=r,l=this.element(o);else d(y)?(l=this.element(s)).element(y):l=this.element(s,y)}else l=!this.options.ignoreDecorators&&this.stringify.convertTextKey&&0===e.indexOf(this.stringify.convertTextKey)?this.text(n):!this.options.ignoreDecorators&&this.stringify.convertCDataKey&&0===e.indexOf(this.stringify.convertCDataKey)?this.cdata(n):!this.options.ignoreDecorators&&this.stringify.convertCommentKey&&0===e.indexOf(this.stringify.convertCommentKey)?this.comment(n):!this.options.ignoreDecorators&&this.stringify.convertRawKey&&0===e.indexOf(this.stringify.convertRawKey)?this.raw(n):!this.options.ignoreDecorators&&this.stringify.convertPIKey&&0===e.indexOf(this.stringify.convertPIKey)?this.instruction(e.substr(this.stringify.convertPIKey.length),n):this.node(e,t,n);if(null==l)throw new Error("Could not create any elements with: "+e);return l},e.prototype.insertBefore=function(e,t,n){var o,r,i;if(this.isRoot)throw new Error("Cannot insert elements at root level");return r=this.parent.children.indexOf(this),i=this.parent.children.splice(r),o=this.parent.element(e,t,n),Array.prototype.push.apply(this.parent.children,i),o},e.prototype.insertAfter=function(e,t,n){var o,r,i;if(this.isRoot)throw new Error("Cannot insert elements at root level");return r=this.parent.children.indexOf(this),i=this.parent.children.splice(r+1),o=this.parent.element(e,t,n),Array.prototype.push.apply(this.parent.children,i),o},e.prototype.remove=function(){var e;if(this.isRoot)throw new Error("Cannot remove the root element");return e=this.parent.children.indexOf(this),[].splice.apply(this.parent.children,[e,e-e+1].concat([])),this.parent},e.prototype.node=function(e,t,n){var o,r;return null!=e&&(e=e.valueOf()),t||(t={}),t=t.valueOf(),d(t)||(n=(r=[t,n])[0],t=r[1]),o=new a(this,e,t),null!=n&&o.text(n),this.children.push(o),o},e.prototype.text=function(e){var t;return t=new c(this,e),this.children.push(t),this},e.prototype.cdata=function(e){var n;return n=new t(this,e),this.children.push(n),this},e.prototype.comment=function(e){var t;return t=new o(this,e),this.children.push(t),this},e.prototype.commentBefore=function(e){var t,n;return t=this.parent.children.indexOf(this),n=this.parent.children.splice(t),this.parent.comment(e),Array.prototype.push.apply(this.parent.children,n),this},e.prototype.commentAfter=function(e){var t,n;return t=this.parent.children.indexOf(this),n=this.parent.children.splice(t+1),this.parent.comment(e),Array.prototype.push.apply(this.parent.children,n),this},e.prototype.raw=function(e){var t;return t=new l(this,e),this.children.push(t),this},e.prototype.instruction=function(e,t){var n,o,r,i,a;if(null!=e&&(e=e.valueOf()),null!=t&&(t=t.valueOf()),Array.isArray(e))for(i=0,a=e.length;i<a;i++)n=e[i],this.instruction(n);else if(d(e))for(n in e)f.call(e,n)&&(o=e[n],this.instruction(n,o));else p(t)&&(t=t.apply()),r=new s(this,e,t),this.children.push(r);return this},e.prototype.instructionBefore=function(e,t){var n,o;return n=this.parent.children.indexOf(this),o=this.parent.children.splice(n),this.parent.instruction(e,t),Array.prototype.push.apply(this.parent.children,o),this},e.prototype.instructionAfter=function(e,t){var n,o;return n=this.parent.children.indexOf(this),o=this.parent.children.splice(n+1),this.parent.instruction(e,t),Array.prototype.push.apply(this.parent.children,o),this},e.prototype.declaration=function(e,t,n){var o,i;return o=this.document(),i=new r(o,e,t,n),o.children[0]instanceof r?o.children[0]=i:o.children.unshift(i),o.root()||o},e.prototype.doctype=function(e,t){var n,o,r,a,s,l,c,u,p;for(n=this.document(),o=new i(n,e,t),r=a=0,l=(u=n.children).length;a<l;r=++a)if(u[r]instanceof i)return n.children[r]=o,o;for(r=s=0,c=(p=n.children).length;s<c;r=++s)if(p[r].isRoot)return n.children.splice(r,0,o),o;return n.children.push(o),o},e.prototype.up=function(){if(this.isRoot)throw new Error("The root node has no parent. Use doc() if you need to get the document object.");return this.parent},e.prototype.root=function(){var e;for(e=this;e;){if(e.isDocument)return e.rootObject;if(e.isRoot)return e;e=e.parent}},e.prototype.document=function(){var e;for(e=this;e;){if(e.isDocument)return e;e=e.parent}},e.prototype.end=function(e){return this.document().end(e)},e.prototype.prev=function(){var e;if((e=this.parent.children.indexOf(this))<1)throw new Error("Already at the first node");return this.parent.children[e-1]},e.prototype.next=function(){var e;if(-1===(e=this.parent.children.indexOf(this))||e===this.parent.children.length-1)throw new Error("Already at the last node");return this.parent.children[e+1]},e.prototype.importDocument=function(e){var t;return(t=e.root().clone()).parent=this,t.isRoot=!1,this.children.push(t),this},e.prototype.ele=function(e,t,n){return this.element(e,t,n)},e.prototype.nod=function(e,t,n){return this.node(e,t,n)},e.prototype.txt=function(e){return this.text(e)},e.prototype.dat=function(e){return this.cdata(e)},e.prototype.com=function(e){return this.comment(e)},e.prototype.ins=function(e,t){return this.instruction(e,t)},e.prototype.doc=function(){return this.document()},e.prototype.dec=function(e,t,n){return this.declaration(e,t,n)},e.prototype.dtd=function(e,t){return this.doctype(e,t)},e.prototype.e=function(e,t,n){return this.element(e,t,n)},e.prototype.n=function(e,t,n){return this.node(e,t,n)},e.prototype.t=function(e){return this.text(e)},e.prototype.d=function(e){return this.cdata(e)},e.prototype.c=function(e){return this.comment(e)},e.prototype.r=function(e){return this.raw(e)},e.prototype.i=function(e,t){return this.instruction(e,t)},e.prototype.u=function(){return this.up()},e.prototype.importXMLBuilder=function(e){return this.importDocument(e)},e}()}).call(this)},function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))(function(r,i){function a(e){try{l(o.next(e))}catch(e){i(e)}}function s(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){e.done?r(e.value):new n(function(t){t(e.value)}).then(a,s)}l((o=o.apply(e,t||[])).next())})},r=this&&this.__generator||function(e,t){var n,o,r,i,a={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:s(0),throw:s(1),return:s(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function s(i){return function(s){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;a;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return a.label++,{value:i[1],done:!1};case 5:a.label++,o=i[1],i=[0];continue;case 7:i=a.ops.pop(),a.trys.pop();continue;default:if(!(r=(r=a.trys).length>0&&r[r.length-1])&&(6===i[0]||2===i[0])){a=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){a.label=i[1];break}if(6===i[0]&&a.label<r[1]){a.label=r[1],r=i;break}if(r&&a.label<r[2]){a.label=r[2],a.ops.push(i);break}r[2]&&a.ops.pop(),a.trys.pop();continue}i=t.call(e,a)}catch(e){i=[6,e],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,s])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(107),a=n(216),s={},l={};function c(e,t,n){return o(this,void 0,void 0,function(){var o,a;return r(this,function(r){switch(r.label){case 0:return o=i.join(e.directory,t),n&&(o=o+"-"+n),o=i.join(o,e.diagnosticFileName),[4,u(e,o)];case 1:return(a=r.sent())?(s=JSON.parse(a),[2,Promise.resolve(!0)]):[2,Promise.resolve(!1)]}})})}function u(e,t){return new Promise(function(n,o){if("browser"!==e.runtime){if(!a.existsSync(t))return n(void 0);var r=a.readFileSync(t).toString();return n(r)}var i=new XMLHttpRequest;i.onreadystatechange=function(){if(i.readyState===XMLHttpRequest.DONE)return 200===i.status?n(i.responseText):n(void 0)},i.open("GET",t,!0),i.send()})}t.configureLocale=function(e){return o(this,void 0,void 0,function(){var t,n,o,a,s,p;return r(this,function(r){switch(r.label){case 0:return""===e.directory?[2,Promise.reject("E_Unspecified_Directory")]:""===e.diagnosticFileName?[2,Promise.reject("E_Unspecified_Diagnostic_FileName")]:""===e.locale?[2,Promise.reject("E_Unspecified_Locale")]:"node"!==e.runtime&&"browser"!==e.runtime?[2,Promise.reject("E_Unsupported_Runtime")]:(t=/^([a-z]+)([_\-]([a-z]+))?$/.exec(e.locale.toLowerCase()))?(n=t[1],o=t[3],[4,c(e,n,o)]):[2,Promise.reject("E_Unsupported_Locale")];case 1:return(a=r.sent())?[3,3]:[4,c(e,n,void 0)];case 2:a=r.sent(),r.label=3;case 3:return a&&"en"!==n?(s=i.join(e.directory,"en",e.diagnosticFileName),[4,u(e,s)]):[3,5];case 4:return(p=r.sent())&&(l=JSON.parse(p)),[3,7];case 5:return[4,c(e,"en",void 0)];case 6:a=r.sent(),r.label=7;case 7:return a?[2,a]:[2,Promise.reject("E_Locale_Configuration_Error")]}})})},t.translate=function(e){return s[e]?s[e]:l[e]},t.translateA=function(e,t){var n=s[e];return n||(n=l[e]),n.replace(/{(\d+)}/g,function(e,n){return""+function(e,t){if(null==e)throw new Error("E_Arg_Mismatch");return e}(t[+n])})}},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var o=function(){function e(){var e=this;this._previousDimensions=new Map,this._subscribers=[],this._pendingSubscribers=[],this._pendingUpdates=[],this._schedule=function(){e.takeMeasurements(),e.flushPendingMeasuringNotifications()}}return e.getInstance=function(){return e._instance||(e._instance=new e),e._instance},e.prototype.setSchedulingFunction=function(e){this._schedule=e},Object.defineProperty(e.prototype,"subscribers",{get:function(){return this._subscribers},enumerable:!0,configurable:!0}),e.prototype.addMeasuringSubscribers=function(e){this._subscribers.push(e)},e.prototype.removeMeasuringSubscribers=function(e){var t=this._subscribers.indexOf(e);t>-1&&(this._subscribers.splice(t,1),this._previousDimensions.delete(e))},e.prototype.scheduleMeasuringUpdate=function(){this._schedule()},e.prototype.flushPendingMeasuringNotifications=function(){for(var e=this._pendingUpdates.length,t=0;t<e;t++)this._pendingUpdates[t]();return this._pendingUpdates=[],this._pendingSubscribers=[],e},e.prototype.takeMeasurements=function(){if(this._subscribers)for(var e=0;e<this._subscribers.length;e++){var t=this._subscribers[e],n=t.getComponent();if(n){var o=this._previousDimensions.get(t),r=n.getBoundingClientRect(),i=r.width,a=r.height;if(!o||o.Width!==i||o.Height!==a||this._subscribers[e].forceMeasure){var s=this._pendingSubscribers.indexOf(t);s>-1&&(this._pendingSubscribers.splice(s,1),this._pendingUpdates.splice(s,1)),this._previousDimensions.set(t,{Width:i,Height:a}),this._pendingUpdates.push(t.onMeasure.bind(t,i,a)),this._pendingSubscribers.push(t)}}}},e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var o=function(){function e(){this._disablingScrollStyle=!1,this._popupCount=0}return e.getInstance=function(){return e._instance||(e._instance=new e),e._instance},e.prototype.seeMoreOpen=function(){this._popupCount++,this.setDisableScrollStyle(!0)},e.prototype.seeMoreClose=function(){this._popupCount--,this.setDisableScrollStyle(!1)},e.prototype.getPopupCount=function(){return this._popupCount},e.prototype.getDisableScrollStyle=function(){return this._disablingScrollStyle},e.prototype.setDisableScrollStyle=function(e){if(this._disablingScrollStyle!==e){this._disablingScrollStyle=e;for(var t=document.querySelectorAll(e?".webkitScroll":".webkitScrollAuto"),n=0;n<t.length;n++)e?(t[n].classList.add("webkitScrollAuto"),t[n].classList.remove("webkitScroll")):(t[n].classList.add("webkitScroll"),t[n].classList.remove("webkitScrollAuto"));var o=document.querySelectorAll(e?".forceNewStackContext":".forceNewStackContextInert");for(n=0;n<o.length;n++)e?(o[n].classList.add("forceNewStackContextInert"),o[n].classList.remove("forceNewStackContext")):(o[n].classList.add("forceNewStackContext"),o[n].classList.remove("forceNewStackContextInert"))}},e}()},function(e,t,n){"use strict";function o(e,t,n,o){return{code:e,category:t,key:n,message:o}}Object.defineProperty(t,"__esModule",{value:!0}),t.strings={loading_harness:o(1002,"Info","loading_harness","Loading control harness..."),loading_control:o(1003,"Info","loading_control","Loading control..."),data_inputs:o(1004,"Info","data_inputs","Data Inputs"),property:o(1005,"Info","property","Property"),value:o(1006,"Info","value","Value"),type:o(1007,"Info","type","Type"),error_parse_resource_string:o(1008,"Error","error_parse_resource_string","Error parsing resource '{0}'"),data_outputs:o(1009,"Info","data_outputs","Data Outputs"),resource_file_loaded:o(1010,"Error","resource_file_loaded","Resource file '{0}' loaded."),error_resource_load:o(1011,"Error","error_resource_load","Failed to load resource '{0}'"),error_resource_type_not_supported:o(1012,"Error","error_resource_type_not_supported","Resource '{0}' not loaded because {1} is not supported."),unknown_property_usage:o(1013,"Error","unknown_property_usage","Property has an unknown value for the usage attribute"),unrecognized_type_group:o(1014,"Error","unrecognized_type_group","Property references an unknown type-group '{0}'"),property_missing_type:o(1015,"Error","property_missing_type","Property has neither type-of nor type-group attribute"),error_parsing_control_manifest:o(1016,"Error","error_parsing_control_manifest","Manifest Parsing Error: Cannot parse ControlManifest.xml."),error_http_get_resource:o(1017,"Error","error_http_get_resource","GET resource '{0}' returned with status {1}"),invoke_method:o(1018,"Info","invoke_method","Invoked method {0} on {1} interface."),function_parameters:o(1019,"Info","function_parameters","Parameters"),message:o(1020,"Info","message","Message"),details:o(1021,"Info","details","Details"),error_code:o(1022,"Info","error_code","Error Code"),apply:o(1023,"Info","apply","Apply"),choose_column:o(1024,"Info","choose_column","Choose a Column"),choose_type:o(1025,"Info","choose_type","Choose a Type"),error_read_file:o(1026,"Error","error_read_file","Failed to read file {0}"),error_parse_file:o(1027,"Error","error_parse_file","Failed to parse file {0}"),row:o(1028,"Info","row","Row"),context_inputs:o(1029,"Info","context_inputs","Context Inputs"),form_factor:o(1030,"Info","form_factor","Form Factor"),column:o(1031,"Info","column","Column"),web:o(1032,"Info","web","Web"),tablet:o(1033,"Info","tablet","Tablet"),phone:o(1034,"Info","phone","Phone"),unknown:o(1035,"Info","unknown","Unknown"),aria_label_data_file:o(1036,"Info","aria_label_data_file","select a file for {0}, current file: {1}"),control_container_width:o(1037,"Info","control_container_width","Component Container Width"),control_container_height:o(1038,"Info","control_container_height","Component Container Height"),no_file_chosen:o(1039,"Info","no_file_chosen","no file chosen"),select_a_file:o(1040,"Info","select_a_file","Select a file"),only_numbers_allowed:o(1041,"Info","only_numbers_allowed","Only numeric values are allowed")}},function(e,t,n){"use strict";n.d(t,"a",function(){return p});var o,r,i=n(41),a=n(24),s=n(6),l=n(4),c=(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return c(t,e),t.prototype.getSymbolClassName=function(e){return Object(a.b)(e)},t}(i.a);!function(e){e[e.None=0]="None",e[e.Left=1]="Left",e[e.Top=2]="Top"}(r||(r={}));var p=s.connect(l.a)(u)},function(e,t,n){var o=n(120),r="object"==typeof self&&self&&self.Object===Object&&self,i=o||r||Function("return this")();e.exports=i},function(e,t,n){"use strict";var o;n.d(t,"a",function(){return o}),n.d(t,"b",function(){return i}),function(e){e[e.Expanded=0]="Expanded",e[e.UpArrowHead=1]="UpArrowHead",e[e.LeftArrowHead=2]="LeftArrowHead",e[e.Collapsed=3]="Collapsed",e[e.Edit=4]="Edit",e[e.Save=5]="Save",e[e.Delete=6]="Delete",e[e.Remove=7]="Remove",e[e.Add=8]="Add",e[e.Cancel=9]="Cancel",e[e.HandClick=10]="HandClick",e[e.Accept=11]="Accept",e[e.More=12]="More",e[e.Forward=13]="Forward",e[e.Favorite=14]="Favorite",e[e.Placeholder=15]="Placeholder",e[e.RatingFull=16]="RatingFull",e[e.RatingEmpty=17]="RatingEmpty",e[e.Options=18]="Options",e[e.Manage=19]="Manage",e[e.Settings=20]="Settings",e[e.Find=21]="Find",e[e.Help=22]="Help",e[e.ViewNotifications=23]="ViewNotifications",e[e.StageAdvance=24]="StageAdvance",e[e.CheckMark=25]="CheckMark",e[e.Locked=26]="Locked",e[e.Lock=27]="Lock",e[e.MoreOptions=28]="MoreOptions",e[e.ContactInfo=29]="ContactInfo",e[e.Pin=30]="Pin",e[e.Unpin=31]="Unpin",e[e.Refresh=32]="Refresh",e[e.Details=33]="Details",e[e.VisualFilter=34]="VisualFilter",e[e.GlobalFilter=35]="GlobalFilter",e[e.Diamond=36]="Diamond",e[e.ApplyFilter=37]="ApplyFilter",e[e.CancelFilter=38]="CancelFilter",e[e.StreamView=39]="StreamView",e[e.TileView=40]="TileView",e[e.Import=41]="Import",e[e.Tools=42]="Tools",e[e.Attach=43]="Attach",e[e.Filter=44]="Filter",e[e.Copy=45]="Copy",e[e.HighPriority=46]="HighPriority",e[e.ReduceTile=47]="ReduceTile",e[e.ExpandTile=48]="ExpandTile",e[e.GlobalFilterExpand=49]="GlobalFilterExpand",e[e.GlobalFilterCollapse=50]="GlobalFilterCollapse",e[e.Clear=51]="Clear",e[e.Post=52]="Post",e[e.OneNote=53]="OneNote",e[e.Home=54]="Home",e[e.SetAsHome=55]="SetAsHome",e[e.BackButton=56]="BackButton",e[e.BackButtonWithoutBorder=57]="BackButtonWithoutBorder",e[e.UpArrow=58]="UpArrow",e[e.DownArrow=59]="DownArrow",e[e.SetActiveButton=60]="SetActiveButton",e[e.SearchButton=61]="SearchButton",e[e.ForwardButton=62]="ForwardButton",e[e.Mail=63]="Mail",e[e.CheckedMail=64]="CheckedMail",e[e.FailedMail=65]="FailedMail",e[e.Phone=66]="Phone",e[e.Chat=67]="Chat",e[e.OpenPane=68]="OpenPane",e[e.ClosePane=69]="ClosePane",e[e.AddFriend=70]="AddFriend",e[e.Arrow=71]="Arrow",e[e.DropdownArrow=72]="DropdownArrow",e[e.FlsLocked=73]="FlsLocked",e[e.LinkArticle=74]="LinkArticle",e[e.UnlinkArticle=75]="UnlinkArticle",e[e.CopyLink=76]="CopyLink",e[e.EmailLink=77]="EmailLink",e[e.Share=78]="Share",e[e.Assign=79]="Assign",e[e.Connect=80]="Connect",e[e.Opportunity=81]="Opportunity",e[e.Appointment=82]="Appointment",e[e.Task=83]="Task",e[e.Case=84]="Case",e[e.PhoneCallIncoming=85]="PhoneCallIncoming",e[e.PhoneCallOutgoing=86]="PhoneCallOutgoing",e[e.EmailIncoming=87]="EmailIncoming",e[e.EmailOutgoing=88]="EmailOutgoing",e[e.SendEmail=89]="SendEmail",e[e.ApplyTemplate=90]="ApplyTemplate",e[e.InsertKbArticle=91]="InsertKbArticle",e[e.SendSelected=92]="SendSelected",e[e.SaveAndClose=93]="SaveAndClose",e[e.ReplyEmail=94]="ReplyEmail",e[e.ReplyAllEmail=95]="ReplyAllEmail",e[e.ForwardEmail=96]="ForwardEmail",e[e.Close=97]="Close",e[e.Activate=98]="Activate",e[e.DeActivate=99]="DeActivate",e[e.DeleteBulk=100]="DeleteBulk",e[e.SocialActivityIncoming=101]="SocialActivityIncoming",e[e.SocialActivityOutgoing=102]="SocialActivityOutgoing",e[e.CustomActivity=103]="CustomActivity",e[e.SystemPost=104]="SystemPost",e[e.Convert=105]="Convert",e[e.MarkAsWon=106]="MarkAsWon",e[e.MarkAsLost=107]="MarkAsLost",e[e.SetRegarding=108]="SetRegarding",e[e.SaveAsComplete=109]="SaveAsComplete",e[e.SwitchProcess=110]="SwitchProcess",e[e.Recalculate=111]="Recalculate",e[e.SendDirectEmail=112]="SendDirectEmail",e[e.OpenMailbox=113]="OpenMailbox",e[e.ReOpenOpportunity=114]="ReOpenOpportunity",e[e.ReactivateLead=115]="ReactivateLead",e[e.Disqualify=116]="Disqualify",e[e.Qualify=117]="Qualify",e[e.SelectView=118]="SelectView",e[e.SelectChart=119]="SelectChart",e[e.OpenInBrowser=120]="OpenInBrowser",e[e.NewAppointment=121]="NewAppointment",e[e.NewRecurringAppointment=122]="NewRecurringAppointment",e[e.NewPhoneCall=123]="NewPhoneCall",e[e.NewTask=124]="NewTask",e[e.NewEmail=125]="NewEmail",e[e.AddExisting=126]="AddExisting",e[e.SaveAndEdit=127]="SaveAndEdit",e[e.Default=128]="Default",e[e.ScrollRight=129]="ScrollRight",e[e.ScrollLeft=130]="ScrollLeft",e[e.SaveAndRunRoutingRule=131]="SaveAndRunRoutingRule",e[e.RunRoutingRule=132]="RunRoutingRule",e[e.ResolveCase=133]="ResolveCase",e[e.CancelCase=134]="CancelCase",e[e.ReactivateCase=135]="ReactivateCase",e[e.AddToQueue=136]="AddToQueue",e[e.CreateChildCase=137]="CreateChildCase",e[e.QueueItemRoute=138]="QueueItemRoute",e[e.QueueItemRelease=139]="QueueItemRelease",e[e.QueueItemRemove=140]="QueueItemRemove",e[e.QueueItemPick=141]="QueueItemPick",e[e.Drilldown=142]="Drilldown",e[e.PopOverButton=143]="PopOverButton",e[e.ExitButton=144]="ExitButton",e[e.ExportToExcel=145]="ExportToExcel",e[e.WordTemplates=146]="WordTemplates",e[e.DocumentTemplates=147]="DocumentTemplates",e[e.OpenInPowerBI=148]="OpenInPowerBI",e[e.OpenPowerBIReport=149]="OpenPowerBIReport",e[e.OpenDelve=150]="OpenDelve",e[e.ArticleLink=151]="ArticleLink",e[e.ArchiveArticle=152]="ArchiveArticle",e[e.ApproveArticle=153]="ApproveArticle",e[e.DiscardArticle=154]="DiscardArticle",e[e.Minor=155]="Minor",e[e.Major=156]="Major",e[e.PublishKnowledgeArticle=157]="PublishKnowledgeArticle",e[e.RelateArticle=158]="RelateArticle",e[e.RelateProduct=159]="RelateProduct",e[e.RestoreArticle=160]="RestoreArticle",e[e.RevertToDraftArticle=161]="RevertToDraftArticle",e[e.Translate=162]="Translate",e[e.UpdateArticle=163]="UpdateArticle",e[e.RemoveFilter=164]="RemoveFilter",e[e.Article=165]="Article",e[e.Graph=166]="Graph",e[e.CSR=167]="CSR",e[e.MembersIcon=168]="MembersIcon",e[e.QueueIcon=169]="QueueIcon",e[e.SiteMap=170]="SiteMap",e[e.NormalPriority=171]="NormalPriority",e[e.LowPriority=172]="LowPriority",e[e.ViewIcon=173]="ViewIcon",e[e.RecentCases=174]="RecentCases",e[e.KBRecords=175]="KBRecords",e[e.NumberOfViews=176]="NumberOfViews",e[e.ResizeHandle=177]="ResizeHandle",e[e.TaskBasedFlow=178]="TaskBasedFlow",e[e.InformationIcon=179]="InformationIcon",e[e.PencilIcon=180]="PencilIcon",e[e.ErrorIcon=181]="ErrorIcon",e[e.SuccessIcon=182]="SuccessIcon",e[e.OptionsetIcon=183]="OptionsetIcon",e[e.NotificationIcon=184]="NotificationIcon",e[e.PanelHeaderImportDataIcon=185]="PanelHeaderImportDataIcon",e[e.SidePanelUpload=186]="SidePanelUpload",e[e.New=187]="New",e[e.DetailsPageClose=188]="DetailsPageClose",e[e.SettingsListIcon=189]="SettingsListIcon",e[e.ListIcon=190]="ListIcon",e[e.ForwardDisable=191]="ForwardDisable",e[e.PdfIconFile=192]="PdfIconFile",e[e.PresentationFile=193]="PresentationFile",e[e.OneNoteFile=194]="OneNoteFile",e[e.AccessFile=195]="AccessFile",e[e.VisioFile=196]="VisioFile",e[e.ProjectFile=197]="ProjectFile",e[e.Plus=198]="Plus",e[e.ChevronUp=199]="ChevronUp",e[e.ChevronDown=200]="ChevronDown",e[e.HappySmiley=201]="HappySmiley",e[e.SadSmiley=202]="SadSmiley",e[e.CaseResolution=203]="CaseResolution",e[e.CampaignResolution=204]="CampaignResolution",e[e.ServiceActivity=205]="ServiceActivity",e[e.Notes=206]="Notes",e[e.Audio=207]="Audio",e[e.Camera=208]="Camera",e[e.Video=209]="Video",e[e.Image=210]="Image",e[e.Html=211]="Html",e[e.SharePointEditDocument=212]="SharePointEditDocument",e[e.SharePointDeleteDocument=213]="SharePointDeleteDocument",e[e.SharePointCheckoutDocument=214]="SharePointCheckoutDocument",e[e.SharePointCheckinDocument=215]="SharePointCheckinDocument",e[e.SharePointEditDocumentProperties=216]="SharePointEditDocumentProperties",e[e.SharePointDiscardCheckoutDocument=217]="SharePointDiscardCheckoutDocument",e[e.SharePointNewDocument=218]="SharePointNewDocument",e[e.SharePointNewWordDocument=219]="SharePointNewWordDocument",e[e.SharePointNewExcelDocument=220]="SharePointNewExcelDocument",e[e.SharePointNewPowerPointDocument=221]="SharePointNewPowerPointDocument",e[e.SharePointNewOneNoteDocument=222]="SharePointNewOneNoteDocument",e[e.SharePointUploadDocument=223]="SharePointUploadDocument",e[e.SharePointChangeLocation=224]="SharePointChangeLocation",e[e.SharePointAddDocumentLocation=225]="SharePointAddDocumentLocation",e[e.SharePointEditLocation=226]="SharePointEditLocation",e[e.SharePointOpenLocation=227]="SharePointOpenLocation",e[e.SharePointOpenDocument=228]="SharePointOpenDocument",e[e.SendByEmail=229]="SendByEmail",e[e.CreateQuote=230]="CreateQuote",e[e.Reply=231]="Reply",e[e.Warning=232]="Warning",e[e.Play=233]="Play",e[e.ExpandButton=234]="ExpandButton",e[e.AssociatedArticle=235]="AssociatedArticle",e[e.DisassociatedArticle=236]="DisassociatedArticle",e[e.FormDesign=237]="FormDesign",e[e.GlobalFilterClearAll=238]="GlobalFilterClearAll",e[e.GlobalFilterExpandedRow=239]="GlobalFilterExpandedRow",e[e.GlobalFilterCollapsedRow=240]="GlobalFilterCollapsedRow",e[e.RelationshipAssistant=241]="RelationshipAssistant",e[e.AutomaticSuggestions=242]="AutomaticSuggestions",e[e.SemanticZoom=243]="SemanticZoom",e[e.SemanticZoomMirrored=244]="SemanticZoomMirrored",e[e.BackwardButton=245]="BackwardButton",e[e.MultiSelect=246]="MultiSelect",e[e.MultiSelectMirrored=247]="MultiSelectMirrored",e[e.Spinning=248]="Spinning",e[e.RetireProduct=249]="RetireProduct",e[e.AddProduct=250]="AddProduct",e[e.OfflineStatus=251]="OfflineStatus",e[e.Abandon=252]="Abandon",e[e.Reactivate=253]="Reactivate",e[e.FinishStage=254]="FinishStage",e[e.SortButton=255]="SortButton",e[e.Flows=256]="Flows",e[e.OpenEntityRecord=257]="OpenEntityRecord",e[e.View=258]="View",e[e.CreateView=259]="CreateView",e[e.EditView=260]="EditView",e[e.GuestUser=261]="GuestUser",e[e.History=262]="History",e[e.ReassignRecords=263]="ReassignRecords",e[e.ManageRoles=264]="ManageRoles",e[e.JoinTeams=265]="JoinTeams",e[e.ChangeManager=266]="ChangeManager",e[e.AddMembers=267]="AddMembers",e[e.RemoveMembers=268]="RemoveMembers",e[e.Download=269]="Download",e[e.SetAsDefaultView=270]="SetAsDefaultView",e[e.Pinned=271]="Pinned",e[e.DistributionList=272]="DistributionList",e[e.MergeRecords=273]="MergeRecords",e[e.AssociateChildCase=274]="AssociateChildCase",e[e.SetAsDefault=275]="SetAsDefault",e[e.ConvertKnowledgeArticle=276]="ConvertKnowledgeArticle",e[e.Messenger=277]="Messenger",e[e.AssociateCategory=278]="AssociateCategory",e[e.OfficeWaffle=279]="OfficeWaffle",e[e.TripleColumn=280]="TripleColumn",e[e.Tiles=281]="Tiles",e[e.HideVisualFilter=282]="HideVisualFilter",e[e.InteractiveDashboard=283]="InteractiveDashboard",e[e.Dynamics365=284]="Dynamics365",e[e.SalesLiterature=285]="SalesLiterature",e[e.SelectButton=286]="SelectButton",e[e.SelectButtonRTL=287]="SelectButtonRTL",e[e.LockPricing=288]="LockPricing",e[e.CreateInvoice=289]="CreateInvoice",e[e.FulfillOrder=290]="FulfillOrder",e[e.CancelInvoice=291]="CancelInvoice",e[e.ActivateQuote=292]="ActivateQuote",e[e.InvoicePaid=293]="InvoicePaid",e[e.GetProducts=294]="GetProducts",e[e.UnlockPricing=295]="UnlockPricing",e[e.Checkbox=296]="Checkbox",e[e.CheckboxComposite=297]="CheckboxComposite",e[e.RightChevron=298]="RightChevron",e[e.LeftChevron=299]="LeftChevron",e[e.UntrackedEmail=300]="UntrackedEmail",e[e.OpenEmail=301]="OpenEmail",e[e.GlobalFilterCollapsedRowRTL=302]="GlobalFilterCollapsedRowRTL",e[e.CancelOrder=303]="CancelOrder",e[e.URL=304]="URL",e[e.Ticker=305]="Ticker",e[e.UseCurrentPricing=306]="UseCurrentPricing",e[e.Process=307]="Process",e[e.FirstPageButton=308]="FirstPageButton",e[e.LinkedInLogo=309]="LinkedInLogo",e[e.Health=310]="Health",e[e.Family=311]="Family",e[e.Sports=312]="Sports",e[e.Entertainment=313]="Entertainment",e[e.OOF=314]="OOF",e[e.CarouselView=315]="CarouselView",e[e.HeartEmpty=316]="HeartEmpty",e[e.HeartFilled=317]="HeartFilled",e[e.Follow=318]="Follow",e[e.RunQuery=319]="RunQuery",e[e.GroupAnd=320]="GroupAnd",e[e.GroupOr=321]="GroupOr",e[e.Ungroup=322]="Ungroup",e[e.HideInSimpleMode=323]="HideInSimpleMode",e[e.ShowInSimpleMode=324]="ShowInSimpleMode",e[e.PinnedSolid=325]="PinnedSolid",e[e.FilterSolid=326]="FilterSolid",e[e.Bot=327]="Bot",e[e.SystemDocumentTemplates=328]="SystemDocumentTemplates",e[e.MyDocumentTemplates=329]="MyDocumentTemplates",e[e.ViewAllMyDocumentTemplates=330]="ViewAllMyDocumentTemplates",e[e.EnableSecurityRoles=331]="EnableSecurityRoles",e[e.DocumentTemplateUpload=332]="DocumentTemplateUpload",e[e.DocumentTemplateEdit=333]="DocumentTemplateEdit",e[e.DocumentTemplateActivate=334]="DocumentTemplateActivate",e[e.DocumentTemplateDeactivate=335]="DocumentTemplateDeactivate",e[e.YammerIcon=336]="YammerIcon",e[e.StopIcon=337]="StopIcon",e[e.ReplaceContentIcon=338]="ReplaceContentIcon",e[e.CloseDateComingSoon=339]="CloseDateComingSoon",e[e.NearbyCustomers=340]="NearbyCustomers",e[e.RelevantNews=341]="RelevantNews",e[e.UpcomingMeeting=342]="UpcomingMeeting",e[e.RecentMeeting=343]="RecentMeeting",e[e.ReminderWithCall=344]="ReminderWithCall",e[e.CardsTask=345]="CardsTask",e[e.CardsQuote=346]="CardsQuote",e[e.CardsOpportunity=347]="CardsOpportunity",e[e.CardsInvoice=348]="CardsInvoice",e[e.CardsDashboard=349]="CardsDashboard",e[e.CardsLeads=350]="CardsLeads",e[e.OpportunityNoActivity=351]="OpportunityNoActivity",e[e.CaseNoActivity=352]="CaseNoActivity",e[e.CompetitorMentioned=353]="CompetitorMentioned",e[e.MeetingRequest=354]="MeetingRequest",e[e.MissedCloseDate=355]="MissedCloseDate",e[e.IssueDetection=356]="IssueDetection",e[e.NoActivityWithAccount=357]="NoActivityWithAccount",e[e.YesNo=358]="YesNo",e[e.AgendaActivityServiceAppointment=359]="AgendaActivityServiceAppointment",e[e.AgendaActivityFax=360]="AgendaActivityFax",e[e.UpcomingFlight=361]="UpcomingFlight",e[e.OpportunityAtRiskSentiment=362]="OpportunityAtRiskSentiment",e[e.IconDue=363]="IconDue",e[e.AddProductFamily=364]="AddProductFamily",e[e.AddProductBundle=365]="AddProductBundle",e[e.ProductPublish=366]="ProductPublish",e[e.CloneProduct=367]="CloneProduct",e[e.CloseGoal=368]="CloseGoal",e[e.AlignWithFiscalPeriod=369]="AlignWithFiscalPeriod",e[e.Connection=370]="Connection",e[e.ConnectionToMe=371]="ConnectionToMe",e[e.ConnectionToOther=372]="ConnectionToOther",e[e.ProductUpsell=373]="ProductUpsell",e[e.SubscriptionAdd=374]="SubscriptionAdd",e[e.RefreshDevice=375]="RefreshDevice",e[e.BulletListRemove=376]="BulletListRemove",e[e.BulletListAdd=377]="BulletListAdd",e[e.ScatterChart=378]="ScatterChart",e[e.BarChartHorizontal=379]="BarChartHorizontal",e[e.BarChartVertical=380]="BarChartVertical",e[e.FunnelChart=381]="FunnelChart",e[e.PieDouble=382]="PieDouble",e[e.AALinkedInLogo=383]="AALinkedInLogo",e[e.SendAndClose=384]="SendAndClose",e[e.AdvFind=385]="AdvFind",e[e.DoubleChevronLeft=386]="DoubleChevronLeft",e[e.DoubleChevronRight=387]="DoubleChevronRight",e[e.AreaChart=388]="AreaChart",e[e.DonutChart=389]="DonutChart",e[e.TagChart=390]="TagChart",e[e.Teaser=391]="Teaser",e[e.Clone=392]="Clone",e[e.AreaChartMirrored=393]="AreaChartMirrored",e[e.BarChartHorizontalMirrored=394]="BarChartHorizontalMirrored",e[e.BarChartVerticalMirrored=395]="BarChartVerticalMirrored",e[e.People=396]="People",e[e.PeopleBlock=397]="PeopleBlock",e[e.BulletListDownArrow=398]="BulletListDownArrow",e[e.Recent=399]="Recent",e[e.SharePointIcon=400]="SharePointIcon",e[e.OneDriveIcon=401]="OneDriveIcon",e[e.FolderSharedIcon=402]="FolderSharedIcon",e[e.MSTeamsIcon=403]="MSTeamsIcon",e[e.ScrollUpDown=404]="ScrollUpDown",e[e.SendToCTI=405]="SendToCTI",e[e.CreateQuickCampaign=406]="CreateQuickCampaign",e[e.PageSolid=407]="PageSolid",e[e.Page=408]="Page",e[e.OpportunitiesList=409]="OpportunitiesList",e[e.BrowseCards=410]="BrowseCards",e[e.Letter=411]="Letter",e[e.Fax=412]="Fax",e[e.NewLetter=413]="NewLetter",e[e.NewFax=414]="NewFax",e[e.LetterIncoming=415]="LetterIncoming",e[e.LetterOutgoing=416]="LetterOutgoing",e[e.FaxIncoming=417]="FaxIncoming",e[e.FaxOutgoing=418]="FaxOutgoing",e[e.CreatePersonalView=419]="CreatePersonalView",e[e.ViewHierarchy=420]="ViewHierarchy",e[e.ProductPreview=421]="ProductPreview",e[e.AddTerritoryMember=422]="AddTerritoryMember",e[e.RemoveTerritoryMember=423]="RemoveTerritoryMember",e[e.Report=424]="Report",e[e.NewServiceActivity=425]="NewServiceActivity",e[e.Recurrence=426]="Recurrence",e[e.EditSeries=427]="EditSeries",e[e.EndSeries=428]="EndSeries",e[e.EditDefaultFilter=429]="EditDefaultFilter",e[e.QueueItemDetail=430]="QueueItemDetail",e[e.ThumbsUp=431]="ThumbsUp",e[e.ThumbsDown=432]="ThumbsDown",e[e.Lead=433]="Lead",e[e.TableLink=434]="TableLink",e[e.TableGroup=435]="TableGroup",e[e.ClearDefault=436]="ClearDefault",e[e.SetDefault=437]="SetDefault",e[e.SaveFilterToNewPersonalView=438]="SaveFilterToNewPersonalView",e[e.SaveFilterToCurrentPersonalView=439]="SaveFilterToCurrentPersonalView",e[e.Expand=440]="Expand",e[e.ChromeMinimize=441]="ChromeMinimize",e[e.ChromeMaximize=442]="ChromeMaximize",e[e.ConnectionRoleManageRecordType=443]="ConnectionRoleManageRecordType",e[e.Sync=444]="Sync",e[e.ThumbsUpSolid=445]="ThumbsUpSolid",e[e.ThumbsDownSolid=446]="ThumbsDownSolid"}(o||(o={}));var r={Expanded:"symbolFont Expanded-symbol",UpArrowHead:"symbolFont UpArrowHead-symbol",LeftArrowHead:"symbolFont LeftArrowHead-symbol",Collapsed:"symbolFont Collapsed-symbol",Edit:"symbolFont Edit-symbol",Save:"symbolFont Save-symbol",Delete:"symbolFont Delete-symbol",Remove:"symbolFont Remove-symbol",Add:"symbolFont Add-symbol",Cancel:"symbolFont Cancel-symbol",HandClick:"symbolFont HandClick-symbol",Accept:"symbolFont Accept-symbol",More:"symbolFont More-symbol",Forward:"symbolFont Forward-symbol",Favorite:"symbolFont Favorite-symbol",Placeholder:"symbolFont Placeholder-symbol",RatingFull:"symbolFont RatingFull-symbol",RatingEmpty:"symbolFont RatingEmpty-symbol",Options:"symbolFont Options-symbol",Manage:"symbolFont Manage-symbol",Settings:"symbolFont Settings-symbol",Find:"symbolFont Find-symbol",Help:"symbolFont Help-symbol",ViewNotifications:"symbolFont ViewNotifications-symbol",StageAdvance:"symbolFont StageAdvance-symbol",CheckMark:"symbolFont CheckMark-symbol",Locked:"symbolFont Locked-symbol",Lock:"symbolFont Lock-symbol",MoreOptions:"symbolFont MoreOptions-symbol",ContactInfo:"symbolFont ContactInfo-symbol",Pin:"symbolFont Pin-symbol",Unpin:"symbolFont Unpin-symbol",Refresh:"symbolFont Refresh-symbol",Details:"symbolFont Details-symbol",VisualFilter:"symbolFont VisualFilter-symbol",GlobalFilter:"symbolFont GlobalFilter-symbol",Diamond:"symbolFont Diamond-symbol",ApplyFilter:"symbolFont ApplyFilter-symbol",CancelFilter:"symbolFont CancelFilter-symbol",StreamView:"symbolFont StreamView-symbol",TileView:"symbolFont TileView-symbol",Import:"symbolFont Import-symbol",Tools:"symbolFont Tools-symbol",Attach:"symbolFont Attach-symbol",Filter:"symbolFont Filter-symbol",Copy:"symbolFont Copy-symbol",HighPriority:"symbolFont HighPriority-symbol",ReduceTile:"symbolFont ReduceTile-symbol",ExpandTile:"symbolFont ExpandTile-symbol",GlobalFilterExpand:"symbolFont GlobalFilterExpand-symbol",GlobalFilterCollapse:"symbolFont GlobalFilterCollapse-symbol",Clear:"symbolFont Clear-symbol",Post:"symbolFont Post-symbol",OneNote:"symbolFont OneNote-symbol",Home:"symbolFont Home-symbol",SetAsHome:"symbolFont SetAsHome-symbol",BackButton:"symbolFont BackButton-symbol",BackButtonWithoutBorder:"symbolFont BackButtonWithoutBorder-symbol",UpArrow:"symbolFont UpArrow-symbol",DownArrow:"symbolFont DownArrow-symbol",SetActiveButton:"symbolFont SetActiveButton-symbol",SearchButton:"symbolFont SearchButton-symbol",ForwardButton:"symbolFont ForwardButton-symbol",Mail:"symbolFont Mail-symbol",CheckedMail:"symbolFont CheckedMail-symbol",FailedMail:"symbolFont FailedMail-symbol",Phone:"symbolFont Phone-symbol",Chat:"symbolFont Chat-symbol",OpenPane:"symbolFont OpenPane-symbol",ClosePane:"symbolFont ClosePane-symbol",AddFriend:"symbolFont AddFriend-symbol",Arrow:"symbolFont Arrow-symbol",DropdownArrow:"symbolFont DropdownArrow-symbol",FlsLocked:"symbolFont FlsLocked-symbol",LinkArticle:"symbolFont LinkArticle-symbol",UnlinkArticle:"symbolFont UnlinkArticle-symbol",CopyLink:"symbolFont CopyLink-symbol",EmailLink:"symbolFont EmailLink-symbol",Share:"symbolFont Share-symbol",Assign:"symbolFont Assign-symbol",Connect:"symbolFont Connect-symbol",Opportunity:"symbolFont Opportunity-symbol",Appointment:"symbolFont Appointment-symbol",Task:"symbolFont Task-symbol",Case:"symbolFont Case-symbol",PhoneCallIncoming:"symbolFont PhoneCallIncoming-symbol",PhoneCallOutgoing:"symbolFont PhoneCallOutgoing-symbol",EmailIncoming:"symbolFont EmailIncoming-symbol",EmailOutgoing:"symbolFont EmailOutgoing-symbol",SendEmail:"symbolFont SendEmail-symbol",ApplyTemplate:"symbolFont ApplyTemplate-symbol",InsertKbArticle:"symbolFont InsertKbArticle-symbol",SendSelected:"symbolFont SendSelected-symbol",SaveAndClose:"symbolFont SaveAndClose-symbol",ReplyEmail:"symbolFont ReplyEmail-symbol",ReplyAllEmail:"symbolFont ReplyAllEmail-symbol",ForwardEmail:"symbolFont ForwardEmail-symbol",Close:"symbolFont Close-symbol",Activate:"symbolFont Activate-symbol",DeActivate:"symbolFont DeActivate-symbol",DeleteBulk:"symbolFont DeleteBulk-symbol",SocialActivityIncoming:"symbolFont SocialActivityIncoming-symbol",SocialActivityOutgoing:"symbolFont SocialActivityOutgoing-symbol",CustomActivity:"symbolFont CustomActivity-symbol",SystemPost:"symbolFont SystemPost-symbol",Convert:"symbolFont Convert-symbol",MarkAsWon:"symbolFont MarkAsWon-symbol",MarkAsLost:"symbolFont MarkAsLost-symbol",SetRegarding:"symbolFont SetRegarding-symbol",SaveAsComplete:"symbolFont SaveAsComplete-symbol",SwitchProcess:"symbolFont SwitchProcess-symbol",Recalculate:"symbolFont Recalculate-symbol",SendDirectEmail:"symbolFont SendDirectEmail-symbol",OpenMailbox:"symbolFont OpenMailbox-symbol",ReOpenOpportunity:"symbolFont ReOpenOpportunity-symbol",ReactivateLead:"symbolFont ReactivateLead-symbol",Disqualify:"symbolFont Disqualify-symbol",Qualify:"symbolFont Qualify-symbol",SelectView:"symbolFont SelectView-symbol",SelectChart:"symbolFont SelectChart-symbol",OpenInBrowser:"symbolFont OpenInBrowser-symbol",NewAppointment:"symbolFont NewAppointment-symbol",NewRecurringAppointment:"symbolFont NewRecurringAppointment-symbol",NewPhoneCall:"symbolFont NewPhoneCall-symbol",NewTask:"symbolFont NewTask-symbol",NewEmail:"symbolFont NewEmail-symbol",AddExisting:"symbolFont AddExisting-symbol",SaveAndEdit:"symbolFont SaveAndEdit-symbol",Default:"symbolFont Default-symbol",ScrollRight:"symbolFont ScrollRight-symbol",ScrollLeft:"symbolFont ScrollLeft-symbol",SaveAndRunRoutingRule:"symbolFont SaveAndRunRoutingRule-symbol",RunRoutingRule:"symbolFont RunRoutingRule-symbol",ResolveCase:"symbolFont ResolveCase-symbol",CancelCase:"symbolFont CancelCase-symbol",ReactivateCase:"symbolFont ReactivateCase-symbol",AddToQueue:"symbolFont AddToQueue-symbol",CreateChildCase:"symbolFont CreateChildCase-symbol",QueueItemRoute:"symbolFont QueueItemRoute-symbol",QueueItemRelease:"symbolFont QueueItemRelease-symbol",QueueItemRemove:"symbolFont QueueItemRemove-symbol",QueueItemPick:"symbolFont QueueItemPick-symbol",Drilldown:"symbolFont Drilldown-symbol",PopOverButton:"symbolFont PopOverButton-symbol",ExitButton:"symbolFont ExitButton-symbol",ExportToExcel:"symbolFont ExportToExcel-symbol",WordTemplates:"symbolFont WordTemplates-symbol",DocumentTemplates:"symbolFont DocumentTemplates-symbol",OpenInPowerBI:"symbolFont OpenInPowerBI-symbol",OpenPowerBIReport:"symbolFont OpenPowerBIReport-symbol",OpenDelve:"symbolFont OpenDelve-symbol",ArticleLink:"symbolFont ArticleLink-symbol",ArchiveArticle:"symbolFont ArchiveArticle-symbol",ApproveArticle:"symbolFont ApproveArticle-symbol",DiscardArticle:"symbolFont DiscardArticle-symbol",Minor:"symbolFont Minor-symbol",Major:"symbolFont Major-symbol",PublishKnowledgeArticle:"symbolFont PublishKnowledgeArticle-symbol",RelateArticle:"symbolFont RelateArticle-symbol",RelateProduct:"symbolFont RelateProduct-symbol",RestoreArticle:"symbolFont RestoreArticle-symbol",RevertToDraftArticle:"symbolFont RevertToDraftArticle-symbol",Translate:"symbolFont Translate-symbol",UpdateArticle:"symbolFont UpdateArticle-symbol",RemoveFilter:"symbolFont RemoveFilter-symbol",Article:"symbolFont Article-symbol",Graph:"symbolFont Graph-symbol",CSR:"symbolFont CSR-symbol",MembersIcon:"symbolFont MembersIcon-symbol",QueueIcon:"symbolFont QueueIcon-symbol",SiteMap:"symbolFont SiteMap-symbol",NormalPriority:"symbolFont NormalPriority-symbol",LowPriority:"symbolFont LowPriority-symbol",ViewIcon:"symbolFont ViewIcon-symbol",RecentCases:"symbolFont RecentCases-symbol",KBRecords:"symbolFont KBRecords-symbol",NumberOfViews:"symbolFont NumberOfViews-symbol",ResizeHandle:"symbolFont ResizeHandle-symbol",TaskBasedFlow:"symbolFont TaskBasedFlow-symbol",InformationIcon:"symbolFont InformationIcon-symbol",PencilIcon:"symbolFont PencilIcon-symbol",ErrorIcon:"symbolFont ErrorIcon-symbol",SuccessIcon:"symbolFont SuccessIcon-symbol",OptionsetIcon:"symbolFont OptionsetIcon-symbol",NotificationIcon:"symbolFont NotificationIcon-symbol",PanelHeaderImportDataIcon:"symbolFont PanelHeaderImportDataIcon-symbol",SidePanelUpload:"symbolFont SidePanelUpload-symbol",New:"symbolFont New-symbol",DetailsPageClose:"symbolFont DetailsPageClose-symbol",SettingsListIcon:"symbolFont SettingsListIcon-symbol",ListIcon:"symbolFont ListIcon-symbol",ForwardDisable:"symbolFont ForwardDisable-symbol",PdfIconFile:"symbolFont PdfIconFile-symbol",PresentationFile:"symbolFont PresentationFile-symbol",OneNoteFile:"symbolFont OneNoteFile-symbol",AccessFile:"symbolFont AccessFile-symbol",VisioFile:"symbolFont VisioFile-symbol",ProjectFile:"symbolFont ProjectFile-symbol",Plus:"symbolFont Plus-symbol",ChevronUp:"symbolFont ChevronUp-symbol",ChevronDown:"symbolFont ChevronDown-symbol",HappySmiley:"symbolFont HappySmiley-symbol",SadSmiley:"symbolFont SadSmiley-symbol",CaseResolution:"symbolFont CaseResolution-symbol",CampaignResolution:"symbolFont CampaignResolution-symbol",ServiceActivity:"symbolFont ServiceActivity-symbol",Notes:"symbolFont Notes-symbol",Audio:"symbolFont Audio-symbol",Camera:"symbolFont Camera-symbol",Video:"symbolFont Video-symbol",Image:"symbolFont Image-symbol",Html:"symbolFont Html-symbol",SharePointEditDocument:"symbolFont SharePointEditDocument-symbol",SharePointDeleteDocument:"symbolFont SharePointDeleteDocument-symbol",SharePointCheckoutDocument:"symbolFont SharePointCheckoutDocument-symbol",SharePointCheckinDocument:"symbolFont SharePointCheckinDocument-symbol",SharePointEditDocumentProperties:"symbolFont SharePointEditDocumentProperties-symbol",SharePointDiscardCheckoutDocument:"symbolFont SharePointDiscardCheckoutDocument-symbol",SharePointNewDocument:"symbolFont SharePointNewDocument-symbol",SharePointNewWordDocument:"symbolFont SharePointNewWordDocument-symbol",SharePointNewExcelDocument:"symbolFont SharePointNewExcelDocument-symbol",SharePointNewPowerPointDocument:"symbolFont SharePointNewPowerPointDocument-symbol",SharePointNewOneNoteDocument:"symbolFont SharePointNewOneNoteDocument-symbol",SharePointUploadDocument:"symbolFont SharePointUploadDocument-symbol",SharePointChangeLocation:"symbolFont SharePointChangeLocation-symbol",SharePointAddDocumentLocation:"symbolFont SharePointAddDocumentLocation-symbol",SharePointEditLocation:"symbolFont SharePointEditLocation-symbol",SharePointOpenLocation:"symbolFont SharePointOpenLocation-symbol",SharePointOpenDocument:"symbolFont SharePointOpenDocument-symbol",SendByEmail:"symbolFont SendByEmail-symbol",CreateQuote:"symbolFont CreateQuote-symbol",Reply:"symbolFont Reply-symbol",Warning:"symbolFont Warning-symbol",Play:"symbolFont Play-symbol",ExpandButton:"symbolFont ExpandButton-symbol",AssociatedArticle:"symbolFont AssociatedArticle-symbol",DisassociatedArticle:"symbolFont DisassociatedArticle-symbol",FormDesign:"symbolFont FormDesign-symbol",GlobalFilterClearAll:"symbolFont GlobalFilterClearAll-symbol",GlobalFilterExpandedRow:"symbolFont GlobalFilterExpandedRow-symbol",GlobalFilterCollapsedRow:"symbolFont GlobalFilterCollapsedRow-symbol",RelationshipAssistant:"symbolFont RelationshipAssistant-symbol",AutomaticSuggestions:"symbolFont AutomaticSuggestions-symbol",SemanticZoom:"symbolFont SemanticZoom-symbol",SemanticZoomMirrored:"symbolFont SemanticZoomMirrored-symbol",BackwardButton:"symbolFont BackwardButton-symbol",MultiSelect:"symbolFont MultiSelect-symbol",MultiSelectMirrored:"symbolFont MultiSelectMirrored-symbol",Spinning:"symbolFont Spinning-symbol",RetireProduct:"symbolFont RetireProduct-symbol",AddProduct:"symbolFont AddProduct-symbol",OfflineStatus:"symbolFont OfflineStatus-symbol",Abandon:"symbolFont Abandon-symbol",Reactivate:"symbolFont Reactivate-symbol",FinishStage:"symbolFont FinishStage-symbol",SortButton:"symbolFont SortButton-symbol",View:"symbolFont View-symbol",CreateView:"symbolFont CreateView-symbol",EditView:"symbolFont EditView-symbol",Flows:"symbolFont Flows-symbol",OpenEntityRecord:"symbolFont OpenEntityRecord-symbol",GuestUser:"symbolFont GuestUser-symbol",History:"symbolFont History-symbol",ReassignRecords:"symbolFont ReassignRecords-symbol",ManageRoles:"symbolFont ManageRoles-symbol",JoinTeams:"symbolFont JoinTeams-symbol",ChangeManager:"symbolFont ChangeManager-symbol",AddMembers:"symbolFont AddMembers-symbol",RemoveMembers:"symbolFont RemoveMembers-symbol",Download:"symbolFont Download-symbol",SetAsDefaultView:"symbolFont SetAsDefaultView-symbol",Pinned:"symbolFont Pinned-symbol",DistributionList:"symbolFont DistributionList-symbol",MergeRecords:"symbolFont MergeRecords-symbol",AssociateChildCase:"symbolFont AssociateChildCase-symbol",SetAsDefault:"symbolFont SetAsDefault-symbol",ConvertKnowledgeArticle:"symbolFont ConvertKnowledgeArticle-symbol",Messenger:"symbolFont Messenger-symbol",AssociateCategory:"symbolFont AssociateCategory-symbol",OfficeWaffle:"d365Shell OfficeWaffle-symbol",TripleColumn:"symbolFont TripleColumn-symbol",Tiles:"symbolFont Tiles-symbol",HideVisualFilter:"symbolFont HideVisualFilter-symbol",InteractiveDashboard:"symbolFont InteractiveDashboard-symbol",Dynamics365:"symbolFont Dynamics365-symbol",SalesLiterature:"symbolFont SalesLiterature-symbol",SelectButton:"symbolFont SelectButton-symbol",SelectButtonRTL:"symbolFont SelectButtonRTL-symbol",LockPricing:"symbolFont LockPricing-symbol",CreateInvoice:"symbolFont CreateInvoice-symbol",FulfillOrder:"symbolFont FulfillOrder-symbol",CancelInvoice:"symbolFont CancelInvoice-symbol",ActivateQuote:"symbolFont ActivateQuote-symbol",InvoicePaid:"symbolFont InvoicePaid-symbol",GetProducts:"symbolFont GetProducts-symbol",UnlockPricing:"symbolFont UnlockPricing-symbol",Checkbox:"symbolFont Checkbox-symbol",CheckboxComposite:"symbolFont CheckboxComposite-symbol",RightChevron:"symbolFont RightChevron-symbol",LeftChevron:"symbolFont LeftChevron-symbol",BackToStart:"symbolFont BackToStart-symbol",UntrackedEmail:"symbolFont UntrackedEmail-symbol",OpenEmail:"symbolFont OpenEmail-symbol",GlobalFilterCollapsedRowRTL:"symbolFont GlobalFilterCollapsedRowRTL-symbol",CancelOrder:"symbolFont CancelOrder-symbol",URL:"symbolFont URL-symbol",Ticker:"symbolFont Ticker-symbol",UseCurrentPricing:"symbolFont UseCurrentPricing-symbol",Process:"symbolFont Process-symbol",FirstPageButton:"symbolFont FirstPageButton-symbol",LinkedInLogo:"symbolFont LinkedInLogo-symbol",Health:"symbolFont Health-symbol",Family:"symbolFont Family-symbol",Sports:"symbolFont Sports-symbol",Entertainment:"symbolFont Entertainment-symbol",OOF:"symbolFont OOF-symbol",CarouselView:"symbolFont CarouselView-symbol",HeartEmpty:"symbolFont HeartEmpty-symbol",HeartFilled:"symbolFont HeartFilled-symbol",Follow:"symbolFont Follow-symbol",RunQuery:"symbolFont RunQuery-symbol",GroupAnd:"symbolFont GroupAnd-symbol",GroupOr:"symbolFont GroupOr-symbol",Ungroup:"symbolFont Ungroup-symbol",HideInSimpleMode:"symbolFont HideInSimpleMode-symbol",ShowInSimpleMode:"symbolFont ShowInSimpleMode-symbol",PinnedSolid:"symbolFont PinnedSolid-symbol",FilterSolid:"symbolFont FilterSolid-symbol",Bot:"symbolFont Bot-symbol",SystemDocumentTemplates:"symbolFont SystemDocumentTemplates-symbol",MyDocumentTemplates:"symbolFont MyDocumentTemplates-symbol",ViewAllMyDocumentTemplates:"symbolFont ViewAllMyDocumentTemplates-symbol",EnableSecurityRoles:"symbolFont EnableSecurityRoles-symbol",DocumentTemplateUpload:"symbolFont DocumentTemplateUpload-symbol",DocumentTemplateEdit:"symbolFont DocumentTemplateEdit-symbol",DocumentTemplateActivate:"symbolFont DocumentTemplateActivate-symbol",DocumentTemplateDeactivate:"symbolFont DocumentTemplateDeactivate-symbol",YammerIcon:"symbolFont YammerIcon-symbol",StopIcon:"symbolFont StopIcon-symbol",ReplaceContentIcon:"symbolFont ReplaceContentIcon-symbol",CloseDateComingSoon:"symbolFont CloseDateComingSoon-symbol",NearbyCustomers:"symbolFont NearbyCustomers-symbol",RelevantNews:"symbolFont RelevantNews-symbol",UpcomingMeeting:"symbolFont UpcomingMeeting-symbol",RecentMeeting:"symbolFont RecentMeeting-symbol",ReminderWithCall:"symbolFont ReminderWithCall-symbol",CardsTask:"symbolFont CardsTask-symbol",CardsQuote:"symbolFont CardsQuote-symbol",CardsOpportunity:"symbolFont CardsOpportunity-symbol",CardsInvoice:"symbolFont CardsInvoice-symbol",CardsDashboard:"symbolFont CardsDashboard-symbol",CardsLeads:"symbolFont CardsLeads-symbol",OpportunityNoActivity:"symbolFont OpportunityNoActivity-symbol",CaseNoActivity:"symbolFont CaseNoActivity-symbol",CompetitorMentioned:"symbolFont CompetitorMentioned-symbol",MeetingRequest:"symbolFont MeetingRequest-symbol",MissedCloseDate:"symbolFont MissedCloseDate-symbol",IssueDetection:"symbolFont IssueDetection-symbol",NoActivityWithAccount:"symbolFont NoActivityWithAccount-symbol",YesNo:"symbolFont YesNo-symbol",AgendaActivityServiceAppointment:"symbolFont AgendaActivityServiceAppointment-symbol",AgendaActivityFax:"symbolFont AgendaActivityFax-symbol",UpcomingFlight:"symbolFont UpcomingFlight-symbol",OpportunityAtRiskSentiment:"symbolFont OpportunityAtRiskSentiment-symbol",IconDue:"symbolFont IconDue-symbol",AddProductFamily:"symbolFont AddProductFamily-symbol",AddProductBundle:"symbolFont AddProductBundle-symbol",ProductPublish:"symbolFont ProductPublish-symbol",CloneProduct:"symbolFont CloneProduct-symbol",CloseGoal:"symbolFont CloseGoal-symbol",AlignWithFiscalPeriod:"symbolFont AlignWithFiscalPeriod-symbol",Connection:"symbolFont Connection-symbol",ConnectionToMe:"symbolFont ConnectionToMe-symbol",ConnectionToOther:"symbolFont ConnectionToOther-symbol",ProductUpsell:"symbolFont ProductUpsell-symbol",SubscriptionAdd:"symbolFont SubscriptionAdd-symbol",RefreshDevice:"symbolFont RefreshDevice-symbol",BulletListRemove:"symbolFont BulletListRemove-symbol",BulletListAdd:"symbolFont BulletListAdd-symbol",BulletListDownArrow:"symbolFont BulletListDownArrow-symbol",ScatterChart:"symbolFont ScatterChart-symbol",BarChartHorizontal:"symbolFont BarChartHorizontal-symbol",BarChartVertical:"symbolFont BarChartVertical-symbol",FunnelChart:"symbolFont FunnelChart-symbol",PieDouble:"symbolFont PieDouble-symbol",People:"symbolFont People-symbol",PeopleBlock:"symbolFont PeopleBlock-symbol",CreateQuickCampaign:"symbolFont CreateQuickCampaign-symbol",PageSolid:"symbolFont PageSolid-symbol",Page:"symbolFont Page-symbol",OpportunitiesList:"symbolFont OpportunitiesList-symbol",BrowseCards:"symbolFont BrowseCards-symbol",AALinkedInLogo:"symbolFont AALinkedInLogo-symbol",SendAndClose:"symbolFont SendAndClose-symbol",AdvFind:"symbolFont AdvFind-symbol",DoubleChevronLeft:"symbolFont DoubleChevronLeft-symbol",DoubleChevronRight:"symbolFont DoubleChevronRight-symbol",AreaChart:"symbolFont AreaChart-symbol",DonutChart:"symbolFont DonutChart-symbol",TagChart:"symbolFont TagChart-symbol",Teaser:"symbolFont Teaser-symbol",Clone:"symbolFont Clone-symbol",AreaChartMirrored:"symbolFont AreaChartMirrored-symbol",BarChartHorizontalMirrored:"symbolFont BarChartHorizontalMirrored-symbol",BarChartVerticalMirrored:"symbolFont BarChartVerticalMirrored-symbol",Recent:"symbolFont Recent-symbol",SharePointIcon:"symbolFont SharePointIcon-symbol",OneDriveIcon:"symbolFont OneDriveIcon-symbol",FolderSharedIcon:"symbolFont FolderSharedIcon-symbol",MSTeamsIcon:"symbolFont MSTeamsIcon-symbol",ScrollUpDown:"symbolFont AreaSwitcher-symbol",SendToCTI:"symbolFont SendToCTI-symbol",Letter:"symbolFont Letter-symbol",Fax:"symbolFont Fax-symbol",NewLetter:"symbolFont NewLetter-symbol",NewFax:"symbolFont NewFax-symbol",LetterIncoming:"symbolFont LetterIncoming-symbol",LetterOutgoing:"symbolFont LetterOutgoing-symbol",FaxIncoming:"symbolFont FaxIncoming-symbol",FaxOutgoing:"symbolFont FaxOutgoing-symbol",CreatePersonalView:"symbolFont CreatePersonalView-symbol",ViewHierarchy:"symbolFont ViewHierarchy-symbol",ProductPreview:"symbolFont ProductPreview-symbol",AddTerritoryMember:"symbolFont AddTerritoryMember-symbol",RemoveTerritoryMember:"symbolFont RemoveTerritoryMember-symbol",Report:"symbolFont Report-symbol",NewServiceActivity:"symbolFont NewServiceActivity-symbol",Recurrence:"symbolFont Recurrence-symbol",EditSeries:"symbolFont EditSeries-symbol",EndSeries:"symbolFont EndSeries-symbol",EditDefaultFilter:"symbolFont EditDefaultFilter-symbol",QueueItemDetail:"symbolFont QueueItemPick-symbol",ThumbsUp:"symbolFont ThumbsUp-symbol",ThumbsDown:"symbolFont ThumbsDown-symbol",Lead:"symbolFont Lead-symbol",TableLink:"symbolFont TableLink-symbol",TableGroup:"symbolFont TableGroup-symbol",ClearDefault:"symbolFont ClearDefault-symbol",SetDefault:"symbolFont SetDefault-symbol",SaveFilterToCurrentPersonalView:"symbolFont SaveFilterToCurrentPersonalView-symbol",SaveFilterToNewPersonalView:"symbolFont SaveFilterToNewPersonalView-symbol",Expand:"symbolFont Expand-symbol",ChromeMinimize:"symbolFont ChromeMinimize-symbol",ChromeMaximize:"symbolFont ChromeMaximize-symbol",ConnectionRoleManageRecordType:"symbolFont ConnectionRoleManageRecordType-symbol",Sync:"symbolFont Sync-symbol",ThumbsUpSolid:"symbolFont ThumbsUpSolid-symbol",ThumbsDownSolid:"symbolFont ThumbsDownSolid-symbol"};function i(e){return r[o[e]]}},function(e,t,n){"use strict";n.d(t,"a",function(){return c}),n.d(t,"b",function(){return p});var o,r=n(0),i=n(10),a=n(8),s=n(20),l=(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),c="openedPopups",u={position:"absolute",top:0,left:0,width:"100%",height:"100%"},p=function(e){function t(t){var n=e.call(this,t)||this;return n._seeMorePopupCount=null,n._initializeRootNode(),n}return l(t,e),t.prototype._getPopupId=function(){return(this.props.parentCustomControlId?this.props.parentCustomControlId+"|":"")+this.props.id+"_popupContainer"},t.prototype._initializeRootNode=function(){this._rootNode||(this._rootNode=document.createElement("section"),this._rootNode.id=this._getPopupId(),Object.assign(this._rootNode.style,{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}),this._rootNode.setAttribute(c,""),document.body.appendChild(this._rootNode))},t.prototype._getChildrenWithProps=function(e){var t=this;return e?e.map?e.map(function(e){return r.cloneElement(e,{rootPopupId:t._getPopupId()})}):r.cloneElement(e,{rootPopupId:this._getPopupId()}):null},t.prototype._renderToBody=function(){var e=this.props.style?this.props.style:u;null===this._seeMorePopupCount&&(this._seeMorePopupCount=s.a.getInstance().getPopupCount());var t=this._seeMorePopupCount>0;this._style||(this._style=t?Object.assign({zIndex:1},e):e),this._initializeRootNode()},t.prototype.componentWillReceiveProps=function(e){e.style!==this.props.style&&(this._style=null)},t.prototype.componentDidMount=function(){this._renderToBody(),this.props.openPopup&&this.props.openPopup(this._getPopupId())},t.prototype.componentWillUnmount=function(){document.getElementById(this._rootNode.id)&&document.body.removeChild(this._rootNode),this.props.closePopup&&this.props.closePopup(this._getPopupId()),this._rootNode=null},t.prototype.render=function(){return this.props.children?i.createPortal(r.createElement(a.a,{style:this._style,tabIndex:this.props.tabIndex},this._getChildrenWithProps(this.props.children)),this._rootNode):null},t}(r.Component)},function(e,t){(function(){var t,n,o,r,i,a,s=[].slice,l={}.hasOwnProperty;t=function(){var e,t,n,o,i,a;if(a=arguments[0],i=2<=arguments.length?s.call(arguments,1):[],r(Object.assign))Object.assign.apply(null,arguments);else for(e=0,n=i.length;e<n;e++)if(null!=(o=i[e]))for(t in o)l.call(o,t)&&(a[t]=o[t]);return a},r=function(e){return!!e&&"[object Function]"===Object.prototype.toString.call(e)},i=function(e){var t;return!!e&&("function"==(t=typeof e)||"object"===t)},n=function(e){return r(Array.isArray)?Array.isArray(e):"[object Array]"===Object.prototype.toString.call(e)},o=function(e){var t;if(n(e))return!e.length;for(t in e)if(l.call(e,t))return!1;return!0},a=function(e){var t,n;return i(e)&&(n=Object.getPrototypeOf(e))&&(t=n.constructor)&&"function"==typeof t&&t instanceof t&&Function.prototype.toString.call(t)===Function.prototype.toString.call(Object)},e.exports.assign=t,e.exports.isFunction=r,e.exports.isObject=i,e.exports.isArray=n,e.exports.isEmpty=o,e.exports.isPlainObject=a}).call(this)},function(e,t,n){e.exports=n(179)()},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var o=function(){function e(){}return e.LearningPathAttributeSuffix="lp-id",e.LearningPathAttributeName="data-"+e.LearningPathAttributeSuffix,e.CCF="CustomControlFramework",e}()},function(e,t,n){"use strict";n.r(t),n.d(t,"CultureInfo",function(){return o});var o=function(){function e(e,t,n){this.name=e,this.dateTimeFormat=n,this.numberFormat=t}return e._getCurrentCulture=function(){return"object"==typeof __cultureInfo?new e(__cultureInfo.name,__cultureInfo.numberFormat,__cultureInfo.dateTimeFormat):new e("en-US",{CurrencyDecimalDigits:2,CurrencyDecimalSeparator:".",IsReadOnly:!1,CurrencyGroupSizes:[3],NumberGroupSizes:[3],PercentGroupSizes:[3],CurrencyGroupSeparator:",",CurrencySymbol:"$",NaNSymbol:"NaN",CurrencyNegativePattern:0,NumberNegativePattern:1,PercentPositivePattern:0,PercentNegativePattern:0,NegativeInfinitySymbol:"-Infinity",NegativeSign:"-",NumberDecimalDigits:2,NumberDecimalSeparator:".",NumberGroupSeparator:",",CurrencyPositivePattern:0,PositiveInfinitySymbol:"Infinity",PositiveSign:"+",PercentDecimalDigits:2,PercentDecimalSeparator:".",PercentGroupSeparator:",",PercentSymbol:"%",PerMilleSymbol:"‰",NativeDigits:["0","1","2","3","4","5","6","7","8","9"],DigitSubstitution:1},{AMDesignator:"AM",Calendar:{MinSupportedDateTime:"@-62135568000000@",MaxSupportedDateTime:"@253402300799999@",AlgorithmType:1,CalendarType:1,Eras:[1],TwoDigitYearMax:2029,IsReadOnly:!1},DateSeparator:"/",FirstDayOfWeek:0,CalendarWeekRule:0,FullDateTimePattern:"dddd, MMMM dd, yyyy h:mm:ss tt",LongDatePattern:"dddd, MMMM dd, yyyy",LongTimePattern:"h:mm:ss tt",MonthDayPattern:"MMMM dd",PMDesignator:"PM",RFC1123Pattern:"ddd, dd MMM yyyy HH':'mm':'ss 'GMT'",ShortDatePattern:"M/d/yyyy",ShortTimePattern:"h:mm tt",SortableDateTimePattern:"yyyy'-'MM'-'dd'T'HH':'mm':'ss",TimeSeparator:":",UniversalSortableDateTimePattern:"yyyy'-'MM'-'dd HH':'mm':'ss'Z'",YearMonthPattern:"MMMM, yyyy",AbbreviatedDayNames:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],ShortestDayNames:["Su","Mo","Tu","We","Th","Fr","Sa"],DayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],AbbreviatedMonthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec",""],MonthNames:["January","February","March","April","May","June","July","August","September","October","November","December",""],IsReadOnly:!1,NativeCalendarName:"Gregorian Calendar",AbbreviatedMonthGenitiveNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec",""],MonthGenitiveNames:["January","February","March","April","May","June","July","August","September","October","November","December",""]})},e._getInvariantCulture=function(){return new e("",{CurrencyDecimalDigits:2,CurrencyDecimalSeparator:".",IsReadOnly:!0,CurrencyGroupSizes:[3],NumberGroupSizes:[3],PercentGroupSizes:[3],CurrencyGroupSeparator:",",CurrencySymbol:"¤",NaNSymbol:"NaN",CurrencyNegativePattern:0,NumberNegativePattern:1,PercentPositivePattern:0,PercentNegativePattern:0,NegativeInfinitySymbol:"-Infinity",NegativeSign:"-",NumberDecimalDigits:2,NumberDecimalSeparator:".",NumberGroupSeparator:",",CurrencyPositivePattern:0,PositiveInfinitySymbol:"Infinity",PositiveSign:"+",PercentDecimalDigits:2,PercentDecimalSeparator:".",PercentGroupSeparator:",",PercentSymbol:"%",PerMilleSymbol:"‰",NativeDigits:["0","1","2","3","4","5","6","7","8","9"],DigitSubstitution:1},{AMDesignator:"AM",Calendar:{MinSupportedDateTime:"@-62135568000000@",MaxSupportedDateTime:"@253402300799999@",AlgorithmType:1,CalendarType:1,Eras:[1],TwoDigitYearMax:2029,IsReadOnly:!0},DateSeparator:"/",FirstDayOfWeek:0,CalendarWeekRule:0,FullDateTimePattern:"dddd, dd MMMM yyyy HH:mm:ss",LongDatePattern:"dddd, dd MMMM yyyy",LongTimePattern:"HH:mm:ss",MonthDayPattern:"MMMM dd",PMDesignator:"PM",RFC1123Pattern:"ddd, dd MMM yyyy HH':'mm':'ss 'GMT'",ShortDatePattern:"MM/dd/yyyy",ShortTimePattern:"HH:mm",SortableDateTimePattern:"yyyy'-'MM'-'dd'T'HH':'mm':'ss",TimeSeparator:":",UniversalSortableDateTimePattern:"yyyy'-'MM'-'dd HH':'mm':'ss'Z'",YearMonthPattern:"yyyy MMMM",AbbreviatedDayNames:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],ShortestDayNames:["Su","Mo","Tu","We","Th","Fr","Sa"],DayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],AbbreviatedMonthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec",""],MonthNames:["January","February","March","April","May","June","July","August","September","October","November","December",""],IsReadOnly:!0,NativeCalendarName:"Gregorian Calendar",AbbreviatedMonthGenitiveNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec",""],MonthGenitiveNames:["January","February","March","April","May","June","July","August","September","October","November","December",""]})},e.CurrentCulture=e._getCurrentCulture(),e.InvariantCulture=e._getInvariantCulture(),e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var o=n(40),r=n(3),i=function(){function e(){this._subscribers=[],this.fireEvent=this.fireEvent.bind(this)}return Object.defineProperty(e,"_isIOS",{get:function(){return/iPad|iPhone|iPod/.test(navigator.userAgent)&&!window.MSStream},enumerable:!0,configurable:!0}),Object.defineProperty(e,"pointerDownEvent",{get:function(){return e._isIOS?"touchstart":"pointerdown"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"scrollEvent",{get:function(){return"scroll"},enumerable:!0,configurable:!0}),e.getInstance=function(){return e._instance||(e._instance=new e),e._instance},Object.defineProperty(e.prototype,"subscribers",{get:function(){return this._subscribers},enumerable:!0,configurable:!0}),e.prototype.addSubscribers=function(t){var n=this;setTimeout(function(){(Object(r.c)(n.subscribers)||n.subscribers.length<=0)&&(document.addEventListener(e.pointerDownEvent,n.fireEvent),t.onScroll&&document.addEventListener(e.scrollEvent,n.fireEvent,!0)),n._subscribers.push(t)},100)},e.prototype.removeSubscribers=function(t){this._subscribers=this._subscribers.filter(function(e){return e!==t}),(Object(r.c)(this.subscribers)||this.subscribers.length<=0)&&(document.removeEventListener(e.pointerDownEvent,this.fireEvent),document.removeEventListener(e.scrollEvent,this.fireEvent))},e.prototype.fireEvent=function(t){if(this.subscribers)for(var n=this._subscribers.length-1;n>=0;n--){var r=this.subscribers[n];if(r&&r.getComponent()&&(r.onPointerDown||r.onScroll)&&r.getComponent().offsetHeight>0){var i=r.isClickInsideSubscriber&&r.isClickInsideSubscriber(t);if(r.onPointerDown&&t.type===e.pointerDownEvent&&r.onPointerDown.bind(r,t)(),r.onScroll&&t.type===e.scrollEvent&&r.onScroll.bind(r,t)(),i)break}if(r&&r.type===o.a.Popup)break}},e}()},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";var o=n(65),r=Object.keys||function(e){var t=[];for(var n in e)t.push(n);return t};e.exports=p;var i=n(43);i.inherits=n(38);var a=n(111),s=n(81);i.inherits(p,a);for(var l=r(s.prototype),c=0;c<l.length;c++){var u=l[c];p.prototype[u]||(p.prototype[u]=s.prototype[u])}function p(e){if(!(this instanceof p))return new p(e);a.call(this,e),s.call(this,e),e&&!1===e.readable&&(this.readable=!1),e&&!1===e.writable&&(this.writable=!1),this.allowHalfOpen=!0,e&&!1===e.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",d)}function d(){this.allowHalfOpen||this._writableState.ended||o.nextTick(h,this)}function h(e){e.end()}Object.defineProperty(p.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(p.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed&&this._writableState.destroyed)},set:function(e){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=e,this._writableState.destroyed=e)}}),p.prototype._destroy=function(e,t){this.push(null),this.end(),o.nextTick(t,e)}},function(e,t,n){var o=n(233),r=n(238);e.exports=function(e,t){var n=r(e,t);return o(n)?n:void 0}},function(e,t,n){"use strict";n.r(t);var o=function(){function e(){}return e._getValueFromDictionary=function(e,t){return e[t]},e._toFormattedString=function(e,t,n){if(!t||0===t.length||"i"===t)return n&&n.name.length>0?this.toLocaleString():this.toString();function o(e,t,n){for(var o=e.length;o<t;o++)e=n?"0"+e:e+"0";return e}function r(e,t,n,r,i){var a=n[0],s=1,l=Math.pow(10,t),c=Math.round(e*l)/l;isFinite(c)||(c=e);var u,p=(e=c).toString(),d="",h=p.split(/e/i);p=h[0],u=h.length>1?parseInt(h[1],10):0,h=p.split("."),p=h[0],d=h.length>1?h[1]:"",u>0?(p+=(d=o(d,u,!1)).slice(0,u),d=d.substr(u)):u<0&&(d=(p=o(p,(u=-u)+1,!0)).slice(-u,p.length)+d,p=p.slice(0,-u)),d=t>0?i+(d=d.length>t?d.slice(0,t):o(d,t,!1)):"";for(var f=p.length-1,m="";f>=0;){if(0===a||a>f)return m.length>0?p.slice(0,f+1)+r+m+d:p.slice(0,f+1)+d;m=m.length>0?p.slice(f-a+1,f+1)+r+m:p.slice(f-a+1,f+1),f-=a,s<n.length&&(a=n[s],s++)}return p.slice(0,f+1)+r+m+d}var i=n.numberFormat,a=Math.abs(e).toString();t||(t="D");var s,l=-1;switch(t.length>1&&(l=parseInt(t.slice(1),10)),t.charAt(0)){case"d":case"D":s="n",-1!==l&&(a=o(""+a,l,!0)),e<0&&(a=(-a).toString());break;case"c":case"C":s=e<0?["($n)","-$n","$-n","$n-","(n$)","-n$","n-$","n$-","-n $","-$ n","n $-","$ n-","$ -n","n- $","($ n)","(n $)"][this._getValueFromDictionary(i,"CurrencyNegativePattern")]:["$n","n$","$ n","n $"][this._getValueFromDictionary(i,"CurrencyPositivePattern")],-1===l&&(l=this._getValueFromDictionary(i,"CurrencyDecimalDigits")),a=r(Math.abs(e),l,this._getValueFromDictionary(i,"CurrencyGroupSizes"),this._getValueFromDictionary(i,"CurrencyGroupSeparator"),this._getValueFromDictionary(i,"CurrencyDecimalSeparator"));break;case"n":case"N":s=e<0?["(n)","-n","- n","n-","n -"][this._getValueFromDictionary(i,"NumberNegativePattern")]:"n",-1===l&&(l=this._getValueFromDictionary(i,"NumberDecimalDigits")),a=r(Math.abs(e),l,this._getValueFromDictionary(i,"NumberGroupSizes"),this._getValueFromDictionary(i,"NumberGroupSeparator"),this._getValueFromDictionary(i,"NumberDecimalSeparator"));break;case"p":case"P":s=e<0?["-n %","-n%","-%n"][this._getValueFromDictionary(i,"PercentNegativePattern")]:["n %","n%","%n"][this._getValueFromDictionary(i,"PercentPositivePattern")],-1===l&&(l=this._getValueFromDictionary(i,"PercentDecimalDigits")),a=r(100*Math.abs(e),l,this._getValueFromDictionary(i,"PercentGroupSizes"),this._getValueFromDictionary(i,"PercentGroupSeparator"),this._getValueFromDictionary(i,"PercentDecimalSeparator"));break;default:throw Error("Res.formatBadFormatSpecifier")}for(var c=/n|\$|-|%/g,u="";;){var p=c.lastIndex,d=c.exec(s);if(u+=s.slice(p,d?d.index:s.length),!d)break;switch(d[0]){case"n":u+=a;break;case"$":u+=this._getValueFromDictionary(i,"CurrencySymbol");break;case"-":/[1-9]/.test(a)&&(u+=this._getValueFromDictionary(i,"NegativeSign"));break;case"%":u+=this._getValueFromDictionary(i,"PercentSymbol");break;default:throw Error("Invalid number format pattern")}}return u},e.localeFormat=function(e,t,n){return this._toFormattedString(e,t,n)},e}(),r=String.fromCharCode(41);function i(e,t,n){return o.localeFormat(e,"N"+(null!=n?n:function(e){return s(e,"NumberDecimalDigits")}(t)),t)}function a(e,t,n){var o=Math.abs(e);return String.format(function(e){switch(e){case 1:return"-{0}";case 2:return"-"+r+"{0}";case 3:return"{0}-";case 4:return"{0}"+r+"-";default:return"({0})"}}(s(t,"NumberNegativePattern")),i(o,t,n))}function s(e,t){return e.numberFormat[t]}function l(e,t,n){var r=n;if(null==r){var i=function(e){return s(e,"CurrencyDecimalDigits")}(t);null==r&&(r=i)}return o.localeFormat(e,"C"+r,t)}function c(e){return p(e,"ShortDatePattern","DateSeparator","/")}function u(e){return p(e,"ShortTimePattern","TimeSeparator",":")}function p(e,t,n,o){return e.dateTimeFormat[t].toString().replace(new RegExp(o,"g"),e.dateTimeFormat[n].toString())}var d=function(){function e(e){this._text="",e&&(this._text=e.toString())}return e.prototype.append=function(e){this._text+=e},e.prototype.toString=function(){return this._text},e}(),h=function(){function e(){}return e._getValueFromDictionary=function(e,t){return e[t]},e._appendPreOrPostMatch=function(e,t){for(var n=0,o=!1,r=0,i=e.length;r<i;r++){var a=e.charAt(r);switch(a){case"'":o?t.append("'"):n++,o=!1;break;case"\\":o&&t.append("\\"),o=!o;break;default:t.append(a),o=!1}}return n},e._expandFormat=function(t,n){n||(n="F");var o=n.length;if(1===o)switch(n){case"d":return e._getValueFromDictionary(t,"ShortDatePattern");case"D":return e._getValueFromDictionary(t,"LongDatePattern");case"t":return e._getValueFromDictionary(t,"ShortTimePattern");case"T":return e._getValueFromDictionary(t,"LongTimePattern");case"f":return e._getValueFromDictionary(t,"LongDatePattern")+" "+e._getValueFromDictionary(t,"ShortTimePattern");case"F":return e._getValueFromDictionary(t,"FullDateTimePattern");case"M":case"m":return e._getValueFromDictionary(t,"MonthDayPattern");case"s":return e._getValueFromDictionary(t,"SortableDateTimePattern");case"Y":case"y":return e._getValueFromDictionary(t,"YearMonthPattern");default:throw Error("Res.formatInvalidString")}else 2===o&&"%"===n.charAt(0)&&(n=n.charAt(1));return n},e._getEra=function(e,t){if(!t)return 0;for(var n,o=e.getTime(),r=0;r<4;r+=4)if(null===(n=t[r+2])||o>=n)return r;return 0},e._getEraYear=function(t,n,o,r){var i=t.getFullYear();return!r&&e._getValueFromDictionary(n,"eras")&&(i-=e._getValueFromDictionary(n,"eras")[o+3]),i},e._getTokenRegExp=function(){return/\/|dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|y|hh|h|HH|H|mm|m|ss|s|tt|t|fff|ff|f|zzz|zz|z|gg|g/g},e._toFormattedString=function(t,n,o){var r=o.dateTimeFormat,i=e._getValueFromDictionary(r,"Calendar").convert;if(!n||!n.length||"i"===n){if(o&&o.name.length){if(i)return e._toFormattedString(t,e._getValueFromDictionary(r,"FullDateTimePattern"),o);var a=new Date(t.getTime()),s=e._getEra(t,e._getValueFromDictionary(r,"eras"));return a.setFullYear(e._getEraYear(t,r,s)),a.toLocaleString()}return t.toString()}var l=e._getValueFromDictionary(r,"eras"),c="s"===n;n=e._expandFormat(r,n);var u,p,h,f=new d;function m(e){return e<10?"0"+e:e.toString()}function y(e){return e<10?"00"+e:e<100?"0"+e:e.toString()}var b=/([^d]|^)(d|dd)([^d]|$)/g;function g(){return p||h?p:(p=b.test(n),h=!0,p)}var _,v,C=0,E=e._getTokenRegExp();function I(e,t){if(_)return _[t];switch(t){case 0:return e.getFullYear();case 1:return e.getMonth();case 2:return e.getDate()}}for(!c&&i&&(_=i.fromGregorian(t));;){var P=E.lastIndex,w=E.exec(n),S=n.slice(P,w?w.index:n.length);if(C+=e._appendPreOrPostMatch(S,f),!w)break;if(C%2!=1)switch(w[0]){case"dddd":f.append(e._getValueFromDictionary(r,"DayNames")[t.getDay()]);break;case"ddd":f.append(e._getValueFromDictionary(r,"AbbreviatedDayNames")[t.getDay()]);break;case"dd":p=!0,f.append(m(I(t,2)));break;case"d":p=!0,f.append(I(t,2).toString());break;case"MMMM":f.append(e._getValueFromDictionary(r,"MonthGenitiveNames")&&g()?e._getValueFromDictionary(r,"MonthGenitiveNames")[I(t,1)]:e._getValueFromDictionary(r,"MonthNames")[I(t,1)]);break;case"MMM":f.append(e._getValueFromDictionary(r,"AbbreviatedMonthGenitiveNames")&&g()?e._getValueFromDictionary(r,"AbbreviatedMonthGenitiveNames")[I(t,1)]:e._getValueFromDictionary(r,"AbbreviatedMonthNames")[I(t,1)]);break;case"MM":f.append(m(I(t,1)+1));break;case"M":f.append((I(t,1)+1).toString());break;case"yyyy":f.append((v=_?_[0]:e._getEraYear(t,r,e._getEra(t,l),c))<10?"000"+v:v<100?"00"+v:v<1e3?"0"+v:v.toString());break;case"yy":f.append(m((_?_[0]:e._getEraYear(t,r,e._getEra(t,l),c))%100));break;case"y":f.append(_?_[0].toString():(e._getEraYear(t,r,e._getEra(t,l),c)%100).toString());break;case"hh":0===(u=t.getHours()%12)&&(u=12),f.append(m(u));break;case"h":0===(u=t.getHours()%12)&&(u=12),f.append(u.toString());break;case"HH":f.append(m(t.getHours()));break;case"H":f.append(t.getHours().toString());break;case"mm":f.append(m(t.getMinutes()));break;case"m":f.append(t.getMinutes().toString());break;case"ss":f.append(m(t.getSeconds()));break;case"s":f.append(t.getSeconds().toString());break;case"tt":f.append(t.getHours()<12?e._getValueFromDictionary(r,"AMDesignator"):e._getValueFromDictionary(r,"PMDesignator"));break;case"t":f.append((t.getHours()<12?e._getValueFromDictionary(r,"AMDesignator"):e._getValueFromDictionary(r,"PMDesignator")).charAt(0));break;case"f":f.append(y(t.getMilliseconds()).charAt(0));break;case"ff":f.append(y(t.getMilliseconds()).substr(0,2));break;case"fff":f.append(y(t.getMilliseconds()));break;case"z":u=t.getTimezoneOffset()/60,f.append((u<=0?"+":"-")+Math.floor(Math.abs(u)));break;case"zz":u=t.getTimezoneOffset()/60,f.append((u<=0?"+":"-")+m(Math.floor(Math.abs(u))));break;case"zzz":u=t.getTimezoneOffset()/60,f.append((u<=0?"+":"-")+m(Math.floor(Math.abs(u)))+":"+m(Math.abs(t.getTimezoneOffset()%60)));break;case"g":case"gg":e._getValueFromDictionary(r,"eras")&&f.append(e._getValueFromDictionary(r,"eras")[e._getEra(t,l)+1]);break;case"/":f.append(e._getValueFromDictionary(r,"DateSeparator"));break;default:throw Error("Invalid date format pattern")}else f.append(w[0])}return f.toString()},e._getParseRegExp=function(t,n){var o=this._expandFormat(t,n);o=o.replace(/([\^\$\.\*\+\?\|\[\]\(\)\{\}])/g,"\\\\$1");for(var r,i=new d("^"),a=[],s=0,l=0,c=this._getTokenRegExp();null!==(r=c.exec(o));){var u=o.slice(s,r.index);if(s=c.lastIndex,(l+=this._appendPreOrPostMatch(u,i))%2!=1){switch(r[0]){case"dddd":case"ddd":case"MMMM":case"MMM":case"gg":case"g":i.append("(\\D+)");break;case"tt":case"t":i.append("(\\D*)");break;case"yyyy":i.append("(\\d{4})");break;case"fff":i.append("(\\d{3})");break;case"ff":i.append("(\\d{2})");break;case"f":i.append("(\\d)");break;case"dd":case"d":case"MM":case"M":case"yy":case"y":case"HH":case"H":case"hh":case"h":case"mm":case"m":case"ss":case"s":i.append("(\\d\\d?)");break;case"zzz":i.append("([+-]?\\d\\d?:\\d{2})");break;case"zz":case"z":i.append("([+-]?\\d\\d?)");break;case"/":i.append("(\\"+e._getValueFromDictionary(t,"DateSeparator")+")");break;default:throw Error("Invalid date format pattern")}a.push(r[0])}else i.append(r[0])}return this._appendPreOrPostMatch(o.slice(s),i),i.append("$"),{regExp:i.toString().replace(/\s+/g,"\\s+"),groups:a}},e._toUpper=function(e){return e.split(" ").join(" ").toUpperCase()},e._toUpperArray=function(e){for(var t=[],n=0,o=e.length;n<o;n++)t[n]=this._toUpper(e[n]);return t},e._getIndex=function(e,t,n){var o=this._toUpper(e),r=t.indexOf(o);return-1===r&&(r=n.indexOf(o)),r},e._getMonthIndex=function(e,t){var n=this._toUpperArray(e.dateTimeFormat.MonthNames),o=this._toUpperArray(e.dateTimeFormat.MonthGenitiveNames);return this._getIndex(t,n,o)},e._getAbbrMonthIndex=function(t,n){var o=this._toUpperArray(e._getValueFromDictionary(t.dateTimeFormat,"AbbreviatedMonthNames")),r=this._toUpperArray(e._getValueFromDictionary(t.dateTimeFormat,"AbbreviatedMonthGenitiveNames"));return this._getIndex(n,o,r)},e._getDayIndex=function(t,n){return this._toUpperArray(e._getValueFromDictionary(t.dateTimeFormat,"DayNames")).indexOf(this._toUpper(n))},e._getAbbrDayIndex=function(t,n){return this._toUpperArray(e._getValueFromDictionary(t.dateTimeFormat,"AbbreviatedDayNames")).indexOf(this._toUpper(n))},e._expandYear=function(t,n){var o=new Date,r=this._getEra(o,e._getValueFromDictionary(t,"eras"));if(n<100){var i=this._getEraYear(o,t,r);(n+=i-i%100)>e._getValueFromDictionary(e._getValueFromDictionary(t,"Calendar"),"TwoDigitYearMax")&&(n-=100)}return n},e.localeFormat=function(t,n,o){return e._toFormattedString(t,n,o)},e.parse=function(t,n,o){t=t.trim();var r=o.dateTimeFormat,i=this._getParseRegExp(r,n),a=new RegExp(i.regExp).exec(t);if(null===a)return null;for(var s,l=i.groups,c=null,u=null,p=null,d=null,h=null,f=0,m=0,y=0,b=0,g=null,_=!1,v=0,C=l.length;v<C;v++){var E=a[v+1];if(E)switch(l[v]){case"dd":case"d":if((d=parseInt(E,10))<1||d>31)return null;break;case"MMMM":if((p=this._getMonthIndex(o,E))<0||p>11)return null;break;case"MMM":if((p=this._getAbbrMonthIndex(o,E))<0||p>11)return null;break;case"M":case"MM":if((p=parseInt(E,10)-1)<0||p>11)return null;break;case"y":case"yy":if((u=this._expandYear(r,parseInt(E,10)))<0||u>9999)return null;break;case"yyyy":if((u=parseInt(E,10))<0||u>9999)return null;break;case"h":case"hh":if(12===(f=parseInt(E,10))&&(f=0),f<0||f>11)return null;break;case"H":case"HH":if((f=parseInt(E,10))<0||f>23)return null;break;case"m":case"mm":if((m=parseInt(E,10))<0||m>59)return null;break;case"s":case"ss":if((y=parseInt(E,10))<0||y>59)return null;break;case"tt":case"t":var I=E.toUpperCase();if(!(_=I===e._getValueFromDictionary(r,"PMDesignator").toUpperCase())&&I!==e._getValueFromDictionary(r,"AMDesignator").toUpperCase())return null;break;case"f":if((b=100*parseInt(E,10))<0||b>999)return null;break;case"ff":if((b=10*parseInt(E,10))<0||b>999)return null;break;case"fff":if((b=parseInt(E,10))<0||b>999)return null;break;case"dddd":if((h=this._getDayIndex(o,E))<0||h>6)return null;break;case"ddd":if((h=this._getAbbrDayIndex(o,E))<0||h>6)return null;break;case"zzz":var P=E.split(/:/);if(2!==P.length)return null;if((s=parseInt(P[0],10))<-12||s>13)return null;var w=parseInt(P[1],10);if(w<0||w>59)return null;g=60*s+(E.startsWith("-")?-w:w);break;case"z":case"zz":if((s=parseInt(E,10))<-12||s>13)return null;g=60*s;break;case"g":case"gg":var S=E,O=e._getValueFromDictionary(r,"eras");if(!S||!O)return null;S=S.toLowerCase().trim();for(var D=0,T=Object.keys(O).length;D<T;D+=4)if(S===O[D+1].toLowerCase()){c=D;break}if(null===c)return null}}var F,x=new Date,M=e._getValueFromDictionary(r,"Calendar").convert;if(F=M?M.fromGregorian(x)[0]:x.getFullYear(),null===u?u=F:e._getValueFromDictionary(r,"eras")&&(u+=e._getValueFromDictionary(r,"eras")[(c||0)+3]),null===p&&(p=0),null===d&&(d=1),M){if(null===(x=M.toGregorian(u,p,d)))return null}else{if(x.setFullYear(u,p,d),x.getDate()!==d)return null;if(null!==h&&x.getDay()!==h)return null}if(_&&f<12&&(f+=12),x.setHours(f,m,y,b),null!==g){var A=x.getMinutes()-(g+x.getTimezoneOffset());x.setHours(x.getHours()+A/60,A%60)}return x},e}(),f=n(29);n.d(t,"SimpleFormatter",function(){return m});var m=function(){function e(){}return e.ParseDateFromString=function(e,t,n){var o=t;o&&(o=o.toLowerCase());var r=e.indexOf(" ");switch(t){case"date":case"dateonly":r>0&&(o="datetime");break;case"datetime":case"dateandtime":r<0&&(o="date")}var i=function(e,t){switch(t){case"datetime":case"dateandtime":return c(e)+" "+u(e);case"date":case"dateonly":default:return c(e)}}(n,o);return h.parse(e,i,n)},e.formatIntegerValue=function(t,n){return e.formatDecimalValue(t,n,0)},e.formatCurrencyValue=function(e,t,n,o){var r=l(e,t,o);return null!=n?r.replace(function(e){return s(e,"CurrencySymbol")}(t),n):r},e.formatShortDateValue=function(e,t){return h.localeFormat(e,"d",t)},e.formatLongDateValue=function(e,t){return h.localeFormat(e,"D",t)},e.formatDecimalValue=function(e,t,n){return e<0?a(e,t,n):i(e,t,n)},e.formatSortableDateValue=function(t){return e.formatSortableDateTimeValue(t).split("T")[0]},e.formatSortableDateTimeValue=function(e){return h.localeFormat(e,"s",f.CultureInfo.CurrentCulture)},e.formatShortDateTimeValue=function(e,t){var n=c(t),o=u(t);return h.localeFormat(e,n+" "+o,t)},e.formatDateLongAbbreviated=function(e,t){var n=function(e){return p(e,"LongDatePattern","DateSeparator","/")}(t);return n=(n=n.replace("MMMM","MMM")).replace("dddd","ddd"),h.localeFormat(e,n,t)},e.formatDateYearMonthValue=function(e,t){return h.localeFormat(e,"Y",t)},e.formatLanguageValue=function(e,t){return isNaN(e)||e<-1?void 0:null===e||t&&t[e]?t[e]:e.toString()},e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var o=n(1),r=n(14),i=n(7),a=n(2),s=function(){function e(t){this._commandManagerPromises={},this._commandManagerIds=[],this._memoizedProps={},this._datasetWrappers={},this._ownProps=t,this._commandManagerId=t.id+":"+t.controlId,this._externalCommandManagerId=t.externalCommandManagerId,this._externalCommandManagerPromise=t.externalCommandPromise,this._createCommandManagerUXComponent=t.actions.createCommandManagerUXComponent(),e._commandingWrapperMap[this._commandManagerId]=this}return e.prototype.addDataSetWrapper=function(e){var t=e.getLatestData().getViewId(),n=(t=t?t.toLowerCase():"")+":"+e.getEntityTypeName();this._datasetWrappers[n]=e},e.prototype.retrieveRecordCommandForDatasetWrapper=function(e,t,n,o,s,l,c){var u=this,p=this._commandManagerId+":"+t,d=this,h=this._ownProps.contextToken,f=this._ownProps&&this._ownProps.manifest&&this._ownProps.manifest.ConstructorName?this._ownProps.manifest.ConstructorName:null,m=this._ownProps.id;if(!t)return a.default.Diagnostics.traceError(i.a+".Models.CommandingWrapper","Entity Type Name is undefined"),Promise.reject("Entity Type Name is undefined");if(this._externalCommandManagerId)return this._externalCommandInitialized?this._ownProps.actions.retrieveRecordCommand(e,this._externalCommandManagerId,h,n,o,s,l,f,c,m):this._externalCommandManagerPromise&&this._externalCommandManagerPromise.isResolved()?(this._externalCommandInitialized=!0,d._ownProps.actions.retrieveRecordCommand(e,d._externalCommandManagerId,h,n,o,s,l,f,c,m)):this._externalCommandManagerPromise.then(function(){return d._externalCommandInitialized=!0,d._ownProps.actions.retrieveRecordCommand(e,d._externalCommandManagerId,h,n,o,s,l,f,c,m)},function(){var e=new Error("Command bar initialization failed");throw a.default.Reporting.reportFailure(i.a+".Models",e,"Rejected promise",[{name:"etn",value:t},{name:"commandManagerId",value:u._commandManagerId},{name:"APIName",value:i.a+".Models.CommandingWrapper.retrieveRecordCommandForDatasetWrapper"}]),e});if(this._commandManagerPromises[t])return this._commandManagerPromises[t].then(function(){return d._ownProps.actions.retrieveRecordCommand(e,p,h,n,o,s,l,f,c,m)});if(this._commandManagerIds.indexOf(p)>-1)return this._ownProps.actions.retrieveRecordCommand(e,p,h,n,o,s,l,f,c,m);var y=r.a.createPerformanceEvent("CommandingWrapper.CreateCommandManager").startStopwatch({controlId:this._ownProps.controlId,commandManagerId:p}),b=d._ownProps.actions.initializeCommandManager(m,this._ownProps.contextToken,this._ownProps.controlId,p);return this._commandManagerPromises[t]=b,b.then(function(){return y(),d._commandManagerPromises[t]=null,d._ownProps.actions.retrieveRecordCommand(e,p,h,n,o,s,l,f,c,m)})},e.prototype.retrieveRecordCommand=function(e,t,n,o,r,s,l){var c=this._datasetWrappers[(e?e.toLowerCase():"")+":"+t];if(!c)return a.default.Diagnostics.traceError(i.a+".retrieveRecordCommand","No associated dataset, promise rejected"),Promise.reject(0);var u=c.getLatestData().records;return this.retrieveRecordCommandForDatasetWrapper(u,t,n,o,r,s,l)},e.prototype.getRibbonId=function(e,t,n){return("form"!==t.toLowerCase()&&"editform"!==t.toLowerCase()?"HomePageGrid:":n?"SubGridAssociated:":"SubGridStandard:")+e},e.prototype.getDefaultConfigParameters=function(e){if(e.configuration&&e.configuration.Parameters){var t=e.configuration.Parameters;for(var n in t){var r=t[n];if(r.Type===o.ManifestType.Grid||r.Type===o.ManifestType.TimelineWall)return r}}},e.prototype.populateCommandManagerProps=function(e,t,n){var o=this.getDefaultConfigParameters(t),r=n||(o?o.TargetEntityType||o.EntityName:null),i=o?!!o.RelationshipName:null;if(e.id=t.id,void 0===e.ribbonId)if(t.formInfo&&t.formInfo.RibbonId)e.ribbonId=t.formInfo.RibbonId;else{var a=t.pageType.toLowerCase();e.ribbonId=this.getRibbonId(r,a,i)}e.commandManagerId=this._commandManagerId+":"+r,e.key=e.key||this._ownProps.controlId+"-"+r+"-commandbar",e.mainMenuLength=e.mainMenuLength||3,e.contextToken=e.contextToken||t.contextToken,e.customControlType=this._ownProps&&this._ownProps.manifest&&this._ownProps.manifest.ConstructorName?this._ownProps.manifest.ConstructorName:null},e.prototype.createCommandBar=function(e){return this._commandManagerIds.push(e.commandManagerId),this._createCommandManagerUXComponent(e)},e.prototype.createHiddenCommandManager=function(e,t){var n,o=e.split(":")[2];return this._memoizedProps[e]?n=this._memoizedProps[e]:(n={},this._memoizedProps[e]=n,n.isHidden=!0,n.ribbonId=t,n.metaDataLoadedPromise=this._commandManagerPromises[o],this.populateCommandManagerProps(n,this._ownProps,o)),this.createCommandBar(n)},e.getWrapperByCommandManagerId=function(t){return e._commandingWrapperMap[t]},e.prototype.getCommandManagerId=function(){return this._commandManagerId},e.prototype.linkParameterMethod=function(e){e.retrieveRecordCommand=this.retrieveRecordCommandForDatasetWrapper.bind(this,e.records,e.getTargetEntityType())},e.prototype.unmount=function(){delete e._commandingWrapperMap[this._commandManagerId]},e._commandingWrapperMap={},e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return p});var o,r=n(15),i=n(5),a=n(9),s=n(6),l=n(4),c=(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return c(t,e),t.prototype.getElementName=function(){return"button"},t.prototype.getElementProps=function(){var e={type:"button"};return e[a.a]=this.props.accessKey,this.props.disabled&&(e[a.C]=!0),e},t.prototype.getElementClassName=function(){var t=e.prototype.getElementClassName.call(this);return this.props&&this.props.className&&(t+=" "+this.props.className),t},t.prototype.getFlexClassName=function(e){return Object(r.b)(e?e.display:null)},t.prototype.getElementStyle=function(){if(this.props.style)return Object.assign({},Object(r.a)(this.props.style))},t.displayName="Button",t}(i.a),p=s.connect(l.a)(u)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){for(var o=0,r=e.length;o<r;++o)n=t(n,e[o]);return n},e.exports=t.default},function(e,t){"function"==typeof Object.create?e.exports=function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:e.exports=function(e,t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(107),r=n(191).parseString,i=n(117),a=n(215),s=n(18),l=n(21);function c(e,t){return new Promise(function(n,o){t(e).then(function(t){r(t,function(t,r){t?o(s.translateA(l.strings.error_parse_resource_string.key,[e])+": "+t.message):(r&&r.root&&r.root.data&&r.root.data.forEach(function(e){i.ResourceStrings[e.$.name]=e.value[0]}),n())})})})}function u(e){return new Promise(function(t,n){var o=new XMLHttpRequest;o.open("GET",e,!0),o.onreadystatechange=function(){o.readyState===XMLHttpRequest.DONE&&(200===o.status?t(o.responseText):n(s.translateA(l.strings.error_http_get_resource.key,[e,o.status])+": "+o.statusText))},o.send()})}t.LoadManifest=function(e){var t={};return new Promise(function(n,o){e("ControlManifest.xml").then(function(e){r(e,function(e,r){if(e||!r)o(s.translate(l.strings.error_parsing_control_manifest.key));else{var i=r.manifest.control[0];t.manifest={control:i},t.manifest.control.resources=i.resources[0],t.manifest.control["feature-usage"]=i["feature-usage"]&&i["feature-usage"][0],n(t)}})},function(e){o(e)})})},t.ProcessResourcesInOrder=function(e,t){var n=Promise.resolve();return e&&e.length>0&&e.sort(function(e,t){return e.LoadOrder-t.LoadOrder}).forEach(function(e){n=n.then(function(){return t(e.Name,document)})}),n},t.loadResourceFile=function(e,t){return new Promise(function(n,r){var i=o.extname(e),a=function(){console.log(s.translateA(l.strings.resource_file_loaded.key,[e])),n()},p=function(t){var n=s.translateA(l.strings.error_resource_load.key,[e])+(t?": "+t:"");console.warn(n),r(n)};switch(i){case".js":var d=t.createElement("script");d.src=e,d.type="text/javascript",d.onload=a,d.onerror=p,t.getElementsByTagName("head")[0].appendChild(d);break;case".css":var h=t.createElement("link");h.rel="stylesheet",h.type="text/css",h.href=e,h.media="all",h.onload=a,h.onerror=p,t.getElementsByTagName("head")[0].appendChild(h);break;case".png":case".jpg":case".jpeg":var f=t.createElement("img");f.src=e,f.alt="Control's image resource",f.onload=a,f.onerror=p,t.getElementsByTagName("head")[0].appendChild(f);break;case".resx":c(e,u).then(a,function(e){p(e)});break;default:console.warn(s.translateA(l.strings.error_resource_type_not_supported.key,[e,i])),n()}})},t.loadResourceStrings=c,t.getResourceInvoker=u,t.ParseCsvFile=function(e,t){var n=a.parse(t,{header:!0,skipEmptyLines:!0});return{filename:e,columns:(n&&n.meta?n.meta.fields:[]).filter(function(e){return 0!==e.indexOf("(Do Not Modify)")}),rawData:n.data,errors:n.errors.map(function(e){return"["+s.translate(l.strings.row.key)+" "+e.row+"] "+e.message})}},t.ReadFileContent=function(e){var t=new FileReader;return new Promise(function(n,o){t.onload=function(e){n(e.target.result)},t.onerror=function(){o(""+s.translateA(l.strings.error_read_file.key,[e.name]))},t.readAsText(e)})}},function(e,t,n){"use strict";var o;n.d(t,"a",function(){return o}),function(e){e[e.Flyout=1]="Flyout",e[e.Popup=2]="Popup"}(o||(o={}))},function(e,t,n){"use strict";n.d(t,"a",function(){return c});var o,r=n(5),i=n(2),a=n(7),s=(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),l=a.a+".Primitive.FontIcon",c=function(e){function t(t){var n=e.call(this,t)||this;if(t&&void 0===t.type){var o=Error("FontIcon type property cannot be null");throw i.default.Reporting.reportFailure(l,o),o}return n}return s(t,e),t.prototype.getElementName=function(){return"span"},t.prototype.getElementClassName=function(){var e=this.props.styles?" "+this.props.styles:"";return this.getSymbolClassName(this.props.type)+e},t.displayName="FontIcon",t}(r.a)},function(e,t){var n,o,r=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function a(){throw new Error("clearTimeout has not been defined")}function s(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{o="function"==typeof clearTimeout?clearTimeout:a}catch(e){o=a}}();var l,c=[],u=!1,p=-1;function d(){u&&l&&(u=!1,l.length?c=l.concat(c):p=-1,c.length&&h())}function h(){if(!u){var e=s(d);u=!0;for(var t=c.length;t;){for(l=c,c=[];++p<t;)l&&l[p].run();p=-1,t=c.length}l=null,u=!1,function(e){if(o===clearTimeout)return clearTimeout(e);if((o===a||!o)&&clearTimeout)return o=clearTimeout,clearTimeout(e);try{o(e)}catch(t){try{return o.call(null,e)}catch(t){return o.call(this,e)}}}(e)}}function f(e,t){this.fun=e,this.array=t}function m(){}r.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new f(e,t)),1!==c.length||u||s(h)},f.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=m,r.addListener=m,r.once=m,r.off=m,r.removeListener=m,r.removeAllListeners=m,r.emit=m,r.prependListener=m,r.prependOnceListener=m,r.listeners=function(e){return[]},r.binding=function(e){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(e){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},function(e,t,n){(function(e){function n(e){return Object.prototype.toString.call(e)}t.isArray=function(e){return Array.isArray?Array.isArray(e):"[object Array]"===n(e)},t.isBoolean=function(e){return"boolean"==typeof e},t.isNull=function(e){return null===e},t.isNullOrUndefined=function(e){return null==e},t.isNumber=function(e){return"number"==typeof e},t.isString=function(e){return"string"==typeof e},t.isSymbol=function(e){return"symbol"==typeof e},t.isUndefined=function(e){return void 0===e},t.isRegExp=function(e){return"[object RegExp]"===n(e)},t.isObject=function(e){return"object"==typeof e&&null!==e},t.isDate=function(e){return"[object Date]"===n(e)},t.isError=function(e){return"[object Error]"===n(e)||e instanceof Error},t.isFunction=function(e){return"function"==typeof e},t.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},t.isBuffer=e.isBuffer}).call(this,n(79).Buffer)},function(e,t){e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},function(e,t){e.exports=function(e){return null!=e&&"object"==typeof e}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.constants={formFactor:"formFactor",formFactorOptions:[{name:"Web",value:1},{name:"Tablet",value:2},{name:"Phone",value:3},{name:"Unknown",value:0}],controlContainerHeight:"controlContainerHeight",controlContainerWidth:"controlContainerWidth",controlContainerMaxWidth:"controlContainerMaxWidth",controlContainerMaxHeight:"controlContainerMaxHeight",defaultOptionValue:"defaultOption"}},function(e,t,n){!function(e,t){"use strict";function n(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}function o(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}function r(e,t,n){return t&&o(e.prototype,t),n&&o(e,n),e}function i(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function a(){return(a=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e}).apply(this,arguments)}function s(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function");e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,writable:!0,configurable:!0}}),t&&c(e,t)}function l(e){return(l=Object.setPrototypeOf?Object.getPrototypeOf:function(e){return e.__proto__||Object.getPrototypeOf(e)})(e)}function c(e,t){return(c=Object.setPrototypeOf||function(e,t){return e.__proto__=t,e})(e,t)}function u(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},i=Object.keys(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(o=0;o<i.length;o++)n=i[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}function p(e){if(void 0===e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return e}function d(e,t){return!t||"object"!=typeof t&&"function"!=typeof t?p(e):t}function h(e){return function(e){if(Array.isArray(e)){for(var t=0,n=new Array(e.length);t<e.length;t++)n[t]=e[t];return n}}(e)||function(e){if(Symbol.iterator in Object(e)||"[object Arguments]"===Object.prototype.toString.call(e))return Array.from(e)}(e)||function(){throw new TypeError("Invalid attempt to spread non-iterable instance")}()}var f;!function(e){e.Accordion="Accordion",e.AccordionItem="AccordionItem",e.AccordionItemButton="AccordionItemButton",e.AccordionItemHeading="AccordionItemHeading",e.AccordionItemPanel="AccordionItemPanel"}(f||(f={}));var m=f,y=function e(t){var o=this,r=t.expanded,a=void 0===r?[]:r,s=t.allowMultipleExpanded,l=void 0!==s&&s,c=t.allowZeroExpanded,u=void 0!==c&&c;n(this,e),i(this,"expanded",void 0),i(this,"allowMultipleExpanded",void 0),i(this,"allowZeroExpanded",void 0),i(this,"toggleExpanded",function(e){if(o.isItemDisabled(e))return o;var t=o.isItemExpanded(e);return t?o.augment({expanded:o.expanded.filter(function(t){return t!==e})}):o.augment({expanded:o.allowMultipleExpanded?[].concat(h(o.expanded),[e]):[e]})}),i(this,"isItemDisabled",function(e){var t=o.isItemExpanded(e),n=1===o.expanded.length;return Boolean(t&&!o.allowZeroExpanded&&n)}),i(this,"isItemExpanded",function(e){return-1!==o.expanded.findIndex(function(t){return t===e})}),i(this,"getPanelAttributes",function(e){var t=o.isItemExpanded(e);return{role:o.allowMultipleExpanded?void 0:"region","aria-hidden":o.allowMultipleExpanded?!t:void 0,"aria-labelledby":o.getButtonId(e),id:o.getPanelId(e),hidden:!t||void 0}}),i(this,"getHeadingAttributes",function(e){return{role:"heading"}}),i(this,"getButtonAttributes",function(e){var t=o.isItemExpanded(e),n=o.isItemDisabled(e);return{id:o.getButtonId(e),"aria-disabled":n,"aria-expanded":t,"aria-controls":o.getPanelId(e),role:"button",tabIndex:0}}),i(this,"getPanelId",function(e){return"accordion__panel-".concat(e)}),i(this,"getButtonId",function(e){return"accordion__heading-".concat(e)}),i(this,"augment",function(t){return new e(function(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{},o=Object.keys(n);"function"==typeof Object.getOwnPropertySymbols&&(o=o.concat(Object.getOwnPropertySymbols(n).filter(function(e){return Object.getOwnPropertyDescriptor(n,e).enumerable}))),o.forEach(function(t){i(e,t,n[t])})}return e}({expanded:o.expanded,allowMultipleExpanded:o.allowMultipleExpanded,allowZeroExpanded:o.allowZeroExpanded},t))}),this.expanded=a,this.allowMultipleExpanded=l,this.allowZeroExpanded=u},b=t.createContext(null),g=function(e){function o(){var e,t;n(this,o);for(var r=arguments.length,a=new Array(r),s=0;s<r;s++)a[s]=arguments[s];return i(p(t=d(this,(e=l(o)).call.apply(e,[this].concat(a)))),"state",new y({expanded:t.props.preExpanded,allowMultipleExpanded:t.props.allowMultipleExpanded,allowZeroExpanded:t.props.allowZeroExpanded})),i(p(t),"toggleExpanded",function(e){t.setState(function(t){return t.toggleExpanded(e)},function(){t.props.onChange&&t.props.onChange(t.state.expanded)})}),i(p(t),"isItemDisabled",function(e){return t.state.isItemDisabled(e)}),i(p(t),"isItemExpanded",function(e){return t.state.isItemExpanded(e)}),i(p(t),"getPanelAttributes",function(e){return t.state.getPanelAttributes(e)}),i(p(t),"getHeadingAttributes",function(e){return t.state.getHeadingAttributes(e)}),i(p(t),"getButtonAttributes",function(e){return t.state.getButtonAttributes(e)}),t}return s(o,e),r(o,[{key:"render",value:function(){var e=this.state,n=e.allowZeroExpanded,o=e.allowMultipleExpanded;return t.createElement(b.Provider,{value:{allowMultipleExpanded:o,allowZeroExpanded:n,toggleExpanded:this.toggleExpanded,isItemDisabled:this.isItemDisabled,isItemExpanded:this.isItemExpanded,getPanelAttributes:this.getPanelAttributes,getHeadingAttributes:this.getHeadingAttributes,getButtonAttributes:this.getButtonAttributes}},this.props.children||null)}}]),o}(t.PureComponent);i(g,"defaultProps",{allowMultipleExpanded:!1,allowZeroExpanded:!1});var _=function(e){function o(){var e,t;n(this,o);for(var r=arguments.length,a=new Array(r),s=0;s<r;s++)a[s]=arguments[s];return i(p(t=d(this,(e=l(o)).call.apply(e,[this].concat(a)))),"renderChildren",function(e){return e?t.props.children(e):null}),t}return s(o,e),r(o,[{key:"render",value:function(){return t.createElement(b.Consumer,null,this.renderChildren)}}]),o}(t.PureComponent),v=function(e){function o(){var e,r;n(this,o);for(var s=arguments.length,c=new Array(s),h=0;h<s;h++)c[h]=arguments[h];return i(p(r=d(this,(e=l(o)).call.apply(e,[this].concat(c)))),"renderAccordion",function(e){var n=r.props,o=(n.preExpanded,n.allowMultipleExpanded,n.allowZeroExpanded,n.onChange,u(n,["preExpanded","allowMultipleExpanded","allowZeroExpanded","onChange"]));return t.createElement("div",a({"data-accordion-component":"Accordion"},o))}),r}return s(o,e),r(o,[{key:"render",value:function(){return t.createElement(g,{preExpanded:this.props.preExpanded,allowMultipleExpanded:this.props.allowMultipleExpanded,allowZeroExpanded:this.props.allowZeroExpanded,onChange:this.props.onChange},t.createElement(_,null,this.renderAccordion))}}]),o}(t.Component);i(v,"defaultProps",{allowMultipleExpanded:void 0,allowZeroExpanded:void 0,onChange:void 0,className:"accordion",children:void 0}),i(v,"displayName",m.Accordion);var C=0,E=C,I=t.createContext(null),P=function(e){function o(){var e,r;n(this,o);for(var a=arguments.length,s=new Array(a),c=0;c<a;c++)s[c]=arguments[c];return i(p(r=d(this,(e=l(o)).call.apply(e,[this].concat(s)))),"toggleExpanded",function(){r.props.accordionContext.toggleExpanded(r.props.uuid)}),i(p(r),"renderChildren",function(e){var n=r.props.uuid,o=e.isItemExpanded(n),i=e.isItemDisabled(n),a=e.getPanelAttributes(n),s=e.getHeadingAttributes(n),l=e.getButtonAttributes(n);return t.createElement(I.Provider,{value:{uuid:n,expanded:o,disabled:i,toggleExpanded:r.toggleExpanded,panelAttributes:a,headingAttributes:s,buttonAttributes:l},children:r.props.children})}),r}return s(o,e),r(o,[{key:"render",value:function(){return t.createElement(_,null,this.renderChildren)}}]),o}(t.Component),w=function(e){return t.createElement(_,null,function(n){return t.createElement(P,a({},e,{accordionContext:n}))})},S=function(e){function o(){var e,t;n(this,o);for(var r=arguments.length,a=new Array(r),s=0;s<r;s++)a[s]=arguments[s];return i(p(t=d(this,(e=l(o)).call.apply(e,[this].concat(a)))),"renderChildren",function(e){return e?t.props.children(e):null}),t}return s(o,e),r(o,[{key:"render",value:function(){return t.createElement(I.Consumer,null,this.renderChildren)}}]),o}(t.PureComponent),O=function(e){function o(){var e,t,r;n(this,o);for(var a=arguments.length,s=new Array(a),c=0;c<a;c++)s[c]=arguments[c];return i(p(t=d(this,(e=l(o)).call.apply(e,[this].concat(s)))),"instanceUuid",(r=E,E+=1,r)),t}return s(o,e),r(o,[{key:"render",value:function(){var e=this.props,n=e.uuid,o=void 0===n?this.instanceUuid:n,r=u(e,["uuid"]);return t.createElement(w,{uuid:o},t.createElement("div",a({"data-accordion-component":"AccordionItem"},r)))}}]),o}(t.Component);function D(e){var t=function e(t){return t&&(t.matches('[data-accordion-component="Accordion"]')?t:e(t.parentElement))}(e);return t&&Array.from(t.querySelectorAll('[data-accordion-component="AccordionItemButton"]'))}i(O,"defaultProps",{className:"accordion__item"}),i(O,"displayName",m.AccordionItem);var T={DOWN:"40",END:"35",ENTER:"13",HOME:"36",LEFT:"37",RIGHT:"39",SPACE:"32",UP:"38"},F=function(e){function o(){var e,t;n(this,o);for(var r=arguments.length,a=new Array(r),s=0;s<r;s++)a[s]=arguments[s];return i(p(t=d(this,(e=l(o)).call.apply(e,[this].concat(a)))),"handleKeyPress",function(e){var n,o,r=e.which.toString();if(r!==T.ENTER&&r!==T.SPACE||(e.preventDefault(),t.props.toggleExpanded()),e.target instanceof HTMLElement)switch(r){case T.HOME:e.preventDefault(),n=e.target,(o=(D(n)||[])[0])&&o.focus();break;case T.END:e.preventDefault(),function(e){var t=D(e)||[],n=t[t.length-1];n&&n.focus()}(e.target);break;case T.LEFT:case T.UP:e.preventDefault(),function(e){var t=D(e)||[],n=t.indexOf(e);if(-1!==n){var o=t[n-1];o&&o.focus()}}(e.target);break;case T.RIGHT:case T.DOWN:e.preventDefault(),function(e){var t=D(e)||[],n=t.indexOf(e);if(-1!==n){var o=t[n+1];o&&o.focus()}}(e.target)}}),t}return s(o,e),r(o,[{key:"render",value:function(){var e=this.props,n=e.toggleExpanded,o=u(e,["toggleExpanded"]);return t.createElement("div",a({},o,{onClick:n,onKeyDown:this.handleKeyPress,"data-accordion-component":"AccordionItemButton"}))}}]),o}(t.PureComponent);i(F,"defaultProps",{className:"accordion__button"});var x=function(e){return t.createElement(S,null,function(n){var o=n.toggleExpanded,r=n.buttonAttributes;return t.createElement(F,a({toggleExpanded:o},e,r))})};x.displayName=m.AccordionItemButton;var M=function(e){function o(){var e,t;n(this,o);for(var r=arguments.length,a=new Array(r),s=0;s<r;s++)a[s]=arguments[s];return i(p(t=d(this,(e=l(o)).call.apply(e,[this].concat(a)))),"ref",void 0),i(p(t),"setRef",function(e){t.ref=e}),t}return s(o,e),r(o,[{key:"componentDidUpdate",value:function(){o.VALIDATE(this.ref)}},{key:"componentDidMount",value:function(){o.VALIDATE(this.ref)}},{key:"render",value:function(){return t.createElement("div",a({"data-accordion-component":"AccordionItemHeading"},this.props,{ref:this.setRef}))}}],[{key:"VALIDATE",value:function(e){if(void 0===e)throw new Error("ref is undefined");if(1!==e.childElementCount||!e.firstElementChild||"AccordionItemButton"!==e.firstElementChild.getAttribute("data-accordion-component"))throw new Error("AccordionItemButton may contain only one child element, which must be an instance of AccordionItemButton.\n\nFrom the WAI-ARIA spec (https://www.w3.org/TR/wai-aria-practices-1.1/#accordion):\n\n“The button element is the only element inside the heading element. That is, if there are other visually persistent elements, they are not included inside the heading element.”\n\n")}}]),o}(t.PureComponent);i(M,"defaultProps",{className:"accordion__heading","aria-level":3});var A=function(e){return t.createElement(S,null,function(n){var o=n.headingAttributes;return t.createElement(M,a({},e,o))})};A.displayName=m.AccordionItemHeading;var k=function(e){function o(){var e,r;n(this,o);for(var s=arguments.length,c=new Array(s),u=0;u<s;u++)c[u]=arguments[u];return i(p(r=d(this,(e=l(o)).call.apply(e,[this].concat(c)))),"renderChildren",function(e){var n=e.panelAttributes;return t.createElement("div",a({"data-accordion-component":"AccordionItemPanel"},r.props,n))}),r}return s(o,e),r(o,[{key:"render",value:function(){return t.createElement(S,null,this.renderChildren)}}]),o}(t.Component);i(k,"defaultProps",{className:"accordion__panel"}),i(k,"displayName",m.AccordionItemPanel);var R=function(e){function o(){var e,r;n(this,o);for(var a=arguments.length,s=new Array(a),c=0;c<a;c++)s[c]=arguments[c];return i(p(r=d(this,(e=l(o)).call.apply(e,[this].concat(s)))),"renderChildren",function(e){var n=e.expanded,o=e.disabled;return t.createElement(t.Fragment,null,r.props.children({expanded:n,disabled:o}))}),r}return s(o,e),r(o,[{key:"render",value:function(){return t.createElement(S,null,this.renderChildren)}}]),o}(t.Component);e.Accordion=v,e.AccordionItem=O,e.AccordionItemButton=x,e.AccordionItemHeading=A,e.AccordionItemPanel=k,e.AccordionItemState=R,e.resetNextUuid=function(){E=C},Object.defineProperty(e,"__esModule",{value:!0})}(t,n(0))},function(e,t,n){"use strict";n.d(t,"b",function(){return r}),n.d(t,"a",function(){return m});var o,r,i=n(0),a=n(10),s=n(8),l=n(25),c=n(30),u=n(40),p=(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),d=function(){return(d=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)};function h(e,t){return{display:e?t.display?t.display:"flex":"none"}}!function(e){e[e.Root=1]="Root",e[e.Nested=2]="Nested"}(r||(r={}));var f={position:"absolute",top:0,left:0,width:Math.max(document.documentElement.clientWidth,window.innerWidth||0),height:Math.max(document.documentElement.clientHeight,window.innerHeight||0),backgroundColor:"rgba(0, 0, 0, 0.3)"},m=function(e){function t(t){var n=e.call(this,t)||this;return n._rootElement=null,n._popupElement=null,n._stopPropagation=function(e){e.stopPropagation()},n._forceClosePopup=function(e){n._stopPropagation(e),n.props.closeOnOutsideClick&&(n.setState({forceClose:!0}),n.props.onPopupForcedClosed&&n.props.onPopupForcedClosed())},n.state={forceClose:!1},n._rootElement=document.getElementById(t.rootPopupId),n}return p(t,e),t.prototype._getId=function(){return this.props.rootPopupId+"_"+(this.props.id||"innerPopup")},t.prototype._getCurrentPopupToOpen=function(e,t){var n="";!e&&t&&(n=t.split(".")[0]);return n},t.prototype._getNextPopupToOpen=function(e,t){var n="";if(!e&&t){var o=t.split(".");o.splice(0,1),n=o.join(".")}return n},t.prototype._getChildrenProps=function(){return{type:r.Nested,parent:this._popupElement,popupToOpen:this._getNextPopupToOpen(this.state.forceClose,this.props.popupToOpen),rootPopupId:this.props.rootPopupId}},t.prototype._getChildrenWithProps=function(e){var n=this;return e?e.map?e.map(function(e){return e.type===t?i.cloneElement(e,n._getChildrenProps()):e}):e===t?i.cloneElement(e,this._getChildrenProps()):e:null},t.prototype._isVisible=function(){return this._getCurrentPopupToOpen(this.state.forceClose,this.props.popupToOpen)===this.props.name},t.prototype._applyRootNodeStyle=function(){Object.assign(this._rootElement.style,this.props.rootStyle),this._toggleRootElementVisibility()},t.prototype._toggleRootElementVisibility=function(){this.props.isDialogPopup||(this._rootElement.getAttribute(l.a)?"none"===this._rootElement.style.display&&(this._rootElement.style.display="flex"):this._rootElement.style.display="none")},t.prototype._getStaticContent=function(){var e=null;return this.props.content&&(e=i.createElement(s.a,{ref:"staticContent"})),e},t.prototype._registerPopup=function(e,t){var n=e.name,o=e.popupToOpen,r=t.forceClose,i=this._rootElement.getAttribute(l.a),a=(i=i||"").indexOf(n);r||n!==this._getCurrentPopupToOpen(r,o)?~a&&this._rootElement.setAttribute(l.a,i.replace("."+n,"")):~a||this._rootElement.setAttribute(l.a,i.concat("."+n))},t.prototype._subscribeFlyoutPopupManager=function(){var e=this;this._managerSubscriber={type:u.a.Popup,onPointerDown:function(t){t.target===document.getElementById(e._getId())&&e._forceClosePopup(t)},getComponent:function(){return e._popupElement}},c.a.getInstance().addSubscribers(this._managerSubscriber)},t.prototype.componentWillMount=function(){this.props.isDialogPopup||this._registerPopup(this.props,this.state)},t.prototype.componentDidMount=function(){var e=this;this._popupElement=a.findDOMNode(this.refs.popup),this.forceUpdate(function(){var t=e.refs.staticContent;t&&a.findDOMNode(t).appendChild(e.props.content)}),this._subscribeFlyoutPopupManager()},t.prototype.componentWillReceiveProps=function(){this.setState({forceClose:!1})},t.prototype.componentWillUpdate=function(e,t){this._registerPopup(e,t);var n=this.refs.staticContent;if(n){for(var o=a.findDOMNode(n);o.firstChild;)o.removeChild(o.firstChild);o.appendChild(e.content)}},t.prototype.componentWillUnmount=function(){c.a.getInstance().removeSubscribers(this._managerSubscriber)},t.prototype.render=function(){var e,t,n,o,r,a,l=this.props.isDialogPopup?this.props.style:Object.assign({},this.props.style,(n=this.props.shadowStyle,o=this.props.parent,r=Object.assign({},n),(a=o&&o.getBoundingClientRect())&&(r.top=parseInt(r.top,10)-a.top+"px",r.left=parseInt(r.left,10)-a.left+"px"),r),h(this._isVisible(),this.props.shadowStyle)),u=Object.assign({},this.props.popupStyle,this.props.isDialogPopup?{}:h(this._isVisible(),this.props.popupStyle));this._applyRootNodeStyle();var p=((e={})[c.a.pointerDownEvent]=this._forceClosePopup,e),f=((t={})[c.a.pointerDownEvent]=this._stopPropagation,t);return i.createElement(s.a,d({id:this._getId(),style:l},p),i.createElement(s.a,d({style:u},f,{ref:"popup"}),this._getStaticContent(),this._getChildrenWithProps(this.props.children)))},t}(i.Component);m.defaultProps={shadowStyle:f,isDialogPopup:!1,type:r.Root,closeOnOutsideClick:!1}},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var o=n(1),r=n(13),i=function(){function e(){}return e.registerToLearningPath=function(e,t,n){e&&t&&n&&e.setAttribute(t,n)},e.getLearningPathControlId=function(t){if(!t.configuration)return null;var n=t.configuration.CustomControlId+"|"+t.controlId;switch(t.personalizationConfiguration&&(n+="|"+t.personalizationConfiguration.entityTypeName),Object(r.e)(t.configuration.CustomControlId)){case r.a.GridContainer:case r.a.ChartControl:case r.a.CalendarControl:n+=e._generateLpControlIdForccDataSetControl(t);break;case r.a.DashboardContainer:case r.a.QuickCreateForm:t.personalizationConfiguration&&t.personalizationConfiguration.formGuid&&(n+="|"+t.personalizationConfiguration.formGuid.guid);break;case r.a.WebresourceControl:n+=e._generateLpControlIdForWebresource(t);break;case r.a.FieldSectionContainer:case r.a.TimelineContainer:case r.a.DummyControl:}return n},e._generateLpControlIdForWebresource=function(e){var t="",n=e.configuration.Parameters;for(var r in n){var i=n[r];if(i.Type===o.ManifestType.WebResourceHtmlControl)t+="|"+i.ControlId}return t},e._generateLpControlIdForccDataSetControl=function(e){var t="",n=e.configuration.Parameters;for(var r in n){var i=n[r];if(i.Type===o.ManifestType.Grid){var a=i;a.ViewId&&(t+="|"+a.ViewId),a.VisualizationId&&(t+="|"+a.VisualizationId),a.EntityName&&(t+="|"+a.EntityName),a.RelationshipName&&(t+="|"+a.RelationshipName)}}return t},e.LEARNING_PATH_ATTRIBUTE="data-lp-id",e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var o={ERROR_LOADING_CONTROL:"Error loading control",VALIDATION_FAILED_EMAIL:"Value is not a valid email",VALIDATION_FAILED_BOOL:"Value is not a valid boolean",VALIDATION_FAILED_DATE:"Value is not a valid Date object",VALIDATION_FAILED_NUM:"Value is not a valid number",VALIDATION_FAILED_INT:"Number is not a valid integer",VALIDATION_FAILED_RANGE:"Value is not within the defined range for this property. Range is {0} to {1}",SELECT_TO_ENTER_DATA:"Select to enter data."},r=o;function i(e){return r[e]}},function(e,t,n){"use strict";n.d(t,"c",function(){return o}),n.d(t,"b",function(){return r}),n.d(t,"a",function(){return i}),n.d(t,"d",function(){return a});var o="layout",r="fullscreen_open",i="fullscreen_close",a="parameters"},function(e,t,n){(function(){var t,o,r,i,a,s={}.hasOwnProperty;a=n(26),i=a.isObject,r=a.isFunction,o=n(17),t=n(108),e.exports=function(e){function n(e,t,o){if(n.__super__.constructor.call(this,e),null==t)throw new Error("Missing element name");this.name=this.stringify.eleName(t),this.attributes={},null!=o&&this.attribute(o),e.isDocument&&(this.isRoot=!0,this.documentObject=e,e.rootObject=this)}return function(e,t){for(var n in t)s.call(t,n)&&(e[n]=t[n]);function o(){this.constructor=e}o.prototype=t.prototype,e.prototype=new o,e.__super__=t.prototype}(n,o),n.prototype.clone=function(){var e,t,n,o;for(t in(n=Object.create(this)).isRoot&&(n.documentObject=null),n.attributes={},o=this.attributes)s.call(o,t)&&(e=o[t],n.attributes[t]=e.clone());return n.children=[],this.children.forEach(function(e){var t;return(t=e.clone()).parent=n,n.children.push(t)}),n},n.prototype.attribute=function(e,n){var o,a;if(null!=e&&(e=e.valueOf()),i(e))for(o in e)s.call(e,o)&&(a=e[o],this.attribute(o,a));else r(n)&&(n=n.apply()),this.options.skipNullAttributes&&null==n||(this.attributes[e]=new t(this,e,n));return this},n.prototype.removeAttribute=function(e){var t,n,o;if(null==e)throw new Error("Missing attribute name");if(e=e.valueOf(),Array.isArray(e))for(n=0,o=e.length;n<o;n++)t=e[n],delete this.attributes[t];else delete this.attributes[e];return this},n.prototype.toString=function(e){return this.options.writer.set(e).element(this)},n.prototype.att=function(e,t){return this.attribute(e,t)},n.prototype.a=function(e,t){return this.attribute(e,t)},n}()}).call(this)},function(e,t,n){(function(){var t,o={}.hasOwnProperty;t=n(17),e.exports=function(e){function n(e,t){if(n.__super__.constructor.call(this,e),null==t)throw new Error("Missing CDATA text");this.text=this.stringify.cdata(t)}return function(e,t){for(var n in t)o.call(t,n)&&(e[n]=t[n]);function r(){this.constructor=e}r.prototype=t.prototype,e.prototype=new r,e.__super__=t.prototype}(n,t),n.prototype.clone=function(){return Object.create(this)},n.prototype.toString=function(e){return this.options.writer.set(e).cdata(this)},n}()}).call(this)},function(e,t,n){(function(){var t,o={}.hasOwnProperty;t=n(17),e.exports=function(e){function n(e,t){if(n.__super__.constructor.call(this,e),null==t)throw new Error("Missing comment text");this.text=this.stringify.comment(t)}return function(e,t){for(var n in t)o.call(t,n)&&(e[n]=t[n]);function r(){this.constructor=e}r.prototype=t.prototype,e.prototype=new r,e.__super__=t.prototype}(n,t),n.prototype.clone=function(){return Object.create(this)},n.prototype.toString=function(e){return this.options.writer.set(e).comment(this)},n}()}).call(this)},function(e,t,n){(function(){var t,o,r={}.hasOwnProperty;o=n(26).isObject,t=n(17),e.exports=function(e){function n(e,t,r,i){var a;n.__super__.constructor.call(this,e),o(t)&&(t=(a=t).version,r=a.encoding,i=a.standalone),t||(t="1.0"),this.version=this.stringify.xmlVersion(t),null!=r&&(this.encoding=this.stringify.xmlEncoding(r)),null!=i&&(this.standalone=this.stringify.xmlStandalone(i))}return function(e,t){for(var n in t)r.call(t,n)&&(e[n]=t[n]);function o(){this.constructor=e}o.prototype=t.prototype,e.prototype=new o,e.__super__=t.prototype}(n,t),n.prototype.toString=function(e){return this.options.writer.set(e).declaration(this)},n}()}).call(this)},function(e,t,n){(function(){var t,o,r,i,a,s,l={}.hasOwnProperty;s=n(26).isObject,a=n(17),t=n(57),r=n(58),o=n(59),i=n(60),e.exports=function(e){function n(e,t,o){var r,i;n.__super__.constructor.call(this,e),this.documentObject=e,s(t)&&(t=(r=t).pubID,o=r.sysID),null==o&&(o=(i=[t,o])[0],t=i[1]),null!=t&&(this.pubID=this.stringify.dtdPubID(t)),null!=o&&(this.sysID=this.stringify.dtdSysID(o))}return function(e,t){for(var n in t)l.call(t,n)&&(e[n]=t[n]);function o(){this.constructor=e}o.prototype=t.prototype,e.prototype=new o,e.__super__=t.prototype}(n,a),n.prototype.element=function(e,t){var n;return n=new o(this,e,t),this.children.push(n),this},n.prototype.attList=function(e,n,o,r,i){var a;return a=new t(this,e,n,o,r,i),this.children.push(a),this},n.prototype.entity=function(e,t){var n;return n=new r(this,!1,e,t),this.children.push(n),this},n.prototype.pEntity=function(e,t){var n;return n=new r(this,!0,e,t),this.children.push(n),this},n.prototype.notation=function(e,t){var n;return n=new i(this,e,t),this.children.push(n),this},n.prototype.toString=function(e){return this.options.writer.set(e).docType(this)},n.prototype.ele=function(e,t){return this.element(e,t)},n.prototype.att=function(e,t,n,o,r){return this.attList(e,t,n,o,r)},n.prototype.ent=function(e,t){return this.entity(e,t)},n.prototype.pent=function(e,t){return this.pEntity(e,t)},n.prototype.not=function(e,t){return this.notation(e,t)},n.prototype.up=function(){return this.root()||this.documentObject},n}()}).call(this)},function(e,t,n){(function(){var t,o={}.hasOwnProperty;t=n(17),e.exports=function(e){function n(e,t,o,r,i,a){if(n.__super__.constructor.call(this,e),null==t)throw new Error("Missing DTD element name");if(null==o)throw new Error("Missing DTD attribute name");if(!r)throw new Error("Missing DTD attribute type");if(!i)throw new Error("Missing DTD attribute default");if(0!==i.indexOf("#")&&(i="#"+i),!i.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/))throw new Error("Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT");if(a&&!i.match(/^(#FIXED|#DEFAULT)$/))throw new Error("Default value only applies to #FIXED or #DEFAULT");this.elementName=this.stringify.eleName(t),this.attributeName=this.stringify.attName(o),this.attributeType=this.stringify.dtdAttType(r),this.defaultValue=this.stringify.dtdAttDefault(a),this.defaultValueType=i}return function(e,t){for(var n in t)o.call(t,n)&&(e[n]=t[n]);function r(){this.constructor=e}r.prototype=t.prototype,e.prototype=new r,e.__super__=t.prototype}(n,t),n.prototype.toString=function(e){return this.options.writer.set(e).dtdAttList(this)},n}()}).call(this)},function(e,t,n){(function(){var t,o,r={}.hasOwnProperty;o=n(26).isObject,t=n(17),e.exports=function(e){function n(e,t,r,i){if(n.__super__.constructor.call(this,e),null==r)throw new Error("Missing entity name");if(null==i)throw new Error("Missing entity value");if(this.pe=!!t,this.name=this.stringify.eleName(r),o(i)){if(!i.pubID&&!i.sysID)throw new Error("Public and/or system identifiers are required for an external entity");if(i.pubID&&!i.sysID)throw new Error("System identifier is required for a public external entity");if(null!=i.pubID&&(this.pubID=this.stringify.dtdPubID(i.pubID)),null!=i.sysID&&(this.sysID=this.stringify.dtdSysID(i.sysID)),null!=i.nData&&(this.nData=this.stringify.dtdNData(i.nData)),this.pe&&this.nData)throw new Error("Notation declaration is not allowed in a parameter entity")}else this.value=this.stringify.dtdEntityValue(i)}return function(e,t){for(var n in t)r.call(t,n)&&(e[n]=t[n]);function o(){this.constructor=e}o.prototype=t.prototype,e.prototype=new o,e.__super__=t.prototype}(n,t),n.prototype.toString=function(e){return this.options.writer.set(e).dtdEntity(this)},n}()}).call(this)},function(e,t,n){(function(){var t,o={}.hasOwnProperty;t=n(17),e.exports=function(e){function n(e,t,o){if(n.__super__.constructor.call(this,e),null==t)throw new Error("Missing DTD element name");o||(o="(#PCDATA)"),Array.isArray(o)&&(o="("+o.join(",")+")"),this.name=this.stringify.eleName(t),this.value=this.stringify.dtdElementValue(o)}return function(e,t){for(var n in t)o.call(t,n)&&(e[n]=t[n]);function r(){this.constructor=e}r.prototype=t.prototype,e.prototype=new r,e.__super__=t.prototype}(n,t),n.prototype.toString=function(e){return this.options.writer.set(e).dtdElement(this)},n}()}).call(this)},function(e,t,n){(function(){var t,o={}.hasOwnProperty;t=n(17),e.exports=function(e){function n(e,t,o){if(n.__super__.constructor.call(this,e),null==t)throw new Error("Missing notation name");if(!o.pubID&&!o.sysID)throw new Error("Public or system identifiers are required for an external entity");this.name=this.stringify.eleName(t),null!=o.pubID&&(this.pubID=this.stringify.dtdPubID(o.pubID)),null!=o.sysID&&(this.sysID=this.stringify.dtdSysID(o.sysID))}return function(e,t){for(var n in t)o.call(t,n)&&(e[n]=t[n]);function r(){this.constructor=e}r.prototype=t.prototype,e.prototype=new r,e.__super__=t.prototype}(n,t),n.prototype.toString=function(e){return this.options.writer.set(e).dtdNotation(this)},n}()}).call(this)},function(e,t,n){(function(){var t,o={}.hasOwnProperty;t=n(17),e.exports=function(e){function n(e,t){if(n.__super__.constructor.call(this,e),null==t)throw new Error("Missing raw text");this.value=this.stringify.raw(t)}return function(e,t){for(var n in t)o.call(t,n)&&(e[n]=t[n]);function r(){this.constructor=e}r.prototype=t.prototype,e.prototype=new r,e.__super__=t.prototype}(n,t),n.prototype.clone=function(){return Object.create(this)},n.prototype.toString=function(e){return this.options.writer.set(e).raw(this)},n}()}).call(this)},function(e,t,n){(function(){var t,o={}.hasOwnProperty;t=n(17),e.exports=function(e){function n(e,t){if(n.__super__.constructor.call(this,e),null==t)throw new Error("Missing element text");this.value=this.stringify.eleText(t)}return function(e,t){for(var n in t)o.call(t,n)&&(e[n]=t[n]);function r(){this.constructor=e}r.prototype=t.prototype,e.prototype=new r,e.__super__=t.prototype}(n,t),n.prototype.clone=function(){return Object.create(this)},n.prototype.toString=function(e){return this.options.writer.set(e).text(this)},n}()}).call(this)},function(e,t,n){(function(){var t,o={}.hasOwnProperty;t=n(17),e.exports=function(e){function n(e,t,o){if(n.__super__.constructor.call(this,e),null==t)throw new Error("Missing instruction target");this.target=this.stringify.insTarget(t),o&&(this.value=this.stringify.insValue(o))}return function(e,t){for(var n in t)o.call(t,n)&&(e[n]=t[n]);function r(){this.constructor=e}r.prototype=t.prototype,e.prototype=new r,e.__super__=t.prototype}(n,t),n.prototype.clone=function(){return Object.create(this)},n.prototype.toString=function(e){return this.options.writer.set(e).processingInstruction(this)},n}()}).call(this)},function(e,t,n){"use strict";var o,r="object"==typeof Reflect?Reflect:null,i=r&&"function"==typeof r.apply?r.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};o=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var a=Number.isNaN||function(e){return e!=e};function s(){s.init.call(this)}e.exports=s,s.EventEmitter=s,s.prototype._events=void 0,s.prototype._eventsCount=0,s.prototype._maxListeners=void 0;var l=10;function c(e){return void 0===e._maxListeners?s.defaultMaxListeners:e._maxListeners}function u(e,t,n,o){var r,i,a,s;if("function"!=typeof n)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof n);if(void 0===(i=e._events)?(i=e._events=Object.create(null),e._eventsCount=0):(void 0!==i.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),i=e._events),a=i[t]),void 0===a)a=i[t]=n,++e._eventsCount;else if("function"==typeof a?a=i[t]=o?[n,a]:[a,n]:o?a.unshift(n):a.push(n),(r=c(e))>0&&a.length>r&&!a.warned){a.warned=!0;var l=new Error("Possible EventEmitter memory leak detected. "+a.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");l.name="MaxListenersExceededWarning",l.emitter=e,l.type=t,l.count=a.length,s=l,console&&console.warn&&console.warn(s)}return e}function p(e,t,n){var o={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},r=function(){for(var e=[],t=0;t<arguments.length;t++)e.push(arguments[t]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,i(this.listener,this.target,e))}.bind(o);return r.listener=n,o.wrapFn=r,r}function d(e,t,n){var o=e._events;if(void 0===o)return[];var r=o[t];return void 0===r?[]:"function"==typeof r?n?[r.listener||r]:[r]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(r):f(r,r.length)}function h(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function f(e,t){for(var n=new Array(t),o=0;o<t;++o)n[o]=e[o];return n}Object.defineProperty(s,"defaultMaxListeners",{enumerable:!0,get:function(){return l},set:function(e){if("number"!=typeof e||e<0||a(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");l=e}}),s.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},s.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||a(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},s.prototype.getMaxListeners=function(){return c(this)},s.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var o="error"===e,r=this._events;if(void 0!==r)o=o&&void 0===r.error;else if(!o)return!1;if(o){var a;if(t.length>0&&(a=t[0]),a instanceof Error)throw a;var s=new Error("Unhandled error."+(a?" ("+a.message+")":""));throw s.context=a,s}var l=r[e];if(void 0===l)return!1;if("function"==typeof l)i(l,this,t);else{var c=l.length,u=f(l,c);for(n=0;n<c;++n)i(u[n],this,t)}return!0},s.prototype.addListener=function(e,t){return u(this,e,t,!1)},s.prototype.on=s.prototype.addListener,s.prototype.prependListener=function(e,t){return u(this,e,t,!0)},s.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.on(e,p(this,e,t)),this},s.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.prependListener(e,p(this,e,t)),this},s.prototype.removeListener=function(e,t){var n,o,r,i,a;if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);if(void 0===(o=this._events))return this;if(void 0===(n=o[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete o[e],o.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(r=-1,i=n.length-1;i>=0;i--)if(n[i]===t||n[i].listener===t){a=n[i].listener,r=i;break}if(r<0)return this;0===r?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,r),1===n.length&&(o[e]=n[0]),void 0!==o.removeListener&&this.emit("removeListener",e,a||t)}return this},s.prototype.off=s.prototype.removeListener,s.prototype.removeAllListeners=function(e){var t,n,o;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var r,i=Object.keys(n);for(o=0;o<i.length;++o)"removeListener"!==(r=i[o])&&this.removeAllListeners(r);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(o=t.length-1;o>=0;o--)this.removeListener(e,t[o]);return this},s.prototype.listeners=function(e){return d(this,e,!0)},s.prototype.rawListeners=function(e){return d(this,e,!1)},s.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):h.call(e,t)},s.prototype.listenerCount=h,s.prototype.eventNames=function(){return this._eventsCount>0?o(this._events):[]}},function(e,t,n){"use strict";(function(t){!t.version||0===t.version.indexOf("v0.")||0===t.version.indexOf("v1.")&&0!==t.version.indexOf("v1.8.")?e.exports={nextTick:function(e,n,o,r){if("function"!=typeof e)throw new TypeError('"callback" argument must be a function');var i,a,s=arguments.length;switch(s){case 0:case 1:return t.nextTick(e);case 2:return t.nextTick(function(){e.call(null,n)});case 3:return t.nextTick(function(){e.call(null,n,o)});case 4:return t.nextTick(function(){e.call(null,n,o,r)});default:for(i=new Array(s-1),a=0;a<i.length;)i[a++]=arguments[a];return t.nextTick(function(){e.apply(null,i)})}}}:e.exports=t}).call(this,n(42))},function(e,t,n){var o=n(79),r=o.Buffer;function i(e,t){for(var n in e)t[n]=e[n]}function a(e,t,n){return r(e,t,n)}r.from&&r.alloc&&r.allocUnsafe&&r.allocUnsafeSlow?e.exports=o:(i(o,t),t.Buffer=a),i(r,a),a.from=function(e,t,n){if("number"==typeof e)throw new TypeError("Argument must not be a number");return r(e,t,n)},a.alloc=function(e,t,n){if("number"!=typeof e)throw new TypeError("Argument must be a number");var o=r(e);return void 0!==t?"string"==typeof n?o.fill(t,n):o.fill(t):o.fill(0),o},a.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return r(e)},a.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return o.SlowBuffer(e)}},function(e,t,n){var o=n(223),r=n(224),i=n(225),a=n(226),s=n(227);function l(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var o=e[t];this.set(o[0],o[1])}}l.prototype.clear=o,l.prototype.delete=r,l.prototype.get=i,l.prototype.has=a,l.prototype.set=s,e.exports=l},function(e,t,n){var o=n(118);e.exports=function(e,t){for(var n=e.length;n--;)if(o(e[n][0],t))return n;return-1}},function(e,t,n){var o=n(86),r=n(234),i=n(235),a="[object Null]",s="[object Undefined]",l=o?o.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?s:a:l&&l in Object(e)?r(e):i(e)}},function(e,t,n){var o=n(33)(Object,"create");e.exports=o},function(e,t,n){var o=n(248);e.exports=function(e,t){var n=e.__data__;return o(t)?n["string"==typeof t?"string":"hash"]:n.map}},function(e,t,n){var o=n(122),r=n(123);e.exports=function(e,t,n,i){var a=!n;n||(n={});for(var s=-1,l=t.length;++s<l;){var c=t[s],u=i?i(n[c],e[c],c,n,e):void 0;void 0===u&&(u=e[c]),a?r(n,c,u):o(n,c,u)}return n}},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var o,r=n(0),i=(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),a=function(e){function t(t){var n=e.call(this,t)||this;return n.state={portals:new Map},n}return i(t,e),t.prototype.bindDOMElement=function(e,t,n,o){var r=t.removeChild,i=this.props.onError;t.removeChild=function(){try{return r.apply(this,arguments)}catch(e){if(i&&i(e),"NotFoundError"!==e.name&&"HierarchyRequestError"!==e.name)throw e}},this.setState(function(o){var r=new Map(o.portals);return r.set(t,{element:e,id:n}),{portals:r}},o)},t.prototype.unbindDOMComponent=function(e,t){this.setState(function(t){var n=new Map(t.portals);return n.forEach(function(t,o){t.id===e&&n.delete(o)}),{portals:n}},t)},t.prototype.componentDidCatch=function(e){if("Failed to execute 'removeChild' on 'Node': The node to be removed is not a child of this node."!==e.message)throw e},t.prototype.render=function(){var e=this,t=[];return this.state.portals.forEach(function(n,o){t.push(e.props.renderReactSubtree(n.element,o))}),t},t}(r.Component)},function(e,t,n){"use strict";n.r(t),n.d(t,"XRMINIT",function(){return r}),n.d(t,"InitializeXrm",function(){return i}),n.d(t,"MockXrmProxy",function(){return a});var o=n(16),r=!1;
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */function i(e,t){if(!r){var n=e||window.CustomControls.XrmProxy;if(!n)throw new Error("XrmProxy was not passed and cannot be found on the window");t||(t=a),n.setUtils(t.Utils),n.setDeviceContext(t.Device),n.setNavigationContext(t.Navigation);var o=t.WebApi;n.setWebApi({offline:o,online:o}),n.setReporting(t.Reporting),n.setDiagnostics(),r=!0}}var a={Utils:{getEntityMetadata:function(e,t){return Promise.reject(new Error("This method is not supported!"))},lookupObjects:function(e){return Promise.reject(new Error("This method is not supported!"))}},Device:{captureImage:function(e){return Promise.resolve(void 0)},captureAudio:function(){return Promise.resolve(void 0)},captureVideo:function(){return Promise.resolve(void 0)},pickFile:function(e){return Promise.resolve(void 0)},getBarcodeValue:function(){return Promise.resolve("")},getCurrentPosition:function(){return Promise.resolve({coords:void 0,timestamp:void 0})}},Navigation:{openAlertDialog:o.e,openConfirmDialog:o.f,openErrorDialog:o.g,openUrl:o.h,openFile:function(e,t){return alert("Your control is trying to open a file. This is not yet supported."),Promise.resolve()},openForm:function(e,t){return alert("Your control is trying to open a form. This is not yet supported."),Promise.resolve({savedEntityReference:[]})},openWebResource:function(e,t,n){alert("Your control is trying to open a web resource. This is not yet supported.")}},WebApi:{createRecord:function(e,t){return alert("Your control is trying to create a record. This is not yet supported."),Promise.reject(new Error("Your control is trying to create a record. This is not yet supported."))},deleteRecord:function(e,t){return alert("Your control is trying to delete a record. This is not yet supported."),Promise.reject(new Error("Your control is trying to delete a record. This is not yet supported."))},updateRecord:function(e,t,n){return alert("Your control is trying to update a record. This is not yet supported."),Promise.reject(new Error("Your control is trying to update a record. This is not yet supported."))},retrieveMultipleRecords:function(e,t,n){return alert("Your control is trying to retrieve multiple records. This is not yet supported."),Promise.reject(new Error("Your control is trying to retrieve multiple records. This is not yet supported."))},retrieveRecord:function(e,t,n){return alert("Your control is trying to retrieve a record. This is not yet supported."),Promise.reject(new Error("Your control is trying to retrieve a record. This is not yet supported."))}},Reporting:{reportSuccess:function(e,t){},reportFailure:function(e,t,n,o){return e+" error: "+t},reportEvent:function(e){}},Diagnostics:{traceError:function(e,t){return e+" error: "+t},traceWarning:function(e,t){},traceInfo:function(e,t){return e+" message: "+t},traceDebug:function(e,t){}}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t="";for(var n in e){var o=e[n];"string"!=typeof o&&"number"!=typeof o||(t&&(t+=";"),t+=(0,i.default)(n,o))}return t};var o,r=n(100),i=(o=r)&&o.__esModule?o:{default:o};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.RULE_TYPE=1,t.KEYFRAME_TYPE=2,t.FONT_TYPE=3,t.STATIC_TYPE=4,t.CLEAR_TYPE=5},function(e,t){(function(){t.defaults={.1:{explicitCharkey:!1,trim:!0,normalize:!0,normalizeTags:!1,attrkey:"@",charkey:"#",explicitArray:!1,ignoreAttrs:!1,mergeAttrs:!1,explicitRoot:!1,validator:null,xmlns:!1,explicitChildren:!1,childkey:"@@",charsAsChildren:!1,includeWhiteChars:!1,async:!1,strict:!0,attrNameProcessors:null,attrValueProcessors:null,tagNameProcessors:null,valueProcessors:null,emptyTag:""},.2:{explicitCharkey:!1,trim:!1,normalize:!1,normalizeTags:!1,attrkey:"$",charkey:"_",explicitArray:!0,ignoreAttrs:!1,mergeAttrs:!1,explicitRoot:!0,validator:null,xmlns:!1,explicitChildren:!1,preserveChildrenOrder:!1,childkey:"$$",charsAsChildren:!1,includeWhiteChars:!1,async:!1,strict:!0,attrNameProcessors:null,attrValueProcessors:null,tagNameProcessors:null,valueProcessors:null,rootName:"root",xmldec:{version:"1.0",encoding:"UTF-8",standalone:!0},doctype:null,renderOpts:{pretty:!0,indent:"  ",newline:"\n"},headless:!1,chunkSize:1e4,emptyTag:"",cdata:!1}}}).call(this)},function(e,t,n){(function(){var t,o,r,i,a,s,l,c,u,p,d,h,f,m={}.hasOwnProperty;l=n(55),c=n(56),t=n(53),o=n(54),u=n(52),d=n(61),h=n(62),p=n(63),r=n(57),i=n(59),a=n(58),s=n(60),f=n(110),e.exports=function(e){function n(e){n.__super__.constructor.call(this,e)}return function(e,t){for(var n in t)m.call(t,n)&&(e[n]=t[n]);function o(){this.constructor=e}o.prototype=t.prototype,e.prototype=new o,e.__super__=t.prototype}(n,f),n.prototype.document=function(e){var t,n,r,i,a;for(this.textispresent=!1,i="",n=0,r=(a=e.children).length;n<r;n++)t=a[n],i+=function(){switch(!1){case!(t instanceof l):return this.declaration(t);case!(t instanceof c):return this.docType(t);case!(t instanceof o):return this.comment(t);case!(t instanceof p):return this.processingInstruction(t);default:return this.element(t,0)}}.call(this);return this.pretty&&i.slice(-this.newline.length)===this.newline&&(i=i.slice(0,-this.newline.length)),i},n.prototype.attribute=function(e){return" "+e.name+'="'+e.value+'"'},n.prototype.cdata=function(e,t){return this.space(t)+"<![CDATA["+e.text+"]]>"+this.newline},n.prototype.comment=function(e,t){return this.space(t)+"\x3c!-- "+e.text+" --\x3e"+this.newline},n.prototype.declaration=function(e,t){var n;return n=this.space(t),n+='<?xml version="'+e.version+'"',null!=e.encoding&&(n+=' encoding="'+e.encoding+'"'),null!=e.standalone&&(n+=' standalone="'+e.standalone+'"'),n+=this.spacebeforeslash+"?>",n+=this.newline},n.prototype.docType=function(e,n){var l,c,u,d,h;if(n||(n=0),d=this.space(n),d+="<!DOCTYPE "+e.root().name,e.pubID&&e.sysID?d+=' PUBLIC "'+e.pubID+'" "'+e.sysID+'"':e.sysID&&(d+=' SYSTEM "'+e.sysID+'"'),e.children.length>0){for(d+=" [",d+=this.newline,c=0,u=(h=e.children).length;c<u;c++)l=h[c],d+=function(){switch(!1){case!(l instanceof r):return this.dtdAttList(l,n+1);case!(l instanceof i):return this.dtdElement(l,n+1);case!(l instanceof a):return this.dtdEntity(l,n+1);case!(l instanceof s):return this.dtdNotation(l,n+1);case!(l instanceof t):return this.cdata(l,n+1);case!(l instanceof o):return this.comment(l,n+1);case!(l instanceof p):return this.processingInstruction(l,n+1);default:throw new Error("Unknown DTD node type: "+l.constructor.name)}}.call(this);d+="]"}return d+=this.spacebeforeslash+">",d+=this.newline},n.prototype.element=function(e,n){var r,i,a,s,l,c,f,y,b,g,_,v,C;for(f in n||(n=0),C=!1,this.textispresent?(this.newline="",this.pretty=!1):(this.newline=this.newlinedefault,this.pretty=this.prettydefault),y="",y+=(v=this.space(n))+"<"+e.name,b=e.attributes)m.call(b,f)&&(r=b[f],y+=this.attribute(r));if(0===e.children.length||e.children.every(function(e){return""===e.value}))this.allowEmpty?y+="></"+e.name+">"+this.newline:y+=this.spacebeforeslash+"/>"+this.newline;else if(this.pretty&&1===e.children.length&&null!=e.children[0].value)y+=">",y+=e.children[0].value,y+="</"+e.name+">"+this.newline;else{if(this.dontprettytextnodes)for(a=0,l=(g=e.children).length;a<l;a++)if(null!=(i=g[a]).value){this.textispresent++,C=!0;break}for(this.textispresent&&(this.newline="",this.pretty=!1,v=this.space(n)),y+=">"+this.newline,s=0,c=(_=e.children).length;s<c;s++)i=_[s],y+=function(){switch(!1){case!(i instanceof t):return this.cdata(i,n+1);case!(i instanceof o):return this.comment(i,n+1);case!(i instanceof u):return this.element(i,n+1);case!(i instanceof d):return this.raw(i,n+1);case!(i instanceof h):return this.text(i,n+1);case!(i instanceof p):return this.processingInstruction(i,n+1);default:throw new Error("Unknown XML node type: "+i.constructor.name)}}.call(this);C&&this.textispresent--,this.textispresent||(this.newline=this.newlinedefault,this.pretty=this.prettydefault),y+=v+"</"+e.name+">"+this.newline}return y},n.prototype.processingInstruction=function(e,t){var n;return n=this.space(t)+"<?"+e.target,e.value&&(n+=" "+e.value),n+=this.spacebeforeslash+"?>"+this.newline},n.prototype.raw=function(e,t){return this.space(t)+e.value+this.newline},n.prototype.text=function(e,t){return this.space(t)+e.value+this.newline},n.prototype.dtdAttList=function(e,t){var n;return n=this.space(t)+"<!ATTLIST "+e.elementName+" "+e.attributeName+" "+e.attributeType,"#DEFAULT"!==e.defaultValueType&&(n+=" "+e.defaultValueType),e.defaultValue&&(n+=' "'+e.defaultValue+'"'),n+=this.spacebeforeslash+">"+this.newline},n.prototype.dtdElement=function(e,t){return this.space(t)+"<!ELEMENT "+e.name+" "+e.value+this.spacebeforeslash+">"+this.newline},n.prototype.dtdEntity=function(e,t){var n;return n=this.space(t)+"<!ENTITY",e.pe&&(n+=" %"),n+=" "+e.name,e.value?n+=' "'+e.value+'"':(e.pubID&&e.sysID?n+=' PUBLIC "'+e.pubID+'" "'+e.sysID+'"':e.sysID&&(n+=' SYSTEM "'+e.sysID+'"'),e.nData&&(n+=" NDATA "+e.nData)),n+=this.spacebeforeslash+">"+this.newline},n.prototype.dtdNotation=function(e,t){var n;return n=this.space(t)+"<!NOTATION "+e.name,e.pubID&&e.sysID?n+=' PUBLIC "'+e.pubID+'" "'+e.sysID+'"':e.pubID?n+=' PUBLIC "'+e.pubID+'"':e.sysID&&(n+=' SYSTEM "'+e.sysID+'"'),n+=this.spacebeforeslash+">"+this.newline},n.prototype.openNode=function(e,t){var n,o,r,i;if(t||(t=0),e instanceof u){for(o in r=this.space(t)+"<"+e.name,i=e.attributes)m.call(i,o)&&(n=i[o],r+=this.attribute(n));return r+=(e.children?">":"/>")+this.newline}return r=this.space(t)+"<!DOCTYPE "+e.rootNodeName,e.pubID&&e.sysID?r+=' PUBLIC "'+e.pubID+'" "'+e.sysID+'"':e.sysID&&(r+=' SYSTEM "'+e.sysID+'"'),r+=(e.children?" [":">")+this.newline},n.prototype.closeNode=function(e,t){switch(t||(t=0),!1){case!(e instanceof u):return this.space(t)+"</"+e.name+">"+this.newline;case!(e instanceof c):return this.space(t)+"]>"+this.newline}},n}()}).call(this)},function(e,t,n){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var o=n(199),r=n(200),i=n(201);function a(){return l.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function s(e,t){if(a()<t)throw new RangeError("Invalid typed array length");return l.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=l.prototype:(null===e&&(e=new l(t)),e.length=t),e}function l(e,t,n){if(!(l.TYPED_ARRAY_SUPPORT||this instanceof l))return new l(e,t,n);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return p(this,e)}return c(this,e,t,n)}function c(e,t,n,o){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,n,o){if(t.byteLength,n<0||t.byteLength<n)throw new RangeError("'offset' is out of bounds");if(t.byteLength<n+(o||0))throw new RangeError("'length' is out of bounds");t=void 0===n&&void 0===o?new Uint8Array(t):void 0===o?new Uint8Array(t,n):new Uint8Array(t,n,o);l.TYPED_ARRAY_SUPPORT?(e=t).__proto__=l.prototype:e=d(e,t);return e}(e,t,n,o):"string"==typeof t?function(e,t,n){"string"==typeof n&&""!==n||(n="utf8");if(!l.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var o=0|f(t,n),r=(e=s(e,o)).write(t,n);r!==o&&(e=e.slice(0,r));return e}(e,t,n):function(e,t){if(l.isBuffer(t)){var n=0|h(t.length);return 0===(e=s(e,n)).length?e:(t.copy(e,0,0,n),e)}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(o=t.length)!=o?s(e,0):d(e,t);if("Buffer"===t.type&&i(t.data))return d(e,t.data)}var o;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function u(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function p(e,t){if(u(t),e=s(e,t<0?0:0|h(t)),!l.TYPED_ARRAY_SUPPORT)for(var n=0;n<t;++n)e[n]=0;return e}function d(e,t){var n=t.length<0?0:0|h(t.length);e=s(e,n);for(var o=0;o<n;o+=1)e[o]=255&t[o];return e}function h(e){if(e>=a())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+a().toString(16)+" bytes");return 0|e}function f(e,t){if(l.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var n=e.length;if(0===n)return 0;for(var o=!1;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return j(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return W(e).length;default:if(o)return j(e).length;t=(""+t).toLowerCase(),o=!0}}function m(e,t,n){var o=e[t];e[t]=e[n],e[n]=o}function y(e,t,n,o,r){if(0===e.length)return-1;if("string"==typeof n?(o=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=r?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(r)return-1;n=e.length-1}else if(n<0){if(!r)return-1;n=0}if("string"==typeof t&&(t=l.from(t,o)),l.isBuffer(t))return 0===t.length?-1:b(e,t,n,o,r);if("number"==typeof t)return t&=255,l.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?r?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):b(e,[t],n,o,r);throw new TypeError("val must be string, number or Buffer")}function b(e,t,n,o,r){var i,a=1,s=e.length,l=t.length;if(void 0!==o&&("ucs2"===(o=String(o).toLowerCase())||"ucs-2"===o||"utf16le"===o||"utf-16le"===o)){if(e.length<2||t.length<2)return-1;a=2,s/=2,l/=2,n/=2}function c(e,t){return 1===a?e[t]:e.readUInt16BE(t*a)}if(r){var u=-1;for(i=n;i<s;i++)if(c(e,i)===c(t,-1===u?0:i-u)){if(-1===u&&(u=i),i-u+1===l)return u*a}else-1!==u&&(i-=i-u),u=-1}else for(n+l>s&&(n=s-l),i=n;i>=0;i--){for(var p=!0,d=0;d<l;d++)if(c(e,i+d)!==c(t,d)){p=!1;break}if(p)return i}return-1}function g(e,t,n,o){n=Number(n)||0;var r=e.length-n;o?(o=Number(o))>r&&(o=r):o=r;var i=t.length;if(i%2!=0)throw new TypeError("Invalid hex string");o>i/2&&(o=i/2);for(var a=0;a<o;++a){var s=parseInt(t.substr(2*a,2),16);if(isNaN(s))return a;e[n+a]=s}return a}function _(e,t,n,o){return V(j(t,e.length-n),e,n,o)}function v(e,t,n,o){return V(function(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,o)}function C(e,t,n,o){return v(e,t,n,o)}function E(e,t,n,o){return V(W(t),e,n,o)}function I(e,t,n,o){return V(function(e,t){for(var n,o,r,i=[],a=0;a<e.length&&!((t-=2)<0);++a)n=e.charCodeAt(a),o=n>>8,r=n%256,i.push(r),i.push(o);return i}(t,e.length-n),e,n,o)}function P(e,t,n){return 0===t&&n===e.length?o.fromByteArray(e):o.fromByteArray(e.slice(t,n))}function w(e,t,n){n=Math.min(e.length,n);for(var o=[],r=t;r<n;){var i,a,s,l,c=e[r],u=null,p=c>239?4:c>223?3:c>191?2:1;if(r+p<=n)switch(p){case 1:c<128&&(u=c);break;case 2:128==(192&(i=e[r+1]))&&(l=(31&c)<<6|63&i)>127&&(u=l);break;case 3:i=e[r+1],a=e[r+2],128==(192&i)&&128==(192&a)&&(l=(15&c)<<12|(63&i)<<6|63&a)>2047&&(l<55296||l>57343)&&(u=l);break;case 4:i=e[r+1],a=e[r+2],s=e[r+3],128==(192&i)&&128==(192&a)&&128==(192&s)&&(l=(15&c)<<18|(63&i)<<12|(63&a)<<6|63&s)>65535&&l<1114112&&(u=l)}null===u?(u=65533,p=1):u>65535&&(u-=65536,o.push(u>>>10&1023|55296),u=56320|1023&u),o.push(u),r+=p}return function(e){var t=e.length;if(t<=S)return String.fromCharCode.apply(String,e);var n="",o=0;for(;o<t;)n+=String.fromCharCode.apply(String,e.slice(o,o+=S));return n}(o)}t.Buffer=l,t.SlowBuffer=function(e){+e!=e&&(e=0);return l.alloc(+e)},t.INSPECT_MAX_BYTES=50,l.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=a(),l.poolSize=8192,l._augment=function(e){return e.__proto__=l.prototype,e},l.from=function(e,t,n){return c(null,e,t,n)},l.TYPED_ARRAY_SUPPORT&&(l.prototype.__proto__=Uint8Array.prototype,l.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&l[Symbol.species]===l&&Object.defineProperty(l,Symbol.species,{value:null,configurable:!0})),l.alloc=function(e,t,n){return function(e,t,n,o){return u(t),t<=0?s(e,t):void 0!==n?"string"==typeof o?s(e,t).fill(n,o):s(e,t).fill(n):s(e,t)}(null,e,t,n)},l.allocUnsafe=function(e){return p(null,e)},l.allocUnsafeSlow=function(e){return p(null,e)},l.isBuffer=function(e){return!(null==e||!e._isBuffer)},l.compare=function(e,t){if(!l.isBuffer(e)||!l.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var n=e.length,o=t.length,r=0,i=Math.min(n,o);r<i;++r)if(e[r]!==t[r]){n=e[r],o=t[r];break}return n<o?-1:o<n?1:0},l.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},l.concat=function(e,t){if(!i(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return l.alloc(0);var n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;var o=l.allocUnsafe(t),r=0;for(n=0;n<e.length;++n){var a=e[n];if(!l.isBuffer(a))throw new TypeError('"list" argument must be an Array of Buffers');a.copy(o,r),r+=a.length}return o},l.byteLength=f,l.prototype._isBuffer=!0,l.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)m(this,t,t+1);return this},l.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)m(this,t,t+3),m(this,t+1,t+2);return this},l.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)m(this,t,t+7),m(this,t+1,t+6),m(this,t+2,t+5),m(this,t+3,t+4);return this},l.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?w(this,0,e):function(e,t,n){var o=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return T(this,t,n);case"utf8":case"utf-8":return w(this,t,n);case"ascii":return O(this,t,n);case"latin1":case"binary":return D(this,t,n);case"base64":return P(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return F(this,t,n);default:if(o)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),o=!0}}.apply(this,arguments)},l.prototype.equals=function(e){if(!l.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===l.compare(this,e)},l.prototype.inspect=function(){var e="",n=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(e+=" ... ")),"<Buffer "+e+">"},l.prototype.compare=function(e,t,n,o,r){if(!l.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===o&&(o=0),void 0===r&&(r=this.length),t<0||n>e.length||o<0||r>this.length)throw new RangeError("out of range index");if(o>=r&&t>=n)return 0;if(o>=r)return-1;if(t>=n)return 1;if(this===e)return 0;for(var i=(r>>>=0)-(o>>>=0),a=(n>>>=0)-(t>>>=0),s=Math.min(i,a),c=this.slice(o,r),u=e.slice(t,n),p=0;p<s;++p)if(c[p]!==u[p]){i=c[p],a=u[p];break}return i<a?-1:a<i?1:0},l.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},l.prototype.indexOf=function(e,t,n){return y(this,e,t,n,!0)},l.prototype.lastIndexOf=function(e,t,n){return y(this,e,t,n,!1)},l.prototype.write=function(e,t,n,o){if(void 0===t)o="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)o=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(n)?(n|=0,void 0===o&&(o="utf8")):(o=n,n=void 0)}var r=this.length-t;if((void 0===n||n>r)&&(n=r),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");o||(o="utf8");for(var i=!1;;)switch(o){case"hex":return g(this,e,t,n);case"utf8":case"utf-8":return _(this,e,t,n);case"ascii":return v(this,e,t,n);case"latin1":case"binary":return C(this,e,t,n);case"base64":return E(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return I(this,e,t,n);default:if(i)throw new TypeError("Unknown encoding: "+o);o=(""+o).toLowerCase(),i=!0}},l.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var S=4096;function O(e,t,n){var o="";n=Math.min(e.length,n);for(var r=t;r<n;++r)o+=String.fromCharCode(127&e[r]);return o}function D(e,t,n){var o="";n=Math.min(e.length,n);for(var r=t;r<n;++r)o+=String.fromCharCode(e[r]);return o}function T(e,t,n){var o=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>o)&&(n=o);for(var r="",i=t;i<n;++i)r+=B(e[i]);return r}function F(e,t,n){for(var o=e.slice(t,n),r="",i=0;i<o.length;i+=2)r+=String.fromCharCode(o[i]+256*o[i+1]);return r}function x(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function M(e,t,n,o,r,i){if(!l.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>r||t<i)throw new RangeError('"value" argument is out of bounds');if(n+o>e.length)throw new RangeError("Index out of range")}function A(e,t,n,o){t<0&&(t=65535+t+1);for(var r=0,i=Math.min(e.length-n,2);r<i;++r)e[n+r]=(t&255<<8*(o?r:1-r))>>>8*(o?r:1-r)}function k(e,t,n,o){t<0&&(t=4294967295+t+1);for(var r=0,i=Math.min(e.length-n,4);r<i;++r)e[n+r]=t>>>8*(o?r:3-r)&255}function R(e,t,n,o,r,i){if(n+o>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function L(e,t,n,o,i){return i||R(e,0,n,4),r.write(e,t,n,o,23,4),n+4}function N(e,t,n,o,i){return i||R(e,0,n,8),r.write(e,t,n,o,52,8),n+8}l.prototype.slice=function(e,t){var n,o=this.length;if((e=~~e)<0?(e+=o)<0&&(e=0):e>o&&(e=o),(t=void 0===t?o:~~t)<0?(t+=o)<0&&(t=0):t>o&&(t=o),t<e&&(t=e),l.TYPED_ARRAY_SUPPORT)(n=this.subarray(e,t)).__proto__=l.prototype;else{var r=t-e;n=new l(r,void 0);for(var i=0;i<r;++i)n[i]=this[i+e]}return n},l.prototype.readUIntLE=function(e,t,n){e|=0,t|=0,n||x(e,t,this.length);for(var o=this[e],r=1,i=0;++i<t&&(r*=256);)o+=this[e+i]*r;return o},l.prototype.readUIntBE=function(e,t,n){e|=0,t|=0,n||x(e,t,this.length);for(var o=this[e+--t],r=1;t>0&&(r*=256);)o+=this[e+--t]*r;return o},l.prototype.readUInt8=function(e,t){return t||x(e,1,this.length),this[e]},l.prototype.readUInt16LE=function(e,t){return t||x(e,2,this.length),this[e]|this[e+1]<<8},l.prototype.readUInt16BE=function(e,t){return t||x(e,2,this.length),this[e]<<8|this[e+1]},l.prototype.readUInt32LE=function(e,t){return t||x(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},l.prototype.readUInt32BE=function(e,t){return t||x(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},l.prototype.readIntLE=function(e,t,n){e|=0,t|=0,n||x(e,t,this.length);for(var o=this[e],r=1,i=0;++i<t&&(r*=256);)o+=this[e+i]*r;return o>=(r*=128)&&(o-=Math.pow(2,8*t)),o},l.prototype.readIntBE=function(e,t,n){e|=0,t|=0,n||x(e,t,this.length);for(var o=t,r=1,i=this[e+--o];o>0&&(r*=256);)i+=this[e+--o]*r;return i>=(r*=128)&&(i-=Math.pow(2,8*t)),i},l.prototype.readInt8=function(e,t){return t||x(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},l.prototype.readInt16LE=function(e,t){t||x(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},l.prototype.readInt16BE=function(e,t){t||x(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},l.prototype.readInt32LE=function(e,t){return t||x(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},l.prototype.readInt32BE=function(e,t){return t||x(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},l.prototype.readFloatLE=function(e,t){return t||x(e,4,this.length),r.read(this,e,!0,23,4)},l.prototype.readFloatBE=function(e,t){return t||x(e,4,this.length),r.read(this,e,!1,23,4)},l.prototype.readDoubleLE=function(e,t){return t||x(e,8,this.length),r.read(this,e,!0,52,8)},l.prototype.readDoubleBE=function(e,t){return t||x(e,8,this.length),r.read(this,e,!1,52,8)},l.prototype.writeUIntLE=function(e,t,n,o){(e=+e,t|=0,n|=0,o)||M(this,e,t,n,Math.pow(2,8*n)-1,0);var r=1,i=0;for(this[t]=255&e;++i<n&&(r*=256);)this[t+i]=e/r&255;return t+n},l.prototype.writeUIntBE=function(e,t,n,o){(e=+e,t|=0,n|=0,o)||M(this,e,t,n,Math.pow(2,8*n)-1,0);var r=n-1,i=1;for(this[t+r]=255&e;--r>=0&&(i*=256);)this[t+r]=e/i&255;return t+n},l.prototype.writeUInt8=function(e,t,n){return e=+e,t|=0,n||M(this,e,t,1,255,0),l.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},l.prototype.writeUInt16LE=function(e,t,n){return e=+e,t|=0,n||M(this,e,t,2,65535,0),l.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):A(this,e,t,!0),t+2},l.prototype.writeUInt16BE=function(e,t,n){return e=+e,t|=0,n||M(this,e,t,2,65535,0),l.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):A(this,e,t,!1),t+2},l.prototype.writeUInt32LE=function(e,t,n){return e=+e,t|=0,n||M(this,e,t,4,4294967295,0),l.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):k(this,e,t,!0),t+4},l.prototype.writeUInt32BE=function(e,t,n){return e=+e,t|=0,n||M(this,e,t,4,4294967295,0),l.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):k(this,e,t,!1),t+4},l.prototype.writeIntLE=function(e,t,n,o){if(e=+e,t|=0,!o){var r=Math.pow(2,8*n-1);M(this,e,t,n,r-1,-r)}var i=0,a=1,s=0;for(this[t]=255&e;++i<n&&(a*=256);)e<0&&0===s&&0!==this[t+i-1]&&(s=1),this[t+i]=(e/a>>0)-s&255;return t+n},l.prototype.writeIntBE=function(e,t,n,o){if(e=+e,t|=0,!o){var r=Math.pow(2,8*n-1);M(this,e,t,n,r-1,-r)}var i=n-1,a=1,s=0;for(this[t+i]=255&e;--i>=0&&(a*=256);)e<0&&0===s&&0!==this[t+i+1]&&(s=1),this[t+i]=(e/a>>0)-s&255;return t+n},l.prototype.writeInt8=function(e,t,n){return e=+e,t|=0,n||M(this,e,t,1,127,-128),l.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},l.prototype.writeInt16LE=function(e,t,n){return e=+e,t|=0,n||M(this,e,t,2,32767,-32768),l.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):A(this,e,t,!0),t+2},l.prototype.writeInt16BE=function(e,t,n){return e=+e,t|=0,n||M(this,e,t,2,32767,-32768),l.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):A(this,e,t,!1),t+2},l.prototype.writeInt32LE=function(e,t,n){return e=+e,t|=0,n||M(this,e,t,4,2147483647,-2147483648),l.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):k(this,e,t,!0),t+4},l.prototype.writeInt32BE=function(e,t,n){return e=+e,t|=0,n||M(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),l.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):k(this,e,t,!1),t+4},l.prototype.writeFloatLE=function(e,t,n){return L(this,e,t,!0,n)},l.prototype.writeFloatBE=function(e,t,n){return L(this,e,t,!1,n)},l.prototype.writeDoubleLE=function(e,t,n){return N(this,e,t,!0,n)},l.prototype.writeDoubleBE=function(e,t,n){return N(this,e,t,!1,n)},l.prototype.copy=function(e,t,n,o){if(n||(n=0),o||0===o||(o=this.length),t>=e.length&&(t=e.length),t||(t=0),o>0&&o<n&&(o=n),o===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(o<0)throw new RangeError("sourceEnd out of bounds");o>this.length&&(o=this.length),e.length-t<o-n&&(o=e.length-t+n);var r,i=o-n;if(this===e&&n<t&&t<o)for(r=i-1;r>=0;--r)e[r+t]=this[r+n];else if(i<1e3||!l.TYPED_ARRAY_SUPPORT)for(r=0;r<i;++r)e[r+t]=this[r+n];else Uint8Array.prototype.set.call(e,this.subarray(n,n+i),t);return i},l.prototype.fill=function(e,t,n,o){if("string"==typeof e){if("string"==typeof t?(o=t,t=0,n=this.length):"string"==typeof n&&(o=n,n=this.length),1===e.length){var r=e.charCodeAt(0);r<256&&(e=r)}if(void 0!==o&&"string"!=typeof o)throw new TypeError("encoding must be a string");if("string"==typeof o&&!l.isEncoding(o))throw new TypeError("Unknown encoding: "+o)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var i;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(i=t;i<n;++i)this[i]=e;else{var a=l.isBuffer(e)?e:j(new l(e,o).toString()),s=a.length;for(i=0;i<n-t;++i)this[i+t]=a[i%s]}return this};var U=/[^+\/0-9A-Za-z-_]/g;function B(e){return e<16?"0"+e.toString(16):e.toString(16)}function j(e,t){var n;t=t||1/0;for(var o=e.length,r=null,i=[],a=0;a<o;++a){if((n=e.charCodeAt(a))>55295&&n<57344){if(!r){if(n>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(a+1===o){(t-=3)>-1&&i.push(239,191,189);continue}r=n;continue}if(n<56320){(t-=3)>-1&&i.push(239,191,189),r=n;continue}n=65536+(r-55296<<10|n-56320)}else r&&(t-=3)>-1&&i.push(239,191,189);if(r=null,n<128){if((t-=1)<0)break;i.push(n)}else if(n<2048){if((t-=2)<0)break;i.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;i.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return i}function W(e){return o.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(U,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function V(e,t,n,o){for(var r=0;r<o&&!(r+n>=t.length||r>=e.length);++r)t[r+n]=e[r];return r}}).call(this,n(31))},function(e,t,n){(t=e.exports=n(111)).Stream=t,t.Readable=t,t.Writable=n(81),t.Duplex=n(32),t.Transform=n(115),t.PassThrough=n(209)},function(e,t,n){"use strict";(function(t,o,r){var i=n(65);function a(e){var t=this;this.next=null,this.entry=null,this.finish=function(){!function(e,t,n){var o=e.entry;e.entry=null;for(;o;){var r=o.callback;t.pendingcb--,r(n),o=o.next}t.corkedRequestsFree?t.corkedRequestsFree.next=e:t.corkedRequestsFree=e}(t,e)}}e.exports=g;var s,l=!t.browser&&["v0.10","v0.9."].indexOf(t.version.slice(0,5))>-1?o:i.nextTick;g.WritableState=b;var c=n(43);c.inherits=n(38);var u={deprecate:n(208)},p=n(112),d=n(66).Buffer,h=r.Uint8Array||function(){};var f,m=n(113);function y(){}function b(e,t){s=s||n(32),e=e||{};var o=t instanceof s;this.objectMode=!!e.objectMode,o&&(this.objectMode=this.objectMode||!!e.writableObjectMode);var r=e.highWaterMark,c=e.writableHighWaterMark,u=this.objectMode?16:16384;this.highWaterMark=r||0===r?r:o&&(c||0===c)?c:u,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var p=!1===e.decodeStrings;this.decodeStrings=!p,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){!function(e,t){var n=e._writableState,o=n.sync,r=n.writecb;if(function(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}(n),t)!function(e,t,n,o,r){--t.pendingcb,n?(i.nextTick(r,o),i.nextTick(P,e,t),e._writableState.errorEmitted=!0,e.emit("error",o)):(r(o),e._writableState.errorEmitted=!0,e.emit("error",o),P(e,t))}(e,n,o,t,r);else{var a=E(n);a||n.corked||n.bufferProcessing||!n.bufferedRequest||C(e,n),o?l(v,e,n,a,r):v(e,n,a,r)}}(t,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new a(this)}function g(e){if(s=s||n(32),!(f.call(g,this)||this instanceof s))return new g(e);this._writableState=new b(e,this),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev),"function"==typeof e.destroy&&(this._destroy=e.destroy),"function"==typeof e.final&&(this._final=e.final)),p.call(this)}function _(e,t,n,o,r,i,a){t.writelen=o,t.writecb=a,t.writing=!0,t.sync=!0,n?e._writev(r,t.onwrite):e._write(r,i,t.onwrite),t.sync=!1}function v(e,t,n,o){n||function(e,t){0===t.length&&t.needDrain&&(t.needDrain=!1,e.emit("drain"))}(e,t),t.pendingcb--,o(),P(e,t)}function C(e,t){t.bufferProcessing=!0;var n=t.bufferedRequest;if(e._writev&&n&&n.next){var o=t.bufferedRequestCount,r=new Array(o),i=t.corkedRequestsFree;i.entry=n;for(var s=0,l=!0;n;)r[s]=n,n.isBuf||(l=!1),n=n.next,s+=1;r.allBuffers=l,_(e,t,!0,t.length,r,"",i.finish),t.pendingcb++,t.lastBufferedRequest=null,i.next?(t.corkedRequestsFree=i.next,i.next=null):t.corkedRequestsFree=new a(t),t.bufferedRequestCount=0}else{for(;n;){var c=n.chunk,u=n.encoding,p=n.callback;if(_(e,t,!1,t.objectMode?1:c.length,c,u,p),n=n.next,t.bufferedRequestCount--,t.writing)break}null===n&&(t.lastBufferedRequest=null)}t.bufferedRequest=n,t.bufferProcessing=!1}function E(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function I(e,t){e._final(function(n){t.pendingcb--,n&&e.emit("error",n),t.prefinished=!0,e.emit("prefinish"),P(e,t)})}function P(e,t){var n=E(t);return n&&(!function(e,t){t.prefinished||t.finalCalled||("function"==typeof e._final?(t.pendingcb++,t.finalCalled=!0,i.nextTick(I,e,t)):(t.prefinished=!0,e.emit("prefinish")))}(e,t),0===t.pendingcb&&(t.finished=!0,e.emit("finish"))),n}c.inherits(g,p),b.prototype.getBuffer=function(){for(var e=this.bufferedRequest,t=[];e;)t.push(e),e=e.next;return t},function(){try{Object.defineProperty(b.prototype,"buffer",{get:u.deprecate(function(){return this.getBuffer()},"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(e){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(f=Function.prototype[Symbol.hasInstance],Object.defineProperty(g,Symbol.hasInstance,{value:function(e){return!!f.call(this,e)||this===g&&(e&&e._writableState instanceof b)}})):f=function(e){return e instanceof this},g.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},g.prototype.write=function(e,t,n){var o,r=this._writableState,a=!1,s=!r.objectMode&&(o=e,d.isBuffer(o)||o instanceof h);return s&&!d.isBuffer(e)&&(e=function(e){return d.from(e)}(e)),"function"==typeof t&&(n=t,t=null),s?t="buffer":t||(t=r.defaultEncoding),"function"!=typeof n&&(n=y),r.ended?function(e,t){var n=new Error("write after end");e.emit("error",n),i.nextTick(t,n)}(this,n):(s||function(e,t,n,o){var r=!0,a=!1;return null===n?a=new TypeError("May not write null values to stream"):"string"==typeof n||void 0===n||t.objectMode||(a=new TypeError("Invalid non-string/buffer chunk")),a&&(e.emit("error",a),i.nextTick(o,a),r=!1),r}(this,r,e,n))&&(r.pendingcb++,a=function(e,t,n,o,r,i){if(!n){var a=function(e,t,n){e.objectMode||!1===e.decodeStrings||"string"!=typeof t||(t=d.from(t,n));return t}(t,o,r);o!==a&&(n=!0,r="buffer",o=a)}var s=t.objectMode?1:o.length;t.length+=s;var l=t.length<t.highWaterMark;l||(t.needDrain=!0);if(t.writing||t.corked){var c=t.lastBufferedRequest;t.lastBufferedRequest={chunk:o,encoding:r,isBuf:n,callback:i,next:null},c?c.next=t.lastBufferedRequest:t.bufferedRequest=t.lastBufferedRequest,t.bufferedRequestCount+=1}else _(e,t,!1,s,o,r,i);return l}(this,r,s,e,t,n)),a},g.prototype.cork=function(){this._writableState.corked++},g.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.finished||e.bufferProcessing||!e.bufferedRequest||C(this,e))},g.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=e.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((e+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+e);return this._writableState.defaultEncoding=e,this},Object.defineProperty(g.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),g.prototype._write=function(e,t,n){n(new Error("_write() is not implemented"))},g.prototype._writev=null,g.prototype.end=function(e,t,n){var o=this._writableState;"function"==typeof e?(n=e,e=null,t=null):"function"==typeof t&&(n=t,t=null),null!=e&&this.write(e,t),o.corked&&(o.corked=1,this.uncork()),o.ending||o.finished||function(e,t,n){t.ending=!0,P(e,t),n&&(t.finished?i.nextTick(n):e.once("finish",n));t.ended=!0,e.writable=!1}(this,o,n)},Object.defineProperty(g.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(e){this._writableState&&(this._writableState.destroyed=e)}}),g.prototype.destroy=m.destroy,g.prototype._undestroy=m.undestroy,g.prototype._destroy=function(e,t){this.end(),t(e)}}).call(this,n(42),n(114).setImmediate,n(31))},function(e,t,n){"use strict";var o=n(66).Buffer,r=o.isEncoding||function(e){switch((e=""+e)&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function i(e){var t;switch(this.encoding=function(e){var t=function(e){if(!e)return"utf8";for(var t;;)switch(e){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return e;default:if(t)return;e=(""+e).toLowerCase(),t=!0}}(e);if("string"!=typeof t&&(o.isEncoding===r||!r(e)))throw new Error("Unknown encoding: "+e);return t||e}(e),this.encoding){case"utf16le":this.text=l,this.end=c,t=4;break;case"utf8":this.fillLast=s,t=4;break;case"base64":this.text=u,this.end=p,t=3;break;default:return this.write=d,void(this.end=h)}this.lastNeed=0,this.lastTotal=0,this.lastChar=o.allocUnsafe(t)}function a(e){return e<=127?0:e>>5==6?2:e>>4==14?3:e>>3==30?4:e>>6==2?-1:-2}function s(e){var t=this.lastTotal-this.lastNeed,n=function(e,t,n){if(128!=(192&t[0]))return e.lastNeed=0,"�";if(e.lastNeed>1&&t.length>1){if(128!=(192&t[1]))return e.lastNeed=1,"�";if(e.lastNeed>2&&t.length>2&&128!=(192&t[2]))return e.lastNeed=2,"�"}}(this,e);return void 0!==n?n:this.lastNeed<=e.length?(e.copy(this.lastChar,t,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(e.copy(this.lastChar,t,0,e.length),void(this.lastNeed-=e.length))}function l(e,t){if((e.length-t)%2==0){var n=e.toString("utf16le",t);if(n){var o=n.charCodeAt(n.length-1);if(o>=55296&&o<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1],n.slice(0,-1)}return n}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=e[e.length-1],e.toString("utf16le",t,e.length-1)}function c(e){var t=e&&e.length?this.write(e):"";if(this.lastNeed){var n=this.lastTotal-this.lastNeed;return t+this.lastChar.toString("utf16le",0,n)}return t}function u(e,t){var n=(e.length-t)%3;return 0===n?e.toString("base64",t):(this.lastNeed=3-n,this.lastTotal=3,1===n?this.lastChar[0]=e[e.length-1]:(this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1]),e.toString("base64",t,e.length-n))}function p(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+this.lastChar.toString("base64",0,3-this.lastNeed):t}function d(e){return e.toString(this.encoding)}function h(e){return e&&e.length?this.write(e):""}t.StringDecoder=i,i.prototype.write=function(e){if(0===e.length)return"";var t,n;if(this.lastNeed){if(void 0===(t=this.fillLast(e)))return"";n=this.lastNeed,this.lastNeed=0}else n=0;return n<e.length?t?t+this.text(e,n):this.text(e,n):t||""},i.prototype.end=function(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+"�":t},i.prototype.text=function(e,t){var n=function(e,t,n){var o=t.length-1;if(o<n)return 0;var r=a(t[o]);if(r>=0)return r>0&&(e.lastNeed=r-1),r;if(--o<n||-2===r)return 0;if((r=a(t[o]))>=0)return r>0&&(e.lastNeed=r-2),r;if(--o<n||-2===r)return 0;if((r=a(t[o]))>=0)return r>0&&(2===r?r=0:e.lastNeed=r-3),r;return 0}(this,e,t);if(!this.lastNeed)return e.toString("utf8",t);this.lastTotal=n;var o=e.length-(n-this.lastNeed);return e.copy(this.lastChar,0,o),e.toString("utf8",t,o)},i.prototype.fillLast=function(e){if(this.lastNeed<=e.length)return e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,e.length),this.lastNeed-=e.length}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(1),r=n(34),i=n(29),a=new i.CultureInfo(i.CultureInfo.CurrentCulture.name,i.CultureInfo.CurrentCulture.numberFormat,i.CultureInfo.CurrentCulture.dateTimeFormat);t.ParseRaw=function(e,t){var n;if(!e)return e;switch(t){case o.ManifestType.Decimal:case o.ManifestType.FP:case o.ManifestType.Currency:n=isNaN(parseFloat(e))?void 0:parseFloat(e);break;case o.ManifestType.OptionSet:case o.ManifestType.WholeNone:n=isNaN(parseInt(e,10))?void 0:parseInt(e,10);break;case o.ManifestType.DateAndTimeDateAndTime:case o.ManifestType.DateAndTimeDateOnly:n=new Date(e),isNaN(n)&&(n=void 0);break;case o.ManifestType.TwoOptions:n="true"===e.toLowerCase();break;default:n=e}return n},t.GenerateFormatted=function(e,t){if(!e)return e;switch(t){case o.ManifestType.WholeNone:case o.ManifestType.OptionSet:return r.SimpleFormatter.formatIntegerValue(e,a);case o.ManifestType.FP:case o.ManifestType.Decimal:return r.SimpleFormatter.formatDecimalValue(e,a);case o.ManifestType.Currency:return r.SimpleFormatter.formatCurrencyValue(e,a);case o.ManifestType.DateAndTimeDateAndTime:return r.SimpleFormatter.formatShortDateTimeValue(e,a);case o.ManifestType.DateAndTimeDateOnly:return r.SimpleFormatter.formatShortDateTimeValue(e,a).split(" ")[0];default:return e}},t.ReformatInputValue=function(e,t){var n,r;if(!e)return e;switch(t){case o.ManifestType.WholeNone:r=parseInt(e,10),isNaN(r)||(n=r.toString());break;case o.ManifestType.Decimal:case o.ManifestType.FP:r=parseFloat(e),isNaN(r)||(n=r.toString());break;case o.ManifestType.Currency:r=parseFloat(e),isNaN(r)||(n=r.toFixed(2));break;case o.ManifestType.DateAndTimeDateAndTime:case o.ManifestType.DateAndTimeDateOnly:var i=Date.parse(e);isNaN(i)||(n=e.indexOf("T")<0?e+"T00:00":e.split("T")[0]);break;default:n=e}return n}},function(e,t,n){"use strict";var o,r;Object.defineProperty(t,"__esModule",{value:!0}),t.DefaultEntity={EntityLogicalName:"account",EntityDisplayName:"Account",ViewId:"account_view",Title:"All Accounts",ColumnsOnView:[{LogicalName:"name",DisplayName:"Account Name",DataType:"SingleLine.Text",IsPrimary:!0},{LogicalName:"telephone1",DisplayName:"Main Phone",DataType:"SingleLine.Phone"},{LogicalName:"address1_city",DisplayName:"Address 1: City",DataType:"SingleLine.Text"}]},t.DefaultColumns=(o=t.DefaultEntity,r={},o.ColumnsOnView.forEach(function(e){r[e.LogicalName]={Required:!0,DefaultValue:void 0,Usage:1,Hidden:!1,Static:!0,Type:e.DataType,TypeGroup:void 0,EnumValues:[],IsPrimary:!!e.IsPrimary}}),r)},function(e,t,n){var o=n(33)(n(23),"Map");e.exports=o},function(e,t,n){var o=n(23).Symbol;e.exports=o},function(e,t,n){var o=n(124),r=n(262),i=n(128);e.exports=function(e){return i(e)?o(e):r(e)}},function(e,t){var n=Array.isArray;e.exports=n},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t){e.exports=function(e){return function(t){return e(t)}}},function(e,t,n){(function(e){var o=n(120),r=t&&!t.nodeType&&t,i=r&&"object"==typeof e&&e&&!e.nodeType&&e,a=i&&i.exports===r&&o.process,s=function(){try{var e=i&&i.require&&i.require("util").types;return e||a&&a.binding&&a.binding("util")}catch(e){}}();e.exports=s}).call(this,n(89)(e))},function(e,t){var n=Object.prototype;e.exports=function(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||n)}},function(e,t,n){var o=n(270),r=n(130),i=Object.prototype.propertyIsEnumerable,a=Object.getOwnPropertySymbols,s=a?function(e){return null==e?[]:(e=Object(e),o(a(e),function(t){return i.call(e,t)}))}:r;e.exports=s},function(e,t,n){var o=n(274),r=n(85),i=n(275),a=n(276),s=n(277),l=n(69),c=n(121),u=c(o),p=c(r),d=c(i),h=c(a),f=c(s),m=l;(o&&"[object DataView]"!=m(new o(new ArrayBuffer(1)))||r&&"[object Map]"!=m(new r)||i&&"[object Promise]"!=m(i.resolve())||a&&"[object Set]"!=m(new a)||s&&"[object WeakMap]"!=m(new s))&&(m=function(e){var t=l(e),n="[object Object]"==t?e.constructor:void 0,o=n?c(n):"";if(o)switch(o){case u:return"[object DataView]";case p:return"[object Map]";case d:return"[object Promise]";case h:return"[object Set]";case f:return"[object WeakMap]"}return t}),e.exports=m},function(e,t,n){var o=n(280);e.exports=function(e){var t=new e.constructor(e.byteLength);return new o(t).set(new o(e)),t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(1),r=n(18),i=n(21);t.GetAllCompatibleTypesFromProp=function(e,t){var n=t||{};if(e.Type)return[e.Type];if(e.TypeGroup){var o=e.TypeGroup;if(!n[o])throw Error(r.translateA(i.strings.unrecognized_type_group.key,[o]));return n[o]}throw Error(r.translate(i.strings.property_missing_type.key))},t.GetInputFormType=function(e){switch(e){case o.ManifestType.WholeNone:case o.ManifestType.Decimal:case o.ManifestType.FP:case o.ManifestType.Currency:case o.ManifestType.OptionSet:return"number";case o.ManifestType.DateAndTimeDateOnly:return"date";case o.ManifestType.DateAndTimeDateAndTime:return"datetime-local";default:return"text"}},t.CompileDatasetStateIntoDatasetInputs=function(e){var t=e.bindingMap,n=Object.keys(t),o=e.fileData,r={},i={};return n.forEach(function(e){r[e]=t[e].Type}),o.rawData.forEach(function(e,o){var r="id"+o,a={};n.forEach(function(n){var o=t[n].ColumnName;a[n]=e[o]}),i[r]=a}),{Entries:i,SelectedTypes:r}},t.CheckBindingMap=function(e,t){var n=Object.keys(t.Columns).length,o=Object.keys(e.bindingMap).length,r=e.fileData.columns.length;if(0===o)return!1;if(n>0&&o<n||0===n&&o<r)return!1;for(var i=0,a=Object.keys(e.bindingMap);i<a.length;i++){var s=a[i];if(!e.bindingMap[s].ColumnName)return!1}return!0}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",function(){return CustomControlHostRoot});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),react_dom__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(10),react_dom__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_1__),prop_types__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(27),prop_types__WEBPACK_IMPORTED_MODULE_2___default=__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__),_Utilities_PopupService__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(138),_Models_PropertyBag__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(144),_Utilities_CCFPerformanceTracker__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(14),_VirtualComponentTranslator__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(99),_CommonComponents_Primitive_View__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(8),_Utilities_ManifestType__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(1),_Utilities_LearningPathHelper__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(49),_Models_CustomControlUtilityPointers__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__(3),_CommonComponents_Common_MeasuringHandler_MeasuringHandler__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__(19),_Utilities_TelemetryClient__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(139),_Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__(7),_Utilities_XrmProxy__WEBPACK_IMPORTED_MODULE_14__=__webpack_require__(2),_Models_CommandingWrapper__WEBPACK_IMPORTED_MODULE_15__=__webpack_require__(35),_Utilities_CustomControlHelper__WEBPACK_IMPORTED_MODULE_16__=__webpack_require__(12),_Helpers_CustomControlMemoizationHelper__WEBPACK_IMPORTED_MODULE_17__=__webpack_require__(140),_Helpers_Animation_CustomControlAnimationHelper__WEBPACK_IMPORTED_MODULE_18__=__webpack_require__(145),_Helpers_CustomControlErrorData__WEBPACK_IMPORTED_MODULE_19__=__webpack_require__(141),_Helpers_CustomControlSeeMoreHelper__WEBPACK_IMPORTED_MODULE_20__=__webpack_require__(142),_Models_CustomControlEntityReference__WEBPACK_IMPORTED_MODULE_21__=__webpack_require__(98),_Models_UpdatedPropertyConstants__WEBPACK_IMPORTED_MODULE_22__=__webpack_require__(51),_Utilities_DefaultControlMapper__WEBPACK_IMPORTED_MODULE_23__=__webpack_require__(13),_Helpers_CustomControlLocHelper__WEBPACK_IMPORTED_MODULE_24__=__webpack_require__(50),_Models_PropertyDependencyManager__WEBPACK_IMPORTED_MODULE_25__=__webpack_require__(143),_Helpers_CustomControlPortal__WEBPACK_IMPORTED_MODULE_26__=__webpack_require__(73),__extends=(extendStatics=function(e,t){return(extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}extendStatics(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),extendStatics,CALENDAR_CONTROL_ID="MscrmControls.Calendar.CalendarControl",GRID_CONTROL_ID="MscrmControls.Grid.GridControl",READONLY_GRID_CONTROL_ID="MscrmControls.Grid.ReadOnlyGrid",CUSTOM_CONTROL_INIT="CustomControlHostRoot.init",CUSTOM_CONTROL_UPDATE_VIEW="CustomControlHostRoot.updateView",CUSTOM_CONTROL_UPDATE_OUTPUTS="CustomControlHostRoot.updateOutputs",CUSTOM_CONTROL_DID_MOUNT="CustomControlHostRoot.componentDidMount",CUSTOM_CONTROL_DID_UPDATE="CustomControlHostRoot.componentDidUpdate",CUSTOM_CONTROL_RENDER="CustomControlHostRoot.render",CustomControlHostRoot=function(_super){function CustomControlHostRoot(e){var t=_super.call(this,e)||this;return t._internalStatus=0,t._outputChangedDebouncer=-1,t._manifestRequestedOnce=!1,t._dynamicDataRequestedOnce=!1,t._trackingDimensions=!1,t._subscriber=null,t._latestOutputs=null,t._ignoreSelfUpdates=!1,t._currentlyRendering=!1,t._skipControlUpdate=!1,t._internalState={},t._internalPendingUnsentUpdates=!1,t._outputChangedInternalInProgress=!1,t._updateInternalTracker=[],t._descendantInSeeMore=!1,t._constantHostData=null,t.state={_status:1},_Utilities_TelemetryClient__WEBPACK_IMPORTED_MODULE_12__.a.setProps(e),t._updateInternalTracker=t._updateInternalTracker.concat(e.updatedProperties),t._parentId=Object(_Utilities_CustomControlHelper__WEBPACK_IMPORTED_MODULE_16__.i)(e),t._memoHelper=new _Helpers_CustomControlMemoizationHelper__WEBPACK_IMPORTED_MODULE_17__.a,t._seeMoreHelper=new _Helpers_CustomControlSeeMoreHelper__WEBPACK_IMPORTED_MODULE_20__.a(e.descriptor?e.descriptor.DomId:null),t._errorData=new _Helpers_CustomControlErrorData__WEBPACK_IMPORTED_MODULE_19__.a,t._customControlName=t.props.manifest?t.props.manifest.ConstructorName:t.props.configuration.CustomControlId,t._componentName=_Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.a+"."+t._customControlName,t._portal=react__WEBPACK_IMPORTED_MODULE_0__.createRef(),t}return __extends(CustomControlHostRoot,_super),CustomControlHostRoot.prototype._setGlobalCommandManagerPromise=function(e){this._globalCommandManagerPromise=e},CustomControlHostRoot.prototype._getGlobalCommandManagerPromise=function(){return this._globalCommandManagerPromise},CustomControlHostRoot.prototype._getPopupService=function(){return this._popupService||(this._popupService=new _Utilities_PopupService__WEBPACK_IMPORTED_MODULE_3__.a(this)),this._popupService},CustomControlHostRoot.prototype._initializeData=function(){var e=this;this._internalStatus=1,this._propertyBag=this._createPropertyBag();var t=[],n=this._loadResources();n&&t.push(n),this._ensureParameterDynamicDataInitialization(this.props),this.props.manifest.ConstructorName!==CALENDAR_CONTROL_ID&&this.props.manifest.ConstructorName!==GRID_CONTROL_ID&&this.props.manifest.ConstructorName!==READONLY_GRID_CONTROL_ID||(this._updateTrackResize(!0),this.props.parentDefinedControlProps&&this.props.parentDefinedControlProps.toggleDimensionListener||!this._trackingDimensions||t.push(new Promise(function(t){e._resolveWidth=t}))),this.props.actions.setXrmObject&&this._setXrmObject();var o=function(){_Utilities_CCFPerformanceTracker__WEBPACK_IMPORTED_MODULE_5__.a.scheduleControlUpdate(function(){5!==e._internalStatus&&(e._internalStatus=2,e._initializeControl())})};0===t.length?o():Promise.all(t).then(o,function(){_Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(e.props,new Error("initialize data failed"),"_initializeData",e._parentId),e._onControlLoadedError(),e._setErrorData("initialize data failed for control: "+e.props.manifest.CustomControlId),e.setState({_status:0})})},CustomControlHostRoot.prototype._isVirtual=function(){return!this.props.manifest||this.props.manifest.IsVirtual},CustomControlHostRoot.prototype._seeMoreCallback=function(e){var t=this._isVirtual();this._skipControlUpdate=e?t:!t,this._forceUpdate()},CustomControlHostRoot.prototype._descendantSeeMoreUpdate=function(e){this._descendantInSeeMore=e,this._skipControlUpdate=!0,this._forceUpdate()},CustomControlHostRoot.prototype._getDomIdDivStyleProperties=function(e){var t={width:"100%",maxWidth:this.props.parentDefinedControlProps&&!_Models_CustomControlUtilityPointers__WEBPACK_IMPORTED_MODULE_10__.c(this.props.parentDefinedControlProps.width)&&this.props.parentDefinedControlProps.width>0?this.props.parentDefinedControlProps.width+"px":null,maxHeight:this.props.parentDefinedControlProps&&!_Models_CustomControlUtilityPointers__WEBPACK_IMPORTED_MODULE_10__.c(this.props.parentDefinedControlProps.height)&&this.props.parentDefinedControlProps.height>0?this.props.parentDefinedControlProps.height+"px":null};return e&&!e.Visible&&(t.display="none"),t},CustomControlHostRoot.prototype._createPropertyBag=function(){var e=this,t={getPopupService:this._getPopupService.bind(this),forceUpdate:function(t){_Utilities_CCFPerformanceTracker__WEBPACK_IMPORTED_MODULE_5__.a.scheduleControlUpdate(e._forceUpdate.bind(e,t))},bindDOMElement:this._bindDOMElement.bind(this),unbindDOMComponent:this._unbindDOMComponent.bind(this),updateComponent:this._updateChildComponent.bind(this),setGlobalCommandManagerPromise:this._setGlobalCommandManagerPromise.bind(this),getGlobalCommandManagerPromise:this._getGlobalCommandManagerPromise.bind(this),xrmProxy:_Utilities_XrmProxy__WEBPACK_IMPORTED_MODULE_14__.default};return new _Models_PropertyBag__WEBPACK_IMPORTED_MODULE_4__.a(this.props,t)},CustomControlHostRoot.prototype._updateSelfUpdateIgnore=function(e){this._ignoreSelfUpdates=e},CustomControlHostRoot.prototype._updateTrackResize=function(e){this._trackingDimensions!==e&&(this._trackingDimensions=e,this.props.parentDefinedControlProps&&this.props.parentDefinedControlProps.toggleDimensionListener?this.props.parentDefinedControlProps.toggleDimensionListener(this._trackingDimensions):this._trackingDimensions?(null===this._subscriber&&(this._subscriber={getComponent:this._getComponent.bind(this),onMeasure:this._updateDimensions.bind(this)}),_CommonComponents_Common_MeasuringHandler_MeasuringHandler__WEBPACK_IMPORTED_MODULE_11__.a.getInstance().addMeasuringSubscribers(this._subscriber),_CommonComponents_Common_MeasuringHandler_MeasuringHandler__WEBPACK_IMPORTED_MODULE_11__.a.getInstance().scheduleMeasuringUpdate()):(this._subscriber&&_CommonComponents_Common_MeasuringHandler_MeasuringHandler__WEBPACK_IMPORTED_MODULE_11__.a.getInstance().removeMeasuringSubscribers(this._subscriber),this._forceUpdate()))},CustomControlHostRoot.prototype._loadManifest=function(){var e=this;return this.props.manifest||this._manifestRequestedOnce?Promise.resolve(null):this.props.actions.loadManifest?(this._manifestRequestedOnce=!0,new Promise(function(t,n){e.props.actions.loadManifest(e.props.configuration.CustomControlId,e.props.configuration.Name).then(t,n)}).then(function(){return null})):(_Utilities_XrmProxy__WEBPACK_IMPORTED_MODULE_14__.default.Diagnostics.traceWarning(this._componentName+"._loadManifest","Manifest not found for control with id "+this.props.controlId),Promise.reject("Manifest not found for control with id "+this.props.controlId))},CustomControlHostRoot.prototype._loadResources=function(){return this.props.actions.loadResources(this.props.manifest)},CustomControlHostRoot.prototype._setXrmObject=function(){return this.props.actions.setXrmObject(_Utilities_XrmProxy__WEBPACK_IMPORTED_MODULE_14__.default)},CustomControlHostRoot.prototype._bindDOMElement=function(e,t){var n=this;try{var o=_VirtualComponentTranslator__WEBPACK_IMPORTED_MODULE_6__.a.renderVirtualComponent(e,this.props,this._generateHostData(),this._memoHelper,!1),r=e.getComponentId();if(null==this._childElements&&(this._childElements={}),0===Object.keys(this._childElements).length)for(;t.firstChild;)t.removeChild(t.firstChild);this._portal.current.bindDOMElement(o,t,r,function(){n._childElements[r]=t})}catch(e){throw _Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(this.props,e,"_bindDOMElement",this._parentId),e}},CustomControlHostRoot.prototype._updateChildComponent=function(){},CustomControlHostRoot.prototype._forceUpdate=function(e){if(!this._currentlyRendering){var t=this.props.propBagData.utilsData.scheduleRender;t?t(this.forceUpdate.bind(this,e)):this.forceUpdate(e)}},CustomControlHostRoot.prototype._unbindDOMComponent=function(e){var t=this;null!=this._childElements&&(null!=this._childElements[e]&&(this._portal.current.unbindDOMComponent(e,function(){delete t._childElements[e]}),this.props.actions.clearNestedChild(e)));return!0},CustomControlHostRoot.prototype._clearAllDOMComponents=function(){var e=!0;for(var t in this._childElements)e=e&&this._unbindDOMComponent(t);return e},CustomControlHostRoot.prototype._ensureParameterDynamicDataInitialization=function(e){if(!this._dynamicDataRequestedOnce){if(this._dynamicDataRequestedOnce=!0,Object(_Utilities_CustomControlHelper__WEBPACK_IMPORTED_MODULE_16__.k)(this.props.manifest)){var t=this.props.controlId;this.props.actions.createXrmGrid(this.props.contextToken,this.props.id,this.props.configuration.Parameters,t)||_Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(this.props,new Error("Error creating the Xrm grid object"),CUSTOM_CONTROL_INIT,this._parentId)}for(var n in e.dynamicData.parameters){var o=e.dynamicData.parameters[n];if(o&&o.getParameterManifestType){var r=o.getParameterManifestType();this._commandingWrapper||r!==_Utilities_ManifestType__WEBPACK_IMPORTED_MODULE_8__.ManifestType.Grid&&r!==_Utilities_ManifestType__WEBPACK_IMPORTED_MODULE_8__.ManifestType.TimelineWall||(this._commandingWrapper=new _Models_CommandingWrapper__WEBPACK_IMPORTED_MODULE_15__.a(e))}if(o&&o.ensureDataInitialization){var i=o;(r=i.getParameterManifestType())===_Utilities_ManifestType__WEBPACK_IMPORTED_MODULE_8__.ManifestType.Grid?(this._commandingWrapper.addDataSetWrapper(i),i.ensureDataInitialization({retrieveAction:e.actions.retrieveGridData,retrieveViewAction:e.actions.retrieveView,retrieveViewSelectorAction:e.actions.retrieveViewSelector,refreshDataSetParameter:e.actions.refreshDataSetParameter,retrieveLookupMetadataAction:e.actions.retrieveLookupMetadataAction,retrieveDataSetLookupCellParameter:e.actions.retrieveDataSetLookupCellParameter,executeAddOnLoad:e.actions.executeAddOnLoad,updateFieldValue:e.actions.updateFieldValue,saveEmbeddedEntity:e.actions.saveEmbeddedEntity,executeNotifyHandlersThatEventOccurred:e.actions.executeNotifyHandlersThatEventOccurred,addSessionTab:e.actions.addSessionTab,closeSessionTab:e.actions.closeSessionTab,updateSessionTab:e.actions.updateSessionTab,closeAllSessionTabs:e.actions.closeAllSessionTabs,dismissMessage:e.actions.dismissMessage,markActiveTab:e.actions.markActiveTab,initializeReferencePanelControl:e.actions.initializeReferencePanelControl,cleanReferencePanelState:e.actions.cleanReferencePanelState,openDatasetItem:null,retrieveEntityData:e.actions.retrieveEntityData,retrieveForm:e.actions.retrieveForm,retrieveRecordForForm:e.actions.retrieveRecordDataForForm,forceUpdate:this._forceUpdate.bind(this),updateControlMemoizedDataSet:e.actions.updateControlMemoizedDataSet,loadWebResource:e.actions.loadWebResource})):r===_Utilities_ManifestType__WEBPACK_IMPORTED_MODULE_8__.ManifestType.QuickForm&&i.ensureDataInitialization({retrieveAction:e.actions.retrieveGridData,retrieveViewAction:e.actions.retrieveView,retrieveViewSelectorAction:e.actions.retrieveViewSelector,refreshDataSetParameter:e.actions.refreshDataSetParameter,retrieveLookupMetadataAction:e.actions.retrieveLookupMetadataAction,retrieveDataSetLookupCellParameter:e.actions.retrieveDataSetLookupCellParameter,executeAddOnLoad:e.actions.executeAddOnLoad,updateFieldValue:e.actions.updateFieldValue,saveEmbeddedEntity:e.actions.saveEmbeddedEntity,executeNotifyHandlersThatEventOccurred:e.actions.executeNotifyHandlersThatEventOccurred,addSessionTab:e.actions.addSessionTab,closeSessionTab:e.actions.closeSessionTab,updateSessionTab:e.actions.updateSessionTab,closeAllSessionTabs:e.actions.closeAllSessionTabs,dismissMessage:e.actions.dismissMessage,markActiveTab:e.actions.markActiveTab,initializeReferencePanelControl:e.actions.initializeReferencePanelControl,cleanReferencePanelState:e.actions.cleanReferencePanelState,openDatasetItem:null,retrieveEntityData:e.actions.retrieveEntityData,retrieveForm:e.actions.retrieveForm,retrieveRecordForForm:e.actions.retrieveRecordDataForForm,forceUpdate:this._forceUpdate.bind(this),updateControlMemoizedDataSet:e.actions.updateControlMemoizedDataSet,loadWebResource:e.actions.loadWebResource})}if(o&&o.ensureLookupMetaDataInitialization){if(!(this.props.descriptor.Parameters&&this.props.descriptor.Parameters.delayMetadataInitialization))o.ensureLookupMetaDataInitialization({retrieveLookupMetadataAction:e.actions.retrieveLookupMetadataAction,refreshDataSetParameter:e.actions.refreshDataSetParameter})}if(o&&o.ensureTimelinewallCommandsInitialization)(r=o.getParameterManifestType())===_Utilities_ManifestType__WEBPACK_IMPORTED_MODULE_8__.ManifestType.TimelineWall&&o.ensureTimelinewallCommandsInitialization(e);o&&o.setControlReRender&&o.setControlReRender(this._forceUpdate.bind(this))}}},CustomControlHostRoot.prototype._initializeControl=function(){if(this._ensureParameterDynamicDataInitialization(this.props),this.props.dynamicData.dataReady&&3!==this._internalStatus&&this.props.propBagData.resourcesData.stringsLoaded){var generatedPropertyBag;this._internalStatus=3;try{var stop_1=_Utilities_CCFPerformanceTracker__WEBPACK_IMPORTED_MODULE_5__.a.startLifecycleStopwatch("constructor",this.props.controlId,this.props.manifest.CustomControlId);this._controlInstance=eval("new "+this.props.manifest.ConstructorName+"()"),stop_1(),generatedPropertyBag=this._propertyBag.generateBag(this.props,this._generateHostDataForPropertyBag());var virtualcontrol=this._isVirtual();try{if(Object(_Utilities_CustomControlHelper__WEBPACK_IMPORTED_MODULE_16__.l)(this.props.configuration)){var recordInfo=Object(_Utilities_CustomControlHelper__WEBPACK_IMPORTED_MODULE_16__.j)(this.props),entityTypeName=recordInfo.entityTypeName,recordId=recordInfo.recordId;recordId||(recordId=this.props.propBagData.modeData?this.props.propBagData.modeData.entityId:null),recordId&&!this.props.actions.createXrmForm(this.props.contextToken,this.props.id,entityTypeName,recordId)&&_Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(this.props,new Error("Error creating the Xrm form object"),CUSTOM_CONTROL_INIT,this._parentId)}}catch(e){throw _Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(this.props,new Error("Error creating the Xrm form object"),CUSTOM_CONTROL_INIT,this._parentId,"The first inner catch block"),e}if(this._shouldHandleDependencyUpdate()&&(this._propertyDependencyManager=new _Models_PropertyDependencyManager__WEBPACK_IMPORTED_MODULE_25__.a(this.props),this._getOutputSchemaAction=this._controlInstance.getOutputSchema.bind(this._controlInstance),this._propertyDependencyManager.handleDependencyUpdate(this.props,this._getOutputSchemaAction,generatedPropertyBag)),virtualcontrol){this._executeAnyOnLoadEventsWhenNeeded();var bindOutput=this._onOutputChanged.bind(this),propPersonalizationState=this.props.personalizationState;try{var initStop=_Utilities_CCFPerformanceTracker__WEBPACK_IMPORTED_MODULE_5__.a.startLifecycleStopwatch("init",this.props.controlId,this.props.manifest.CustomControlId);this._controlInstance.init(generatedPropertyBag,bindOutput,propPersonalizationState),initStop()}catch(e){throw _Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(this.props,e,CUSTOM_CONTROL_INIT,this._parentId,"The second inner catch block"),e}}else{this._executeAnyOnLoadEventsWhenNeeded();var element=this._rootElement;if(!element)return;element.setAttribute("data-id",this.props.controlId+"_container");var bindOutput=this._onOutputChanged.bind(this),propPersonalizationState=this.props.personalizationState;try{var initStop=_Utilities_CCFPerformanceTracker__WEBPACK_IMPORTED_MODULE_5__.a.startLifecycleStopwatch("init",this.props.controlId,this.props.manifest.CustomControlId);this._controlInstance.init(generatedPropertyBag,bindOutput,propPersonalizationState,element),initStop()}catch(e){throw _Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(this.props,e,CUSTOM_CONTROL_INIT,this._parentId,"The thrid inner catch block"),e}}var accessibilityData=this._propertyBag.getAccessibilityData();if(accessibilityData&&accessibilityData.keyboardShortcuts&&accessibilityData.keyboardShortcuts.length>0){var props={id:this.props.controlId,keyboardShortcuts:accessibilityData.keyboardShortcuts};this._accessibilityComponent=this.props.actions.createAccessibilityComponent(props)}else this._accessibilityComponent=null;this._internalStatus=4,virtualcontrol?this.forceUpdate():this._updateControl()}catch(e){_Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(this.props,e,CUSTOM_CONTROL_INIT,this._parentId,"The outer catch block"),this._onControlLoadedError(e);var message="Error occured during initialization of control: "+this.props.manifest.CustomControlId+";Message: "+e.message;this._setErrorData(message,e.stack),this.setState({_status:0})}}},CustomControlHostRoot.prototype._updateControl=function(){if(this._skipControlUpdate)this._skipControlUpdate=!1;else if(!this._isVirtual()){var e=_Utilities_CCFPerformanceTracker__WEBPACK_IMPORTED_MODULE_5__.a.trackWork(this._componentName+".updateControl"),t=void 0;try{var n=this._controlInstance;t=this._propertyBag.generateBag(this.props,this._generateHostDataForPropertyBag()),this._executeAnyOnLoadEventsWhenNeeded(),this._currentlyRendering=!0;try{if(void 0===this.props.shouldRender||this.props.shouldRender){this._shouldHandleDependencyUpdate()&&this._propertyDependencyManager.handleDependencyUpdate(this.props,this._getOutputSchemaAction,t);var o=_Utilities_CCFPerformanceTracker__WEBPACK_IMPORTED_MODULE_5__.a.startLifecycleStopwatch("updateView",this.props.controlId,this.props.manifest.CustomControlId);n.updateView(t),o()}}catch(e){_Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(this.props,e,CUSTOM_CONTROL_UPDATE_VIEW,this._parentId,"instance.updateView failure")}this._currentlyRendering=!1}catch(e){_Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(this.props,e,CUSTOM_CONTROL_INIT,this._parentId,"Probably failed to generageBag","ControlFramework")}e()}},CustomControlHostRoot.prototype._executeAnyOnLoadEventsWhenNeeded=function(){if(this.props.dynamicData&&this.props.dynamicData.parameters)for(var e in this.props.dynamicData.parameters)if(this.props.dynamicData.parameters[e]&&this.props.dynamicData.parameters[e]){var t=this.props.dynamicData.parameters[e],n=t;n&&n.getParameterManifestType&&n.getUpdateFlag&&n.getParameterManifestType()===_Utilities_ManifestType__WEBPACK_IMPORTED_MODULE_8__.ManifestType.Grid&&n.getUpdateFlag()&&this.props.actions.executeAddOnLoad(t,this.props.contextToken)}},CustomControlHostRoot.prototype._disposeControl=function(){try{this._clearAllDOMComponents();try{this._internalWorkPromiseResolve&&!this._outputChangedInternalInProgress&&this._onOutputChangedInternal();var e=_Utilities_CCFPerformanceTracker__WEBPACK_IMPORTED_MODULE_5__.a.startLifecycleStopwatch("destroy",this.props.controlId,this.props.manifest.CustomControlId);this._controlInstance.destroy(),e()}catch(e){_Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(this.props,e,"_disposeControl",this._parentId,"Custom control failed to destroy")}}catch(e){_Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(this.props,e,"_disposeControl",this._parentId,"Probably failed to clearAllDOMComponents","ControlFramework")}},CustomControlHostRoot.prototype._onControlLoadedError=function(e){void 0===e&&(e=null),this.props.parentDefinedControlProps&&this.props.parentDefinedControlProps.onControlLoadedError&&this.props.parentDefinedControlProps.onControlLoadedError(e)},CustomControlHostRoot.prototype._onOutputChanged=function(e){var t=this;if(void 0===e&&(e=!1),-1===this._outputChangedDebouncer||e||window.clearTimeout(this._outputChangedDebouncer),5!==this._internalStatus)if(!this._internalPendingUnsentUpdates||e){var n=this._onOutputChangedInternal.bind(this);this.props.actions.registerOngoingWork&&!this._internalWorkPromiseResolve&&this.props.actions.registerOngoingWork(new Promise(function(e){t._internalWorkPromiseResolve=e}),e?n:null,this.props.id),e?this._internalPendingUnsentUpdates=!0:this._outputChangedDebouncer=window.setTimeout(n,100)}else this._onOutputChangedInternal();else _Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportUsage(this.props,"NotifyOutputChanged was called by a destroyed control")},CustomControlHostRoot.prototype._onOutputChangedInternal=function(){var e,t,n=this;this._outputChangedDebouncer=-1,this._outputChangedInternalInProgress=!0;try{if(5!==this._internalStatus){var o=_Utilities_CCFPerformanceTracker__WEBPACK_IMPORTED_MODULE_5__.a.startLifecycleStopwatch("getOutputs",this.props.controlId,this.props.manifest.CustomControlId),r=this._controlInstance.getOutputs();o(),this._latestOutputs=r;var i={},a=function(e){if(!(t=s.props.manifest.Properties.Properties[e])&&s.props.manifest.Properties.Properties instanceof Array&&(t=s.props.manifest.Properties.Properties.find(function(t){return t.Name===e})),t){var n=s.props.configuration.Parameters[e],o=s.props.dynamicData.parameters[e],a=void 0;a=o.getLatestData?o.getLatestData():o;var l={value:r[e],type:t.Usage,paramType:a.type};if(0===t.Usage&&n&&3===n.Usage){var c=n;a.type===_Utilities_ManifestType__WEBPACK_IMPORTED_MODULE_8__.ManifestType.LookupSimple||a.type===_Utilities_ManifestType__WEBPACK_IMPORTED_MODULE_8__.ManifestType.LookupCustomer||a.type===_Utilities_ManifestType__WEBPACK_IMPORTED_MODULE_8__.ManifestType.LookupOwner||a.type===_Utilities_ManifestType__WEBPACK_IMPORTED_MODULE_8__.ManifestType.LookupPartyList||a.type===_Utilities_ManifestType__WEBPACK_IMPORTED_MODULE_8__.ManifestType.LookupRegarding?c.Callback(s._convertValueToSdkFormat(l)):c.Callback(r[e])}else 0!==t.Usage&&2!==t.Usage||(a.attributes&&a.attributes.LogicalName&&(l.fieldName=a.attributes.LogicalName),a.type!==_Utilities_ManifestType__WEBPACK_IMPORTED_MODULE_8__.ManifestType.LookupSimple&&a.type!==_Utilities_ManifestType__WEBPACK_IMPORTED_MODULE_8__.ManifestType.LookupCustomer&&a.type!==_Utilities_ManifestType__WEBPACK_IMPORTED_MODULE_8__.ManifestType.LookupOwner&&a.type!==_Utilities_ManifestType__WEBPACK_IMPORTED_MODULE_8__.ManifestType.LookupPartyList&&a.type!==_Utilities_ManifestType__WEBPACK_IMPORTED_MODULE_8__.ManifestType.LookupRegarding||(l.value=s._convertValueToSdkFormat(l)),i[e]=l)}},s=this;for(var l in r)a(l);var c=this.props.formInfo?this.props.formInfo.EntityName:null,u=this.props.formInfo?this.props.formInfo.RecordId:null,p=this.props.parentDefinedControlProps&&this.props.parentDefinedControlProps.closestParentWithContext;e=this.props.actions.updateOutputs(this.props.id,c,u,this.props.controlId,p,i,this.props.contextToken)}}catch(e){_Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(this.props,e,CUSTOM_CONTROL_UPDATE_OUTPUTS,this._parentId,"The outer catch block")}finally{this._outputChangedInternalInProgress=!1,this._internalWorkPromiseResolve&&(e?e.then(function(){n._internalWorkPromiseResolve(!0),n._internalWorkPromiseResolve=null,n._internalPendingUnsentUpdates=!1},function(){n._internalWorkPromiseResolve(!0),n._internalWorkPromiseResolve=null,n._internalPendingUnsentUpdates=!1}):(this._internalWorkPromiseResolve(!0),this._internalWorkPromiseResolve=null,this._internalPendingUnsentUpdates=!1))}},CustomControlHostRoot.prototype._convertValueToSdkFormat=function(e){var t=[];if(_Models_CustomControlUtilityPointers__WEBPACK_IMPORTED_MODULE_10__.c(e)||_Models_CustomControlUtilityPointers__WEBPACK_IMPORTED_MODULE_10__.c(e.value))return t;if(Array.isArray(e.value))for(var n=0,o=e.value;n<o.length;n++){var r=o[n];t.push(new _Models_CustomControlEntityReference__WEBPACK_IMPORTED_MODULE_21__.a(r.entityName||r.entityType,r.id,r.name))}else t.push(new _Models_CustomControlEntityReference__WEBPACK_IMPORTED_MODULE_21__.a(e.value.entityName||e.value.entityType,e.value.id,e.value.name));return t},CustomControlHostRoot.prototype._getAllocatedHeight=function(){return this._seeMoreHelper.shouldGivePoppedOutDimensions(this._isVirtual())?this._seeMoreHelper.getSeeMorePopupInfo().endHeightInner:this.props.parentDefinedControlProps&&!_Models_CustomControlUtilityPointers__WEBPACK_IMPORTED_MODULE_10__.c(this.props.parentDefinedControlProps.height)?this.props.parentDefinedControlProps.height:_Models_CustomControlUtilityPointers__WEBPACK_IMPORTED_MODULE_10__.c(this._internalState._latestHeight)?-1:this._internalState._latestHeight},CustomControlHostRoot.prototype._getAllocatedWidth=function(){return this._seeMoreHelper.shouldGivePoppedOutDimensions(this._isVirtual())?this._seeMoreHelper.getSeeMorePopupInfo().endWidthInner:this.props.parentDefinedControlProps&&!_Models_CustomControlUtilityPointers__WEBPACK_IMPORTED_MODULE_10__.c(this.props.parentDefinedControlProps.width)?this.props.parentDefinedControlProps.width:_Models_CustomControlUtilityPointers__WEBPACK_IMPORTED_MODULE_10__.c(this._internalState._latestWidth)?-1:this._internalState._latestWidth},CustomControlHostRoot.prototype._generateHostDataForPropertyBag=function(){var e=this._generateHostData();return e.updatedProperties!==this._updateInternalTracker&&(e.updatedProperties=this._updateInternalTracker,this._updateInternalTracker.length>0&&(this._updateInternalTracker=[])),e},CustomControlHostRoot.prototype._seeMorePopup=function(e,t){switch(void 0===t&&(t=!1),this._seeMoreHelper.getSeeMorePopupStatus()){case-1:if(!e)return;this._updateInternalTracker.push(_Models_UpdatedPropertyConstants__WEBPACK_IMPORTED_MODULE_22__.b);break;case 2:if(e)return;this._updateInternalTracker.push(_Models_UpdatedPropertyConstants__WEBPACK_IMPORTED_MODULE_22__.a)}this.props.parentDefinedControlProps&&this.props.parentDefinedControlProps.alertParentInSeeMore&&this.props.parentDefinedControlProps.alertParentInSeeMore(e);var n=this.props.propBagData&&this.props.propBagData.clientData?this.props.propBagData.clientData.isRTL:null;this._seeMoreHelper.seeMorePopup(this._getComponent(),this._seeMoreCallback.bind(this),e,t,n)},CustomControlHostRoot.prototype._generateHostData=function(){return this._constantHostData||(this._constantHostData={allocatedHeight:-1,allocatedWidth:-1,trackResize:this._updateTrackResize.bind(this),updateFullscreen:this._seeMorePopup.bind(this),ignoreUpdates:this._updateSelfUpdateIgnore.bind(this),updatedProperties:[],isInSeeMoreMode:!1,isInTopMostSeeMore:!1,updateDescendantSeeMore:this._descendantSeeMoreUpdate.bind(this)}),this._constantHostData.isInSeeMoreMode=-1!==this._seeMoreHelper.getSeeMorePopupStatus()||this.props.parentDefinedControlProps&&this.props.parentDefinedControlProps.parentInSeeMoreMode,this._constantHostData.isInTopMostSeeMore=this._constantHostData.isInSeeMoreMode&&!this._descendantInSeeMore,this._trackingDimensions?Object.assign({},this._constantHostData,{allocatedHeight:this._getAllocatedHeight(),allocatedWidth:this._getAllocatedWidth()}):this._constantHostData},CustomControlHostRoot.prototype._getComponent=function(){return this._rootElement?this._rootElement:react_dom__WEBPACK_IMPORTED_MODULE_1__.findDOMNode(this)},CustomControlHostRoot.prototype._updateDimensions=function(e){this._trackingDimensions&&e!==this._internalState._latestWidth&&(this._internalState=Object.assign(this._internalState,{_latestWidth:e}),this._updateInternalTracker.push(_Models_UpdatedPropertyConstants__WEBPACK_IMPORTED_MODULE_22__.c),this._resolveWidth&&(this._resolveWidth(),this._resolveWidth=null),this._forceUpdate())},CustomControlHostRoot.prototype.componentWillUnmount=function(){try{var e=_Utilities_CCFPerformanceTracker__WEBPACK_IMPORTED_MODULE_5__.a.createPerformanceEvent("CustomControlHostRoot.componentWillUnmount",this.props.logLevel).startStopwatch({controlId:this.props.controlId,manifestControlName:this.props.manifest&&this.props.manifest.CustomControlId,parentId:this._parentId,level:2..toString()});this._commandingWrapper&&this._commandingWrapper.unmount(),4===this._internalStatus&&this._disposeControl(),this._subscriber&&_CommonComponents_Common_MeasuringHandler_MeasuringHandler__WEBPACK_IMPORTED_MODULE_11__.a.getInstance().removeMeasuringSubscribers(this._subscriber),this._memoHelper&&this._memoHelper.destroy(),this._seeMoreHelper&&this._seeMoreHelper.destroy(),this._internalStatus=5,e()}catch(e){throw _Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(this.props,e,"componentWillUnmount",this._parentId,null,"ControlFramework"),e}},CustomControlHostRoot.prototype.componentDidMount=function(){var e=this;try{var t=_Utilities_CCFPerformanceTracker__WEBPACK_IMPORTED_MODULE_5__.a.createPerformanceEvent("CustomControlHostRoot.componentDidMount",this.props.logLevel).startStopwatch({controlId:this.props.controlId,manifestControlName:this.props.manifest&&this.props.manifest.CustomControlId,parentId:this._parentId,level:2..toString()});if(this.props.stateToPropsMappingError||this._manifestRetrieveFailed||0===this.state._status){if(0!==this.state._status){var n=new Error("Error while mapping state to props during ComponentDidMount for control: "+this.props.controlId+(this.props.stateToPropsMappingErrorMessage?". Error message:"+this.props.stateToPropsMappingErrorMessage:"."));_Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(this.props,n,CUSTOM_CONTROL_DID_MOUNT,this._parentId),this._onControlLoadedError(),this._setErrorData("Error while mapping state to props during ComponentDidMount for control: "+this.props.controlId),this.setState({_status:0})}return}if(!this.props.manifest)return void(this._manifestRequestedOnce||this._loadManifest().catch(function(t){if(_Utilities_DefaultControlMapper__WEBPACK_IMPORTED_MODULE_23__.d.hasOwnProperty(e.props.configuration.CustomControlId))return e._manifestRequestedOnce=!1,void Object(_Utilities_DefaultControlMapper__WEBPACK_IMPORTED_MODULE_23__.i)(e.props.configuration.CustomControlId,_Utilities_DefaultControlMapper__WEBPACK_IMPORTED_MODULE_23__.d[e.props.configuration.CustomControlId]);e._onControlLoadedError(t),e._manifestRetrieveFailed=!0,_Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(e.props,t,CUSTOM_CONTROL_DID_MOUNT,e._parentId,"Error while retrieving manifest during ComponentDidMount for control:"+e.props.controlId),e._setErrorData("Error while retrieving manifest during ComponentDidMount for control: "+e.props.controlId),e.setState({_status:0})}));switch(this._internalStatus){case 0:this._initializeData();break;case 2:this._initializeControl();break;case 4:this._updateControl()}t()}catch(e){throw _Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(this.props,e,"componentDidMount",this._parentId,null,"ControlFramework"),e}},CustomControlHostRoot.prototype.componentWillReceiveProps=function(e){this._updateInternalTracker=this._updateInternalTracker.concat(e.updatedProperties)},CustomControlHostRoot.prototype.componentDidUpdate=function(){var e=this;try{if(this.props.stateToPropsMappingError||this._manifestRetrieveFailed||0===this.state._status)return void(0!==this.state._status&&(_Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(this.props,new Error("Error while mapping state to props during ComponentDidUpdate for control: "+this.props.controlId),CUSTOM_CONTROL_DID_UPDATE,this._parentId),this._setErrorData("Error while mapping state to props during ComponentDidUpdate for control: "+this.props.controlId),this._onControlLoadedError(),this.setState({_status:0})));if(-1!==this._seeMoreHelper.getSeeMorePopupStatus()&&this._seeMoreHelper.checkOnPopupStatus(this._isVirtual(),this._memoHelper.getIsCompositing(),this._getComponent()),!this.props.manifest)return void(this._manifestRequestedOnce||this._loadManifest().catch(function(t){_Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(e.props,t,CUSTOM_CONTROL_DID_UPDATE,e._parentId),e._setErrorData("Error while retrieving manifest during ComponentDidUpdate for control: "+e.props.controlId),e._manifestRetrieveFailed=!0,e._onControlLoadedError(t),e.setState({_status:0})}));switch(this._internalStatus){case 0:this._initializeData();break;case 2:this._initializeControl();break;case 4:this._updateControl()}this._registerToLearningPath()}catch(e){throw _Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(this.props,e,"componentDidUpdate",this._parentId,null,"ControlFramework"),e}},CustomControlHostRoot.prototype._registerToLearningPath=function(){if(4===this._internalStatus&&this._propertyBag){var e=this._propertyBag.getLearningPathBag();_Utilities_LearningPathHelper__WEBPACK_IMPORTED_MODULE_9__.a.registerToLearningPath(this._getComponent(),e.DOMAttributeName,e.baseControlId)}},CustomControlHostRoot.prototype.shouldComponentUpdate=function(e){try{if(!this._ignoreSelfUpdates||!this._latestOutputs||!e.dynamicData.updated)return!0;if(e.updatedProperties)for(var t=0,n=e.updatedProperties;t<n.length;t++){var o=n[t];if(o!==_Models_UpdatedPropertyConstants__WEBPACK_IMPORTED_MODULE_22__.d&&!e.dynamicData.parameters.hasOwnProperty(o))return!0}for(var r in e.dynamicData.parameters)if(e.dynamicData.parameters[r]&&e.dynamicData.parameters[r].hasOwnProperty("raw"))if(this._latestOutputs&&this._latestOutputs.hasOwnProperty(r)){var i=e.dynamicData.parameters[r].raw;if(!_Models_CustomControlUtilityPointers__WEBPACK_IMPORTED_MODULE_10__.c(i)&&i.equals?!i.equals(this._latestOutputs[r]):i!==this._latestOutputs[r])return!0}else if(this.props.dynamicData.parameters&&this.props.dynamicData.parameters[r]&&this.props.dynamicData.parameters[r]!==e.dynamicData.parameters[r])return!0;return!1}catch(e){throw _Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(this.props,e,"shouldComponentUpdate",this._parentId,null,"ControlFramework"),e}},CustomControlHostRoot.prototype._renderMainControlComponent=function(){var e;try{if(4===this._internalStatus&&this._isVirtual()){if(this._skipControlUpdate)return this._skipControlUpdate=!1,this._currentlyRendering=!1,this._memoHelper.getRoot();var t=void 0,n=void 0,o=this._controlInstance;if(this._executeAnyOnLoadEventsWhenNeeded(),e=this._propertyBag.generateBag(this.props,this._generateHostDataForPropertyBag()),void 0===this.props.shouldRender||this.props.shouldRender){try{this._shouldHandleDependencyUpdate()&&this._propertyDependencyManager.handleDependencyUpdate(this.props,this._getOutputSchemaAction,e);var r=_Utilities_CCFPerformanceTracker__WEBPACK_IMPORTED_MODULE_5__.a.startLifecycleStopwatch("updateView",this.props.controlId,this.props.manifest.CustomControlId);t=o.updateView(e),r(),this._currentlyRendering=!1}catch(e){return _Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(this.props,e,"_renderMainControlComponent",this._parentId),this._setErrorData("Custom Control with Id: "+this.props.manifest.CustomControlId+" failed to render; Message: "+e.message,e.stack),this._getErrorElement()}try{n=_VirtualComponentTranslator__WEBPACK_IMPORTED_MODULE_6__.a.renderVirtualComponent(t,this.props,this._generateHostData(),this._memoHelper),this._memoHelper.setRoot(n)}catch(e){return _Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(this.props,e,"_renderMainControlComponent",this._parentId,null,"ControlFramework"),this._setErrorData("Custom Control with Id: "+this.props.manifest.CustomControlId+" failed to renderVirtualComponent; Message: "+e.message,e.stack),this._getErrorElement()}return n}if(this._memoHelper.getRoot())return n=this._memoHelper.getRoot()}this._currentlyRendering=!1;return this._renderGenericDiv({width:"100%"})}catch(e){throw _Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(this.props,e,"_renderMainControlComponent",this._parentId,null,"ControlFramework"),e}},CustomControlHostRoot.prototype.renderShadow=function(e,t){return t=t||{display:"none"},react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{key:"shadow",id:e?e+"shadow":null,style:t})},CustomControlHostRoot.prototype._getErrorElement=function(){var e=this.props.controlId+"_container_error";return react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{className:"customControl inError","data-id":e},react__WEBPACK_IMPORTED_MODULE_0__.createElement("a",{href:"#",onClick:this._handleErrorLinkClick.bind(this)},Object(_Helpers_CustomControlLocHelper__WEBPACK_IMPORTED_MODULE_24__.a)("ERROR_LOADING_CONTROL")))},CustomControlHostRoot.prototype._setErrorData=function(e,t){(e||t)&&(this._errorData.errorMessage=e,this._errorData.errorDetails=t)},CustomControlHostRoot.prototype._shouldHandleDependencyUpdate=function(){return this._controlInstance&&this._controlInstance.getOutputSchema&&this.props.authoringMode},CustomControlHostRoot.prototype.renderWrappedMainElement=function(e,t){var n=t||(this.props.parentDefinedControlProps&&this.props.parentDefinedControlProps.containerStyleOverrides?Object.assign(this._getDomIdDivStyleProperties(this.props.descriptor),this.props.parentDefinedControlProps.containerStyleOverrides.allContainers,this.props.parentDefinedControlProps.containerStyleOverrides.primaryInnerContainer):this._getDomIdDivStyleProperties(this.props.descriptor)),o=this._isVirtual(),r=this._memoHelper.getIsCompositing(),i=this._renderCommandingComponent(),a=null===this.props.propBagData?null:this.props.propBagData.clientData.isRTL;return this.props.globalCommandManagerInitialized&&this._globalCommandManagerPromise.resolve(),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_CommonComponents_Primitive_View__WEBPACK_IMPORTED_MODULE_7__.a,{key:"mainControlContainer",id:e,style:n},i,this._accessibilityComponent,this._seeMoreHelper.renderCloseButton(this._seeMorePopup.bind(this,!1),o,r,a),this._seeMoreHelper.renderSpacer(o,r),this._renderMainControlComponent())},CustomControlHostRoot.prototype.renderContainerWithResizePads=function(e,t,n){var o=t||(this.props.parentDefinedControlProps&&this.props.parentDefinedControlProps.containerStyleOverrides?Object.assign({width:"100%"},this.props.parentDefinedControlProps.containerStyleOverrides.allContainers,this.props.parentDefinedControlProps.containerStyleOverrides.outerContainer):{width:"100%"}),r=this._seeMoreHelper&&-1!==this._seeMoreHelper.getSeeMorePopupStatus(),i=r?"dialog":null,a=!!r||null;return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_CommonComponents_Primitive_View__WEBPACK_IMPORTED_MODULE_7__.a,{key:"mainControlOuterContainer",id:n+"_outer"+Math.floor(10*Math.random()+1),style:o,accessibilityModal:a,role:i},e)},CustomControlHostRoot.prototype._renderGenericDiv=function(e){var t=this,n="customControl "+(this.props.manifest?this.props.manifest.ConstructorName.replace("."," "):"");return this.props.manifest&&this.props.manifest.ConstructorName&&(n=n+" "+this.props.manifest.ConstructorName),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{key:"MainContainerElement",className:n,style:e,ref:function(e){t._rootElement=e}},this._getPopupService().renderPopups())},CustomControlHostRoot.prototype._renderCommandingComponent=function(){if(this.props.internalCommandManagerIds&&this.props.internalCommandManagerIds.length&&this._commandingWrapper){for(var e=[],t=0;t<this.props.internalCommandManagerIds.length;t++){var n=this.props.internalCommandManagerIds[t].commandManagerId,o=this.props.internalCommandManagerIds[t].ribbonId;e.push(this._commandingWrapper.createHiddenCommandManager(n,o))}return e}return null},CustomControlHostRoot.prototype._handleErrorLinkClick=function(e){e.preventDefault();var t={message:this._errorData.errorMessage,details:this._errorData.errorDetails};_Utilities_XrmProxy__WEBPACK_IMPORTED_MODULE_14__.default.openErrorDialog(t)},CustomControlHostRoot.prototype._renderInternal=function(){this._currentlyRendering=!0;var e="";if(this.props.descriptor&&(e=this.props.descriptor.DomId?this.props.descriptor.DomId:""),0===this.state._status)return this._currentlyRendering=!1,_Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportUsage(this.props,"Failure"),_Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(this.props,new Error("Error loading control"),CUSTOM_CONTROL_RENDER,this._parentId,null),this._getErrorElement();if(5===this._internalStatus)return this._currentlyRendering=!1,react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null);var t=this.props.parentDefinedControlProps&&this.props.parentDefinedControlProps.containerStyleOverrides?Object.assign({width:"100%"},this.props.parentDefinedControlProps.containerStyleOverrides.allContainers,this.props.parentDefinedControlProps.containerStyleOverrides.rootContainer):{width:"100%"};if(4!==this._internalStatus){if(this._isVirtual())return null;this._currentlyRendering=!1;var n=this.renderWrappedMainElement(e,null),o=this.renderContainerWithResizePads(n,null,e),r=this.renderShadow(e,null);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_CommonComponents_Primitive_View__WEBPACK_IMPORTED_MODULE_7__.a,{key:"root",style:t},r,o)}var i={shadowStyle:null,innerStyle:null,outerStyle:null},a=this._seeMoreHelper.getSeeMorePopupStatus(),s=this._seeMoreHelper.getSeeMorePopupInfo();-1!==a&&(i=_Helpers_Animation_CustomControlAnimationHelper__WEBPACK_IMPORTED_MODULE_18__.a.getCustomControlFancyPopoutStyles(this.context.renderer,a,s),4!==a&&(t={height:s.startHeight,width:s.startWidth}));var l=this.renderWrappedMainElement(e,i.innerStyle);if(this._isVirtual()&&!this._memoHelper.getIsCompositing()&&(-1===a||4===a))return _Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportUsage(this.props,"Success"),l;var c=this.renderContainerWithResizePads(l,i.outerStyle,e),u=this.renderShadow(e,i.shadowStyle);return _Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportUsage(this.props,"Success"),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_CommonComponents_Primitive_View__WEBPACK_IMPORTED_MODULE_7__.a,{key:"root",style:t},u,c)},CustomControlHostRoot.prototype.render=function(){var e=this;return[this._renderInternal(),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_Helpers_CustomControlPortal__WEBPACK_IMPORTED_MODULE_26__.a,{key:"portal",ref:this._portal,renderReactSubtree:this.props.actions.renderReactSubtree,onError:function(t){return _Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(e.props,t,"_bindDOMElement",e._parentId)}})]},CustomControlHostRoot.displayName="CustomControlHost",CustomControlHostRoot}(react__WEBPACK_IMPORTED_MODULE_0__.Component);CustomControlHostRoot.contextTypes={renderer:prop_types__WEBPACK_IMPORTED_MODULE_2__.object}},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var o=function(){function e(e,t,n){this._etn=e,this._id=t||"",this._name=n,Object.freeze(this)}return Object.defineProperty(e.prototype,"entityName",{get:function(){return this._etn},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"entityType",{get:function(){return this._etn},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"logicalName",{get:function(){return this._etn},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"LogicalName",{get:function(){return this._etn},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"id",{get:function(){return this._id},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"Id",{get:function(){return this._Id},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"name",{get:function(){return this._name},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"Name",{get:function(){return this._name},enumerable:!0,configurable:!0}),e.toString=function(e){return e.entityName+":"+e.id},e.equals=function(e,t){return!e&&!t||!(!e||!t)&&(e.entityName===t.entityName&&e.id===t.id&&e.name===t.name)},e.EMPTY=new e(""),e}()},function(e,t,n){"use strict";var o,r,i=n(0),a=n(3),s=n(1);!function(e){e[e.Root=1]="Root",e[e.Nested=2]="Nested"}(o||(o={})),function(e){e[e.None=0]="None",e[e.Slate=1]="Slate",e[e.Phone=2]="Phone",e[e.Desktop=3]="Desktop",e[e.MailApp=4]="MailApp"}(r||(r={}));var l,c=["CRMICON","ENTITYICON","BOOLEAN","BUTTON","COMBOBOX","CONTAINER","HYPERLINK","IMG","FILEINPUT","FLYOUT","LABEL","LIST","LISTITEM","LIVEPERSONACARDHOVERTARGET","MICROSOFTICON","POPUP","SCROLLCONTAINER","TABLE","TABLEBODY","TABLECAPTION","TABLECELL","TABLEFOOTER","TABLEHEADER","TABLEHEADERCELL","TABLEROW","TEXTINPUT","IFRAME","COMMANDBAR","OPTION","SELECT","ENTITYIMAGE","PROGRESSINDICATOR","RADIO","HORIZONTALSCROLL","VIEWSELECTORCONTROL","TEXT","PRESENCEINDICATOR","PLACEHOLDER"],u=n(12),p=n(36),d=n(10),h=n(6),f=n(11);!function(e){e[e.Backspace=8]="Backspace",e[e.Tab=9]="Tab",e[e.Enter=13]="Enter",e[e.Shift=16]="Shift",e[e.Ctrl=17]="Ctrl",e[e.Alt=18]="Alt",e[e.PauseBreak=19]="PauseBreak",e[e.Capslock=20]="Capslock",e[e.Escape=27]="Escape",e[e.Space=32]="Space",e[e.PageUp=33]="PageUp",e[e.PageDown=34]="PageDown",e[e.End=35]="End",e[e.Home=36]="Home",e[e.LeftArrow=37]="LeftArrow",e[e.UpArrow=38]="UpArrow",e[e.RightArrow=39]="RightArrow",e[e.DownArrow=40]="DownArrow",e[e.Insert=45]="Insert",e[e.Delete=46]="Delete",e[e.Num0=48]="Num0",e[e.Num1=49]="Num1",e[e.Num2=50]="Num2",e[e.Num3=51]="Num3",e[e.Num4=52]="Num4",e[e.Num5=53]="Num5",e[e.Num6=54]="Num6",e[e.Num7=55]="Num7",e[e.Num8=56]="Num8",e[e.Num9=57]="Num9",e[e.A=65]="A",e[e.B=66]="B",e[e.C=67]="C",e[e.D=68]="D",e[e.E=69]="E",e[e.F=70]="F",e[e.G=71]="G",e[e.H=72]="H",e[e.I=73]="I",e[e.J=74]="J",e[e.K=75]="K",e[e.L=76]="L",e[e.M=77]="M",e[e.N=78]="N",e[e.O=79]="O",e[e.P=80]="P",e[e.Q=81]="Q",e[e.R=82]="R",e[e.S=83]="S",e[e.T=84]="T",e[e.U=85]="U",e[e.V=86]="V",e[e.W=87]="W",e[e.X=88]="X",e[e.Y=89]="Y",e[e.Z=90]="Z",e[e.LeftWindowKey=91]="LeftWindowKey",e[e.RightWindowKey=92]="RightWindowKey",e[e.SelectKey=93]="SelectKey",e[e.NumPad0=96]="NumPad0",e[e.NumPad1=97]="NumPad1",e[e.NumPad2=98]="NumPad2",e[e.NumPad3=99]="NumPad3",e[e.NumPad4=100]="NumPad4",e[e.NumPad5=101]="NumPad5",e[e.NumPad6=102]="NumPad6",e[e.NumPad7=103]="NumPad7",e[e.NumPad8=104]="NumPad8",e[e.NumPad9=105]="NumPad9",e[e.Multiply=106]="Multiply",e[e.Add=107]="Add",e[e.Subtract=109]="Subtract",e[e.DecimalPoint=110]="DecimalPoint",e[e.Divide=111]="Divide",e[e.F1=112]="F1",e[e.F2=113]="F2",e[e.F3=114]="F3",e[e.F4=115]="F4",e[e.F5=116]="F5",e[e.F6=117]="F6",e[e.F7=118]="F7",e[e.F8=119]="F8",e[e.F9=120]="F9",e[e.F10=121]="F10",e[e.F11=122]="F11",e[e.F12=123]="F12",e[e.NumLock=144]="NumLock",e[e.ScrollLock=145]="ScrollLock",e[e.SemiColon=186]="SemiColon",e[e.EqualSign=187]="EqualSign",e[e.Comma=188]="Comma",e[e.Dash=189]="Dash",e[e.Period=190]="Period",e[e.ForwardSlash=191]="ForwardSlash",e[e.GraveAccent=192]="GraveAccent",e[e.OpenBracket=219]="OpenBracket",e[e.BackSlash=220]="BackSlash",e[e.CloseBraket=221]="CloseBraket",e[e.SingleQuote=222]="SingleQuote"}(l||(l={}));var m,y=n(5),b=n(4);!function(e){e[e.left=0]="left",e[e.right=1]="right",e[e.up=2]="up",e[e.down=3]="down",e[e.leftup=4]="leftup",e[e.rightup=5]="rightup",e[e.upleft=6]="upleft",e[e.downleft=7]="downleft"}(m||(m={}));var g=m,_=n(7),v=n(2),C="topBar-mobile";function E(){return{width:document.body.offsetWidth,height:document.body.offsetHeight}}function I(){var e=document.getElementById(C),t=P(),n=E();return{left:document.body.scrollLeft,top:document.body.scrollTop,right:t.width-n.width-document.body.scrollLeft,bottom:e?e.offsetHeight:t.height-n.height-document.body.scrollTop}}function P(){return{width:document.body.scrollWidth,height:document.body.scrollHeight}}function w(e){return{width:e.offsetWidth-e.clientWidth+e.scrollWidth,height:e.offsetHeight-e.clientHeight+e.scrollHeight}}function S(e,t,n,o){void 0===n&&(n=E()),void 0===o&&(o=I());var r={},i=t.maxWidth&&t.width&&t.maxWidth>0&&t.maxWidth<t.width?t.maxWidth:t.width?t.width:0,a=t.maxHeight&&t.height&&t.maxHeight>0&&t.maxHeight<t.height?t.maxHeight:t.height?t.height:0;return"number"==typeof e.left?(r.width=Math.max(o.left-e.left,0),r.width+=Math.max(e.left+i-n.width-o.left,0)):"number"==typeof e.right&&(r.width=Math.max(o.right-e.right,0),r.width+=Math.max(e.right+i-n.width-o.right,0)),"number"==typeof e.top?(r.height=Math.max(o.top-e.top,0),r.height+=Math.max(e.top+a-n.height-o.top,0)):"number"==typeof e.bottom&&(r.height=Math.max(o.bottom-e.bottom,0),r.height+=Math.max(e.bottom+a-n.height-o.bottom,0)),r}function O(e){switch(e){case g.down:return[g.down,g.downleft,g.up,g.upleft,g.right,g.rightup,g.left,g.leftup];case g.downleft:return[g.downleft,g.down,g.upleft,g.up,g.right,g.rightup,g.left,g.leftup];case g.right:return[g.right,g.rightup,g.left,g.leftup,g.down,g.downleft,g.up,g.upleft];case g.rightup:return[g.rightup,g.right,g.leftup,g.left,g.down,g.downleft,g.up,g.upleft];case g.up:return[g.up,g.upleft,g.down,g.downleft,g.right,g.rightup,g.left,g.leftup];case g.upleft:return[g.upleft,g.up,g.downleft,g.down,g.right,g.rightup,g.left,g.leftup];case g.left:return[g.left,g.leftup,g.right,g.rightup,g.down,g.downleft,g.up,g.upleft];case g.leftup:return[g.leftup,g.left,g.rightup,g.right,g.down,g.downleft,g.up,g.upleft];default:var t="";try{t=JSON.stringify(e)}catch(e){t="Unable to parse initial direction"}var n=new Error("Unexpected initial direction: "+t);throw v.default.Reporting.reportFailure(_.a+".Primitive.Flyout",n),n}}function D(e,t,n){var o=function(e,t){void 0===t&&(t=document.body);var n=t.getBoundingClientRect(),o=e.getBoundingClientRect();return{top:o.top-n.top,left:o.left-n.left}}(n,document.body),r=n.getBoundingClientRect(),i=E(),a={top:o.top,left:o.left,width:r.width,height:r.height,right:o.left+r.width,bottom:o.top+r.height},s=a.top,l=a.right,c=null,u=null;function p(){return e.maxWidth&&e.maxWidth<e.width?e.maxWidth:e.width}function d(){return e.maxHeight&&e.maxHeight<e.height?e.maxHeight:e.height}switch(t){case g.rightup:e&&e.height?s=a.bottom-d():(s=void 0,u=i.height-a.bottom);break;case g.up:e&&e.height?s=a.top-d():(u=i.height-a.top,s=void 0),l=a.left;break;case g.upleft:e&&e.height?s=a.top-d():(u=i.height-a.top,s=void 0),e&&e.width?l=a.right-p():(l=void 0,c=i.width-a.right);break;case g.down:s=a.bottom,l=a.left;break;case g.downleft:s=a.bottom,e&&e.width?l=a.right-p():(l=void 0,c=i.width-a.right);break;case g.left:s=a.top,e&&e.width?l=a.left-p():c=i.width-a.left;break;case g.leftup:e&&e.height?s=a.bottom-d():(s=void 0,u=i.height-a.bottom),e&&e.width?l=a.left-p():c=i.width-a.left}return{left:l,top:s,right:c,bottom:u}}function T(e){var t=window.getComputedStyle(e);return e&&t&&("auto"===t.overflow||"scroll"===t.overflow||"auto"===t.overflowX||"scroll"===t.overflowX||"auto"===t.overflowY||"scroll"===t.overflowY)}var F,x=n(8),M=n(19),A=function(){function e(){this._parentFlyoutNameToChildRootNameMap={}}return e.getInstance=function(){return e._instance||(e._instance=new e),e._instance},e.prototype.mountChildFlyout=function(e,t){this._parentFlyoutNameToChildRootNameMap.hasOwnProperty(e)||(this._parentFlyoutNameToChildRootNameMap[e]=[]),this._parentFlyoutNameToChildRootNameMap[e].push(t)},e.prototype.unmountChildFlyout=function(e,t){if(this._parentFlyoutNameToChildRootNameMap.hasOwnProperty(e)){var n=this._parentFlyoutNameToChildRootNameMap[e],o=n.indexOf(t);return o>-1&&(n.splice(o,1),n.length<1&&delete this._parentFlyoutNameToChildRootNameMap[e]),!1}return!1},e.prototype.getChildRoots=function(e){return this._parentFlyoutNameToChildRootNameMap.hasOwnProperty(e)?this._parentFlyoutNameToChildRootNameMap[e]:[]},e}(),k=n(20),R=n(30),L=n(40),N=n(73),U=(F=function(e,t){return(F=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}F(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),B=function(){return(B=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},j=_.a+".Primitive.Flyout",W=function(e){function t(t){var n=e.call(this,t)||this;return n._wasInnerFocusRequested=!1,n._seeMorePopupCount=null,n._resizeHandler=n.debouncingFlyoutEvent(function(){n._flyoutElement&&n._flyoutElement.offsetHeight>0&&n.updateDom()}),n._scrollHandler=n.debouncingFlyoutEvent(function(){for(var e in n._isOutOfRange=!1,n._scrollableAncestors)if(t=n._flyoutElement,o=n._scrollableAncestors[e],t.getBoundingClientRect().top<o.getBoundingClientRect().top||t.getBoundingClientRect().bottom>o.getBoundingClientRect().bottom){n._isOutOfRange=!0;break}var t,o;n.updateDom()},100),n.debouncingFlyoutEvent=n.debouncingFlyoutEvent.bind(n),n.handleMeasuring=n.handleMeasuring.bind(n),n.setFlyoutRef=n.setFlyoutRef.bind(n),n.handlePointerDown=n.handlePointerDown.bind(n),n.handleOnScroll=n.props.enableTrackOnScroll?n.handleOnScroll.bind(n):null,n.handleWindowBlur=n.handleWindowBlur.bind(n),n._isClickInsideFlyout=n._isClickInsideFlyout.bind(n),n._portal=i.createRef(),n}return U(t,e),Object.defineProperty(t.prototype,"flyoutElement",{get:function(){return this._flyoutElement},enumerable:!0,configurable:!0}),t.prototype.getFlyoutRootId=function(){return this.props.isPortalToElement&&this.props.portalContainerId?this.props.portalContainerId:t.generateFlyoutId(this.props.parentCustomControlId,this.props.groupId)},t.prototype.componentDidMount=function(){var e=this;this.props.hasDynamicContent&&(this._measuringSubscriber={onMeasure:this.handleMeasuring,getComponent:function(){return e._flyoutElement}},M.a.getInstance().addMeasuringSubscribers(this._measuringSubscriber)),this.updateDom(),this._subscribeFlyoutPopupManager()},t.generateFlyoutId=function(e,t){return(e?e+"|":"")+(t?"__flyoutRootNode_"+t:"__flyoutRootNode")},t.prototype.componentDidUpdate=function(){this.updateDom()},t.prototype.componentWillUnmount=function(){this.removeFromDom(),this.resetFocus(),this.props.hasDynamicContent&&M.a.getInstance().removeMeasuringSubscribers(this._measuringSubscriber),R.a.getInstance().removeSubscribers(this._managerSubscriber)},t.prototype._getRelativeElement=function(){var e=document.getElementById(this.props.relativeToElementId);return e&&this.props.relativeToElementIdSelector&&(e=this.props.relativeToElementIdSelector(e)),e},t.prototype.calculatePosition=function(){var e,t={position:"absolute",visibility:this._isOutOfRange?"hidden":"visible",overflowX:this.props.disableHorizontalScroll?"hidden":"auto",overflowY:this.props.disableVerticalScroll?"hidden":"auto"},n=Object.assign({},this.props.size);if(this.getIsAbsolute())e=this.props.position;else{if(!this.getIsRelative()){var o=new Error("Cannot recognize positioning approach");throw v.default.Reporting.reportFailure(j,o),o}var r=this._getRelativeElement();if(!r)return t.visibility="hidden",t;this._updateActualSize();var i=this.props.children;if(i&&i.props&&i.props.style){var a=new RegExp("^(\\d+)\\s*px$"),s=i.props.style,l=void 0;!n.maxHeight&&s.maxHeight&&(l=a.exec(s.maxHeight))&&(n.maxHeight=parseInt(l[1],10)),!n.maxWidth&&s.maxWidth&&(l=a.exec(s.maxWidth))&&(n.maxWidth=parseInt(l[1],10))}var c={width:n.width||this._actualSize&&this._actualSize.width,maxWidth:n.maxWidth||this._actualSize&&this._actualSize.maxWidth,height:n.height||this._actualSize&&this._actualSize.height,maxHeight:n.maxHeight||this._actualSize&&this._actualSize.maxHeight},u=null===this.props.flyoutDirection||void 0===this.props.flyoutDirection?g.right:this.props.flyoutDirection,p=null;if(null!==this._lastDirection&&void 0!==this._lastDirection&&(p=u,u=this._lastDirection),this.props.enforceDirection)e=D(c,u,r),this._lastDirection=u;else{var d=function(e,t,n,o){if(e){var r=void 0;null!==o&&o!==t?((r=O(o)).splice(r.indexOf(t),1),r.unshift(t)):r=O(t);for(var i=t,a=void 0,s=void 0,l=0,c=r;l<c.length;l++){var u=c[l],p=D(e,u,n),d=S(p,e);if(0===d.height&&0===d.width){s=p,i=u,a=d;break}if(a){var h=a.width+a.height;d.width+d.height<h&&(s=p,i=u,a=d)}else s=p,i=u,a=d}return{Position:s,Direction:i}}return{Position:D(e,t,n),Direction:t}}(c,u,r,p);e=d.Position,this._lastDirection=d.Direction}e.left=e.left>=0?e.left:0}if(this._actualSize){var h=S(e,this._actualSize),f=I();h.width&&!n.width&&(e.left<f.left&&(e.left=f.left),e.right<f.right&&(e.right=f.right)),!h.height||n.height||e.bottom||0===e.bottom||(e.top<f.top&&(e.top=f.top),e.bottom<f.bottom&&(e.bottom=f.bottom))}var m=function(e,t,n){void 0===t&&(t=E()),void 0===n&&(n=I());var o={};return"number"==typeof e.left?o.maxWidth=t.width+n.left-e.left:"number"==typeof e.right&&(o.maxWidth=t.width+n.right-e.right),"number"!=typeof e.top&&"number"!=typeof e.bottom||(o.maxHeight=t.height+n.top-e.top),o}(e),y=m;return n.maxHeight&&n.maxHeight<m.maxHeight&&(y.maxHeight=n.maxHeight),n.maxWidth&&n.maxWidth<m.maxWidth&&(y.maxWidth=n.maxWidth),Object.assign(t,e,y),n.height&&(t.height=n.height),n.width&&(t.width=n.width),t},t.prototype._updateActualSize=function(){if(this._actualSize){var e=w(this._flyoutElement);0!==e.width&&0!==e.height&&(this._actualSize.width===e.width&&this._actualSize.height===e.height||(this._actualSize=w(this._flyoutElement)))}},t.prototype.ensureRootNode=function(){this.rootNode||(this.rootNode=document.getElementById(this.getFlyoutRootId()),this.rootNode||(this.rootNode=document.createElement("div"),this.rootNode.id=this.getFlyoutRootId(),this.rootNode.setAttribute("data-id",this.rootNode.id),this.rootNode.setAttribute("flyoutRoot",this.props.isPortalToElement&&this.props.portalContainerId?"":"__flyoutRootNode"),document.body.appendChild(this.rootNode)))},t.prototype.debouncingFlyoutEvent=function(e,t){void 0===t&&(t=200);var n=0;return function(){n||(n=window.setTimeout(function(){e(),n=0},t))}},t.prototype.handleMeasuring=function(e,t){this._actualSize.width===e&&this._actualSize.height===t||(this._actualSize.width=e,this._actualSize.height=t,this.updateDom())},t.prototype.getIsRelative=function(){return"relative"===this.props.positionType||!this.props.positionType&&this.props.relativeToElementId},t.prototype.getIsAbsolute=function(){return"absolute"===this.props.positionType||!this.props.positionType&&this.props.position},t.prototype.setFlyoutRef=function(e){this._flyoutElement=d.findDOMNode(e)},t.prototype.updateDom=function(){var e=this;if(this.props.testhooks&&this.props.testhooks,this.props.children){null===this._seeMorePopupCount&&(this._seeMorePopupCount=k.a.getInstance().getPopupCount());var t=this._seeMorePopupCount>0;this.ensureRootNode(),this.parentFlyoutNode||(this.parentFlyoutNode=document.createElement("div"),this.rootNode.appendChild(this.parentFlyoutNode));var n=Object.assign({},this.props.flyoutStyle,this.calculatePosition(),{boxSizing:"border-box"},this.props.rootZIndex||t?{zIndex:1}:{},(window.navigator.userAgent.match("MSIE")||window.navigator.userAgent.match("Trident"))&&void 0===this._flyoutElement?{left:0}:{}),o=!this._actualSize;if(o){var r=P();Object.assign(n,{bottom:null,right:null,maxWidth:r.width,maxHeight:r.height,visibility:"hidden"})}var a=i.createElement(x.a,B({id:this.props.id,style:n,ref:this.setFlyoutRef,onClick:function(e){return e.stopPropagation()}},this.props),this.props.children);this._portal.current.bindDOMElement(a,this.parentFlyoutNode,"flyout",function(){if(e.focusInnerElement(o),e._actualSize=w(e._flyoutElement),!e._isFlyoutShown&&(window.addEventListener("blur",e.handleWindowBlur),window.addEventListener("resize",e._resizeHandler),e.getIsRelative())){e._scrollableAncestors=function(e,t){var n=[];for(e=e&&e.parentElement;e&&e!==t;)T(e)&&n.push(e),e=e.parentElement;return n}(e._getRelativeElement(),document.body);for(var t=0,n=e._scrollableAncestors;t<n.length;t++){n[t].addEventListener("scroll",e._scrollHandler)}}e._isFlyoutShown=!0,o&&e.updateDom()})}else this.removeFromDom(),this.resetFocus()},t.prototype.focusInnerElement=function(e){!e&&this.props.focusCallback&&this.props.focusElementId&&!this._wasInnerFocusRequested&&(this.props.focusCallback(this.props.focusElementId),this._wasInnerFocusRequested=!0)},t.prototype.removeFromDom=function(){if(this.parentFlyoutNode&&(this._portal.current.unbindDOMComponent("flyout"),this.rootNode.removeChild(this.parentFlyoutNode),this.parentFlyoutNode=void 0,0===this.rootNode.childElementCount&&(document.body.removeChild(this.rootNode),this.rootNode=void 0)),this._isFlyoutShown&&(window.removeEventListener("blur",this.handleWindowBlur),this.getIsRelative()&&(window.removeEventListener("resize",this._resizeHandler),this._scrollableAncestors)))for(var e=0,t=this._scrollableAncestors;e<t.length;e++){t[e].removeEventListener("scroll",this._scrollHandler)}this._isFlyoutShown=!1},t.prototype.resetFocus=function(){this.props.focusElementId&&this.props.relativeToElementId&&this.props.focusCallback&&this.props.focusCallback(this.props.relativeToElementId)},t.prototype._isClickInsideFlyout=function(e){if(this._flyoutElement&&this._flyoutElement.contains(e.target)||document.querySelector(".ms-Layer"))return!0;for(var t=A.getInstance().getChildRoots(this.getFlyoutRootId()),n=0;n<t.length;n++){var o=document.getElementById(t[n]);if(o&&o.contains(e.target))return!0}return!1},t.prototype.handleOnScroll=function(e){this.ensureRootNode(),!this._isClickInsideFlyout(e)&&this.props.dismissOnScroll&&this.props.onOutsideClick&&this.props.onOutsideClick(e)},t.prototype.handlePointerDown=function(e){this.ensureRootNode(),!this._isClickInsideFlyout(e)&&this.props.onOutsideClick&&this.props.onOutsideClick(e)},t.prototype.handleWindowBlur=function(e){if(this.ensureRootNode(),this.props.onOutsideClick&&!this.props.keepOpenOnWindowBlur){var t=document.activeElement;if(t&&"IFRAME"===t.tagName.toUpperCase()){var n=Object.create(e,{target:{value:t}});if(this._isClickInsideFlyout(n))return}var o=Object.create(e,{target:{value:this.rootNode}});this.props.onOutsideClick(o)}},t.prototype.render=function(){return i.createElement(N.a,{key:"portal",ref:this._portal,renderReactSubtree:d.createPortal})},t.prototype._subscribeFlyoutPopupManager=function(){var e=this;this._managerSubscriber={type:L.a.Flyout,isClickInsideSubscriber:this._isClickInsideFlyout,onPointerDown:this.handlePointerDown,onScroll:this.props.enableTrackOnScroll?this.handleOnScroll:null,getComponent:function(){return e._flyoutElement}},R.a.getInstance().addSubscribers(this._managerSubscriber)},t.displayName="Flyout",t}(i.Component),V=n(15),H=n(9),K=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),z=function(e){function t(t){var n=e.call(this,t)||this;return n._refCallbackTrigger=n._refCallbackTrigger.bind(n),n}return K(t,e),t.prototype.getElementName=function(){return"ul"},t.prototype.getFlexClassName=function(e){return Object(V.b)(e?e.display:null)},t.prototype.getElementProps=function(){var e={};return!0===this.props.announceAccessibilityNotification&&(e[H.p]=this.props.notificationType||"polite"),Object.assign(e,{ref:this.props.refCallback?this._refCallbackTrigger:null})},t.prototype._refCallbackTrigger=function(e){this.props.refCallback(e)},t.prototype.getElementStyle=function(){if(this.props.style)return Object.assign({},Object(V.a)(this.props.style))},t.displayName="List",t}(y.a),G=h.connect(b.a)(z),q=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Y=function(e){function t(t){return e.call(this,t)||this}return q(t,e),t.prototype._handleSelected=function(e){this.props.onSelected&&this.props.onSelected(e)},t.prototype.componentWillReceiveProps=function(e){e.isSelected&&e.isSelected!==this.props.isSelected&&this._handleSelected(this)},t.prototype.getElementName=function(){return"li"},t.prototype.getElementProps=function(){var e;return(e={})[H.x]=this.props.isSelected,e["data-text"]=this.props.dataText,e["data-value"]=this.props.dataValue,e["data-expanded"]=this.props.dataExpanded,e},t.displayName="ListItem",t}(y.a);function $(e){return e&&e.style?e.isSelected&&e.selectedStyle?Object.assign({},Object.assign({},e.style,e.selectedStyle),Object(b.b)(e)):Object.assign(e.style,Object(b.b)(e)):{}}var Q=h.connect(function(e){return function(t){return t.renderRule($,e)}})(Y),X=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Z=_.a+".Primitive.ScrollView",J=function(e){function t(t){var n=e.call(this,t)||this;return n._setInnerViewRef=n._setInnerViewRef.bind(n),n._onScrollHandler=n._onScrollHandler.bind(n),n._onClickHandler=n._onClickHandler.bind(n),n._ua=window.navigator.userAgent,n}return X(t,e),t.prototype.componentDidUpdate=function(e){if(this.props.scrollToId!==e.scrollToId&&this.props.scrollToId&&this._scrollViewRef){var t=document.getElementById(this.props.scrollToId),n=d.findDOMNode(this);this._scrollToContent(n,t)}},t.prototype.componentDidMount=function(){if(this.props.scrollToId&&this._scrollViewRef){var e=document.getElementById(this.props.scrollToId),t=d.findDOMNode(this);this._scrollToContent(t,e)}},t.prototype._scrollToContentHorizontalLTR=function(e,t){if(e.scrollLeft+e.offsetWidth>t.offsetLeft+t.offsetWidth)e.scrollLeft=t.offsetLeft+t.offsetWidth-e.offsetWidth;else if(e.scrollLeft<t.offsetLeft){var n=t.offsetLeft;e.scrollLeft=n,e.scrollLeft!==n&&this._isMobileSafari()&&(e.scrollLeft=e.scrollLeft-1)}},t.prototype._scrollToContentHorizontalRTLIEorEdge=function(e,t){var n=e.offsetWidth-t.offsetLeft;e.scrollLeft<n-t.offsetWidth?e.scrollLeft=n-t.offsetWidth:e.scrollLeft+e.offsetWidth>n+t.offsetWidth&&(e.scrollLeft=n-e.offsetWidth)},t.prototype._scrollToContent=function(e,t){e&&t&&(this.props.horizontal?this.props.isRTL&&this._isIEorEdge()?this._scrollToContentHorizontalRTLIEorEdge(e,t):this._scrollToContentHorizontalLTR(e,t):e.scrollTop+e.clientHeight<t.offsetTop+t.clientHeight?e.scrollTop=t.offsetTop+t.clientHeight-e.clientHeight:t.offsetTop<e.scrollTop&&(e.scrollTop=t.offsetTop))},t.prototype._isIEorEdge=function(){return this.isIE||this.isEdge},t.prototype._isMobileSafari=function(){var e=!!this._ua.match(/iPad/i)||!!this._ua.match(/iPod/i)||!!this._ua.match(/iPhone/i),t=!!this._ua.match(/WebKit/i);return e&&t&&!this._ua.match(/CriOS/i)},t.prototype._onClickHandler=function(e){void 0!==this.props.onClick&&this.props.onClick(e)},t.prototype._onScrollHandler=function(e){if(void 0!==this.props.onScroll&&this.props.onScroll(e),void 0!==this.props.onScrollToBottom){var t=d.findDOMNode(this);t.scrollTop+t.offsetHeight>=t.scrollHeight&&this.props.onScrollToBottom()}},t.prototype.getElementName=function(){return this.props.semanticTag?this.props.semanticTag:"div"},t.prototype.getElementProps=function(){return{onClick:this._onClickHandler,onScroll:this._onScrollHandler,ref:this.props.scrollToId||this.props.refCallback?this._setInnerViewRef:null}},t.prototype.scrollToChild=function(e){if(!e){var t=new Error("child must be specified");throw v.default.Reporting.reportFailure(Z,t),t}var n=d.findDOMNode(this),o=d.findDOMNode(e);this._scrollToContent(n,o)},t.prototype._setInnerViewRef=function(e){this.props.refCallback&&this.props.refCallback(this),this._scrollViewRef=e},t.prototype.getFlexClassName=function(e){return Object(V.b)(e?e.display:null)},t.prototype.getElementClassName=function(){var n=e.prototype.getElementClassName.call(this);return this.props&&this.props.className&&(n+=" "+this.props.className),this.props.style&&t.isElementScrollable(this.props.style)&&(n+=k.a.getInstance().getDisableScrollStyle()&&!this.props.isWithinATopMostSeeMore?" webkitScrollAuto":" webkitScroll"),n},t.displayName="ScrollView",t}(y.a);function ee(e){if(e&&e.style){var t=e.horizontal?Object.assign({},e.style,{overflowX:"scroll",flexDirection:"row"}):Object.assign({},e.style,{overflowY:"scroll",flexDirection:"column"}),n=e.contentContainerStyle?Object.assign({},e.style,e.contentContainerStyle):e.style,o=Object.assign({},t,n);return Object.assign(e.style,o,Object(b.b)(e),Object(V.a)(o))}return{}}var te=h.connect(function(e){return function(t){return t.renderRule(ee,e)}})(J),ne=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();function oe(e){switch(e){case"normal":return"normal";case"bold":return"bold";default:return Number(e)}}var re=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return ne(t,e),t.prototype.getElementName=function(){return this.props.semanticTag||"span"},t.prototype.getElementClassName=function(){var e=this.props.styles?this.props.styles:"";return this.props.className?e+" "+this.props.className:e},t.prototype.getElementProps=function(){var e={};switch(this.props.role){case"alert":e[H.p]=this.props.notificationType||"polite"}return e},t.displayName="Text",t}(y.a);function ie(e){return e&&e.style?e.style.fontWeight?Object.assign({},{fontWeight:"string"==typeof e.style.fontWeight?oe(e.style.fontWeight):e.style.fontWeight},Object(b.b)(e)):Object.assign(e.style,Object(b.b)(e)):{}}var ae,se,le=h.connect(function(e){return function(t){return t.renderRule(ie,e)}})(re),ce=n(50),ue=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();!function(e){e[e.default=0]="default",e[e.emailAddress=1]="emailAddress",e[e.numeric=2]="numeric",e[e.phonePad=3]="phonePad",e[e.asciiCapable=4]="asciiCapable",e[e.numbersAndPunctuation=5]="numbersAndPunctuation",e[e.url=6]="url",e[e.numberPad=7]="numberPad",e[e.namePhonePad=8]="namePhonePad",e[e.decimalPad=9]="decimalPad",e[e.twitter=10]="twitter",e[e.webSearch=11]="webSearch"}(ae||(ae={})),function(e){e[e.start=0]="start",e[e.update=1]="update",e[e.end=2]="end"}(se||(se={}));var pe=function(e){function t(t){var n=e.call(this,t)||this;return n._compositionEvents=[],n._refCallbackTrigger=n._refCallbackTrigger.bind(n),n._onKeyPress=n._onKeyPress.bind(n),n._onChange=n._onChange.bind(n),n._onInput=n._onInput.bind(n),n.handleFocus=n.handleFocus.bind(n),n.handleBlur=n.handleBlur.bind(n),n.handlePointerDown=n.handlePointerDown.bind(n),n.handlePointerUp=n.handlePointerUp.bind(n),n.handleKeyDown=n.handleKeyDown.bind(n),n._refElementCallback=n._refElementCallback.bind(n),n.handleKeyUp=n.handleKeyUp.bind(n),n._onCompositionStart=n._onCompositionStart.bind(n),n._onCompositionUpdate=n._onCompositionUpdate.bind(n),n._onCompositionEnd=n._onCompositionEnd.bind(n),n.state={value:t.value},n}return ue(t,e),t.prototype.componentWillReceiveProps=function(e){e&&e.value!==this.state.value&&this.setState({value:e.value}),this._dateInput&&(this._dateInput.defaultValue="")},t.prototype._selectValue=function(){if(!this.props.type||"text"===this.props.type.toLowerCase()||"search"===this.props.type.toLowerCase()||"url"===this.props.type.toLowerCase()||"tel"===this.props.type.toLowerCase()||"password"===this.props.type.toLowerCase()){var e=(this.props.multiline,d.findDOMNode(this));e.selectionStart=0,e.selectionEnd=e.value.length}},t.prototype._onChange=function(e){this.isIE||this._handleOnChange(e)},t.prototype._onInput=function(e){if(this.isIE){var t=(this.props.multiline,e.target.value);if(this.state.value===t&&0===this._compositionEvents.length)return;this._compositionEvents=[],this._handleOnChange(e)}},t.prototype._onCompositionStart=function(){this._compositionEvents.push(se.start)},t.prototype._onCompositionUpdate=function(e){var t=(this.props.multiline,e.target.value);this.state.value!==t&&this.setState({value:t}),this._compositionEvents.push(se.update)},t.prototype._onCompositionEnd=function(){this._compositionEvents.push(se.end)},t.prototype._handleOnChange=function(e){var t=(this.props.multiline,e.target.value);this.setState({value:t}),this.props.onChange&&this.props.onChange(e),this.props.onChangeText&&this.props.onChangeText(t)},t.prototype._onKeyPress=function(e){this.props.onKeyPress&&this.props.onKeyPress(e)},t.prototype.handleFocus=function(e){var t=this,n=function(){t.props.selectValueOnFocus&&t.state&&t.state.value&&t._selectValue(),t.props.onFocus&&t.props.onFocus(e)};if(window.navigator.userAgent.match(/Edge\/(13|14)/))return window.setTimeout(n,10);n()},t.prototype.handleBlur=function(e){this.props.onBlur&&this.props.onBlur(e)},t.prototype.handlePointerDown=function(e){this.props.onPointerDown&&this.props.onPointerDown(e)},t.prototype.handlePointerUp=function(e){this.props.onPointerUp&&this.props.onPointerUp(e)},t.prototype.handleKeyDown=function(e){this.props.onKeyDown&&this.props.onKeyDown(e)},t.prototype.handleKeyUp=function(e){this.props.onKeyUp&&this.props.onKeyUp(e)},t.prototype.getElementName=function(){return this.props.multiline?"textarea":"input"},t.prototype.getElementProps=function(){var e,n=((e={value:this.state.value||"",title:this.props.title||("---"===this.state.value?Object(ce.a)("SELECT_TO_ENTER_DATA"):this.state.value)||Object(ce.a)("SELECT_TO_ENTER_DATA"),onChange:this._onChange,onInput:this._onInput,onCompositionStart:this._onCompositionStart,onCompositionUpdate:this._onCompositionUpdate,onCompositionEnd:this._onCompositionEnd,placeholder:this.props.placeholder,maxLength:this.props.maxLength,onKeyPress:this._onKeyPress,autoComplete:"off"})[H.u]=this.props.disabled||this.props.readOnly?!0===this.props.readOnly:null,e[H.r]=this.props.multiline?!0===this.props.multiline:null,e[H.d]=this.props.autoComplete,e);if(this.props.readOnly&&(n.readOnly=!0),this.props.disabled&&(n.disabled=!0),this.props.multiline)this.props.rows&&(n.rows=Math.max(this.props.rows,t._MIN_TEXTAREA_ROWS));else if(this.props.type)n.type=this.props.type;else switch(this.props.keyboardType){case ae.numeric:n.type="number";break;case ae.emailAddress:n.type="email";break;default:n.type="text"}return Object.assign(n,{ref:this.props.refCallback?this._refCallbackTrigger:"datetime-local"===this.props.type||"datetime"===this.props.type?this._refElementCallback:null})},t.prototype._refElementCallback=function(){this._dateInput=d.findDOMNode(this)},t.prototype._refCallbackTrigger=function(e){this.props.refCallback(e)},t.displayName="TextInput",t._MIN_TEXTAREA_ROWS=2,t}(y.a);function de(e){var t={"::-ms-clear":{display:"none"}};return e&&e.style?(e.isRTL&&Object.assign(t,{direction:"rtl",unicodeBidi:"bidi-override"}),Object.assign(e.style,t,Object(b.b)(e))):{}}var he,fe=h.connect(function(e){return function(t){return t.renderRule(de,e)}})(pe),me=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),ye=function(){return(ye=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},be=function(e){function t(n){var o=e.call(this,n)||this;o._wasInnerFocusRequested=!1,o.clickedOutside=!1,o.keyboardScrolling=!1,o.setFocusToItem=function(e){if((!o.props.freeTextMode||!o.state.hasFocus)&&e&&null!==e){var t=document.getElementById(e);t&&null!==t&&t.focus()}},o.keyboardNavigation=function(e){if(-1!==t.supportedKeys.indexOf(e.keyCode)){switch(e.keyCode){case l.UpArrow:o._handleMove(-1);break;case l.DownArrow:o._handleMove(1);break;case l.PageUp:o._handleMove(-1*o.getPageSize());break;case l.PageDown:o._handleMove(1*o.getPageSize());break;case l.Enter:o.handleEnterKey(e);break;case l.Space:o.props.freeTextMode||o.handleEnterKey(e);break;case l.Escape:o.setIsExpanded(!1);break;case l.Tab:o.handleTabKey(e)}e.preventDefault(),e.stopPropagation()}},o._handleMove=o._handleMove.bind(o),o._handleButtonClick=o._handleButtonClick.bind(o),o._handleTextInputChange=o._handleTextInputChange.bind(o),o._saveTextInputRef=o._saveTextInputRef.bind(o),o.saveContainerRef=o.saveContainerRef.bind(o),o.saveItemRef=o.saveItemRef.bind(o),o.saveTextRef=o.saveTextRef.bind(o),o.handleValueChange=o.handleValueChange.bind(o),o.handleItemSelected=o.handleItemSelected.bind(o),o.handleItemPointerDown=o.handleItemPointerDown.bind(o),o.handleItemHover=o.handleItemHover.bind(o),o.handleTextPointerDown=o.handleTextPointerDown.bind(o),o.handleBlur=o.handleBlur.bind(o),o.handleEnterKey=o.handleEnterKey.bind(o),o.handleKeyDown=o.handleKeyDown.bind(o),o.handleKeyboardExpandRequest=o.handleKeyboardExpandRequest.bind(o),o.handleFlyoutOutsideClick=o.handleFlyoutOutsideClick.bind(o),o.handleInnerControlFocus=o.handleInnerControlFocus.bind(o),o.handleInnerControlBlur=o.handleInnerControlBlur.bind(o),o.handleRelativeToElementSelector=o.handleRelativeToElementSelector.bind(o);var r=o.getVisibleOptions(),i=o._getInitialStateOption(n);return o.keyboardScrolling=!1,o._internalIdAppendix=n.hideInternalId?void 0:Object(f.b)(),o.selectedIndex=r.indexOf(i),o.state={option:i,isExpanded:!1,freeTextValue:n&&n.freeTextMode?n.value||n.defaultValue:i&&i.text,isAutoCompleting:!1},o}return me(t,e),Object.defineProperty(t.prototype,"focusableControlId",{get:function(){return this.getInternalId()+"_text"+(this.props.freeTextMode?"Input":"")},enumerable:!0,configurable:!0}),t.prototype.getInternalId=function(e,t){return void 0===e&&(e=this.props.id),void 0===t&&(t=this._internalIdAppendix),e+(t?"_"+t:"")},t.prototype.getListId=function(e,t){return void 0===e&&(e=this.props.id),void 0===t&&(t=this._internalIdAppendix),this.getInternalId(e,t)+"_list"},Object.defineProperty(t.prototype,"getEmptyListId",{get:function(){return this.getListId()+"_empty"},enumerable:!0,configurable:!0}),t.prototype.getListItemId=function(e){return this.getListId()+(e?e.id||e.value:"")},t.prototype.getFlyoutId=function(e,t){return void 0===e&&(e=this.props.id),void 0===t&&(t=this._internalIdAppendix),this.getInternalId(e,t)+"_flyout"},t.prototype.getButtonId=function(e,t){return void 0===e&&(e=this.props.id),void 0===t&&(t=this._internalIdAppendix),this.getInternalId(e,t)+"_button"},t.prototype.onFlyoutScroll=function(){},t.prototype.getActiveDescendantId=function(){if(~this.selectedIndex){var e=this.getVisibleOptions()[this.selectedIndex];if(e)return this.getListItemId(e)}return""},t.prototype.getPageSize=function(){return this.props.pageSize||t.DEFAULT_PAGE_SIZE},t.prototype._getInitialStateOption=function(e){var t=e.defaultValue?this.getOptionByValue(e.options,e.defaultValue):this.getOptionByValue(e.options,e.value);return!t&&e.options&&e.options.length>0&&!e.freeTextMode&&(t=e.options[0]),t},t.prototype.getOptionByValue=function(e,t){if(e){var n=e.filter(function(e){return e.value===t});if(n.length>0)return n[0]}},t.prototype.componentWillReceiveProps=function(e){if(e&&!e.defaultValue&&e.value!==this.props.value){var t=void 0;if(e.freeTextMode)t={freeTextValue:this.state.hasFocus&&this.state.freeTextValue||e.value,freeTextOptionDisplayValue:this.state.hasFocus&&this.state.freeTextValue||e.value};else{var n=this.getOptionByValue(e.options,e.value);this.selectedIndex=e.options&&e.options.indexOf(n),t={option:n,freeTextValue:n&&n.text,freeTextOptionDisplayValue:n&&n.text}}this.setState(t)}if(e&&e.defaultValue&&(!this.state.option||!this.state.option.value)&&e.options!==this.props.options&&!e.freeTextMode){n=this.getOptionByValue(e.options,e.defaultValue);this.selectedIndex=e.options&&e.options.indexOf(n);t={option:n,freeTextValue:n&&n.text};this.setState(t)}},t.prototype._getIfValueChanged=function(e){return this.props.freeTextMode?e!==this.state.freeTextValue:e!==this.getSelectedOptionValue()},t.prototype.getElementProps=function(){return{name:this.props.name}},t.prototype.getElementChildren=function(){},t.prototype.setIsExpanded=function(e){e?(this._updateContainerWidth(),this._wasInnerFocusRequested=!1):this._wasInnerFocusRequested||(this.setFocusToItem(this.focusableControlId),this._wasInnerFocusRequested=!0),this.state.isExpanded||(this.keyboardScrolling=!1),this.setState({isExpanded:e})},t.prototype._toggleIsExpanded=function(){this.setIsExpanded(!this.state.isExpanded)},t.prototype.setFocus=function(){if(this.props.freeTextMode){if(this._textInput){var e=d.findDOMNode(this._textInput);e&&e.focus()}}else if(this._text){var t=d.findDOMNode(this._text);t&&t.focus()}},t.prototype._resetSelectedIndex=function(){if(this.props.defaultValue){var e=this.getSelectedOptionValue(),t=this.getOptionByValue(this.props.options,e);this.selectedIndex=this.getVisibleOptions().indexOf(t)}else{var n=this.props.value||this.props.options[0].value,o=this.props.freeTextMode&&this.state.freeTextValue||n;t=this.getOptionByValue(this.props.options,o);this.selectedIndex=this.getVisibleOptions().indexOf(t)}},t.prototype.setCurrentItemByValue=function(e,t){void 0===t&&(t=!0);var n=this.getOptionByValue(this.props.options,e),o={freeTextOptionDisplayValue:n&&n.text};n&&this.props.onOptionSelected&&this.props.onOptionSelected(n),this.selectedIndex=this.getVisibleOptions().indexOf(n),this.setState(o),t&&(this.handleValueChange(n&&n.value),this.setState({freeTextValue:n&&n.text,option:n}))},t.prototype._setCurrentItemByVisibleIndex=function(e,t){void 0===t&&(t=!0);var n=this.getVisibleOptions();~e&&e<n.length&&this.setCurrentItemByValue(n[e].value,t)},t.prototype.handleKeyDown=function(e){if(-1!==t.supportedKeys.indexOf(e.keyCode))switch(e.keyCode){case l.UpArrow:e.altKey?this.setIsExpanded(!1):this.handleArrowUp(-1);break;case l.DownArrow:e.altKey?this.handleKeyboardExpandRequest():this.handleArrowDown(e,1);break;case l.Enter:this.handleEnterKey(e);break;case l.Space:this.props.freeTextMode||this.handleEnterKey(e);break;case l.Escape:this.setIsExpanded(!1);break;case l.Tab:this.handleTabKey(e)}},t.prototype.getVisibleOptions=function(e,t){return void 0===e&&(e=this.state),void 0===t&&(t=this.props.options),t&&e&&e.isAutoCompleting&&e.freeTextValue&&(t=t.filter(function(t){return t.text&&t.text.toLocaleUpperCase().startsWith(e.freeTextValue.toLocaleUpperCase())})),t},t.prototype._searchOptions=function(e){return this.props.options.filter(function(t){return t.text&&t.text===e})},t.prototype.saveContainerRef=function(e){this._container=e,this._updateContainerWidth()},t.prototype.saveItemRef=function(e){e&&e.props&&e.props.isSelected&&(this.selectedListItem=e)},t.prototype._saveTextInputRef=function(e){this._textInput=e},t.prototype.saveTextRef=function(e){this._text=e},t.prototype._updateContainerWidth=function(){var e=this._container&&d.findDOMNode(this._container);this._containerWidth=e&&e.offsetWidth},t.prototype.handleValueChange=function(e){this.props.onChange&&this.props.onChange(e)},t.prototype.handleItemSelected=function(e){this.selectedListItem=e},t.prototype.handleItemPointerDown=function(e){if(0===e.button){var t=e.currentTarget.dataset.value;this.setCurrentItemByValue(t),this.setState({isAutoCompleting:!1,isExpanded:!1})}},t.prototype.handleItemHover=function(e){var t=e.currentTarget.dataset.value,n=this.getOptionByValue(this.props.options,t||"");this.selectedIndex=this.getVisibleOptions().indexOf(n)},t.prototype._handleTextInputChange=function(e){var t={freeTextValue:e,freeTextOptionDisplayValue:null,isAutoCompleting:!0,option:null};if(this._resetSelectedIndex(),e||""===e){var n=this._searchOptions(e);t.option=n.length?n[0]:void 0}t.isExpanded=!!this.getVisibleOptions(t).length,this._getIfValueChanged(e)&&(this.setState(t),this.props.suppressFreeTextChangeCallback||this.handleValueChange(t.freeTextValue)),this._resetSelectedListItem()},t.prototype.handleTextPointerDown=function(e){0===e.button&&(this.props.freeTextMode&&this.setFocus(),this._toggleIsExpanded())},t.prototype._handleButtonClick=function(e){0===e.button&&(this._resetSelectedIndex(),this.setState({isAutoCompleting:!1}),this.state.isExpanded&&(this.setFocusToItem(this.getButtonId()),this._wasInnerFocusRequested=!0),this._toggleIsExpanded())},t.prototype.handleArrowUp=function(e){this._handleMove(e)},t.prototype.handleArrowDown=function(e,t){this._handleMove(t)},t.prototype._handleMove=function(e){this.keyboardScrolling=!0;var t=this.getVisibleOptions();var n,o,r=(n=this.selectedIndex+e,o=t.length,(n%o+o)%o);this._setCurrentItemByVisibleIndex(r,!!this.props.freeTextMode),this.setFocusToItem(this.getListItemId(t[r]))},t.prototype.selectItem=function(e){!this.props.freeTextMode&&this.setFocusToItem(e)},t.prototype.handleBlur=function(e){this.clickedOutside&&(this.clickedOutside=!1,this.setIsExpanded(!1),this.props.freeTextMode&&this.setFocus(),this.props.onBlur&&this.props.onBlur(e))},t.prototype.handleEnterKey=function(e){if(!this.state.isExpanded)return this.handleKeyboardExpandRequest(),e.stopPropagation(),void e.preventDefault();if(this.selectedIndex>-1){var t=this.getVisibleOptions();this.setState({isAutoCompleting:!1,isExpanded:!1,option:t[this.selectedIndex],freeTextValue:this.props.freeTextMode?t[this.selectedIndex].text:null,freeTextOptionDisplayValue:this.props.freeTextMode?t[this.selectedIndex].text:null}),this.setFocus(),this.handleValueChange(t[this.selectedIndex].value)}},t.prototype.handleTabKey=function(e){this.state.isExpanded&&(e.stopPropagation(),e.preventDefault())},t.prototype.handleKeyboardExpandRequest=function(){this.state.isExpanded?this.setState({isAutoCompleting:!1}):(this._resetSelectedIndex(),this.setIsExpanded(!0))},t.prototype.handleFlyoutOutsideClick=function(e){e.target.id!==this.getButtonId()&&this.setIsExpanded(!1),this.setFocus(),this.clickedOutside=!0},t.prototype.handleInnerControlFocus=function(){if(this.setState({hasFocus:!0}),this.isIE){var e=document.getElementById(this.focusableControlId);if(!e||null===e)return;e.setAttribute("style","border: 1px dotted;")}},t.prototype.handleInnerControlBlur=function(){if(this._resetSelectedIndex(),this.setState({hasFocus:!1}),this.isIE){var e=document.getElementById(this.focusableControlId);if(!e||null===e)return;e.setAttribute("style","null")}},t.prototype._resetSelectedListItem=function(){this.selectedListItem=void 0,this.props.onOptionSelected&&this.props.onOptionSelected(null)},t.prototype.handleRelativeToElementSelector=function(e){return e.parentElement},t.prototype.renderOptionsList=function(e){var n=this;if(e&&e.length){var o=this.props.selectedItemStyle||t.getSelectedItemStyle(),r=e.map(function(e,r){var a=n.getListItemId(e);return i.createElement(Q,{key:r,id:a,tabIndex:0,role:"option",dataText:e.text,dataValue:e.value,onSelected:n.handleItemSelected,isSelected:n.selectedIndex===r,style:t.getListItemStyle(),selectedStyle:o,ref:n.saveItemRef,onClick:n.handleItemPointerDown},e.text||" ")}),a=this.getPageSize(),s=this.getListId()+"_scrollView",l=a<r.length,c={height:l?2.35*a+"em":void 0,overflowY:l?"scroll":"hidden",overflowX:"hidden",flex:"1 1 auto",flexDirection:"column"},u={width:"100%",listStyleType:"none"},p=e[this.selectedIndex],d=this.keyboardScrolling||p?this.getListItemId(p):this.selectedListItem&&this.selectedListItem.props.id?this.selectedListItem.props.id:void 0;return i.createElement(G,{id:this.getListId(),key:this.getListId(),role:"listbox",style:u,tabIndex:0,onKeyDown:this.keyboardNavigation},i.createElement(te,{id:s,scrollToId:d,horizontal:!1,role:"presentation",onScroll:this.onFlyoutScroll,style:c},r))}},t.prototype.renderFlyout=function(e){void 0===e&&(e="rtl"===document.body.dir);var n=void 0,o=void 0;if(this.props.testhooks)for(var r in o=Object.assign({},this.props.testhooks))o[r]+="-flyout";if(!this.props.readOnly&&this.state.isExpanded){var a=this.renderOptionsList(this.getVisibleOptions()),s=this.getActiveDescendantId();if(a){var l={borderWidth:"0.1em",borderStyle:"solid",borderColor:"#666666",backgroundColor:"white",width:this.calculateWidth(),boxShadow:t.SHADOWS.Shadow01};n=i.createElement(W,{id:this.getFlyoutId(),key:this.getFlyoutId(),focusElementId:s,testhooks:o,focusCallback:this.setFocusToItem,flyoutDirection:e?g.down:g.downleft,flyoutStyle:l,positionType:"relative",relativeToElementId:this.props.relativeToElementId?this.props.relativeToElementId:this.getButtonId(),relativeToElementIdSelector:this.handleRelativeToElementSelector,onOutsideClick:this.handleFlyoutOutsideClick,parentCustomControlId:this.props.parentCustomControlId,parentFlyoutRoot:this.props.parentFlyoutRoot,rootZIndex:this.props.rootZIndex,enableTrackOnScroll:!0,dismissOnScroll:!this.props.keepFlyoutOpenOnScroll},a)}}return n},t.prototype._renderTextInput=function(e,t){var n=this.props.textInputStyle?this.props.textInputStyle:{borderWidth:0,flex:"1 1 auto",backgroundColor:"transparent",padding:"0.5em 0.5em",width:"100%",fontSize:"1rem",fontWeight:this.state.hasFocus?"normal":"600",":hover":{fontWeight:"normal"}};return i.createElement(fe,{id:e,key:e,testhooks:t,readOnly:this.props.readOnly,accessibilityHasPopup:!0,accessibilityExpanded:this.state.isExpanded,accessibilityRequired:this.props.accessibilityRequired,describedByElementId:this.props.describedByElementId,role:"combobox",ref:this._saveTextInputRef,onFocus:this.handleInnerControlFocus,onBlur:this.handleInnerControlBlur,onKeyDown:this.handleKeyDown,onChangeText:this._handleTextInputChange,value:this.props.freeTextMode?this.state.freeTextOptionDisplayValue||this.state.freeTextValue:this.state.option&&this.state.option.text,accessibilityLabel:this.props.accessibilityLabel?this.props.accessibilityLabel:this.props.placeholder,activeDescendantId:this.state.isExpanded?this.getActiveDescendantId():null,ownsElementId:this.state.isExpanded?this.getListId():null,controlsElementId:this.state.isExpanded?this.getListId():null,style:n,placeholder:this.props.placeholder})},t.prototype.getTextOnlyStyle=function(){return this.props.textStyle?this.props.textStyle:{borderWidth:0,flex:"1 1 auto",outline:"none",cursor:"default"}},t.prototype._getEmptyList=function(){return this.state.isExpanded?null:i.createElement("div",{role:"listbox",id:this.getEmptyListId,style:{display:"none"}}," ")},t.prototype.getTextOnlyInnerComponent=function(e){return i.createElement(le,{id:e},this.getSelectedOptionText())},t.prototype.renderTextOnly=function(e,t){var n=this.getTextOnlyStyle(),o=this.state.isExpanded?{ownsElementId:this.getListId(),controlsElementId:this.getListId(),activeDescendantId:this.getActiveDescendantId()}:{ownsElementId:this.getEmptyListId,controlsElementId:this.getEmptyListId},r=e+"-value";return i.createElement(le,ye({id:e,key:e,testhooks:t,accessibilityHasPopup:!0,accessibilityExpanded:this.state.isExpanded,accessibilityRequired:this.props.accessibilityRequired,accessibilityLabel:this.props.accessibilityLabel?this.props.accessibilityLabel:this.getSelectedOptionText(),title:this.props.title,describedByElementId:this.props.describedByElementId?this.props.describedByElementId:r,ref:this.saveTextRef,role:"button",onFocus:this.handleInnerControlFocus,onBlur:this.handleInnerControlBlur,onKeyDown:this.handleKeyDown,onPointerDown:this.handleTextPointerDown,tabIndex:this.props.readOnly?-1:0,semanticTag:this.props.useHeader?"h1":null,style:n},o),this.getTextOnlyInnerComponent(r),this._getEmptyList())},t.prototype.getSelectedOptionText=function(){return this.state.option&&this.state.option.text||" "},t.prototype.getSelectedOptionValue=function(){return this.state.option&&this.state.option.value},t.prototype._renderDropDownButton=function(){var e={backgroundColor:"transparent",borderColor:"transparent",borderStyle:"solid",borderWidth:"0 0 0 0.1em",flexDirection:"row",padding:"0 0.75em",justifyContent:"center",":hover":{borderColor:t.COLORS.Grey5}},n={width:"0.6em",height:"0.6em",marginTop:"-0.4em",borderColor:t.COLORS.Grey7,borderWidth:"0em",borderRightWidth:"0.1em",borderBottomWidth:"0.1em",borderStyle:"solid",transform:"rotate(45deg)",content:"",display:this.props.hideArrow?"none":"flex",alignSelf:"center"};return i.createElement(x.a,{id:this.getButtonId(),key:"dropButton",role:"button",accessibilityLabel:this.props.accessibilityLabel,accessibilityExpanded:this.state.isExpanded,accessibilityHasPopup:!0,tabIndex:-1,style:e,onKeyDown:this.handleKeyDown,onClick:this._handleButtonClick},i.createElement("div",{style:n}))},t.prototype.render=function(){var e=this.getElementPropsInternal();Object.assign(e.style,{backgroundColor:"white",display:"flex",flex:"1 1 auto",borderWidth:"0.1em",borderStyle:"solid",borderColor:"#666666"},this.props.style),this.props.testhooks&&(e.testhooks=this.props.testhooks);var t=void 0;if(this.props.testhooks)for(var n in t=Object.assign({},this.props.testhooks))t[n]+="-text";return i.createElement(x.a,ye({},e,{ref:this.saveContainerRef}),i.createElement(x.a,{style:{display:"flex",flex:"1 1 auto"},id:this.getInternalId()+"_wrapper"},this.props.freeTextMode?this._renderTextInput(this.focusableControlId,t):this.renderTextOnly(this.focusableControlId,t),!this.props.readOnly&&this._renderDropDownButton(),!this.props.readOnly&&this.renderFlyout()))},t.prototype.calculateWidth=function(){var e="50px";return this.props.style&&this.props.style.width&&"100%"!==this.props.style.width?e=this.props.style.width.toString():this._containerWidth&&(e=this._containerWidth.toString()),-1===e.indexOf("px")&&-1===e.indexOf("%")&&(e+="px"),e},t.getListItemStyle=function(){return{flex:"0 1 auto",cursor:"pointer",padding:"0.5em 0.5em",":hover":{backgroundColor:t.COLORS.Grey1,color:t.COLORS.Grey7}}},t.getSelectedItemStyle=function(){return{backgroundColor:t.COLORS.Grey3,color:"black"}},t.supportedKeys=[l.Alt,l.UpArrow,l.DownArrow,l.Enter,l.PageDown,l.PageUp,l.Escape,l.Tab,l.Space],t.displayName="ComboBox",t.DEFAULT_PAGE_SIZE=7,t.COLORS={Grey1:"#efefef",Grey2:"#e2e2e2",Grey3:"#d8d8d8",Grey5:"#666666",Grey7:"#333333"},t.SHADOWS={Shadow01:"0px 2px 4px 0px rgba(0, 0, 0, 0.5);"},t}(y.a),ge=h.connect(b.a)(be),_e=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),ve=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return _e(t,e),t.prototype.getElementName=function(){return"a"},t.prototype.getElementProps=function(){return{href:this.props.href||"#",target:this.props.target}},t}(y.a),Ce=h.connect(b.a)(ve),Ee=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Ie=function(e){function t(t){var n=e.call(this,t)||this;return n._onLoad=n._onLoad.bind(n),n}return Ee(t,e),t.prototype._onLoad=function(){this.props.onLoad&&this.props.onLoad()},t.prototype.getElementName=function(){return"img"},t.prototype.getElementProps=function(){return{src:this.props.source,onLoad:this._onLoad,alt:this.props.altText?this.props.altText:"",title:this.props.title?this.props.title:this.props.altText?this.props.altText:""}},t.displayName="Image",t}(y.a),Pe=h.connect(b.a)(Ie),we=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Se=function(e){function t(t){var n=e.call(this,t)||this;return n._iframeElement=null,n._origin=null,n._onLoad=n._onLoad.bind(n),n._origin=n._normalizeUrl(t.src),n}return we(t,e),t.prototype._normalizeUrl=function(e){var t=document.createElement("a");return t.href=e,t.protocol+"//"+t.host},t.prototype._onLoad=function(){this.props.onLoad&&this.props.onLoad(),this.props.onReadyStateComplete&&this.props.onReadyStateComplete()},t.prototype.getElementName=function(){return"iframe"},t.prototype.getElementProps=function(){var e={src:this.props.src,title:this.props.title,onLoad:this._onLoad};return this.props.security&&(e.security=this.props.security,e.sandbox=""),this.props.scrolling&&(e.scrolling=this.props.scrolling),this.props.allow&&(e.allow=this.props.allow),e.ref=this._registerIframeElement.bind(this),e},t.prototype.componentWillReceiveProps=function(){this._resetEventHandlers()},t.prototype._resetEventHandlers=function(){window.removeEventListener("message",this._receiveMessageHandler,!1),this._receiveMessageHandler=null,this.props.registerSendMessageHandler&&this.props.registerSendMessageHandler(void 0)},t.prototype._registerIframeElement=function(e){this._iframeElement=e,this._iframeElement?(this._receiveMessageHandler=this._receiveMessage.bind(this),window.addEventListener("message",this._receiveMessageHandler,!1),this.props.registerSendMessageHandler&&this.props.registerSendMessageHandler(this._sendMessage.bind(this))):this._resetEventHandlers()},t.prototype.componentWillUnmount=function(){this._resetEventHandlers()},t.prototype._receiveMessage=function(e){this._iframeElement&&e.source===this._iframeElement.contentWindow&&this._normalizeUrl(e.origin)===this._origin&&this.props.onMessage&&this.props.onMessage(e)},t.prototype._sendMessage=function(e){this._iframeElement&&this._iframeElement.contentWindow.postMessage(e,this._origin)},t.displayName="IFrame",t}(y.a),Oe=h.connect(b.a)(Se),De=n(41);!function(e){e[e.Entity=0]="Entity",e[e.List=1]="List",e[e.Account=2]="Account",e[e.Opportunity=3]="Opportunity",e[e.Sharepointdocument=4]="Sharepointdocument",e[e.Dashboard=5]="Dashboard",e[e.WORKSPACE=6]="WORKSPACE",e[e.Lead=7]="Lead",e[e.Contact=8]="Contact",e[e.Activitypointer=9]="Activitypointer",e[e.Drafts=10]="Drafts",e[e.Systemuser=11]="Systemuser",e[e.Letter=12]="Letter",e[e.Salesorder=13]="Salesorder",e[e.Competitor=14]="Competitor",e[e.Task=15]="Task",e[e.Fax=16]="Fax",e[e.Email=17]="Email",e[e.Phonecall=18]="Phonecall",e[e.Contract=19]="Contract",e[e.Quote=20]="Quote",e[e.Incident=21]="Incident",e[e.Campaign=22]="Campaign",e[e.Appointment=23]="Appointment",e[e.Invoice=24]="Invoice",e[e.Knowledgearticle=25]="Knowledgearticle",e[e.Product=26]="Product",e[e.Opportunityproduct=27]="Opportunityproduct",e[e.Queueitem=28]="Queueitem",e[e.Socialprofile=29]="Socialprofile",e[e.ChevronRight=30]="ChevronRight",e[e.Globe=31]="Globe",e[e.Ticker=32]="Ticker",e[e.Duration=33]="Duration",e[e.Timezone=34]="Timezone",e[e.Language=35]="Language",e[e.MultipleUsers=36]="MultipleUsers",e[e.Regarding=37]="Regarding",e[e.Checklist=38]="Checklist",e[e.TwoOptions=39]="TwoOptions",e[e.Currency=40]="Currency",e[e.DateTime=41]="DateTime",e[e.OfficeIcon=42]="OfficeIcon",e[e.OfficeIconWordFileSharedWithMe=43]="OfficeIconWordFileSharedWithMe",e[e.OfficeIconWordFileCheckedOut=44]="OfficeIconWordFileCheckedOut",e[e.OfficeIconExcelFile=45]="OfficeIconExcelFile",e[e.OfficeIconExcelFileSharedWithMe=46]="OfficeIconExcelFileSharedWithMe",e[e.OfficeIconExcelFileCheckedOut=47]="OfficeIconExcelFileCheckedOut",e[e.OfficeIconPowerPointFile=48]="OfficeIconPowerPointFile",e[e.OfficeIconPowerPointFileSharedWithMe=49]="OfficeIconPowerPointFileSharedWithMe",e[e.OfficeIconPowerPointFileCheckedOut=50]="OfficeIconPowerPointFileCheckedOut",e[e.OfficeIconOneNoteFile=51]="OfficeIconOneNoteFile",e[e.OfficeIconOneNoteFileSharedWithMe=52]="OfficeIconOneNoteFileSharedWithMe",e[e.OfficeIconOneNoteFileCheckedOut=53]="OfficeIconOneNoteFileCheckedOut",e[e.OfficeIconAccessFile=54]="OfficeIconAccessFile",e[e.OfficeIconAccessFileSharedWithMe=55]="OfficeIconAccessFileSharedWithMe",e[e.OfficeIconAccessFileCheckedOut=56]="OfficeIconAccessFileCheckedOut",e[e.OfficeIconProjectFile=57]="OfficeIconProjectFile",e[e.OfficeIconProjectFileSharedWithMe=58]="OfficeIconProjectFileSharedWithMe",e[e.OfficeIconProjectFileCheckedOut=59]="OfficeIconProjectFileCheckedOut",e[e.OfficeIconVisioFile=60]="OfficeIconVisioFile",e[e.OfficeIconVisioFileSharedWithMe=61]="OfficeIconVisioFileSharedWithMe",e[e.OfficeIconVisioFileCheckedOut=62]="OfficeIconVisioFileCheckedOut",e[e.OfficeIconHelpFile=63]="OfficeIconHelpFile",e[e.OfficeIconHelpFileSharedWithMe=64]="OfficeIconHelpFileSharedWithMe",e[e.OfficeIconHelpFileCheckedOut=65]="OfficeIconHelpFileCheckedOut",e[e.OfficeIconZipFile=66]="OfficeIconZipFile",e[e.OfficeIconZipFileSharedWithMe=67]="OfficeIconZipFileSharedWithMe",e[e.OfficeIconZipFileCheckedOut=68]="OfficeIconZipFileCheckedOut",e[e.OfficeIconSetupFile=69]="OfficeIconSetupFile",e[e.OfficeIconSetupFileSharedWithMe=70]="OfficeIconSetupFileSharedWithMe",e[e.OfficeIconSetupFileCheckedOut=71]="OfficeIconSetupFileCheckedOut",e[e.OfficeIconVideoFile=72]="OfficeIconVideoFile",e[e.OfficeIconVideoFileSharedWithMe=73]="OfficeIconVideoFileSharedWithMe",e[e.OfficeIconVideoFileCheckedOut=74]="OfficeIconVideoFileCheckedOut",e[e.OfficeIconImageFile=75]="OfficeIconImageFile",e[e.OfficeIconImageFileSharedWithMe=76]="OfficeIconImageFileSharedWithMe",e[e.OfficeIconImageFileCheckedOut=77]="OfficeIconImageFileCheckedOut",e[e.OfficeIconAudioFile=78]="OfficeIconAudioFile",e[e.OfficeIconAudioFileSharedWithMe=79]="OfficeIconAudioFileSharedWithMe",e[e.OfficeIconAudioFileCheckedOut=80]="OfficeIconAudioFileCheckedOut",e[e.OfficeIconExecutableFile=81]="OfficeIconExecutableFile",e[e.OfficeIconExecutableFileSharedWithMe=82]="OfficeIconExecutableFileSharedWithMe",e[e.OfficeIconExecutableFileCheckedOut=83]="OfficeIconExecutableFileCheckedOut",e[e.OfficeIconPdfFile=84]="OfficeIconPdfFile",e[e.OfficeIconPdfFileSharedWithMe=85]="OfficeIconPdfFileSharedWithMe",e[e.OfficeIconPdfFileCheckedOut=86]="OfficeIconPdfFileCheckedOut",e[e.OfficeIconWebFile=87]="OfficeIconWebFile",e[e.OfficeIconWebFileSharedWithMe=88]="OfficeIconWebFileSharedWithMe",e[e.OfficeIconWebFileCheckedOut=89]="OfficeIconWebFileCheckedOut",e[e.OfficeIconTextFile=90]="OfficeIconTextFile",e[e.OfficeIconTextFileSharedWithMe=91]="OfficeIconTextFileSharedWithMe",e[e.OfficeIconTextFileCheckedOut=92]="OfficeIconTextFileCheckedOut",e[e.OfficeIconFolder=93]="OfficeIconFolder",e[e.OfficeIconFolderSharedWithMe=94]="OfficeIconFolderSharedWithMe",e[e.OfficeIconFolderCheckedOut=95]="OfficeIconFolderCheckedOut",e[e.OfficeIconGenericFile=96]="OfficeIconGenericFile",e[e.OfficeIconGenericFileSharedWithMe=97]="OfficeIconGenericFileSharedWithMe",e[e.OfficeIconGenericFileCheckedOut=98]="OfficeIconGenericFileCheckedOut",e[e.Timer=99]="Timer",e[e.ScanBarcodeButton=100]="ScanBarcodeButton",e[e.Goal=101]="Goal",e[e.Metric=102]="Metric",e[e.Report=103]="Report",e[e.SalesLiterature=104]="SalesLiterature",e[e.Connection=105]="Connection",e[e.CustomerAddress=106]="CustomerAddress",e[e.Position=107]="Position",e[e.TransactionCurrency=108]="TransactionCurrency",e[e.Team=109]="Team",e[e.Service=110]="Service",e[e.ServiceAppointment=111]="ServiceAppointment",e[e.Equipment=112]="Equipment",e[e.PriceLevel=113]="PriceLevel",e[e.GoalRollUpQuery=114]="GoalRollUpQuery",e[e.UoMSchedule=115]="UoMSchedule",e[e.DiscountType=116]="DiscountType",e[e.Territory=117]="Territory",e[e.Socialactivity=118]="Socialactivity",e[e.Calendar=119]="Calendar",e[e.Category=120]="Category",e[e.Entitlement=121]="Entitlement",e[e.Queue=122]="Queue",e[e.RoutingRule=123]="RoutingRule",e[e.RoutingRuleItem=124]="RoutingRuleItem"}(he||(he={}));var Te={Entity:"crmSymbolFont entity-symbol Entity",List:"crmSymbolFont entity-symbol List",Account:"crmSymbolFont entity-symbol Account",ScanBarcodeButton:"crmSymbolFont entity-symbol ScanBarcodeButton",Opportunity:"crmSymbolFont entity-symbol Opportunity",Sharepointdocument:"crmSymbolFont entity-symbol Sharepointdocument",Dashboard:"crmSymbolFont entity-symbol Dashboard",WORKSPACE:"crmSymbolFont entity-symbol WORKSPACE",Lead:"crmSymbolFont entity-symbol Lead",Contact:"crmSymbolFont entity-symbol Contact",Activitypointer:"crmSymbolFont entity-symbol Activitypointer",Drafts:"crmSymbolFont entity-symbol Drafts",Systemuser:"crmSymbolFont entity-symbol Systemuser",Letter:"crmSymbolFont entity-symbol Letter",Salesorder:"crmSymbolFont entity-symbol Salesorder",Competitor:"crmSymbolFont entity-symbol Competitor",Task:"crmSymbolFont entity-symbol Task",Fax:"crmSymbolFont entity-symbol Fax",Email:"crmSymbolFont entity-symbol Email",Phonecall:"crmSymbolFont entity-symbol Phonecall",Contract:"crmSymbolFont entity-symbol Contract",Quote:"crmSymbolFont entity-symbol Quote",Incident:"crmSymbolFont entity-symbol Incident",Campaign:"crmSymbolFont entity-symbol Campaign",Appointment:"crmSymbolFont entity-symbol Appointment",Invoice:"crmSymbolFont entity-symbol Invoice",Knowledgearticle:"crmSymbolFont entity-symbol Knowledgearticle",Product:"crmSymbolFont entity-symbol Product",Opportunityproduct:"crmSymbolFont entity-symbol Opportunityproduct",Queueitem:"crmSymbolFont entity-symbol Queueitem",Socialprofile:"crmSymbolFont entity-symbol Socialprofile",ChevronRight:"crmSymbolFont entity-symbol ChevronRight",Globe:"crmSymbolFont entity-symbol Globe",Ticker:"crmSymbolFont entity-symbol Ticker",Duration:"crmSymbolFont entity-symbol Duration",Timezone:"crmSymbolFont entity-symbol Timezone",Language:"crmSymbolFont entity-symbol Language",MultipleUsers:"crmSymbolFont entity-symbol MultipleUsers",Regarding:"crmSymbolFont entity-symbol Regarding",Checklist:"crmSymbolFont entity-symbol Checklist",TwoOptions:"crmSymbolFont entity-symbol TwoOptions",Currency:"crmSymbolFont entity-symbol Currency",DateTime:"crmSymbolFont entity-symbol DateTime",OfficeIcon:"crmSymbolFont entity-symbol OfficeIcon",OfficeIconWordFileSharedWithMe:"crmSymbolFont entity-symbol OfficeIconWordFileSharedWithMe",OfficeIconWordFileCheckedOut:"crmSymbolFont entity-symbol OfficeIconWordFileCheckedOut",OfficeIconExcelFile:"crmSymbolFont entity-symbol OfficeIconExcelFile",OfficeIconExcelFileSharedWithMe:"crmSymbolFont entity-symbol OfficeIconExcelFileSharedWithMe",OfficeIconExcelFileCheckedOut:"crmSymbolFont entity-symbol OfficeIconExcelFileCheckedOut",OfficeIconPowerPointFile:"crmSymbolFont entity-symbol OfficeIconPowerPointFile",OfficeIconPowerPointFileSharedWithMe:"crmSymbolFont entity-symbol OfficeIconPowerPointFileSharedWithMe",OfficeIconPowerPointFileCheckedOut:"crmSymbolFont entity-symbol OfficeIconPowerPointFileCheckedOut",OfficeIconOneNoteFile:"crmSymbolFont entity-symbol OfficeIconOneNoteFile",OfficeIconOneNoteFileSharedWithMe:"crmSymbolFont entity-symbol OfficeIconOneNoteFileSharedWithMe",OfficeIconOneNoteFileCheckedOut:"crmSymbolFont entity-symbol OfficeIconOneNoteFileCheckedOut",OfficeIconAccessFile:"crmSymbolFont entity-symbol OfficeIconAccessFile",OfficeIconAccessFileSharedWithMe:"crmSymbolFont entity-symbol OfficeIconAccessFileSharedWithMe",OfficeIconAccessFileCheckedOut:"crmSymbolFont entity-symbol OfficeIconAccessFileCheckedOut",OfficeIconProjectFile:"crmSymbolFont entity-symbol OfficeIconProjectFile",OfficeIconProjectFileSharedWithMe:"crmSymbolFont entity-symbol OfficeIconProjectFileSharedWithMe",OfficeIconProjectFileCheckedOut:"crmSymbolFont entity-symbol OfficeIconProjectFileCheckedOut",OfficeIconVisioFile:"crmSymbolFont entity-symbol OfficeIconVisioFile",OfficeIconVisioFileSharedWithMe:"crmSymbolFont entity-symbol OfficeIconVisioFileSharedWithMe",OfficeIconVisioFileCheckedOut:"crmSymbolFont entity-symbol OfficeIconVisioFileCheckedOut",OfficeIconHelpFile:"crmSymbolFont entity-symbol OfficeIconHelpFile",OfficeIconHelpFileSharedWithMe:"crmSymbolFont entity-symbol OfficeIconHelpFileSharedWithMe",OfficeIconHelpFileCheckedOut:"crmSymbolFont entity-symbol OfficeIconHelpFileCheckedOut",OfficeIconZipFile:"crmSymbolFont entity-symbol OfficeIconZipFile",OfficeIconZipFileSharedWithMe:"crmSymbolFont entity-symbol OfficeIconZipFileSharedWithMe",OfficeIconZipFileCheckedOut:"crmSymbolFont entity-symbol OfficeIconZipFileCheckedOut",OfficeIconSetupFile:"crmSymbolFont entity-symbol OfficeIconSetupFile",OfficeIconSetupFileSharedWithMe:"crmSymbolFont entity-symbol OfficeIconSetupFileSharedWithMe",OfficeIconSetupFileCheckedOut:"crmSymbolFont entity-symbol OfficeIconSetupFileCheckedOut",OfficeIconVideoFile:"crmSymbolFont entity-symbol OfficeIconVideoFile",OfficeIconVideoFileSharedWithMe:"crmSymbolFont entity-symbol OfficeIconVideoFileSharedWithMe",OfficeIconVideoFileCheckedOut:"crmSymbolFont entity-symbol OfficeIconVideoFileCheckedOut",OfficeIconImageFile:"crmSymbolFont entity-symbol OfficeIconImageFile",OfficeIconImageFileSharedWithMe:"crmSymbolFont entity-symbol OfficeIconImageFileSharedWithMe",OfficeIconImageFileCheckedOut:"crmSymbolFont entity-symbol OfficeIconImageFileCheckedOut",OfficeIconAudioFile:"crmSymbolFont entity-symbol OfficeIconAudioFile",OfficeIconAudioFileSharedWithMe:"crmSymbolFont entity-symbol OfficeIconAudioFileSharedWithMe",OfficeIconAudioFileCheckedOut:"crmSymbolFont entity-symbol OfficeIconAudioFileCheckedOut",OfficeIconExecutableFile:"crmSymbolFont entity-symbol OfficeIconExecutableFile",OfficeIconExecutableFileSharedWithMe:"crmSymbolFont entity-symbol OfficeIconExecutableFileSharedWithMe",OfficeIconExecutableFileCheckedOut:"crmSymbolFont entity-symbol OfficeIconExecutableFileCheckedOut",OfficeIconPdfFile:"crmSymbolFont entity-symbol OfficeIconPdfFile",OfficeIconPdfFileSharedWithMe:"crmSymbolFont entity-symbol OfficeIconPdfFileSharedWithMe",OfficeIconPdfFileCheckedOut:"crmSymbolFont entity-symbol OfficeIconPdfFileCheckedOut",OfficeIconWebFile:"crmSymbolFont entity-symbol OfficeIconWebFile",OfficeIconWebFileSharedWithMe:"crmSymbolFont entity-symbol OfficeIconWebFileSharedWithMe",OfficeIconWebFileCheckedOut:"crmSymbolFont entity-symbol OfficeIconWebFileCheckedOut",OfficeIconTextFile:"crmSymbolFont entity-symbol OfficeIconTextFile",OfficeIconTextFileSharedWithMe:"crmSymbolFont entity-symbol OfficeIconTextFileSharedWithMe",OfficeIconTextFileCheckedOut:"crmSymbolFont entity-symbol OfficeIconTextFileCheckedOut",OfficeIconFolder:"crmSymbolFont entity-symbol OfficeIconFolder",OfficeIconFolderSharedWithMe:"crmSymbolFont entity-symbol OfficeIconFolderSharedWithMe",OfficeIconFolderCheckedOut:"crmSymbolFont entity-symbol OfficeIconFolderCheckedOut",OfficeIconGenericFile:"crmSymbolFont entity-symbol OfficeIconGenericFile",OfficeIconGenericFileSharedWithMe:"crmSymbolFont entity-symbol OfficeIconGenericFileSharedWithMe",OfficeIconGenericFileCheckedOut:"crmSymbolFont entity-symbol OfficeIconGenericFileCheckedOut",Timer:"crmSymbolFont entity-symbol Timer",Goal:"crmSymbolFont entity-symbol Goal",Metric:"crmSymbolFont entity-symbol Metric",Report:"crmSymbolFont entity-symbol Report",SalesLiterature:"crmSymbolFont entity-symbol SalesLiterature",Connection:"crmSymbolFont entity-symbol Connection",CustomerAddress:"crmSymbolFont entity-symbol CustomerAddress",Position:"crmSymbolFont entity-symbol Position",TransactionCurrency:"crmSymbolFont entity-symbol TransactionCurrency",Team:"crmSymbolFont entity-symbol Team",Service:"crmSymbolFont entity-symbol Service",ServiceAppointment:"crmSymbolFont entity-symbol ServiceAppointment",Equipment:"crmSymbolFont entity-symbol Equipment",PriceLevel:"crmSymbolFont entity-symbol PriceLevel",GoalRollUpQuery:"crmSymbolFont entity-symbol GoalRollUpQuery",UoMSchedule:"crmSymbolFont entity-symbol UoMSchedule",DiscountType:"crmSymbolFont entity-symbol DiscountType",Territory:"crmSymbolFont entity-symbol Territory",Socialactivity:"crmSymbolFont entity-symbol Socialactivity",Calendar:"crmSymbolFont entity-symbol Calendar",Category:"crmSymbolFont entity-symbol Category",Entitlement:"crmSymbolFont entity-symbol Entitlement",Queue:"crmSymbolFont entity-symbol Queue",RoutingRule:"crmSymbolFont entity-symbol RoutingRule",RoutingRuleItem:"crmSymbolFont entity-symbol RoutingRuleItem"};var Fe=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),xe=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Fe(t,e),t.prototype.getSymbolClassName=function(e){return function(e){return Te[he[e]]}(e)},t}(De.a),Me=h.connect(b.a)(xe),Ae={account:"crmSymbolFont entity-symbol Account",activitypointer:"crmSymbolFont entity-symbol Activitypointer",appointment:"crmSymbolFont entity-symbol Appointment",article:"symbolFont Article-symbol",businessunit:"crmSymbolFont entity-symbol BusinessUnit",campaign:"crmSymbolFont entity-symbol Campaign",campaignresolution:"symbolFont CampaignResolution-symbol",case:"symbolFont Case-symbol",caseresolution:"symbolFont CaseResolution-symbol",chat:"symbolFont Chat-symbol",competitor:"crmSymbolFont entity-symbol Competitor",connection:"crmSymbolFont entity-symbol Connection",contact:"crmSymbolFont entity-symbol Contact",contract:"crmSymbolFont entity-symbol Contract",createquote:"symbolFont CreateQuote-symbol",customactivity:"symbolFont CustomActivity-symbol",customeraddress:"crmSymbolFont entity-symbol CustomerAddress",dashboard:"crmSymbolFont entity-symbol Dashboard",distributionList:"symbolFont DistributionList-symbol",documenttemplates:"symbolFont DocumentTemplates-symbol",email:"crmSymbolFont entity-symbol Email",externalUser:"symbolFont GuestUser-symbol",fax:"crmSymbolFont entity-symbol Fax",goal:"crmSymbolFont entity-symbol Goal",guestUser:"symbolFont GuestUser-symbol",incident:"crmSymbolFont entity-symbol Incident",invoice:"crmSymbolFont entity-symbol Invoice",knowledgearticle:"crmSymbolFont entity-symbol Knowledgearticle",lead:"crmSymbolFont entity-symbol Lead",letter:"crmSymbolFont entity-symbol Letter",mail:"symbolFont Mail-symbol",membersicon:"symbolFont MembersIcon-symbol",metric:"crmSymbolFont entity-symbol Metric",opportunity:"crmSymbolFont entity-symbol Opportunity",opportunityproduct:"crmSymbolFont entity-symbol Opportunityproduct",phone:"symbolFont Phone-symbol",phonecall:"crmSymbolFont entity-symbol Phonecall",position:"crmSymbolFont entity-symbol Position",product:"crmSymbolFont entity-symbol Product",queueicon:"symbolFont QueueIcon-symbol",queueitem:"crmSymbolFont entity-symbol Queueitem",queueitemroute:"symbolFont QueueItemRoute-symbol",quote:"crmSymbolFont entity-symbol Quote",report:"crmSymbolFont entity-symbol Report",resolvecase:"symbolFont ResolveCase-symbol",salesliterature:"crmSymbolFont entity-symbol SalesLiterature",salesorder:"crmSymbolFont entity-symbol Salesorder",serviceactivity:"symbolFont ServiceActivity-symbol",sharepointdocument:"crmSymbolFont entity-symbol Sharepointdocument",socialprofile:"crmSymbolFont entity-symbol Socialprofile",systemuser:"crmSymbolFont entity-symbol Systemuser",task:"crmSymbolFont entity-symbol Task",team:"crmSymbolFont entity-symbol Team",transactioncurrency:"crmSymbolFont entity-symbol TransactionCurrency",user:"symbolFont GuestUser-symbol",wordtemplates:"symbolFont WordTemplates-symbol",msdyusd_task:"crmSymbolFont entity-symbol msdyusd_task-symbol",msdyusd_configuration:"crmSymbolFont entity-symbol msdyusd_configuration-symbol",msdyusd_customizationfiles:"crmSymbolFont entity-symbol msdyusd_customizationfiles-symbol",msdyusd_entitysearch:"crmSymbolFont entity-symbol msdyusd_entitysearch-symbol",msdyusd_uiievent:"crmSymbolFont entity-symbol msdyusd_uiievent-symbol",msdyusd_form:"crmSymbolFont entity-symbol msdyusd_form-symbol",uii_option:"crmSymbolFont entity-symbol uii_option-symbol",uii_hostedapplication:"crmSymbolFont entity-symbol uii_hostedapplication-symbol",msdyusd_scriptlet:"crmSymbolFont entity-symbol msdyusd_scriptlet-symbol",msdyusd_toolbarstrip:"crmSymbolFont entity-symbol msdyusd_toolbarstrip-symbol",msdyusd_usersettings:"crmSymbolFont entity-symbol msdyusd_usersettings-symbol",msdyusd_agentscriptaction:"crmSymbolFont entity-symbol msdyusd_agentscriptaction-symbol",msdyusd_auditanddiagnosticssetting:"crmSymbolFont entity-symbol msdyusd_auditanddiagnosticssetting-symbol",msdyusd_sessioninformation:"crmSymbolFont entity-symbol msdyusd_sessioninformation-symbol",msdyusd_windowroute:"crmSymbolFont entity-symbol msdyusd_windowroute-symbol",customentity:"symbolFont CustomEntity-symbol",default:"symbolFont CustomEntity-symbol",unresolvedaddress:"symbolFont InformationIcon-symbol",recurringappointmentmaster:"symbolFont NewRecurringAppointment-symbol",service:"crmSymbolFont entity-symbol Service",serviceappointment:"crmSymbolFont entity-symbol ServiceAppointment",equipment:"crmSymbolFont entity-symbol Equipment",pricelevel:"crmSymbolFont entity-symbol PriceLevel",goalrollupquery:"crmSymbolFont entity-symbol GoalRollUpQuery",uomschedule:"crmSymbolFont entity-symbol UoMSchedule",discounttype:"crmSymbolFont entity-symbol DiscountType",territory:"crmSymbolFont entity-symbol Territory",socialactivity:"crmSymbolFont entity-symbol Socialactivity",calendar:"crmSymbolFont entity-symbol Calendar",category:"crmSymbolFont entity-symbol Category",entitlement:"crmSymbolFont entity-symbol Entitlement",queue:"crmSymbolFont entity-symbol Queue",routingrule:"crmSymbolFont entity-symbol RoutingRule",routingruleitem:"crmSymbolFont entity-symbol RoutingRuleItem"};var ke,Re=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Le=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Re(t,e),t.prototype.getSymbolClassName=function(e){return function(e){return Ae[e]?Ae[e]:Ae.default}(e)},t}(De.a),Ne=h.connect(b.a)(Le),Ue=n(22),Be=n(25),je=n(48),We=i.createContext({}),Ve=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();!function(e){e.NotInitialized="NotInitialized",e.Initializing="Initializing",e.Initialized="Initialized",e.Failed="Failed"}(ke||(ke={}));var He=function(e){function t(t,n){var o=e.call(this,t,n)||this;return o.state={identifiers:null,hasDataLoaded:!1},o._isLivePersonCardLibAvailable=o._isLivePersonCardLibAvailable.bind(o),o._onKeyDownOpenCard=o._onKeyDownOpenCard.bind(o),o}return Ve(t,e),t.prototype.getElementProps=function(){return{accessibilityLabel:this.props.accessibilityLabel,displayName:this.props.displayName,emailAddress:this.props.emailAddress,entityReference:this.props.entityReference,personaType:this.props.personaType,recordId:this.props.recordId,registerOpenCardCallback:this.props.registerOpenCardCallback}},t.prototype.componentDidMount=function(){this.props.registerOpenCardCallback&&this.props.registerOpenCardCallback(this._onKeyDownOpenCard),this.props.registerHasLivePersonaCardLoadedCallback&&this.props.registerHasLivePersonaCardLoadedCallback(this._isLivePersonCardLibAvailable)},t.prototype.componentDidUpdate=function(e){e.recordId!==this.props.recordId&&(this.setState({identifiers:null,hasDataLoaded:!1}),this._getRecordData())},t.prototype.render=function(){var e=this.getElementChildren();if(this._isLivePersonCardLibAvailable()&&this.state.hasDataLoaded){var t=window.LivePersonaCardHoverTargetV2;if(t)return i.createElement(t,{cardParameters:this._makeLivePersonaCardParameters(!1),tabIndex:"-1"},i.createElement("span",{id:this.props.id}," ",e," "))}else this._isLivePersonCardLibAvailable()&&!this.state.hasDataLoaded&&this._getRecordData();return e},t.prototype._makeLivePersonaCardParameters=function(e){var t=this,n=this.state.identifiers||{},o=this._getHostAppId(),r=e?"Card opened from keyboard shortcut":"Card opened by hovering";return{personaInfo:{identifiers:{HostAppPersonaId:o,Smtp:n.smtp,AadObjectId:n.aadObjectId,PersonaType:this.props.personaType},displayName:this.props.displayName},behavior:{onCardOpen:function(){return t._reportCardUsage(r)},onCardClose:function(){return t._reportCardUsage("Card Closed")},disableClick:!0},ariaLabel:this.props.accessibilityLabel?this.props.accessibilityLabel:void 0}},t.prototype._onKeyDownOpenCard=function(){if(this._isLivePersonCardLibAvailable()&&this.state.hasDataLoaded&&window.LPC&&window.LPC.openCard&&this.props.onKeyDownContainerId){var e=document.getElementById(this.props.onKeyDownContainerId);if(e){var t=this._makeLivePersonaCardParameters(!0);window.LPC.openCard(e,t)}}},t.prototype._getHostAppId=function(){return this.props.entityReference.LogicalName+":"+this.props.recordId},t.prototype._getRecordData=function(){var e=this;if(!this.state.hasDataLoaded){var t=this.props.entityReference.LogicalName;v.default.retrieveRecord(t,this.props.recordId,this._getQueryOptions(t)).then(function(n){var o=e._getLpcIdentifiers(n,t);o&&e.setState({identifiers:o,hasDataLoaded:!0})}).catch(function(){v.default.Diagnostics.traceError("LivePersonaHoverTarget","Failed to fetch record data.")})}},t.prototype._getQueryOptions=function(e){switch(e){case"contact":return"?$select=emailaddress1";case"systemuser":return"?$select=internalemailaddress,azureactivedirectoryobjectid"}return""},t.prototype._getLpcIdentifiers=function(e,t){switch(t){case"contact":return{smtp:e.emailaddress1};case"systemuser":return{smtp:e.internalemailaddress,aadObjectId:e.azureactivedirectoryobjectid}}return null},t.prototype._isLivePersonCardLibAvailable=function(){var e=this.context?this.context.lpcInitializationState:void 0;return!!e&&e===ke.Initialized},t.prototype._reportCardUsage=function(e){var t={eventName:"uci_controlframework_usage",eventParameters:[{name:"EventContext",value:e},{name:"ControlName",value:"LivePersonaHoverTarget"}]};v.default.Reporting.reportEvent(t)},t.displayName="LivePersonaCardHoverTarget",t}(y.a);He.contextType=We;var Ke=h.connect(b.a)(He),ze=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Ge=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return ze(t,e),t.prototype.getElementName=function(){return"label"},t.prototype.getElementProps=function(){var e={htmlFor:this.props.forElementId};return e.for=this.props.forElementId,e},t.displayName="Label",t}(y.a),qe=h.connect(b.a)(Ge),Ye=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),$e=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Ye(t,e),t.prototype.getElementName=function(){return"option"},t.prototype.getElementProps=function(){var e={value:this.props.value?this.props.value.Value.toString():"-1"};return this.props.disabled&&(e.disabled=!0),this.props.selected&&(e[t._DATA_SELECTED]=!0),e},t.prototype.getElementChildren=function(){return this.props.value&&this.props.value.Label||""},t._DATA_SELECTED="data-selected",t}(y.a),Qe=h.connect(b.a)($e),Xe=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Ze=function(e){function t(t){var n=e.call(this,t)||this;return n._onChangeHandler=n._onChangeHandler.bind(n),n._uuid=Object(f.b)(),n.state={value:t.value},n}return Xe(t,e),t.prototype.componentWillReceiveProps=function(e){e&&!t._optionsEqual(this.state.value,e.value,this._isMultiple())&&this.setState({value:e.value})},t.prototype._uniqueId=function(e,t){return void 0===e&&(e=this.props.id),void 0===t&&(t=this._uuid),e+"_"+t},t.prototype._isMultiple=function(){return!!this.props.multiple},t.prototype._optionId=function(e){return""+this._uniqueId()+e.Value},t._optionsEqual=function(e,t,n){if(void 0===n&&(n=!1),!e||!t)return!1;if(Object(a.c)(e.Value)&&Object(a.c)(t.Value))return e.Label===t.Label;if(n){var o=e,r=t;return o.length===r.length&&o.every(function(e,t){return e===r[t]})}return e.Value===t.Value},t.prototype._onChangeHandler=function(e){for(var t=Array.from(e.target.options).filter(function(e){return e.selected}),n=[],o=function(e){var o=t[e].value;if(!Object(a.c)(o)){var i=r.props.options.filter(function(e){return(Object(a.c)(e.Value)?"":e.Value.toString())===o});i&&i.length&&n.push(i[0])}},r=this,i=0;i<t.length;i++)o(i);if(n.length>0){var s=this._isMultiple()?{value:n}:{value:n[0]};this.setState(s),this.props.onChange&&this.props.onChange(s.value)}},t.prototype.getElementName=function(){return"select"},t.prototype.getElementProps=function(){var e={value:this.props.multiple?this.state.value?this.state.value.map(function(e){return e.Value.toString()}):["-1"]:this.state.value?this.state.value.Value.toString():"-1",onChange:this._onChangeHandler};return e.describedByElementId=this.props.describedByElementId?null:this.props.describedByElementId,this.props.disabled&&(e.disabled=!0),this.props.multiple&&(e.multiple=!0),e},t.prototype.getElementChildren=function(){var t=this;return this.props.options&&this.props.options.length?this.props.options.map(function(e){var n=t._optionId(e),o=!1;if(t.props.multiple){for(var r=0;r<t.props.value.length;r++)if(t.props.value[r]===e){o=!0;break}}else o=t.props.value===e;return i.createElement(Qe,{id:n,key:n,value:e,selected:o,style:t.props.style.optionStyle})}):e.prototype.getElementChildren.call(this)},t}(y.a);function Je(e){var t={};return Object.assign(t,e),e&&e.style?(e.style.selectStyle&&e.style.selectStyle.appearance&&(t.style.selectStyle.appearance=e.style.selectStyle.appearance,t.style.selectStyle.WebkitAppearance=e.style.selectStyle.appearance,t.style.selectStyle.MozAppearance=e.style.selectStyle.appearance,t.style.selectStyle.MsAppearance=e.style.selectStyle.appearance),Object.assign(e.style,t.style.selectStyle,Object(b.b)(e))):{}}var et,tt,nt=h.connect(function(e){return function(t){return t.renderRule(Je,e)}})(Ze),ot=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),rt=function(e){function t(t){var n=e.call(this,t)||this;return n._onCheckboxChange=n._onCheckboxChange.bind(n),n}return ot(t,e),t.prototype._onCheckboxChange=function(e){var t=e.target.checked;this.props.onChange(t)},t.prototype.getElementName=function(){return"input"},t.prototype.getElementProps=function(){var e,t=((e={tabIndex:this.props.tabIndex?this.props.tabIndex:0,disabled:this.props.disabled,key:this.props.key,id:this.props.id?this.props.id:this.props.key,onChange:this._onCheckboxChange,role:this.props.accessibilityRole?this.props.accessibilityRole:"checkbox",type:"checkbox",name:this.props.name?this.props.name:null})[H.e]=this.props.checked,e.checked=this.props.checked,e);return t.testhooks=this.props.testhooks,t},t.displayName="Checkbox",t}(y.a),it=h.connect(b.a)(rt),at=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),st=function(){return(st=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},lt=function(e){function t(t){var n=e.call(this,t)||this;return n._optionSetChange=n._optionSetChange.bind(n),n._onCheckboxChange=n._onCheckboxChange.bind(n),n.onClick=n.onClick.bind(n),n.state={checked:n.props.value||!1},n}return at(t,e),t.prototype.componentWillReceiveProps=function(e){null!==e.value&&void 0!==e.value&&e.value!==this.state.checked&&this.setState({checked:e.value})},t.prototype._onCheckboxChange=function(e){if(this.state.checked!==e&&(this.setState({checked:e}),this.props.onValueChange&&this.props.onValueChange(e)),this.props.onOptionSetValueChange&&this.props.options){var t=this.props.options[Number(e)];this.props.onOptionSetValueChange(t)}},t.prototype._optionSetChange=function(e){e&&this.props.onOptionSetValueChange&&this.props.onOptionSetValueChange(e)},t.prototype.onClick=function(){if(this.props.onOptionSetValueChange&&this.props.options){var e=this.props.options[Number(!this.props.value)];this.props.onOptionSetValueChange(e)}},t.prototype.getCheckboxComponent=function(){var e={tabIndex:0,disabled:this.props.disabled,id:this.props.id||null,key:this.props.id||null,onChange:this._onCheckboxChange,testhooks:this.props.testhooks,name:this.props.name?this.props.name:null,accessibilityRole:this.props.displayAs&&this.props.displayAs!==t._CHECKBOX_DISPLAY_TAG?"switch":"",accessibilityLabel:this.props.accessibilityLabel,describedByElementId:this.props.describedByElementId?null:this.props.describedByElementId,style:this.props.style,checked:this.props.displayAs?this.props.value:this.state.checked,accessibilityChecked:this.props.displayAs?this.props.value:this.state.checked,title:this.props.title?this.props.title:null};return i.createElement(it,st({},e))},t.prototype.getSelectComponent=function(){var e=this.props.options[Number(this.props.value)],t={style:this.props.style||{},options:this.props.options,value:e,onChange:this._optionSetChange,testhooks:this.props.testhooks,disabled:this.props.disabled,key:this.props.absoluteId,name:this.props.id,id:this.props.id,accessibilityLabel:this.props.accessibilityLabel,title:this.props.title,onFocus:this.props.disabled?null:this.props.onFocus,onBlur:this.props.disabled?null:this.props.onBlur,describedByElementId:this.props.describedByElementId?null:this.props.describedByElementId};return i.createElement(nt,st({},t))},t.prototype.getLabelComponent=function(){var e={};Object.assign(e,this.props);var n=this.props.displayValue;return this.props.displayAs===t._CHECKBOX_DISPLAY_TAG?(e.forElementId=this.props.id||null,n=this.props.defaultValue):e.onClick=this.onClick,this.props.testhooks&&(e.testhooks=this.props.testhooks),e.style={overflow:"hidden",whiteSpace:"nowrap",textOverflow:"ellipsis"},this.props.displayValue?i.createElement(qe,st({},e),n):null},t.prototype.render=function(){if(!this.props.options&&this.props.displayAs)return i.createElement(qe,null);if(this.props.displayAs===t._SELECT_DISPLAY_TAG)return this.getSelectComponent();if(this.props.displayAs===t._RADIO_DISPLAY_TAG)return this.getLabelComponent();return i.createElement(x.a,st({},{style:{display:"flex",alignItems:"center",width:"100%"}},{testhooks:this.props.testhooks}),this.getCheckboxComponent(),this.getLabelComponent())},t.displayName="Switch",t._CHECKBOX_DISPLAY_TAG="checkbox",t._SELECT_DISPLAY_TAG="picklist",t._RADIO_DISPLAY_TAG="radio",t}(y.a),ct=h.connect(b.a)(lt),ut=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),pt=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return ut(t,e),t.prototype.getElementName=function(){return"input"},t.prototype.getElementProps=function(){var e=this,t={type:"file",onKeyPress:function(t){(e.isEdge||e.isIE)&&"Enter"===t.key&&t.target.click()}};return this.props.accept&&this.props.accept.length&&(t.accept=this.props.accept.join(",")),this.props.fileSelected&&(t.onChange=function(t){var n=t.target;if(n&&n.files&&n.files.length>0)if(n.files.length>1&&e.props.multipleFilesSelected)n.type="",n.type="file",e.props.multipleFilesSelected();else{var o=n.files[0],r=new FileReader;r.readAsDataURL(o),r.onload=function(){var t=e._parseFileReaderResult(o,r.result);e.props.fileSelected(t)},r.onerror=function(){e.props.onReaderError&&e.props.onReaderError("Error reading file: "+o.name+"\n"+r.error)}}else e.props.fileUnselected&&e.props.fileUnselected()}),t},t.prototype._parseFileReaderResult=function(e,t){var n=null,o=null;if(t){var r=t.indexOf(",");r>-1&&(n=t.substring(r+1));var i=t.indexOf(";");i>-1&&r>-1&&(o=t.substring(i+1,r))}return{content:n,mimeType:e.type,encoding:o,name:e.name,size:e.size}},t.displayName="FileInput",t}(y.a),dt=h.connect(b.a)(pt),ht=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();!function(e){e[e.Default=0]="Default",e[e.Small=1]="Small",e[e.Medium=2]="Medium",e[e.Large=3]="Large"}(et||(et={})),function(e){e[e.None=0]="None",e[e.Lookup=1]="Lookup",e[e.Grid=2]="Grid"}(tt||(tt={}));var ft=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._renderPresence=!1,t}return ht(t,e),t.prototype._addPresenceInformation=function(){var e=this.props.displaySize?this.props.displaySize:et.Default,t=this.props.presenceTarget?this.props.presenceTarget:tt.None;this._presenceInstance=new this._skypeChannelContext.SkypeChannelClient.Presence(this._presenceId,this.props.sipUrl,this.props.entityReference,e,this.props.parentControlId,this.props.accessibilityLabel,t),this._presenceInstance.buildPresence()},t.prototype.componentDidMount=function(){this._renderPresence&&this._addPresenceInformation()},t.prototype.componentWillUnmount=function(){this._presenceInstance&&(this._presenceInstance.close(),this._presenceInstance=null)},t.prototype._isSkypeChannelAvailable=function(){return this._skypeChannelContext=this.context?this.context.SkypeChannel:void 0,void 0!==this._skypeChannelContext},t.prototype._isPropsAvailable=function(){return!!this.props.sipUrl||this.props.entityReference&&this._skypeChannelContext.SkypeChannelClient.PresenceInformation&&this._skypeChannelContext.SkypeChannelClient.PresenceInformation.isPresenceEnabledEntity(this.props.entityReference.entityName)},t.prototype.render=function(){return this._presenceId=this.props.id?this.props.id:this.props.parentControlId+"_presence",this._renderPresence=this._isSkypeChannelAvailable()&&this._isPropsAvailable(),this._renderPresence?i.createElement(x.a,{id:this._presenceId,style:this.props.style}):null},t.displayName="PresenceIndicator",t}(i.Component);function mt(e){return new Promise(function(t,n){var o=new XMLHttpRequest;o.onreadystatechange=function(){if(o.readyState===XMLHttpRequest.DONE){var e=o.responseText;/<svg[\s\S]*>/i.test(e)?t(function(e){return(new DOMParser).parseFromString(e,"text/xml").getElementsByTagName("svg")[0]}(e)):n(new Error("Provided file isn't a valid SVG"))}},o.open("GET",e,!0),o.send()})}ft.contextType=We;var yt,bt=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),gt=function(e){function t(t){var n=e.call(this,t)||this;return n.state={},n}return bt(t,e),t.prototype.componentDidMount=function(){this.props.source&&this._inlineSvgImage(this.props.source)},t.prototype._inlineSvgImage=function(e){var t,n=this;(t=e,mt(t).then(function(e){var t,n,o=null;return e&&(function(e){for(var t=e.getElementsByTagName("script"),n=t.length-1;n>=0;n--)t[n].parentNode.removeChild(t[n])}(e),(o=function(e){for(var t={},n=0;n<e.attributes.length;n++){var o=e.attributes[n].name,r=e.attributes[n].value;"style"===o&&(r=i(r)),t[o]=r}return t;function i(e){if(!e)return null;for(var t=e.split(";"),n={},o=0,r=t;o<r.length;o++){var i=r[o],a=i.split(":"),s=a[0].trim().replace(/-\S/g,function(e){return e[1].toUpperCase()}),l=a[1].trim();n[s]=l}return n}}(e)).dangerouslySetInnerHTML={__html:(t=e,n=new XMLSerializer,Array.prototype.reduce.call(t.childNodes,function(e,t){return e+n.serializeToString(t)},""))},o=Object.freeze(o)),o})).then(function(e){e?n.setState({parsedSvgProps:e}):n.props.onParsingError&&n.props.onParsingError("File content is empty")},function(e){n.props.onParsingError&&n.props.onParsingError(e.message)})},t.prototype._shouldRenderImg=function(){return this.props.source&&this.props.fallbackToImage&&!this.state.parsedSvgProps},t.prototype.getElementName=function(){return"svg"},t.prototype.getElementProps=function(){return Object.assign({},this.state.parsedSvgProps,this.props)},t.prototype.render=function(){if(this._shouldRenderImg()){var e=void 0;return this.props.source&&(e=this.props.source.replace(/\\/g,"/")),i.createElement(Pe,{source:e,style:this.props.style,altText:this.props.altText,title:this.props.title})}return i.createElement(this.getElementName(),this.getElementPropsInternal(),this.getElementChildren())},t.displayName="Svg",t}(y.a),_t=h.connect(b.a)(gt),vt=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Ct=function(){return(Ct=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)};!function(e){e[e.CustomImage=0]="CustomImage",e[e.Initials=1]="Initials",e[e.CustomEntityIcon=2]="CustomEntityIcon",e[e.DefaultEntityIcon=3]="DefaultEntityIcon"}(yt||(yt={}));var Et=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return vt(t,e),t.getMode=function(e){return e.hasPrimaryImageField&&e.imageSrc?yt.CustomImage:e.hasPrimaryImageField&&e.entityPrimaryField?yt.Initials:e.customEntityIcon?yt.CustomEntityIcon:e.entityReference&&e.entityReference.entityName?yt.DefaultEntityIcon:void 0},Object.defineProperty(t.prototype,"_isCustomImageMode",{get:function(){return t.getMode(this.props)===yt.CustomImage},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"_isInitialsMode",{get:function(){return t.getMode(this.props)===yt.Initials},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"_isCustomEntityIconMode",{get:function(){return t.getMode(this.props)===yt.CustomEntityIcon},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"_isDefaultEntityIconMode",{get:function(){return t.getMode(this.props)===yt.DefaultEntityIcon},enumerable:!0,configurable:!0}),Object.defineProperty(t,"_isBrowserIE",{get:function(){return!!window.navigator.userAgent.match("MSIE")||!!window.navigator.userAgent.match("Trident")},enumerable:!0,configurable:!0}),t._getInitials=function(e){var t="";if(e){for(var n=e.split(" "),o=0;o<n.length&&t.length<2;o++)if(n[o].length>0){var r=n[o].charCodeAt(0);if(!(r>=97&&r<=122||r>=65&&r<=90)){t+=n[o].charAt(0);break}t+=n[o].charAt(0)}if(t.length<=1){t="";for(var i=0;i<e.length&&t.length<2;i++){var a=e.charCodeAt(i);if(!(a>=97&&a<=122||a>=65&&a<=90)){t+=e.charAt(i);break}t+=e.charAt(i)}}}return t},t.prototype._renderHealthCircle=function(e){var n=this,o=t._unitRegex.exec(this.props.style.width+"")[1],r=parseFloat(this.props.style.width+""),a=360*this.props.entityHealthScore/100,s={width:r+o,height:r+o,position:"relative",display:"block"},l={clip:"rect(0, "+(r+o)+", "+(r+o)+", "+(r/2+o)+")",height:"100%",width:"100%",left:"0",position:"absolute",top:"0"},c={clip:"rect(0, "+(r/2+o)+", "+(r+o)+", 0)",transform:"rotate("+a+"deg)",height:"100%",width:"100%",border:"4px solid transparent",borderRadius:"50%",left:"0",position:"absolute",top:"0",borderColor:"transparent",boxSizing:"border-box"};t._healthRanges.forEach(function(e){n.props.entityHealthScore>=e.min&&n.props.entityHealthScore<=e.max&&(c.borderColor=e.color)});var u=Object.assign({},c),p=Object.assign({display:"none"},c);return a>180&&(l.clip="rect(auto, auto, auto, auto)",u.transform="rotate(180deg)",p.display="block"),i.createElement(x.a,{style:s},e,i.createElement(x.a,{style:l},i.createElement(x.a,{style:u}),i.createElement(x.a,{style:p})))},t.prototype.getElementName=function(){return"span"},t.prototype.getElementProps=function(){return{alt:this.props.alt?this.props.alt:""}},t.prototype.getElementChildren=function(){return this._isInitialsMode?t._getInitials(this.props.entityPrimaryField):this._isDefaultEntityIconMode?i.createElement(Ne,{type:this.props.entityReference.entityName,style:this.props.iconStyle}):void 0},t.prototype._renderEntityImageWithPresence=function(e){var t="id_"+Object(f.b)(),n=i.createElement(ft,{key:t+"_presence",id:t+"_presence",parentControlId:t,style:{right:"0px",bottom:"0px",position:"absolute"},entityReference:this.props.entityReference,sipUrl:this.props.sipUrl,displaySize:this.props.presenceIndicatorSize,accessibilityLabel:this.props.entityPrimaryField});return i.createElement(x.a,{id:t,style:{position:"relative"}},e,n)},t.prototype.render=function(){var e;if(this._isCustomImageMode||this._isCustomEntityIconMode)if(t._isBrowserIE){var n={source:this._isCustomImageMode?this.props.imageSrc:this.props.customEntityIcon,style:this.props.style,fallbackToImage:!0,altText:this.props.alt,title:this.props.title};e=i.createElement(_t,Ct({},n))}else{var o={source:this._isCustomImageMode?this.props.imageSrc:this.props.customEntityIcon,style:this.props.style,altText:this.props.alt,title:this.props.title};e=i.createElement(Pe,Ct({},o))}else{var r=this.getElementPropsInternal(),a=Object.assign({},r,{role:r.role||"img","aria-label":this.props.alt||""});e=i.createElement(this.getElementName(),a,this.getElementChildren())}return this.props.wrapperStyle&&(e=i.createElement(x.a,{style:this.props.wrapperStyle},e)),this.props.entityHealthScore&&(e=this._renderHealthCircle(e)),(this.props.entityReference||this.props.sipUrl)&&(e=this._renderEntityImageWithPresence(e)),e},t.displayName="EntityImage",t._unitRegex=/[0-9]*\.?[0-9]+(px|%|em|rem)?/i,t._healthRanges=[{min:1,max:39,color:"#FF0000"},{min:40,max:59,color:"#FFBB00"},{min:60,max:100,color:"#00EE00"}],t.backgroundColors=["#005C62","#358717","#725A0D","#A42B1A","#652F4E","#6A1E7A","#315FA2"],t}(y.a);function It(e){if(e&&e.style){if(!e.style.backgroundColor&&(Et.getMode(e)===yt.Initials||Et.getMode(e)===yt.DefaultEntityIcon)){var t=Et.backgroundColors[0];if(e.entityPrimaryField){for(var n=0,o=e.entityPrimaryField.length-1;o>=0;o--){var r=e.entityPrimaryField.charCodeAt(o),i=o%8;n^=(r<<i)+(r>>8-i)}t=Et.backgroundColors[n%Et.backgroundColors.length]}return Object.assign({backgroundColor:t},Object(b.b)(e))}return Object.assign(e.style,Object(b.b)(e))}return{}}var Pt,wt=h.connect(function(e){return function(t){return t.renderRule(It,e)}})(Et),St=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Ot=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return St(t,e),t.prototype.shouldComponentUpdate=function(e){return this.props.active!==e.active||this.props.progressType!==e.progressType},t.prototype.getElementName=function(){return"div"},t.prototype.getFlexClassName=function(e){var t,n="";return e?(t=Object.assign(Object(V.a)(e)),this.props.progressType&&"bar"!==this.props.progressType?"ring"===this.props.progressType&&(n+="indeterminateProgressRing"):n+="indeterminateProgressBar",!0!==this.props.active&&!0!==this.props.animating&&(n+=" hideProgressBar"),n+=" "+Object(V.b)(t?t.display:null)):null},t.prototype.getElementChildren=function(){return this.isIE?i.createElement("div",null,"......"):"ring"===this.props.progressType?i.createElement("div",null,i.createElement("div",{className:"progressDot"}),i.createElement("div",{className:"progressDot"}),i.createElement("div",{className:"progressDot"}),i.createElement("div",{className:"progressDot"}),i.createElement("div",{className:"progressDot"})):void 0},t.displayName="ProgressIndicator",t}(y.a),Dt=h.connect(b.a)(Ot),Tt=n(24),Ft=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),xt=function(e){function t(t){var n=e.call(this,t)||this;return n._SCROLL_THRESHOLD=1,n._FULL_BROWSER_TRANSLATE_DURATION=500,n._TABLET_TRANSLATE_DURATION=500,n._MOBILE_BROWSER_TRANSLATE_DURATION=500,n._recalculateState=n._recalculateState.bind(n),n._onNextClick=n._onNextClick.bind(n),n._onPrevClick=n._onPrevClick.bind(n),n._onNextKeyDown=n._onNextKeyDown.bind(n),n._onPrevKeyDown=n._onPrevKeyDown.bind(n),n._saveScrollViewRefCallback=n._saveScrollViewRefCallback.bind(n),n.state={prevArrowDisabled:!0,nextArrowDisabled:!0},n._userAgent=window.navigator.userAgent,n}return Ft(t,e),t.prototype.getElementProps=function(){var e=this.props.arrowButtonStyle||{},t=this.props.scrollViewStyle||{};return Object.assign({},this.props,{startChildIndex:this.props.startChildIndex||0,arrowWidth:this.props.arrowWidth||e.width||20,arrowButtonStyle:e,scrollViewStyle:t})},t.prototype.componentDidMount=function(){var e=this.getElementPropsInternal();0!==e.startChildIndex&&this._scrollToChildByIndex(e.startChildIndex),this._currentChildIndex=e.startChildIndex},t.prototype.componentDidUpdate=function(){if(!this.getElementPropsInternal().style.height){var e=this._getScrollableContainer();if(e){var t=e.scrollHeight+"px";e.parentElement.style.height=t,e.parentElement.style.minHeight=t}}this._recalculateState()},t.prototype._saveScrollViewRefCallback=function(e){this._scrollView=e},t.prototype._onPrevKeyDown=function(e){this.props.onPrevArrowKeyDown&&this.props.onPrevArrowKeyDown(e,this._currentChildIndex)},t.prototype._onNextKeyDown=function(e){this.props.onNextArrowKeyDown&&this.props.onNextArrowKeyDown(e,this._currentChildIndex)},t.prototype._onPrevClick=function(e){this._slideByArrow(!1),e.stopPropagation(),this.props.onPrevArrowClick&&this.props.onPrevArrowClick(e,this._currentChildIndex)},t.prototype._onNextClick=function(e){this._slideByArrow(!0),e.stopPropagation(),this.props.onNextArrowClick&&this.props.onNextArrowClick(e,this._currentChildIndex)},t.prototype._slideByArrow=function(e){var t=this._getChildIndexToScroll(e);this._scrollToChildByIndex(t)},t.prototype._getScrollLeft=function(e){if(this.props.isRTL){if(this._isBrowserIEorEdge()||this._isBrowserFirefox())return Math.abs(e.scrollLeft);if(this._isBrowserChromeOrAndroid()||this._isBrowserSafari())return e.scrollWidth-e.clientWidth-e.scrollLeft}return e.scrollLeft},t.prototype._getPrevIcon=function(){var e=this.props.prevArrowIconType;return this.props.isRTL&&56===e&&(e=13),this._renderArrowIcon(e,"<")},t.prototype._getNextIcon=function(){var e=this.props.nextArrowIconType;return this.props.isRTL&&13===e&&(e=56),this._renderArrowIcon(e,">")},t.prototype._getCurrentChildIndex=function(e,t){var n=this._getScrollableContainer(),o=n.children,r=0,i=e;if(t&&!this.props.isRTL||!t&&this.props.isRTL){if(this._getTotalWidthIncludingMargins(o[i])>=n.clientWidth)return this._boundIndex(++i,o);for(;i<o.length;i++)if((r+=this._getTotalWidthIncludingMargins(o[i]))>=n.clientWidth)return this._boundIndex(i,o)}else{if(this._getTotalWidthIncludingMargins(o[i])>=n.clientWidth)return this._boundIndex(--i,o);for(;i>=0;i--)if((r+=this._getTotalWidthIncludingMargins(o[i]))>=n.clientWidth)return this._boundIndex(i,o)}return this._boundIndex(i,o)},t.prototype._boundIndex=function(e,t){return e=Math.min(e,t.length-1),e=Math.max(e,0)},t.prototype._getChildIndexToScroll=function(e){return this._currentChildIndex=this._getCurrentChildIndex(this._currentChildIndex,e),this._currentChildIndex},t.prototype._recalculateState=function(){var e,t,n=this._getScrollableContainer(),o=this._getScrollLeft(n),r=n.scrollWidth-n.offsetWidth;this.props.isRTL?(t=o<=0+this._SCROLL_THRESHOLD,e=this._isBrowserIEorEdge()||this._isBrowserFirefox()||this._isBrowserSafari()?Math.abs(o)+n.offsetWidth+this._SCROLL_THRESHOLD>=n.scrollWidth:o+this._SCROLL_THRESHOLD>=r):(e=o<=0+this._SCROLL_THRESHOLD,t=o+n.offsetWidth+this._SCROLL_THRESHOLD>=n.scrollWidth-1),e===this.state.prevArrowDisabled&&t===this.state.nextArrowDisabled||this.setState({prevArrowDisabled:e,nextArrowDisabled:t})},t.prototype._getChildByIndex=function(e){e=e&&e>0?e:0;var t=this._getScrollableContainer().children;return t?t[e]:null},t.prototype._scrollToChildByIndex=function(e){var t=this._getChildByIndex(e);t&&this._scrollToChild(t)},t.prototype._scrollToChild=function(e){if(!e)throw new Error("child must be specified");this._scrollToContent(this._getScrollableContainer(),e)},t.prototype._scrollToWithTransition=function(e,t){var n=e.scrollLeft,o=t-n,r=this._determineDuration();this._scrollTransition(e,0,n,10,o,r)},t.prototype._scrollTransition=function(e,t,n,o,r,i){var a=this,s=function(){t+=o,e.scrollLeft=a._scrollEase(t,n,r,i),t<i&&setTimeout(s,o)};s()},t.prototype._scrollEase=function(e,t,n,o){return(e/=o/2)<1?n*Math.pow(e,2)/2+t:(e--,-1*n*(Math.pow(e,2)-2*e-1)/2+t)},t.prototype._getScrollableContainer=function(){return d.findDOMNode(this._scrollView)},t.prototype._renderPrevArrowButton=function(){var e=this.getElementPropsInternal(),t=Object.assign({position:"absolute",left:"0px",top:"0px",width:e.arrowWidth+"px",boxSizing:"border-box",alignItems:"center"},this.props.arrowButtonStyle),n=this.props.id+"_scrollPrevArrow";return i.createElement(p.a,{id:n,key:n,accessibilityHidden:this.state.prevArrowDisabled,accessibilityLabel:this.props.isRTL?"Scroll right the content":"Scroll left the content",accessibilityHasPopup:!0,tabIndex:-1,disabled:this.state.prevArrowDisabled,style:t,onFocus:this.props.onFocus,onClick:this._onPrevClick,onKeyDown:this._onPrevKeyDown},this.props.isRTL?this._getNextIcon():this._getPrevIcon())},t.prototype._renderNextArrowButton=function(){var e=this.getElementPropsInternal(),t=Object.assign({position:"absolute",right:"0px",top:"0px",width:e.arrowWidth+"px",boxSizing:"border-box",alignItems:"center"},this.props.arrowButtonStyle),n=this.props.id+"_scrollNextArrow";return i.createElement(p.a,{id:n,key:n,accessibilityHidden:this.state.nextArrowDisabled,accessibilityLabel:this.props.isRTL?"Scroll left the content":"Scroll right the content",accessibilityHasPopup:!0,tabIndex:-1,disabled:this.state.nextArrowDisabled,style:t,onFocus:this.props.onFocus,onClick:this._onNextClick,onKeyDown:this._onNextKeyDown},this.props.isRTL?this._getPrevIcon():this._getNextIcon())},t.prototype._renderArrowIcon=function(e,t){if(e){var n="scroll"+Tt.a[e]+"Icon";return i.createElement(Ue.a,{key:n,type:e})}return t},t.prototype._isBrowserIEorEdge=function(){return this.isEdge||this.isIE},t.prototype._isBrowserFirefox=function(){return!!this._userAgent.match("Firefox")},t.prototype._isBrowserChromeOrAndroid=function(){return!!this._userAgent.match("Chrome")||!!this._userAgent.match("Android")||!!this._userAgent.match("AppleWebKit")},t.prototype._isBrowserSafari=function(){return!!this._userAgent.match("Safari")},t.prototype._scrollToContent=function(e,t){e&&t&&this._scrollToContentHorizontal(e,t)},t.prototype._scrollToContentHorizontal=function(e,t){for(var n,o=e.scrollWidth-e.offsetWidth,r=e.children,i=this._getChildIndex(t),a=0,s=0;s<i;s++)a+=this._getTotalWidthIncludingMargins(r[s]);this.props.isRTL?(a+=parseInt(this._getCalculatedStyle(t).marginRight,10),n=this._isBrowserIEorEdge()?a:o-a):n=a+=parseInt(this._getCalculatedStyle(t).marginLeft,10),this._scrollToWithTransition(e,n)},t.prototype._getCalculatedStyle=function(e){return e.currentStyle||window.getComputedStyle(e)},t.prototype._getTotalWidthIncludingMargins=function(e){var t=this._getCalculatedStyle(e),n=parseInt(t.width,10);return isNaN(n)&&(n=e.offsetWidth),n+(t.marginLeft.indexOf("px")<0?parseInt(getComputedStyle(e).marginLeft,10):parseInt(t.marginLeft,10))+(t.marginRight.indexOf("px")<0?parseInt(getComputedStyle(e).marginRight,10):parseInt(t.marginRight,10))},t.prototype._getChildIndex=function(e){for(var t=0;null!=(e=e&&e.previousSibling);)t++;return t},t.prototype._determineDuration=function(){return this._getScrollableContainer().clientWidth<=550?this._MOBILE_BROWSER_TRANSLATE_DURATION:this._getScrollableContainer().clientWidth<=1200?this._TABLET_TRANSLATE_DURATION:this._FULL_BROWSER_TRANSLATE_DURATION},t.prototype.render=function(){var e=this.getElementPropsInternal();Object.assign(e.style,{display:"block",position:"relative",paddingLeft:e.arrowWidth+"px",paddingRight:e.arrowWidth+"px",overflow:"hidden"},this.props.style);var t=Object.assign({},this.props.scrollViewStyle,{position:"relative"});return i.createElement(x.a,{style:e.style,isRequestedMeasuring:!0,onMeasuring:this._recalculateState,accessibilityLabel:this.props.accessibilityLabel},this.props.isRTL?this._renderNextArrowButton():this._renderPrevArrowButton(),i.createElement(te,{semanticTag:this.props.semanticTag,key:"HorizontalScrollContent",refCallback:this._saveScrollViewRefCallback,horizontal:!0,style:t,accessibilityLabel:this.props.accessibilityLabel,onScroll:this._recalculateState,role:this.props.role,isRTL:this.props.isRTL},this.props.children),this.props.isRTL?this._renderPrevArrowButton():this._renderNextArrowButton())},t.displayName="HorizontalScroll",t}(y.a),Mt=h.connect(b.a)(xt),At=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),kt=function(){return(kt=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)};!function(e){e[e.Crm=0]="Crm",e[e.Microsoft=1]="Microsoft"}(Pt||(Pt={}));var Rt=function(e){function t(t){var n=e.call(this,t)||this;return n.handleItemSelected=n.handleItemSelected.bind(n),n.handleItemIconPointerDown=n.handleItemIconPointerDown.bind(n),n.handleSpaceKey=n.handleSpaceKey.bind(n),n.handleRelativeToElementSelector=n.handleRelativeToElementSelector.bind(n),n._getOptionTestHooks=n._getOptionTestHooks.bind(n),n}return At(t,e),t.prototype.handleItemSelected=function(e){this.selectedListItem=e},t.prototype.handleItemIconPointerDown=function(e){var t=e.currentTarget;this._handleIconClick(t)},t.prototype.handleSpaceKey=function(e){var t=e.currentTarget;this._handleIconClick(t)},t.prototype.handleArrowUp=function(t){this.state.isExpanded&&e.prototype.handleArrowUp.call(this,t)},t.prototype.handleArrowDown=function(t,n){this.state.isExpanded?e.prototype.handleArrowDown.call(this,t,n):e.prototype.handleEnterKey.call(this,t)},t.prototype.handleRelativeToElementSelector=function(e){return e},t.prototype.calculateWidth=function(){return this.props.style&&this.props.style.width?this.props.style.width:"20em"},t.prototype._handleIconClick=function(e){if(e&&e.parentElement&&e.parentElement.parentElement&&"li"===e.parentElement.parentElement.localName){var t=e.parentElement.parentElement.dataset.value;if(this.props.onItemIconPointerDown&&t){var n=this.getOptionByValue(this.props.options,t);n&&this.props.onItemIconPointerDown(n)}}},t.prototype._renderListItem=function(e){var t=e.iconStyle?e.iconStyle:{width:16,height:16,margin:2},n=!e.imageSource&&e.iconType?e.iconCategory===Pt.Crm?i.createElement(Me,{type:e.iconType,style:t}):i.createElement(Ue.a,{type:e.iconType,style:t}):null,o=30===e.iconType?"Pin ":31===e.iconType?"Unpin ":null,r=null==o?o:o+e.text,a=e.imageSource?i.createElement(x.a,null,i.createElement(Pe,{source:e.imageSource,style:t,altText:e.altText||""})):e.iconType?i.createElement(x.a,{title:e.iconTitle,accessibilityLabel:r,role:30===e.iconType||31===e.iconType?"button":"presentation",onKeyDown:30===e.iconType||31===e.iconType?this.handleSpaceKey:null,onPointerDown:this.handleItemIconPointerDown},n):null;return i.createElement(x.a,{style:{display:"flex"}},a,i.createElement(le,{role:"presentation",style:{marginLeft:"10px",textOverflow:"ellipsis",whiteSpace:"nowrap",overflow:"hidden"}},e.text||" "))},t.prototype._renderOptions=function(e,n){var o=this,r=this.props.options,a=this.props.selectedItemStyle||t.getSelectedItemStyle();return r.filter(function(t){return t.categoryId===e}).map(function(e,r){var s=o.getListItemId(e),l=o._getOptionTestHooks(r),c=r+(n=n||0);return i.createElement(Q,{key:c,id:s,tabIndex:-1,role:"option",title:e.text,accessibilityLabel:e.text,dataText:e.text,dataValue:e.value,onSelected:o.handleItemSelected,isSelected:o.selectedIndex===c,style:t.getListItemStyle(),selectedStyle:a,ref:o.saveItemRef,onClick:o.handleItemPointerDown,testhooks:l},o._renderListItem(e))})},t.prototype._getOptionTestHooks=function(e){if(!this.props.testhooks)return null;var t=Object.assign({},this.props.testhooks);for(var n in t)t[n]+="-item-"+e;return t},t.prototype._renderCategories=function(){var e=this,t=this.props.categories,n=[];if(t){var o=0;t.map(function(t,r){var a=e._renderOptions(t.id,o);n.push(i.createElement(x.a,{key:r,style:{display:"block"}},t.name,a)),o+=a.length})}else n.push(i.createElement(x.a,null,this._renderOptions()));return n},t.prototype.renderOptionsList=function(){var e=this.props.options;if(e){var t=this._renderCategories(),n=this.getPageSize(),o=this.getListId()+"_scrollView",r=n<e.length,a={height:r?2.35*n+"em":void 0,overflowY:r?"scroll":"hidden",overflowX:"hidden",flex:"1 1 auto",display:"block"},s={width:"100%",listStyleType:"none"},l=void 0;if(~this.selectedIndex){var c=e[this.selectedIndex];l=this.getListItemId(c)}return i.createElement(G,{role:"listbox",id:this.getListId(),title:"Select a view.",accessibilityLabel:"Select a view.",tabIndex:-1,style:s,onKeyDown:this.keyboardNavigation},i.createElement(te,{id:o,accessibilityLabel:this.isIE?"Expanded list":null,style:a,role:"presentation",scrollToId:l,horizontal:!1},t))}return null},t.prototype.getTextOnlyStyle=function(){var e=this.props.textStyle?this.props.textStyle:{borderWidth:0,flex:"0 1 auto",outline:"none",cursor:"pointer",padding:"0.5em 0.75em"};return Object.assign({},e,{maxWidth:"100%",display:"flex"})},t.prototype.getTextOnlyInnerComponent=function(e){var t=Object.assign({display:"inline-block",overflow:"hidden",textOverflow:"ellipsis"},this.props.overrideTextContainerStyle);return this.state.isExpanded&&(t.backgroundColor=this.props.expandedBackgroundColor),i.createElement(x.a,{style:{display:"flex",maxWidth:"100%"}},i.createElement(le,{style:t,id:e,accessibilityHidden:!0},this.getSelectedOptionText()),this._renderCaretButton())},t.prototype.handleValueChange=function(e){if(this.props.onChange){this.props.onChange(e);var t=this;setTimeout(function(){t.selectItem(t.getInternalId()+"_text")},500)}},t.prototype._renderCaretButton=function(){var e=this.props.caretStyle?Object.assign({},this.props.caretStyle):{paddingLeft:"5px",color:"black",backgroundColor:"transparent"},t=this.props.hoveredStyle||{":hover":{backgroundColor:"#EFEFEF"}};Object.assign(e,t,{cursor:"pointer"}),this.state.isExpanded&&(e.backgroundColor=this.props.expandedBackgroundColor||"#EFEFEF");var n=this.props.caretType&&Tt.a[this.props.caretType]?this.props.caretType:Tt.a.DropdownArrow;return i.createElement(le,{id:this.getButtonId(),style:e,accessibilityHidden:!0},i.createElement(Ue.a,{type:n,role:"presentation"}))},t.prototype.renderFlyout=function(e){void 0===e&&(e="rtl"===document.body.dir);var t=void 0,n=void 0;if(this.props.testhooks)for(var o in n=Object.assign({},this.props.testhooks))n[o]+="-flyout";if(!this.props.readOnly&&this.state.isExpanded){var r=this.renderOptionsList(),a=this.getActiveDescendantId();if(r){var s={borderWidth:"0.1em",borderStyle:"solid",borderColor:"#666666",backgroundColor:"white",width:this.calculateWidth(),boxShadow:be.SHADOWS.Shadow01};t=i.createElement(W,{id:this.getFlyoutId(),key:this.getFlyoutId(),focusElementId:a,testhooks:n,focusCallback:this.setFocusToItem,flyoutDirection:e?g.down:g.downleft,flyoutStyle:s,positionType:"relative",relativeToElementId:this.props.relativeToElementId?this.props.relativeToElementId:this.getButtonId(),relativeToElementIdSelector:this.handleRelativeToElementSelector,onOutsideClick:this.handleFlyoutOutsideClick,parentCustomControlId:this.props.parentCustomControlId,parentFlyoutRoot:this.props.parentFlyoutRoot,rootZIndex:this.props.rootZIndex,enableTrackOnScroll:!0,dismissOnScroll:!this.props.keepFlyoutOpenOnScroll},r)}}return t},t.prototype.handleFlyoutOutsideClick=function(e){var t=this.props.id,n=document.getElementById(t);n&&n.contains(event.target)&&n.childNodes[0]!==event.target||(e.target.id!==this.getButtonId()&&this.setIsExpanded(!1),this.setFocus(),this.clickedOutside=!0)},t.prototype.render=function(){var e=Object.assign({},this.getElementPropsInternal(),{title:""});return Object.assign(e.style,{backgroundColor:"transparent",display:"flex",flex:"0 1 auto",width:"100%"},this.props.viewSelectorStyle),i.createElement(x.a,kt({},e,{ref:this.saveContainerRef}),i.createElement(x.a,{style:e.style,id:this.getInternalId()},this.renderTextOnly(this.focusableControlId,this.props.testhooks),!this.props.readOnly&&this.renderFlyout(this.props.isRTL)))},t.displayName="ViewSelectorControl",t}(be);function Lt(e){return Object.assign({float:"left",fontSize:"16px",color:"#666666"},e.textStyle)}function Nt(e){return Object.assign({width:"100%",height:"100%",textAlign:"center",minHeight:"7.5em",display:"flex",alignItems:"center",justifyContent:"center",flexDirection:"column",backgroundColor:"#ffffff",flex:"1 1 auto"},e.containerStyle)}function Ut(e){return Object.assign({},{color:"#666666",fontFamily:"Dyn CRM Symbol, Segoe MDL2 Assets",fontSize:"2.5em",paddingBottom:"10px"},e.iconStyle)}function Bt(e){return i.createElement(x.a,{style:Nt(e),title:e.text},i.createElement(Ue.a,{type:e.icon,style:Ut(e),accessibilityHidden:e.accessibilityHidden}),i.createElement(le,{style:Lt(e)},e.text))}var jt=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Wt=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return jt(t,e),t.prototype.getElementName=function(){return"table"},t.displayName="Table",t}(y.a),Vt=h.connect(b.a)(Wt),Ht=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Kt=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Ht(t,e),t.prototype.getElementName=function(){return"tbody"},t.displayName="TableBody",t}(y.a),zt=h.connect(b.a)(Kt),Gt=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),qt=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Gt(t,e),t.prototype.getElementName=function(){return"caption"},t.displayName="TableCaption",t}(y.a),Yt=h.connect(b.a)(qt),$t=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Qt=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return $t(t,e),t.prototype.getElementName=function(){return"td"},t.prototype.getElementProps=function(){var e={};return this.props.colSpan&&(e.colSpan=this.props.colSpan),this.props.rowSpan&&(e.rowSpan=this.props.rowSpan),this.props.scope&&(e.scope=this.props.scope),e},t.displayName="TableCell",t}(y.a),Xt=h.connect(b.a)(Qt),Zt=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Jt=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Zt(t,e),t.prototype.getElementName=function(){return"tfoot"},t.displayName="TableFooter",t}(y.a),en=h.connect(b.a)(Jt),tn=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),nn=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return tn(t,e),t.prototype.getElementName=function(){return"thead"},t.displayName="TableHeader",t}(y.a),on=h.connect(b.a)(nn),rn=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),an=function(e){function t(t){var n=e.call(this,t)||this;return n._onClickWrapper=n._onClickWrapper.bind(n),n}return rn(t,e),t.prototype._onClickWrapper=function(e){this.props.onClick&&this.props.onClick(e)},t.prototype.getElementName=function(){return"th"},t.prototype.getElementProps=function(){return Object.assign({},this.props,{children:null,onClick:this._onClickWrapper})},t.displayName="TableHeaderCell",t}(y.a),sn=h.connect(b.a)(an),ln=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),cn=function(e){function t(t){var n=e.call(this,t)||this;return n._onClickWrapper=n._onClickWrapper.bind(n),n}return ln(t,e),t.prototype._onClickWrapper=function(e){this.props.onClick&&this.props.onClick(e)},t.prototype.getElementName=function(){return"tr"},t.prototype.getElementProps=function(){return Object.assign({},this.props,{children:null,onClick:this._onClickWrapper})},t.displayName="TableRow",t}(y.a),un=h.connect(b.a)(cn),pn=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),dn=function(e){function t(t){var n=e.call(this,t)||this;return n._onChangeHandler=n._onChangeHandler.bind(n),n}return pn(t,e),t.prototype.getElementName=function(){return"input"},t.prototype._onChangeHandler=function(e){e.target.checked&&this.props.onChange&&this.props.onChange(this.props.value)},t.prototype.getElementProps=function(){var e={id:this.props.id,key:this.props.id,checked:this.props.checked,name:this.props.name,role:"radio",type:"radio",onChange:this._onChangeHandler};return this.props.disabled&&(e.disabled=!0),this.props.checked&&(e[t._DATA_CHECKED]=!0),this.props.value&&(e.value=this.props.value.Label),e},t.displayName="InputOption",t._DATA_CHECKED="data-checked",t}(y.a),hn=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),fn=function(){return(fn=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},mn=function(e){function t(t){var n=e.call(this,t)||this;return n._onChangeHandler=n._onChangeHandler.bind(n),n._uuid=Object(f.b)(),n.state={value:t.value},n}return hn(t,e),t.prototype.componentWillReceiveProps=function(e){e&&!t._optionsEqual(this.state.value,e.value)&&this.setState({value:e.value})},t.prototype._uniqueId=function(e,t){return void 0===e&&(e=this.props.id),void 0===t&&(t=this._uuid),e+"_"+t},t.prototype._optionId=function(e){return this._uniqueId()+"_"+e.Value},t._optionsEqual=function(e,t){return!(!e||!t)&&(Object(a.c)(e.Value)&&Object(a.c)(t.Value)?e.Label===t.Label:e.Value===t.Value)},t.prototype._getInputOptionProps=function(e,t){var n=e.Value===this.state.value.Value,o={id:t,key:t,value:e,name:this.props.name,checked:n,onChange:this._onChangeHandler,disabled:this.props.disabled};return this.props.style&&(o.style=this.props.style.inputOptionStyle||null),o},t.prototype._getLabelOptionProps=function(e){var t={forElementId:e};return this.props.style&&(t.style=this.props.style.inputOptionLabelStyle||null),t},t.prototype._getViewStyles=function(){var e={};return this.props.style&&(e.style=this.props.style.style||null),e},t.prototype._onChangeHandler=function(e){e&&(this.setState({value:e}),this.props.onChange&&this.props.onChange(e))},t.prototype._getOptionList=function(){var e=this;return this.props.options&&this.props.options.length&&this.props.value?this.props.options.map(function(t){var n=e._optionId(t),o=e._getInputOptionProps(t,n),r=e._getLabelOptionProps(n),a=e._getViewStyles();return i.createElement(x.a,fn({key:Object(f.b)()},a),i.createElement(dn,fn({},o)),i.createElement(qe,fn({},r),t.Label))}):null},t.prototype.render=function(){return i.createElement(x.a,{style:this.props.style.style},this._getOptionList())},t}(y.a),yn=h.connect(b.a)(mn),bn=n(35),gn=n(28),_n=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),vn=function(){return(vn=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},Cn=function(e){function t(t){var n=e.call(this,t)||this;return n._toggleCollapseState=n._toggleCollapseState.bind(n),n.saveItemRef=n.saveItemRef.bind(n),n._firstRender=!0,n._totalLineHeight=0,n.state={collapsed:!0},n._backgroundCanvas=document.createElement("canvas"),n._areLinesTruncated=!1,n}return _n(t,e),t.prototype.componentDidMount=function(){!this.props.isFieldLabel&&this._firstRender&&this._textRef&&this.props.truncatedlines&&this.forceUpdate()},t.prototype._toggleCollapseState=function(){this.props.noExpandable||this.setState({collapsed:!this.state.collapsed})},t.prototype.saveItemRef=function(e){this._textRef=e},t.prototype._calculateLineHeight=function(){if(this._textRef&&this.state.collapsed){var e=d.findDOMNode(this._textRef);if(e){var t=window.getComputedStyle(e);this._firstRender&&(this._originalHeight=parseInt(t.height,10),this._firstRender=!1);var n=0;if(n=this.props.lineHeight?this.props.lineHeight:parseInt(t.lineHeight,10),isNaN(n)){var o=e.cloneNode();o.innerHTML="<br>",e.appendChild(o);var r=o.offsetHeight;o.innerHTML="<br><br>";var i=o.offsetHeight;e.removeChild(o),n=i-r}if(this._areLinesTruncated=this._originalHeight>n*this.props.truncatedlines,!this._areLinesTruncated)return this._originalHeight+"px";if(0!==n){var a=n*this.props.truncatedlines;this._totalLineHeight=a}return this._totalLineHeight+"px"}}},t.prototype.render=function(){var e=Object.assign(this._getTextStyle(),this.props.flexibleTextStyle),t=Object.assign({display:"flex",flexDirection:"Column",width:"100%"},this.props.flexibleTextContainerStyle);return i.createElement(x.a,{style:t},i.createElement(le,vn({},this.props,{onClick:this._toggleCollapseState,style:e,ref:this.props.isFieldLabel?null:this.saveItemRef,id:this.props.id,className:this._returnExpandableClassName()}),this.props.children))},t.prototype._calculateHeight=function(){var e=0;if(this.props.isFieldLabel){var t=this._backgroundCanvas.getContext("2d");t.font=this.props.flexibleTextStyle&&this.props.flexibleTextStyle.fontSize&&this.props.flexibleTextStyle.fontFamily?this.props.flexibleTextStyle.fontSize+" "+this.props.flexibleTextStyle.fontFamily:"14px Segoe UI";var n=t.measureText(this.props.children.props.children).width/144;n>this.props.truncatedlines&&(n=this.props.truncatedlines,this._areLinesTruncated=!0),e=this.props.lineHeight&&this._areLinesTruncated?this.props.lineHeight*n:null}return e},t.prototype._getTextStyle=function(){return this.state.collapsed?1===this.props.truncatedlines?{whiteSpace:"nowrap",overflow:"hidden",textOverflow:"ellipsis",direction:this.props.isRTL?"rtl":"ltr"}:{overflow:"hidden",position:"relative",height:this.props.isFieldLabel?this._calculateHeight():this._calculateLineHeight(),display:"inline-block",textAlign:"justify",":after":this._areLinesTruncated?{background:this.props.maskingColor?this.props.maskingColor:"#F8F7F6"}:"",paddingLeft:this.props.isRTL?"0.75rem":void 0,paddingRight:this.props.isRTL?void 0:"0.75rem"}:{}},t.prototype._returnExpandableClassName=function(){return this._areLinesTruncated?this.props.isRTL?"block-with-text-noexpansion-rtl":"block-with-text-noexpansion":""},t}(y.a),En=n(13);n.d(t,"a",function(){return wn});var In=function(){return(In=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},Pn="function"==typeof Symbol&&Symbol.for("react.element")||60103,wn=function(){function e(){}return e.renderVirtualComponent=function(t,n,o,r,i){if(void 0===i&&(i=!0),i&&r.startRenderFunction(),!t)return i&&r.stopRenderFunction(),null;var a=e.generateReactComponent(t,null,"root",n,o,r,null,e.generateReactChildren(e._getComponentKey(t,null,"root"),t.getChildren(),n,o,r,e._generateFlyoutParentId(n,t)));return i&&r.stopRenderFunction(),a},e.generateJSXElement=function(t,n,o,r,a,s){if(null==n)return i.createElement(x.a,null,'"UNKNOWN COMPONENT"');var l=n?Object(u.e)(r,n.id,n.absoluteId):"",c=e._updateDataIdInTesthooks(r,n),d=n[gn.a.LearningPathAttributeName];switch(d&&(c[gn.a.LearningPathAttributeSuffix]=d),t.toUpperCase()){case"CRMICON":var h=n;return{$$typeof:Pn,type:Me,props:{id:l,testhooks:c,type:h.type,style:h.style,hidden:h.hidden,accessibilityHasPopup:h.accessibilityHasPopup,accessibilityExpanded:h.accessibilityExpanded,accessibilityLabel:h.accessibilityLabel,accessibilityHidden:h.accessibilityHidden,labelledByElementId:h.labelledByElementId,describedByElementId:h.describedByElementId,controlsElementId:h.controlsElementId,ownsElementId:h.ownsElementId,role:h.role,tabIndex:h.tabIndex,onClick:h.onClick,onFocus:h.onFocus,onBlur:h.onBlur,onPointerDown:h.onPointerDown,onPointerUp:h.onPointerUp,onKeyDown:h.onKeyDown,onKeyUp:h.onKeyUp,title:h.title},key:h.key,ref:null,_owner:null};case"ENTITYICON":var m=n;return{$$typeof:Pn,type:Ne,props:{id:l,testhooks:c,type:m.type,style:m.style,hidden:m.hidden,accessibilityHasPopup:m.accessibilityHasPopup,accessibilityExpanded:m.accessibilityExpanded,accessibilityLabel:m.accessibilityLabel,accessibilityHidden:m.accessibilityHidden,labelledByElementId:m.labelledByElementId,describedByElementId:m.describedByElementId,controlsElementId:m.controlsElementId,ownsElementId:m.ownsElementId,role:m.role,tabIndex:m.tabIndex,onClick:m.onClick,onFocus:m.onFocus,onBlur:m.onBlur,onPointerDown:m.onPointerDown,onPointerUp:m.onPointerUp,onKeyDown:m.onKeyDown,onKeyUp:m.onKeyUp,title:m.title},key:m.key,ref:null,_owner:null};case"MICROSOFTICON":var y=n;return{$$typeof:Pn,type:Ue.a,props:{id:l,testhooks:c,type:y.type,style:y.style,hidden:y.hidden,accessibilityHasPopup:y.accessibilityHasPopup,accessibilityExpanded:y.accessibilityExpanded,accessibilityLabel:y.accessibilityLabel,accessibilityHidden:y.accessibilityHidden,labelledByElementId:y.labelledByElementId,describedByElementId:y.describedByElementId,controlsElementId:y.controlsElementId,ownsElementId:y.ownsElementId,role:y.role,tabIndex:y.tabIndex,onClick:y.onClick,onFocus:y.onFocus,onBlur:y.onBlur,onPointerDown:y.onPointerDown,onPointerUp:y.onPointerUp,onKeyDown:y.onKeyDown,onKeyUp:y.onKeyUp,title:y.title},key:y.key,ref:null,_owner:null};case"BOOLEAN":var b=n;return{$$typeof:Pn,type:ct,props:{children:o,style:b.style,name:b.name,disabled:b.disabled,value:b.value,id:l,testhooks:c,hidden:b.hidden,accessibilityHasPopup:b.accessibilityHasPopup,accessibilityExpanded:b.accessibilityExpanded,accessibilityLabel:b.accessibilityLabel,accessibilityLive:b.accessibilityLive,accessibilityHidden:b.accessibilityHidden,accessibilityChecked:b.accessibilityChecked,labelledByElementId:b.labelledByElementId,describedByElementId:b.describedByElementId,controlsElementId:b.controlsElementId,ownsElementId:b.ownsElementId,role:b.role,tabIndex:b.tabIndex,onValueChange:b.onValueChange,onClick:b.onClick,onFocus:b.onFocus,onBlur:b.onBlur,title:b.title,displayAs:b.displayAs,displayValue:b.displayValue,defaultValue:b.defaultValue,options:b.options,onOptionSetValueChange:b.onOptionSetValueChange},key:b.key,ref:null,_owner:null};case"BUTTON":var g=n;return{$$typeof:Pn,type:p.a,props:{children:o,testhooks:c,style:g.style,ownsElementId:g.ownsElementId,accessKey:g.accessKey,accessibilityLabel:g.accessibilityLabel,id:l,disabled:g.disabled,hidden:g.hidden,accessibilityDisabled:g.accessibilityDisabled,accessibilityHasPopup:g.accessibilityHasPopup,accessibilityExpanded:g.accessibilityExpanded,accessibilityHidden:g.accessibilityHidden,activeDescendantId:g.activeDescendantId,labelledByElementId:g.labelledByElementId,describedByElementId:g.describedByElementId,controlsElementId:g.controlsElementId,isSelected:g.isSelected,role:g.role,tabIndex:g.tabIndex,onClick:g.onClick,onPointerDown:g.onPointerDown,onFocus:g.onFocus,onBlur:g.onBlur,onKeyUp:g.onKeyUp,onKeyDown:g.onKeyDown,title:g.title,className:g.className},key:g.key,ref:null,_owner:null};case"COMBOBOX":var _=n;return{$$typeof:Pn,type:ge,props:{children:o,id:l,testhooks:c,name:_.name,options:_.options,value:_.value,placeholder:_.placeholder,pageSize:_.pageSize,freeTextMode:_.freeTextMode,defaultValue:_.defaultValue,disabled:_.disabled,readOnly:_.readOnly,onChange:_.onChange,onOptionSelected:_.onOptionSelected,onClick:_.onClick,onBlur:_.onBlur,onFocus:_.onFocus,onMouseEnter:_.onMouseEnter,onMouseLeave:_.onMouseLeave,style:_.style,hideArrow:_.hideArrow,accessibilityLabel:_.accessibilityLabel,accessibilityRequired:_.accessibilityRequired,labelledByElementId:_.labelledByElementId,describedByElementId:_.describedByElementId,createAccessibilityComponent:r.actions.createAccessibilityComponent,createKeyboardShortcut:r.actions.createKeyboardShortcut,title:_.title,parentCustomControlId:r.controlId,parentFlyoutRoot:r.parentDefinedControlProps?r.parentDefinedControlProps.parentFlyoutId:null,rootZIndex:a&&a.isInSeeMoreMode,textInputStyle:_.textInputStyle,textStyle:_.textStyle,hideInternalId:_.hideInternalId,relativeToElementId:_.relativeToElementId,ignoreFreeTextValueChange:_.suppressFreeTextChangeCallback},key:_.key,ref:null,_owner:null};case"CONTAINER":var v=n;return{$$typeof:Pn,type:x.a,props:{children:o,style:v.style,id:l,testhooks:c,role:v.role,semanticTag:v.semanticTag,accessKey:v.accessKey,forceMeasure:v.forceMeasure,onMeasuring:v.onMeasuring,isRequestedMeasuring:v.isRequestedMeasuring,isRTL:v.isRTL,hidden:v.hidden,accessibilityHasPopup:v.accessibilityHasPopup,accessibilityExpanded:v.accessibilityExpanded,accessibilityLabel:v.accessibilityLabel,accessibilityHidden:v.accessibilityHidden,accessibilityLive:v.accessibilityLive,accessibilityRelevant:v.accessibilityRelevant,accessibilityAtomic:v.accessibilityAtomic,accessibilityValueMin:v.accessibilityValueMin,accessibilityValueMax:v.accessibilityValueMax,accessibilityValueNow:v.accessibilityValueNow,accessibilityValueText:v.accessibilityValueText,accessibilityRequired:v.accessibilityRequired,accessibilityReadOnly:v.accessibilityReadOnly,accessibilityAriaOrientation:v.accessibilityAriaOrientation,labelledByElementId:v.labelledByElementId,describedByElementId:v.describedByElementId,controlsElementId:v.controlsElementId,ownsElementId:v.ownsElementId,isSelected:v.isSelected,tabIndex:v.tabIndex,onClick:v.onClick,onDoubleClick:v.onDoubleClick,onDrag:v.onDrag,onDragEnd:v.onDragEnd,onDragEnter:v.onDragEnter,onDragExit:v.onDragExit,onDragLeave:v.onDragLeave,onDragOver:v.onDragOver,onDragStart:v.onDragStart,onDrop:v.onDrop,onKeyUp:v.onKeyUp,onKeyDown:v.onKeyDown,onPointerUp:v.onPointerUp,onPointerMove:v.onPointerMove,onPointerDown:v.onPointerDown,onPointerEnter:v.onPointerEnter,onPointerLeave:v.onPointerLeave,onFocus:v.onFocus,onBlur:v.onBlur,title:v.title,isWithinATopMostSeeMore:a.isInTopMostSeeMore,className:v.className},key:v.key,ref:null,_owner:null};case"HYPERLINK":var C=n;return{$$typeof:Pn,type:Ce,props:{children:o,id:l,testhooks:c,style:C.style,href:C.href,target:C.target,hidden:C.hidden,accessibilityHasPopup:C.accessibilityHasPopup,accessibilityExpanded:C.accessibilityExpanded,accessibilityLabel:C.accessibilityLabel,accessibilityHidden:C.accessibilityHidden,labelledByElementId:C.labelledByElementId,describedByElementId:C.describedByElementId,controlsElementId:C.controlsElementId,ownsElementId:C.ownsElementId,role:C.role,tabIndex:C.tabIndex,onClick:C.onClick,onFocus:C.onFocus,onBlur:C.onBlur,onKeyDown:C.onKeyDown,onKeyUp:C.onKeyUp,title:C.title},key:C.key,ref:null,_owner:null};case"IMG":var E=n;return{$$typeof:Pn,type:Pe,props:{id:l,testhooks:c,style:E.style,altText:E.altText,source:E.source,hidden:E.hidden,accessibilityHasPopup:E.accessibilityHasPopup,accessibilityExpanded:E.accessibilityExpanded,accessibilityLabel:E.accessibilityLabel,accessibilityHidden:E.accessibilityHidden,labelledByElementId:E.labelledByElementId,describedByElementId:E.describedByElementId,controlsElementId:E.controlsElementId,ownsElementId:E.ownsElementId,role:E.role,tabIndex:E.tabIndex,onLoad:E.onLoad,onClick:E.onClick,onFocus:E.onFocus,onBlur:E.onBlur,title:E.title},key:E.key,ref:null,_owner:null};case"IFRAME":var I=n,P=r.descriptor.ClassId&&Object(f.a)(En.c,r.descriptor.ClassId.guid),w=r.actions.runOnReadyStateComplete&&P?function(){r.actions.runOnReadyStateComplete(r.contextToken,r.id,r.controlId)}:null;return i.createElement(Oe,{id:I.id,testhooks:c,title:I.title,style:I.style,onLoad:I.onLoad,src:I.src,scrolling:I.scrolling,security:I.security,onMessage:I.onMessage,tabIndex:I.tabIndex,accessibilityLabel:I.accessibilityLabel,registerSendMessageHandler:I.registerSendMessageHandler,onReadyStateComplete:w,key:I.src});case"LABEL":var S=n;return{$$typeof:Pn,type:qe,props:{children:o,id:l,style:S.style,role:S.role,forElementId:S.forElementId,hidden:S.hidden,accessibilityHasPopup:S.accessibilityHasPopup,accessibilityExpanded:S.accessibilityExpanded,accessibilityLabel:S.accessibilityLabel,accessibilityHidden:S.accessibilityHidden,accessibilityLive:S.accessibilityLive,accessibilityRelevant:S.accessibilityRelevant,accessibilityAtomic:S.accessibilityAtomic,labelledByElementId:S.labelledByElementId,describedByElementId:S.describedByElementId,controlsElementId:S.controlsElementId,ownsElementId:S.ownsElementId,tabIndex:S.tabIndex,onClick:S.onClick,onFocus:S.onFocus,onKeyUp:S.onKeyUp,onKeyDown:S.onKeyDown,onBlur:S.onBlur,testhooks:c,title:S.title},key:S.key,ref:null,_owner:null};case"LIST":var O=n;return{$$typeof:Pn,type:G,props:{accessibilityExpanded:O.accessibilityExpanded,accessibilityHasPopup:O.accessibilityHasPopup,accessibilityLabel:O.accessibilityLabel,accessibilityHidden:O.accessibilityHidden,accessibilityDisabled:O.accessibilityDisabled,accessibilityReadOnly:O.accessibilityReadOnly,accessibilityRequired:O.accessibilityRequired,announceAccessibilityNotification:O.announceAccessibilityNotification,children:o,controlsElementId:O.controlsElementId,describedByElementId:O.describedByElementId,hidden:O.hidden,id:l,testhooks:c,labelledByElementId:O.labelledByElementId,notificationType:O.notificationType,onBlur:O.onBlur,onClick:O.onClick,onFocus:O.onFocus,onKeyUp:O.onKeyUp,onKeyDown:O.onKeyDown,ownsElementId:O.ownsElementId,refCallback:O.refCallback,role:O.role,style:O.style,tabIndex:O.tabIndex,title:O.title},key:O.key,ref:null,_owner:null};case"LISTITEM":var D=n;return{$$typeof:Pn,type:Q,props:{accessibilityExpanded:D.accessibilityExpanded,accessibilityHasPopup:D.accessibilityHasPopup,accessibilityLabel:D.accessibilityLabel,accessibilityHidden:D.accessibilityHidden,accessibilityDisabled:D.accessibilityDisabled,accessibilityReadOnly:D.accessibilityReadOnly,accessibilityLevel:D.accessibilityLevel,accessibilityCurrent:D.accessibilityCurrent,accessibilityRequired:D.accessibilityRequired,children:o,controlsElementId:D.controlsElementId,describedByElementId:D.describedByElementId,hidden:D.hidden,id:l,testhooks:c,labelledByElementId:D.labelledByElementId,onBlur:D.onBlur,onClick:D.onClick,onClickCapture:D.onClickCapture,onFocus:D.onFocus,onPointerOver:D.onPointerOver,onPointerOut:D.onPointerOut,onPointerDown:D.onPointerDown,onPointerMove:D.onPointerMove,onPointerUp:D.onPointerUp,onKeyUp:D.onKeyUp,onKeyDown:D.onKeyDown,ownsElementId:D.ownsElementId,role:D.role,style:D.style,tabIndex:D.tabIndex,isSelected:D.isSelected,title:D.title},key:D.key,ref:null,_owner:null};case"LIVEPERSONACARDHOVERTARGET":var T=n,F=Object(u.e)(r,T.onKeyDownContainerId);return{$$typeof:Pn,type:Ke,props:{accessibilityLabel:T.accessibilityLabel,children:o,displayName:T.displayName,emailAddress:T.emailAddress,entityReference:T.entityReference,id:T.id,onKeyDownContainerId:F,personaType:T.personaType,recordId:T.recordId,registerHasLivePersonaCardLoadedCallback:T.registerHasLivePersonaCardLoadedCallback,registerOpenCardCallback:T.registerOpenCardCallback,testhooks:c},key:T.key,ref:null,_owner:null};case"POPUP":var M=n,A=i.createElement(je.a,In({},M,{id:M.id,children:o}));return M.type===je.b.Root?i.createElement(Be.b,{key:M.key,parentCustomControlId:r.controlId,id:M.name,openPopup:r.actions.openPopup,closePopup:r.actions.closePopup},A):A;case"FLYOUT":var k=n,R=Object(u.e)(r,k.relativeToElementId,n.absoluteId),L=Object(u.e)(r,k.focusElementId,n.absoluteId),N=r.portalFlyoutToDialogId?{isPortalToElement:!0,portalContainerId:r.portalFlyoutToDialogId}:{};return{$$typeof:Pn,type:W,props:{id:l,parentCustomControlId:r.controlId,groupId:k.groupId,onOutsideClick:k.onOutsideClick,children:o,flyoutStyle:k.flyoutStyle,position:k.position,positionType:k.positionType,flyoutDirection:k.flyoutDirection,relativeToElementId:R,size:k.size,focusElementId:L,focusCallback:function(e){return Object(u.g)(r,e,!0)},hasDynamicContent:k.hasDynamicContent,parentFlyoutRoot:r.parentDefinedControlProps?r.parentDefinedControlProps.parentFlyoutId:null,rootZIndex:a&&a.isInSeeMoreMode,isPortalToElement:N.isPortalToElement,portalContainerId:N.portalContainerId,role:k.role,accessibilityModal:k.accessibilityModal,keepOpenOnWindowBlur:k.keepOpenOnWindowBlur,disableHorizontalScroll:k.disableHorizontalScroll,disableVerticalScroll:k.disableVerticalScroll},key:k.key,ref:null,_owner:null};case"SCROLLCONTAINER":var U=n;return{$$typeof:Pn,type:te,props:{children:o,style:U.style,id:l,testhooks:c,contentContainerStyle:U.contentContainerStyle,horizontal:U.horizontal,onScroll:U.onScroll,hidden:U.hidden,accessibilityHasPopup:U.accessibilityHasPopup,accessibilityExpanded:U.accessibilityExpanded,accessibilityLabel:U.accessibilityLabel,accessibilityHidden:U.accessibilityHidden,labelledByElementId:U.labelledByElementId,describedByElementId:U.describedByElementId,controlsElementId:U.controlsElementId,ownsElementId:U.ownsElementId,role:U.role,tabIndex:U.tabIndex,onScrollToBottom:U.onScrollToBottom,semanticTag:U.semanticTag,onKeyDown:U.onKeyDown,onClick:U.onClick,onFocus:U.onFocus,onBlur:U.onBlur,title:U.title,isRTL:r.propBagData.clientData.isRTL,isWithinATopMostSeeMore:a.isInTopMostSeeMore,className:U.className},key:U.key,ref:null,_owner:null};case"TABLE":var B=n;return{$$typeof:Pn,type:Vt,props:{children:o,id:l,testhooks:c,style:B.style,hidden:B.hidden,accessibilityHasPopup:B.accessibilityHasPopup,accessibilityExpanded:B.accessibilityExpanded,accessibilityLabel:B.accessibilityLabel,accessibilityHidden:B.accessibilityHidden,labelledByElementId:B.labelledByElementId,describedByElementId:B.describedByElementId,controlsElementId:B.controlsElementId,ownsElementId:B.ownsElementId,role:B.role,tabIndex:B.tabIndex,onClick:B.onClick,onFocus:B.onFocus,onBlur:B.onBlur,title:B.title},key:B.key,ref:null,_owner:null};case"TABLEBODY":var j=n;return{$$typeof:Pn,type:zt,props:{children:o,key:j.key,id:l,testhooks:c,style:j.style,hidden:j.hidden,accessibilityHasPopup:j.accessibilityHasPopup,accessibilityExpanded:j.accessibilityExpanded,accessibilityLabel:j.accessibilityLabel,accessibilityHidden:j.accessibilityHidden,labelledByElementId:j.labelledByElementId,describedByElementId:j.describedByElementId,controlsElementId:j.controlsElementId,ownsElementId:j.ownsElementId,role:j.role,tabIndex:j.tabIndex,onClick:j.onClick,onFocus:j.onFocus,onBlur:j.onBlur,title:j.title},key:j.key,ref:null,_owner:null};case"TABLECAPTION":var V=n;return{$$typeof:Pn,type:Yt,props:{children:o,id:l,testhooks:c,style:V.style,hidden:V.hidden,accessibilityHasPopup:V.accessibilityHasPopup,accessibilityExpanded:V.accessibilityExpanded,accessibilityLabel:V.accessibilityLabel,accessibilityHidden:V.accessibilityHidden,labelledByElementId:V.labelledByElementId,describedByElementId:V.describedByElementId,controlsElementId:V.controlsElementId,ownsElementId:V.ownsElementId,role:V.role,tabIndex:V.tabIndex,onClick:V.onClick,onFocus:V.onFocus,onBlur:V.onBlur,title:V.title},key:V.key,ref:null,_owner:null};case"TABLECELL":var H=n;return{$$typeof:Pn,type:Xt,props:{children:o,id:l,colSpan:H.colSpan,testhooks:c,style:H.style,hidden:H.hidden,accessibilityHasPopup:H.accessibilityHasPopup,accessibilityExpanded:H.accessibilityExpanded,accessibilityLabel:H.accessibilityLabel,accessibilityHidden:H.accessibilityHidden,labelledByElementId:H.labelledByElementId,describedByElementId:H.describedByElementId,controlsElementId:H.controlsElementId,ownsElementId:H.ownsElementId,role:H.role,tabIndex:H.tabIndex,onClick:H.onClick,onFocus:H.onFocus,onBlur:H.onBlur,onKeyDown:H.onKeyDown,title:H.title,rowSpan:H.rowSpan,scope:H.scope},key:H.key,ref:null,_owner:null};case"TABLEFOOTER":var K=n;return{$$typeof:Pn,type:en,props:{children:o,id:l,testhooks:c,style:K.style,hidden:K.hidden,accessibilityHasPopup:K.accessibilityHasPopup,accessibilityExpanded:K.accessibilityExpanded,accessibilityLabel:K.accessibilityLabel,accessibilityHidden:K.accessibilityHidden,labelledByElementId:K.labelledByElementId,describedByElementId:K.describedByElementId,controlsElementId:K.controlsElementId,ownsElementId:K.ownsElementId,role:K.role,tabIndex:K.tabIndex,onClick:K.onClick,onFocus:K.onFocus,onBlur:K.onBlur,title:K.title},key:K.key,ref:null,_owner:null};case"TABLEHEADER":var z=n;return{$$typeof:Pn,type:on,props:{children:o,id:l,testhooks:c,style:z.style,hidden:z.hidden,accessibilityHasPopup:z.accessibilityHasPopup,accessibilityExpanded:z.accessibilityExpanded,accessibilityLabel:z.accessibilityLabel,accessibilityHidden:z.accessibilityHidden,labelledByElementId:z.labelledByElementId,describedByElementId:z.describedByElementId,controlsElementId:z.controlsElementId,ownsElementId:z.ownsElementId,role:z.role,tabIndex:z.tabIndex,onClick:z.onClick,onFocus:z.onFocus,onBlur:z.onBlur,title:z.title},key:z.key,ref:null,_owner:null};case"TABLEHEADERCELL":var q=n;return{$$typeof:Pn,type:sn,props:{children:o,id:l,testhooks:c,style:q.style,hidden:q.hidden,accessibilityHasPopup:q.accessibilityHasPopup,accessibilityExpanded:q.accessibilityExpanded,accessibilityLabel:q.accessibilityLabel,accessibilityHidden:q.accessibilityHidden,labelledByElementId:q.labelledByElementId,describedByElementId:q.describedByElementId,controlsElementId:q.controlsElementId,ownsElementId:q.ownsElementId,role:q.role,tabIndex:q.tabIndex,onClick:q.onClick,onFocus:q.onFocus,onBlur:q.onBlur,onKeyDown:q.onKeyDown,title:q.title,colSpan:q.colSpan,rowSpan:q.rowSpan,scope:q.scope},key:q.key,ref:null,_owner:null};case"TABLEROW":var Y=n;return{$$typeof:Pn,type:un,props:{children:o,id:l,testhooks:c,style:Y.style,hidden:Y.hidden,accessibilityHasPopup:Y.accessibilityHasPopup,accessibilityExpanded:Y.accessibilityExpanded,accessibilityLabel:Y.accessibilityLabel,accessibilityHidden:Y.accessibilityHidden,labelledByElementId:Y.labelledByElementId,describedByElementId:Y.describedByElementId,controlsElementId:Y.controlsElementId,ownsElementId:Y.ownsElementId,role:Y.role,tabIndex:Y.tabIndex,onClick:Y.onClick,onFocus:Y.onFocus,onBlur:Y.onBlur,title:Y.title},key:Y.key,ref:null,_owner:null};case"FILEINPUT":var $=n;return i.createElement(dt,{style:$.style,fileSelected:$.fileSelected,fileUnselected:$.fileUnselected,accept:$.accept,id:l,onReaderError:$.onReaderError,multipleFilesSelected:$.multipleFilesSelected,testhooks:c,key:$.key,title:$.title,accessibilityLabel:$.accessibilityLabel,tabIndex:$.tabIndex});case"TEXTINPUT":var X=n;return{$$typeof:Pn,type:fe,props:{readOnly:X.readOnly,id:l,type:X.type,keyboardType:X.keyboardType,maxLength:X.maxLength,multiline:X.multiline,ownsElementId:X.ownsElementId,onClick:X.onClick,onBlur:X.onBlur,onChange:X.onChange,onChangeText:X.onChangeText,onFocus:X.onFocus,onKeyPress:X.onKeyPress,onKeyDown:X.onKeyDown,onKeyUp:X.onKeyUp,onPointerEnter:X.onPointerEnter,onPointerLeave:X.onPointerLeave,onScroll:X.onScroll,placeholder:X.placeholder,style:X.style,value:X.value,hidden:X.hidden,disabled:X.disabled,accessibilityDisabled:X.accessibilityDisabled,accessibilityHasPopup:X.accessibilityHasPopup,accessibilityExpanded:X.accessibilityExpanded,accessibilityLabel:X.accessibilityLabel,accessibilityLive:X.accessibilityLive,accessibilityHidden:X.accessibilityHidden,accessibilityRequired:X.accessibilityRequired,activeDescendantId:X.activeDescendantId,autoComplete:X.autoComplete,labelledByElementId:X.labelledByElementId,describedByElementId:X.describedByElementId,controlsElementId:X.controlsElementId,role:X.role,tabIndex:X.tabIndex,testhooks:c,refCallback:X.refCallback,rows:X.rows,selectValueOnFocus:X.selectValueOnFocus,title:X.title},key:X.key,ref:null,_owner:null};case"COMMANDBAR":var Z=n,J=r.id+":"+r.controlId,ee=bn.a.getWrapperByCommandManagerId(J);return ee||s(J,ee=new bn.a(r)),ee.populateCommandManagerProps(Z,r),Z.width=Z.width||1,Z.contextToken=r.contextToken,Z.rootZIndex=a&&a.isInSeeMoreMode,ee.createCommandBar(Z);case"OPTION":var ne=n;return{$$typeof:Pn,type:Qe,props:{id:l,value:ne.value,disabled:ne.disabled,style:ne.style,testhooks:c},key:ne.key,ref:null,_owner:null};case"SELECT":var oe=n;return{$$typeof:Pn,type:nt,props:{id:l,value:oe.value,options:oe.options,style:oe.style,disabled:oe.disabled,tabIndex:oe.tabIndex,hidden:oe.hidden,accessibilityHasPopup:oe.accessibilityHasPopup,accessibilityExpanded:oe.accessibilityExpanded,accessibilityLabel:oe.accessibilityLabel,accessibilityRequired:oe.accessibilityRequired,labelledByElementId:oe.labelledByElementId,describedByElementId:oe.describedByElementId,controlsElementId:oe.controlsElementId,ownsElementId:oe.ownsElementId,testhooks:c,onBlur:oe.onBlur,onClick:oe.onClick,onFocus:oe.onFocus,onChange:oe.onChange,onPointerOver:oe.onPointerOver,onPointerOut:oe.onPointerOut,onPointerEnter:oe.onPointerEnter,onPointerLeave:oe.onPointerLeave,onPointerDown:oe.onPointerDown,onPointerUp:oe.onPointerUp,onKeyDown:oe.onKeyDown,onKeyUp:oe.onKeyUp,multiple:oe.multiple,readOnly:oe.readOnly,title:oe.title},key:oe.key,ref:null,_owner:null};case"ENTITYIMAGE":var re=n;return i.createElement(wt,{key:re.key,id:l,testhooks:c,style:re.style,hasPrimaryImageField:re.hasPrimaryImageField,imageSrc:re.imageSrc,alt:re.alt,entityPrimaryField:re.entityPrimaryField,hidden:re.hidden,accessibilityHasPopup:re.accessibilityHasPopup,accessibilityExpanded:re.accessibilityExpanded,accessibilityLabel:re.accessibilityLabel,accessibilityHidden:re.accessibilityHidden,labelledByElementId:re.labelledByElementId,describedByElementId:re.describedByElementId,controlsElementId:re.controlsElementId,ownsElementId:re.ownsElementId,role:re.role,tabIndex:re.tabIndex,onClick:re.onClick,onFocus:re.onFocus,onBlur:re.onBlur,title:re.title,sipUrl:re.sipUrl,presenceIndicatorSize:re.presenceIndicatorSize,entityReference:re.entityReference,entityHealthScore:re.entityHealthScore,iconStyle:re.iconStyle,customEntityIcon:re.customEntityIcon});case"PROGRESSINDICATOR":var ie=n;return i.createElement(Dt,{id:l,style:ie.style,hidden:ie.hidden,accessibilityHasPopup:ie.accessibilityHasPopup,accessibilityExpanded:ie.accessibilityExpanded,accessibilityLabel:ie.accessibilityLabel,accessibilityChecked:ie.accessibilityChecked,accessibilityReadOnly:ie.accessibilityReadOnly,accessibilityHidden:ie.accessibilityHidden,labelledByElementId:ie.labelledByElementId,describedByElementId:ie.describedByElementId,controlsElementId:ie.controlsElementId,ownsElementId:ie.ownsElementId,activeDescendantId:ie.activeDescendantId,role:ie.role,tabIndex:ie.tabIndex,onClick:ie.onClick,onFocus:ie.onFocus,onBlur:ie.onBlur,onPointerOver:ie.onPointerOver,onPointerOut:ie.onPointerOut,onPointerUp:ie.onPointerUp,onPointerDown:ie.onPointerDown,onPointerEnter:ie.onPointerEnter,onPointerLeave:ie.onPointerLeave,onPointerMove:ie.onPointerMove,onPointerCancel:ie.onPointerCancel,onKeyDown:ie.onKeyDown,onKeyUp:ie.onKeyUp,onMouseEnter:ie.onMouseEnter,onMouseLeave:ie.onMouseLeave,testhooks:c,title:ie.title,active:ie.active,progressType:ie.progressType,progress:ie.progress,progressDots:ie.progressDots,className:ie.className,animating:ie.animating,animationDelay:ie.animationDelay,isBrowserSafari:ie.isBrowserSafari});case"RADIO":var ae=n;return i.createElement(yn,{id:l,value:ae.value,options:ae.options,style:ae.style,disabled:ae.disabled,tabIndex:ae.tabIndex,hidden:ae.hidden,accessibilityLabel:ae.accessibilityLabel,accessibilityChecked:ae.accessibilityChecked,labelledByElementId:ae.labelledByElementId,describedByElementId:ae.describedByElementId,controlsElementId:ae.controlsElementId,ownsElementId:ae.ownsElementId,testhooks:c,onBlur:ae.onBlur,onClick:ae.onClick,onFocus:ae.onFocus,onChange:ae.onChange,onPointerOver:ae.onPointerOver,onPointerOut:ae.onPointerOut,onPointerEnter:ae.onPointerEnter,onPointerLeave:ae.onPointerLeave,onPointerDown:ae.onPointerDown,onPointerUp:ae.onPointerUp,onKeyDown:ae.onKeyDown,onKeyUp:ae.onKeyUp});case"HORIZONTALSCROLL":var se=n;return{$$typeof:Pn,type:Mt,props:{isRTL:r.propBagData.clientData.isRTL,children:o,scrollViewStyle:se.scrollViewStyle,style:se.style,id:l,startChildIndex:se.startChildIndex,arrowWidth:se.arrowWidth,arrowButtonStyle:se.arrowButtonStyle,prevArrowIconType:se.prevArrowIconType,nextArrowIconType:se.nextArrowIconType,onPrevArrowClick:se.onPrevArrowClick,onNextArrowClick:se.onNextArrowClick,onPrevArrowKeyDown:se.onPrevArrowKeyDown,onNextArrowKeyDown:se.onNextArrowKeyDown,testhooks:c,hidden:se.hidden,accessibilityHasPopup:se.accessibilityHasPopup,accessibilityExpanded:se.accessibilityExpanded,accessibilityLabel:se.accessibilityLabel,accessibilityHidden:se.accessibilityHidden,labelledByElementId:se.labelledByElementId,describedByElementId:se.describedByElementId,controlsElementId:se.controlsElementId,ownsElementId:se.ownsElementId,role:se.role,semanticTag:se.semanticTag,tabIndex:se.tabIndex,onClick:se.onClick,onFocus:se.onFocus,onBlur:se.onBlur,title:se.title},key:se.key,ref:null,_owner:null};case"VIEWSELECTORCONTROL":var ce=n;return i.createElement(Rt,{style:ce.style,viewSelectorStyle:ce.viewSelectorStyle,textStyle:ce.textStyle,id:l,key:ce.key,value:ce.value,title:ce.title,categories:ce.categories,options:ce.options,hoveredStyle:ce.hoveredStyle,caretStyle:ce.caretStyle,caretType:ce.caretType,createAccessibilityComponent:r.actions.createAccessibilityComponent,createKeyboardShortcut:r.actions.createKeyboardShortcut,defaultValue:ce.defaultValue,tabIndex:ce.tabIndex,onChange:ce.onChange,onClick:ce.onClick,onKeyUp:ce.onKeyUp,onKeyDown:ce.onKeyDown,onPointerUp:ce.onPointerUp,onPointerMove:ce.onPointerMove,onPointerDown:ce.onPointerDown,onPointerEnter:ce.onPointerEnter,onPointerLeave:ce.onPointerLeave,onFocus:ce.onFocus,onBlur:ce.onBlur,suppressFreeTextChangeCallback:ce.suppressFreeTextChangeCallback,parentCustomControlId:r.controlId,rootZIndex:a&&a.isInSeeMoreMode,isRTL:r.propBagData.clientData&&r.propBagData.clientData.isRTL});case"TEXT":var ue=n,pe=n;return pe.truncatedlines?{$$typeof:Pn,type:Cn,props:{isRTL:null===pe.isRTL||void 0===pe.isRTL?r.propBagData.clientData.isRTL:pe.isRTL,children:o,id:l,style:pe.style,flexibleTextContainerStyle:pe.flexibleTextContainerStyle,flexibleTextStyle:pe.flexibleTextStyle,role:pe.role,hidden:pe.hidden,accessibilityHasPopup:pe.accessibilityHasPopup,accessibilityExpanded:pe.accessibilityExpanded,accessibilityLabel:pe.accessibilityLabel,accessibilityHidden:pe.accessibilityHidden,accessibilityLive:pe.accessibilityLive,accessibilityRelevant:pe.accessibilityRelevant,accessibilityAtomic:pe.accessibilityAtomic,labelledByElementId:pe.labelledByElementId,describedByElementId:pe.describedByElementId,controlsElementId:pe.controlsElementId,ownsElementId:pe.ownsElementId,tabIndex:pe.tabIndex,onClick:pe.onClick,onFocus:pe.onFocus,onKeyUp:pe.onKeyUp,onKeyDown:pe.onKeyDown,onBlur:pe.onBlur,testhooks:c,title:pe.title,semanticTag:pe.semanticTag,truncatedlines:pe.truncatedlines,maskingColor:pe.maskingColor,noExpandable:pe.noExpandable,isFieldLabel:pe.isFieldLabel,lineHeight:pe.lineHeight},key:pe.key,ref:null,_owner:null}:{$$typeof:Pn,type:le,props:{children:o,id:l,style:ue.style,role:ue.role,hidden:ue.hidden,accessibilityHasPopup:ue.accessibilityHasPopup,accessibilityExpanded:ue.accessibilityExpanded,accessibilityLabel:ue.accessibilityLabel,accessibilityHidden:ue.accessibilityHidden,labelledByElementId:ue.labelledByElementId,describedByElementId:ue.describedByElementId,controlsElementId:ue.controlsElementId,ownsElementId:ue.ownsElementId,tabIndex:ue.tabIndex,onClick:ue.onClick,onFocus:ue.onFocus,onKeyUp:ue.onKeyUp,onKeyDown:ue.onKeyDown,onBlur:ue.onBlur,testhooks:c,title:ue.title,semanticTag:ue.semanticTag},key:ue.key,ref:null,_owner:null};case"PRESENCEINDICATOR":var de=n,he=Object(u.e)(r,de.parentControlId,n.absoluteId);return i.createElement(ft,{id:de.id,key:de.key,sipUrl:de.sipUrl,displaySize:de.displaySize,entityReference:de.entityReference,style:de.style,role:de.role,tabIndex:de.tabIndex,title:de.title,parentControlId:he,accessibilityLabel:de.accessibilityLabel,presenceTarget:de.presenceTarget});case"PLACEHOLDER":var me=n;if(null==me)break;return i.createElement(Bt,{id:me.id,icon:me.icon,iconStyle:me.iconStyle,text:me.text,textStyle:me.textStyle,containerStyle:me.containerStyle,accessibilityHidden:me.accessibilityHidden})}return i.createElement(x.a,null,'"UNKNOWN COMPONENT"')},e._generateFlyoutParentId=function(e,t){if(e&&e.parentDefinedControlProps&&e.parentDefinedControlProps.parentFlyoutId)return e.parentDefinedControlProps.parentFlyoutId;if("FLYOUT"===t.getType().toUpperCase()){var n=t.getProperties();return W.generateFlyoutId(e.controlId,n.groupId)}return null},e.generateReactComponent=function(t,n,o,r,s,l,c,u){try{if(!t)return null;var p=null,d=e._getComponentKey(t,n,o),h=d?l.getVirtualComponentByKey(d):null;return h&&h===t?(p=l.getReactElementByKey(d),l.retainElement(d)):(e.isComplexComponent(t)?a.c(t.getComponentId())?p=i.createElement(x.a,null,'"UNKNOWN COMPONENT"'):(p=e.generateComplexControl(t,r,s,c),l.setIsCompositing(!0)):("IFRAME"===t.getType()&&l.setIsCompositing(!0),p=e.generateJSXElement(t.getType(),t.getProperties(),u,r,s,l.addCommandWrapper)),d&&l.addUpdatedEntry(d,p,t)),p}catch(e){throw e}},e._getComponentKey=function(t,n,o){return(n?n+"|":"")+(e.isComplexComponent(t)?t.getComponentId()||o:t.getProperties().hasOwnProperty("key")?t.getProperties().key:o)},e._updateDataIdInTesthooks=function(e,t){if(!t||!t.id)return{};if(t.testhooks){var n=Object(u.d)(e,t.testhooks.id||t.id),o=Object.assign({},t.testhooks);return o.id=n,o}return{id:Object(u.d)(e,t.id)}},e.generateComplexControl=function(t,n,o,r){var i=t.getComponentId(),l=t.getProperties(),c={toggleDimensionListener:o.trackResize},p=n.descriptor.Id,d=p+"."+i,h=n.descriptor.UniqueId+"."+i,f=Object(u.b)(n),m=l.controlstates,y=n.descriptor.ShowLabel,b=n.descriptor.Label,g=!1;a.c(m)?(c.height=o.allocatedHeight,c.width=o.allocatedWidth):(c.height=m.hasOwnProperty("height")?m.height:o.allocatedHeight,c.width=m.hasOwnProperty("width")?m.width:o.allocatedWidth,c.hasFocus=!a.c(m.hasFocus)&&m.hasFocus,c.containerStyleOverrides=m.containerStyleOverrides,g=!a.c(m.isControlDisabled)&&m.isControlDisabled,y=a.c(m.showLabel)?y:m.showLabel,b=a.c(m.label)?b:m.label),c.decorators=l.decorators;var _=[],v=l.childeventlisteners;if(!a.c(v)){for(var C=function(e){var t=e.eventname,n=_.findIndex(function(e){return e.eventname===t}),o=e.eventhandler;if(-1!==n)_[n].eventhandler.concat(o);else{var r={eventname:t,eventhandler:[o]};_.push(r)}},E=0,I=v;E<I.length;E++){C(I[E])}c.eventListeners=_}l.contextOverrides&&(c.propertyBagOverrides=l.contextOverrides);var P={};a.c(l.parameters)||(P=l.parameters);var w,S=null,O=null,D=null;n.configuration.CustomControlId===En.b?D=p:n.parentDefinedControlProps&&n.parentDefinedControlProps.parentFieldSectionItem&&(D=n.parentDefinedControlProps.parentFieldSectionItem),c.parentFieldSectionItem=D,c.parentInSeeMoreMode=o.isInSeeMoreMode,l.descriptor?(S=l.descriptor,d=i):S={Id:d,Label:b,Name:"",DomId:f,ShowLabel:y,Visible:n.descriptor.Visible,ClassId:null,Disabled:g,UniqueId:h,Parameters:n.descriptor&&n.descriptor.Parameters},S.parentFieldSectionItem||(S.parentFieldSectionItem=D),O=l.nestedFormProps?l.nestedFormProps:n.formInfo,w=n.children&&n.children.hasOwnProperty(i)?n.children[i]:l.configuration?l.configuration:{FormFactor:2,CustomControlId:t.getType().toString(),Name:n.manifest.CustomControlId+"."+d,Parameters:Object.assign({},P),Version:"0.0",ShouldOverrideControlVisible:!1,isDefaultConfig:!0},e._parseParameters(w.Parameters);var T=null;if(w.Parameters)for(var F in w.Parameters){var x=w.Parameters[F];switch(x.Type){case s.ManifestType.Grid:var M=x;if(M.SortingInput){var A=M.SortingInput;A.ControlLinked&&A.Value&&(A.Value=p+"."+A.Value)}if(M.FilteringInput){var k=M.FilteringInput;k.ControlLinked&&k.Value&&(k.Value=p+"."+k.Value)}if(M.PagingInput){var R=M.PagingInput;R.ControlLinked&&R.Value&&(R.Value=p+"."+R.Value)}M.DataSetUIOptions&&(T=M.DataSetUIOptions);break;default:var L=x;1===L.Usage&&L.ControlLinked&&!L.AbsoluteLinkAddress&&L.Value&&(w.Parameters[F]=Object.assign({},L,{Value:p+"."+L.Value}))}}return n.descriptor.HasContext?c.closestParentWithContext=p:n.parentDefinedControlProps&&n.parentDefinedControlProps.closestParentWithContext&&(c.closestParentWithContext=n.parentDefinedControlProps.closestParentWithContext),c.parentFlyoutId=r,n.actions.renderNestedCustomControl(d,{id:n.id,controlId:d,systemDefinedProperties:n.systemDefinedProperties,parentDefinedControlProps:c,configuration:w,descriptor:S,formInfo:O,rowSpan:n.rowSpan,themingData:l.themingData,contextString:l.contextString||this._buildContextString(n,O),parentContextToken:n.contextToken,externalCommandManagerId:n.externalCommandManagerId,externalCommandPromise:n.externalCommandPromise},{dataSetUIOptions:T})},e._parseParameters=function(t){for(var n in t)3===t[n].Usage&&(t[n].Attributes=Object.assign({},e._baseAttributes,t[n].Attributes))},e._isVirtualComponent=function(e){return!!(e&&"object"==typeof e&&"getType"in e)},e._generateReactChild=function(t,n,o,r,i,a,s){if(this._isVirtualComponent(o)){var l=o.getChildren(),c=o,u=s||e._generateFlyoutParentId(r,c);return this.generateReactComponent(c,t,n,r,i,a,u,null!==l?this.generateReactChildren(e._getComponentKey(c,t,n),l,r,i,a,u):null)}return o},e.generateReactChildren=function(e,t,n,o,r,i){if(null!==t){if(Array.isArray(t)){for(var a=[],s=0;s<t.length;s++)a.push(this._generateReactChild(e,"keylessChild"+s,t[s],n,o,r,i));return a}return this._generateReactChild(e,"keylessChild",t,n,o,r,i)}},e.isComplexComponent=function(e){if(!e)return!1;var t=e.getType();return!t||-1===c.indexOf(t.toUpperCase())},e._buildContextString=function(e,t){var n=!1,o=!1;for(var r in e.configuration.Parameters)e.configuration.Parameters[r].Type===s.ManifestType.QuickForm?o=!0:e.configuration.Parameters[r].Type===s.ManifestType.Grid&&(n=!0);var i=!e.formInfo!=!t;if(!i&&e.formInfo&&(i=e.formInfo.EntityName!==t.EntityName||e.formInfo.FormId!==t.FormId||e.formInfo.RecordId!==t.RecordId||e.formInfo.RibbonId!==t.RibbonId),i){if(o)return s.ManifestType.QuickForm+":"+e.controlId;if(n)return s.ManifestType.Grid}return"default"},e._baseAttributes={DisplayName:"",LogicalName:"",Type:"string",IsSecured:!1,RequiredLevel:0,MinValue:-1e11,MaxValue:1e11,ImeMode:0,MaxLength:100,EntityLogicalName:"",Precision:2,Format:"1",LanguageByCode:{},TimeZoneByCode:{},Behavior:0,Targets:[],Options:[{Label:"---",Value:1}],DefaultValue:1,lastUpdatedField:null,lastUpdatedValue:null,rollupStateField:null,rollupStateValue:0,calculatedFieldValid:!1,rollupValid:!1,SourceType:null,recalculate:function(){}},e}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return(0,i.default)(e)+":"+t};var o,r=n(151),i=(o=r)&&o.__esModule?o:{default:o};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){for(var o in e)n=t(n,e[o],o);return n},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){if(e.length>0)return(0,i.default)(e,function(e,t){return e=t(e,n)},t);return t};var o,r=n(37),i=(o=r)&&o.__esModule?o:{default:o};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){return!0},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return-1!==e.indexOf("data:")},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return(0,r.default)(t,function(t,n){return(0,o.default)(t,n(e))},{})}};var o=i(n(174)),r=i(n(37));function i(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(!(0,r.default)(t))throw new Error("You need to specify a valid element node (nodeType = 1) to render into.");t.setAttribute("data-fela-stylesheet","");var n=(0,o.default)(e,t);e.subscribe(n);var i=e.renderToString();t.textContent!==i&&(t.textContent=i)};var o=i(n(177)),r=(i(n(103)),i(n(178)));function i(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default},function(e,t,n){(function(e){function n(e,t){for(var n=0,o=e.length-1;o>=0;o--){var r=e[o];"."===r?e.splice(o,1):".."===r?(e.splice(o,1),n++):n&&(e.splice(o,1),n--)}if(t)for(;n--;n)e.unshift("..");return e}var o=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/,r=function(e){return o.exec(e).slice(1)};function i(e,t){if(e.filter)return e.filter(t);for(var n=[],o=0;o<e.length;o++)t(e[o],o,e)&&n.push(e[o]);return n}t.resolve=function(){for(var t="",o=!1,r=arguments.length-1;r>=-1&&!o;r--){var a=r>=0?arguments[r]:e.cwd();if("string"!=typeof a)throw new TypeError("Arguments to path.resolve must be strings");a&&(t=a+"/"+t,o="/"===a.charAt(0))}return(o?"/":"")+(t=n(i(t.split("/"),function(e){return!!e}),!o).join("/"))||"."},t.normalize=function(e){var o=t.isAbsolute(e),r="/"===a(e,-1);return(e=n(i(e.split("/"),function(e){return!!e}),!o).join("/"))||o||(e="."),e&&r&&(e+="/"),(o?"/":"")+e},t.isAbsolute=function(e){return"/"===e.charAt(0)},t.join=function(){var e=Array.prototype.slice.call(arguments,0);return t.normalize(i(e,function(e,t){if("string"!=typeof e)throw new TypeError("Arguments to path.join must be strings");return e}).join("/"))},t.relative=function(e,n){function o(e){for(var t=0;t<e.length&&""===e[t];t++);for(var n=e.length-1;n>=0&&""===e[n];n--);return t>n?[]:e.slice(t,n-t+1)}e=t.resolve(e).substr(1),n=t.resolve(n).substr(1);for(var r=o(e.split("/")),i=o(n.split("/")),a=Math.min(r.length,i.length),s=a,l=0;l<a;l++)if(r[l]!==i[l]){s=l;break}var c=[];for(l=s;l<r.length;l++)c.push("..");return(c=c.concat(i.slice(s))).join("/")},t.sep="/",t.delimiter=":",t.dirname=function(e){var t=r(e),n=t[0],o=t[1];return n||o?(o&&(o=o.substr(0,o.length-1)),n+o):"."},t.basename=function(e,t){var n=r(e)[2];return t&&n.substr(-1*t.length)===t&&(n=n.substr(0,n.length-t.length)),n},t.extname=function(e){return r(e)[3]};var a="b"==="ab".substr(-1)?function(e,t,n){return e.substr(t,n)}:function(e,t,n){return t<0&&(t=e.length+t),e.substr(t,n)}}).call(this,n(42))},function(e,t){(function(){e.exports=function(){function e(e,t,n){if(this.options=e.options,this.stringify=e.stringify,null==t)throw new Error("Missing attribute name of element "+e.name);if(null==n)throw new Error("Missing attribute value for attribute "+t+" of element "+e.name);this.name=this.stringify.attName(t),this.value=this.stringify.attValue(n)}return e.prototype.clone=function(){return Object.create(this)},e.prototype.toString=function(e){return this.options.writer.set(e).attribute(this)},e}()}).call(this)},function(e,t){(function(){var t=function(e,t){return function(){return e.apply(t,arguments)}},n={}.hasOwnProperty;e.exports=function(){function e(e){var o,r,i;for(o in this.assertLegalChar=t(this.assertLegalChar,this),e||(e={}),this.noDoubleEncoding=e.noDoubleEncoding,r=e.stringify||{})n.call(r,o)&&(i=r[o],this[o]=i)}return e.prototype.eleName=function(e){return e=""+e||"",this.assertLegalChar(e)},e.prototype.eleText=function(e){return e=""+e||"",this.assertLegalChar(this.elEscape(e))},e.prototype.cdata=function(e){return e=(e=""+e||"").replace("]]>","]]]]><![CDATA[>"),this.assertLegalChar(e)},e.prototype.comment=function(e){if((e=""+e||"").match(/--/))throw new Error("Comment text cannot contain double-hypen: "+e);return this.assertLegalChar(e)},e.prototype.raw=function(e){return""+e||""},e.prototype.attName=function(e){return""+e||""},e.prototype.attValue=function(e){return e=""+e||"",this.attEscape(e)},e.prototype.insTarget=function(e){return""+e||""},e.prototype.insValue=function(e){if((e=""+e||"").match(/\?>/))throw new Error("Invalid processing instruction value: "+e);return e},e.prototype.xmlVersion=function(e){if(!(e=""+e||"").match(/1\.[0-9]+/))throw new Error("Invalid version number: "+e);return e},e.prototype.xmlEncoding=function(e){if(!(e=""+e||"").match(/^[A-Za-z](?:[A-Za-z0-9._-])*$/))throw new Error("Invalid encoding: "+e);return e},e.prototype.xmlStandalone=function(e){return e?"yes":"no"},e.prototype.dtdPubID=function(e){return""+e||""},e.prototype.dtdSysID=function(e){return""+e||""},e.prototype.dtdElementValue=function(e){return""+e||""},e.prototype.dtdAttType=function(e){return""+e||""},e.prototype.dtdAttDefault=function(e){return null!=e?""+e||"":e},e.prototype.dtdEntityValue=function(e){return""+e||""},e.prototype.dtdNData=function(e){return""+e||""},e.prototype.convertAttKey="@",e.prototype.convertPIKey="?",e.prototype.convertTextKey="#text",e.prototype.convertCDataKey="#cdata",e.prototype.convertCommentKey="#comment",e.prototype.convertRawKey="#raw",e.prototype.assertLegalChar=function(e){var t;if(t=e.match(/[\0\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/))throw new Error("Invalid character in string: "+e+" at index "+t.index);return e},e.prototype.elEscape=function(e){var t;return t=this.noDoubleEncoding?/(?!&\S+;)&/g:/&/g,e.replace(t,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/\r/g,"&#xD;")},e.prototype.attEscape=function(e){var t;return t=this.noDoubleEncoding?/(?!&\S+;)&/g:/&/g,e.replace(t,"&amp;").replace(/</g,"&lt;").replace(/"/g,"&quot;").replace(/\t/g,"&#x9;").replace(/\n/g,"&#xA;").replace(/\r/g,"&#xD;")},e}()}).call(this)},function(e,t){(function(){var t={}.hasOwnProperty;e.exports=function(){function e(e){var n,o,r,i,a,s,l,c,u;for(n in e||(e={}),this.pretty=e.pretty||!1,this.allowEmpty=null!=(o=e.allowEmpty)&&o,this.pretty?(this.indent=null!=(r=e.indent)?r:"  ",this.newline=null!=(i=e.newline)?i:"\n",this.offset=null!=(a=e.offset)?a:0,this.dontprettytextnodes=null!=(s=e.dontprettytextnodes)?s:0):(this.indent="",this.newline="",this.offset=0,this.dontprettytextnodes=0),this.spacebeforeslash=null!=(l=e.spacebeforeslash)?l:"",!0===this.spacebeforeslash&&(this.spacebeforeslash=" "),this.newlinedefault=this.newline,this.prettydefault=this.pretty,c=e.writer||{})t.call(c,n)&&(u=c[n],this[n]=u)}return e.prototype.set=function(e){var n,o,r;for(n in e||(e={}),"pretty"in e&&(this.pretty=e.pretty),"allowEmpty"in e&&(this.allowEmpty=e.allowEmpty),this.pretty?(this.indent="indent"in e?e.indent:"  ",this.newline="newline"in e?e.newline:"\n",this.offset="offset"in e?e.offset:0,this.dontprettytextnodes="dontprettytextnodes"in e?e.dontprettytextnodes:0):(this.indent="",this.newline="",this.offset=0,this.dontprettytextnodes=0),this.spacebeforeslash="spacebeforeslash"in e?e.spacebeforeslash:"",!0===this.spacebeforeslash&&(this.spacebeforeslash=" "),this.newlinedefault=this.newline,this.prettydefault=this.pretty,o=e.writer||{})t.call(o,n)&&(r=o[n],this[n]=r);return this},e.prototype.space=function(e){var t;return this.pretty&&(t=(e||0)+this.offset+1)>0?new Array(t).join(this.indent):""},e}()}).call(this)},function(e,t,n){"use strict";(function(t,o){var r=n(65);e.exports=_;var i,a=n(203);_.ReadableState=g;n(64).EventEmitter;var s=function(e,t){return e.listeners(t).length},l=n(112),c=n(66).Buffer,u=t.Uint8Array||function(){};var p=n(43);p.inherits=n(38);var d=n(204),h=void 0;h=d&&d.debuglog?d.debuglog("stream"):function(){};var f,m=n(205),y=n(113);p.inherits(_,l);var b=["error","close","destroy","pause","resume"];function g(e,t){e=e||{};var o=t instanceof(i=i||n(32));this.objectMode=!!e.objectMode,o&&(this.objectMode=this.objectMode||!!e.readableObjectMode);var r=e.highWaterMark,a=e.readableHighWaterMark,s=this.objectMode?16:16384;this.highWaterMark=r||0===r?r:o&&(a||0===a)?a:s,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new m,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=e.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(f||(f=n(82).StringDecoder),this.decoder=new f(e.encoding),this.encoding=e.encoding)}function _(e){if(i=i||n(32),!(this instanceof _))return new _(e);this._readableState=new g(e,this),this.readable=!0,e&&("function"==typeof e.read&&(this._read=e.read),"function"==typeof e.destroy&&(this._destroy=e.destroy)),l.call(this)}function v(e,t,n,o,r){var i,a=e._readableState;null===t?(a.reading=!1,function(e,t){if(t.ended)return;if(t.decoder){var n=t.decoder.end();n&&n.length&&(t.buffer.push(n),t.length+=t.objectMode?1:n.length)}t.ended=!0,P(e)}(e,a)):(r||(i=function(e,t){var n;o=t,c.isBuffer(o)||o instanceof u||"string"==typeof t||void 0===t||e.objectMode||(n=new TypeError("Invalid non-string/buffer chunk"));var o;return n}(a,t)),i?e.emit("error",i):a.objectMode||t&&t.length>0?("string"==typeof t||a.objectMode||Object.getPrototypeOf(t)===c.prototype||(t=function(e){return c.from(e)}(t)),o?a.endEmitted?e.emit("error",new Error("stream.unshift() after end event")):C(e,a,t,!0):a.ended?e.emit("error",new Error("stream.push() after EOF")):(a.reading=!1,a.decoder&&!n?(t=a.decoder.write(t),a.objectMode||0!==t.length?C(e,a,t,!1):S(e,a)):C(e,a,t,!1))):o||(a.reading=!1));return function(e){return!e.ended&&(e.needReadable||e.length<e.highWaterMark||0===e.length)}(a)}function C(e,t,n,o){t.flowing&&0===t.length&&!t.sync?(e.emit("data",n),e.read(0)):(t.length+=t.objectMode?1:n.length,o?t.buffer.unshift(n):t.buffer.push(n),t.needReadable&&P(e)),S(e,t)}Object.defineProperty(_.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(e){this._readableState&&(this._readableState.destroyed=e)}}),_.prototype.destroy=y.destroy,_.prototype._undestroy=y.undestroy,_.prototype._destroy=function(e,t){this.push(null),t(e)},_.prototype.push=function(e,t){var n,o=this._readableState;return o.objectMode?n=!0:"string"==typeof e&&((t=t||o.defaultEncoding)!==o.encoding&&(e=c.from(e,t),t=""),n=!0),v(this,e,t,!1,n)},_.prototype.unshift=function(e){return v(this,e,null,!0,!1)},_.prototype.isPaused=function(){return!1===this._readableState.flowing},_.prototype.setEncoding=function(e){return f||(f=n(82).StringDecoder),this._readableState.decoder=new f(e),this._readableState.encoding=e,this};var E=8388608;function I(e,t){return e<=0||0===t.length&&t.ended?0:t.objectMode?1:e!=e?t.flowing&&t.length?t.buffer.head.data.length:t.length:(e>t.highWaterMark&&(t.highWaterMark=function(e){return e>=E?e=E:(e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,e++),e}(e)),e<=t.length?e:t.ended?t.length:(t.needReadable=!0,0))}function P(e){var t=e._readableState;t.needReadable=!1,t.emittedReadable||(h("emitReadable",t.flowing),t.emittedReadable=!0,t.sync?r.nextTick(w,e):w(e))}function w(e){h("emit readable"),e.emit("readable"),F(e)}function S(e,t){t.readingMore||(t.readingMore=!0,r.nextTick(O,e,t))}function O(e,t){for(var n=t.length;!t.reading&&!t.flowing&&!t.ended&&t.length<t.highWaterMark&&(h("maybeReadMore read 0"),e.read(0),n!==t.length);)n=t.length;t.readingMore=!1}function D(e){h("readable nexttick read 0"),e.read(0)}function T(e,t){t.reading||(h("resume read 0"),e.read(0)),t.resumeScheduled=!1,t.awaitDrain=0,e.emit("resume"),F(e),t.flowing&&!t.reading&&e.read(0)}function F(e){var t=e._readableState;for(h("flow",t.flowing);t.flowing&&null!==e.read(););}function x(e,t){return 0===t.length?null:(t.objectMode?n=t.buffer.shift():!e||e>=t.length?(n=t.decoder?t.buffer.join(""):1===t.buffer.length?t.buffer.head.data:t.buffer.concat(t.length),t.buffer.clear()):n=function(e,t,n){var o;e<t.head.data.length?(o=t.head.data.slice(0,e),t.head.data=t.head.data.slice(e)):o=e===t.head.data.length?t.shift():n?function(e,t){var n=t.head,o=1,r=n.data;e-=r.length;for(;n=n.next;){var i=n.data,a=e>i.length?i.length:e;if(a===i.length?r+=i:r+=i.slice(0,e),0===(e-=a)){a===i.length?(++o,n.next?t.head=n.next:t.head=t.tail=null):(t.head=n,n.data=i.slice(a));break}++o}return t.length-=o,r}(e,t):function(e,t){var n=c.allocUnsafe(e),o=t.head,r=1;o.data.copy(n),e-=o.data.length;for(;o=o.next;){var i=o.data,a=e>i.length?i.length:e;if(i.copy(n,n.length-e,0,a),0===(e-=a)){a===i.length?(++r,o.next?t.head=o.next:t.head=t.tail=null):(t.head=o,o.data=i.slice(a));break}++r}return t.length-=r,n}(e,t);return o}(e,t.buffer,t.decoder),n);var n}function M(e){var t=e._readableState;if(t.length>0)throw new Error('"endReadable()" called on non-empty stream');t.endEmitted||(t.ended=!0,r.nextTick(A,t,e))}function A(e,t){e.endEmitted||0!==e.length||(e.endEmitted=!0,t.readable=!1,t.emit("end"))}function k(e,t){for(var n=0,o=e.length;n<o;n++)if(e[n]===t)return n;return-1}_.prototype.read=function(e){h("read",e),e=parseInt(e,10);var t=this._readableState,n=e;if(0!==e&&(t.emittedReadable=!1),0===e&&t.needReadable&&(t.length>=t.highWaterMark||t.ended))return h("read: emitReadable",t.length,t.ended),0===t.length&&t.ended?M(this):P(this),null;if(0===(e=I(e,t))&&t.ended)return 0===t.length&&M(this),null;var o,r=t.needReadable;return h("need readable",r),(0===t.length||t.length-e<t.highWaterMark)&&h("length less than watermark",r=!0),t.ended||t.reading?h("reading or ended",r=!1):r&&(h("do read"),t.reading=!0,t.sync=!0,0===t.length&&(t.needReadable=!0),this._read(t.highWaterMark),t.sync=!1,t.reading||(e=I(n,t))),null===(o=e>0?x(e,t):null)?(t.needReadable=!0,e=0):t.length-=e,0===t.length&&(t.ended||(t.needReadable=!0),n!==e&&t.ended&&M(this)),null!==o&&this.emit("data",o),o},_.prototype._read=function(e){this.emit("error",new Error("_read() is not implemented"))},_.prototype.pipe=function(e,t){var n=this,i=this._readableState;switch(i.pipesCount){case 0:i.pipes=e;break;case 1:i.pipes=[i.pipes,e];break;default:i.pipes.push(e)}i.pipesCount+=1,h("pipe count=%d opts=%j",i.pipesCount,t);var l=(!t||!1!==t.end)&&e!==o.stdout&&e!==o.stderr?u:_;function c(t,o){h("onunpipe"),t===n&&o&&!1===o.hasUnpiped&&(o.hasUnpiped=!0,h("cleanup"),e.removeListener("close",b),e.removeListener("finish",g),e.removeListener("drain",p),e.removeListener("error",y),e.removeListener("unpipe",c),n.removeListener("end",u),n.removeListener("end",_),n.removeListener("data",m),d=!0,!i.awaitDrain||e._writableState&&!e._writableState.needDrain||p())}function u(){h("onend"),e.end()}i.endEmitted?r.nextTick(l):n.once("end",l),e.on("unpipe",c);var p=function(e){return function(){var t=e._readableState;h("pipeOnDrain",t.awaitDrain),t.awaitDrain&&t.awaitDrain--,0===t.awaitDrain&&s(e,"data")&&(t.flowing=!0,F(e))}}(n);e.on("drain",p);var d=!1;var f=!1;function m(t){h("ondata"),f=!1,!1!==e.write(t)||f||((1===i.pipesCount&&i.pipes===e||i.pipesCount>1&&-1!==k(i.pipes,e))&&!d&&(h("false write response, pause",n._readableState.awaitDrain),n._readableState.awaitDrain++,f=!0),n.pause())}function y(t){h("onerror",t),_(),e.removeListener("error",y),0===s(e,"error")&&e.emit("error",t)}function b(){e.removeListener("finish",g),_()}function g(){h("onfinish"),e.removeListener("close",b),_()}function _(){h("unpipe"),n.unpipe(e)}return n.on("data",m),function(e,t,n){if("function"==typeof e.prependListener)return e.prependListener(t,n);e._events&&e._events[t]?a(e._events[t])?e._events[t].unshift(n):e._events[t]=[n,e._events[t]]:e.on(t,n)}(e,"error",y),e.once("close",b),e.once("finish",g),e.emit("pipe",n),i.flowing||(h("pipe resume"),n.resume()),e},_.prototype.unpipe=function(e){var t=this._readableState,n={hasUnpiped:!1};if(0===t.pipesCount)return this;if(1===t.pipesCount)return e&&e!==t.pipes?this:(e||(e=t.pipes),t.pipes=null,t.pipesCount=0,t.flowing=!1,e&&e.emit("unpipe",this,n),this);if(!e){var o=t.pipes,r=t.pipesCount;t.pipes=null,t.pipesCount=0,t.flowing=!1;for(var i=0;i<r;i++)o[i].emit("unpipe",this,n);return this}var a=k(t.pipes,e);return-1===a?this:(t.pipes.splice(a,1),t.pipesCount-=1,1===t.pipesCount&&(t.pipes=t.pipes[0]),e.emit("unpipe",this,n),this)},_.prototype.on=function(e,t){var n=l.prototype.on.call(this,e,t);if("data"===e)!1!==this._readableState.flowing&&this.resume();else if("readable"===e){var o=this._readableState;o.endEmitted||o.readableListening||(o.readableListening=o.needReadable=!0,o.emittedReadable=!1,o.reading?o.length&&P(this):r.nextTick(D,this))}return n},_.prototype.addListener=_.prototype.on,_.prototype.resume=function(){var e=this._readableState;return e.flowing||(h("resume"),e.flowing=!0,function(e,t){t.resumeScheduled||(t.resumeScheduled=!0,r.nextTick(T,e,t))}(this,e)),this},_.prototype.pause=function(){return h("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(h("pause"),this._readableState.flowing=!1,this.emit("pause")),this},_.prototype.wrap=function(e){var t=this,n=this._readableState,o=!1;for(var r in e.on("end",function(){if(h("wrapped end"),n.decoder&&!n.ended){var e=n.decoder.end();e&&e.length&&t.push(e)}t.push(null)}),e.on("data",function(r){(h("wrapped data"),n.decoder&&(r=n.decoder.write(r)),n.objectMode&&null==r)||(n.objectMode||r&&r.length)&&(t.push(r)||(o=!0,e.pause()))}),e)void 0===this[r]&&"function"==typeof e[r]&&(this[r]=function(t){return function(){return e[t].apply(e,arguments)}}(r));for(var i=0;i<b.length;i++)e.on(b[i],this.emit.bind(this,b[i]));return this._read=function(t){h("wrapped _read",t),o&&(o=!1,e.resume())},this},Object.defineProperty(_.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),_._fromList=x}).call(this,n(31),n(42))},function(e,t,n){e.exports=n(64).EventEmitter},function(e,t,n){"use strict";var o=n(65);function r(e,t){e.emit("error",t)}e.exports={destroy:function(e,t){var n=this,i=this._readableState&&this._readableState.destroyed,a=this._writableState&&this._writableState.destroyed;return i||a?(t?t(e):!e||this._writableState&&this._writableState.errorEmitted||o.nextTick(r,this,e),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(e||null,function(e){!t&&e?(o.nextTick(r,n,e),n._writableState&&(n._writableState.errorEmitted=!0)):t&&t(e)}),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}}},function(e,t,n){(function(e){var o=void 0!==e&&e||"undefined"!=typeof self&&self||window,r=Function.prototype.apply;function i(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new i(r.call(setTimeout,o,arguments),clearTimeout)},t.setInterval=function(){return new i(r.call(setInterval,o,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},i.prototype.unref=i.prototype.ref=function(){},i.prototype.close=function(){this._clearFn.call(o,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout(function(){e._onTimeout&&e._onTimeout()},t))},n(207),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,n(31))},function(e,t,n){"use strict";e.exports=a;var o=n(32),r=n(43);function i(e,t){var n=this._transformState;n.transforming=!1;var o=n.writecb;if(!o)return this.emit("error",new Error("write callback called multiple times"));n.writechunk=null,n.writecb=null,null!=t&&this.push(t),o(e);var r=this._readableState;r.reading=!1,(r.needReadable||r.length<r.highWaterMark)&&this._read(r.highWaterMark)}function a(e){if(!(this instanceof a))return new a(e);o.call(this,e),this._transformState={afterTransform:i.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,e&&("function"==typeof e.transform&&(this._transform=e.transform),"function"==typeof e.flush&&(this._flush=e.flush)),this.on("prefinish",s)}function s(){var e=this;"function"==typeof this._flush?this._flush(function(t,n){l(e,t,n)}):l(this,null,null)}function l(e,t,n){if(t)return e.emit("error",t);if(null!=n&&e.push(n),e._writableState.length)throw new Error("Calling transform done when ws.length != 0");if(e._transformState.transforming)throw new Error("Calling transform done when still transforming");return e.push(null)}r.inherits=n(38),r.inherits(a,o),a.prototype.push=function(e,t){return this._transformState.needTransform=!1,o.prototype.push.call(this,e,t)},a.prototype._transform=function(e,t,n){throw new Error("_transform() is not implemented")},a.prototype._write=function(e,t,n){var o=this._transformState;if(o.writecb=n,o.writechunk=e,o.writeencoding=t,!o.transforming){var r=this._readableState;(o.needTransform||r.needReadable||r.length<r.highWaterMark)&&this._read(r.highWaterMark)}},a.prototype._read=function(e){var t=this._transformState;null!==t.writechunk&&t.writecb&&!t.transforming?(t.transforming=!0,this._transform(t.writechunk,t.writeencoding,t.afterTransform)):t.needTransform=!0},a.prototype._destroy=function(e,t){var n=this;o.prototype._destroy.call(this,e,function(e){t(e),n.emit("close")})}},function(e,t){(function(){"use strict";var e;e=new RegExp(/(?!xmlns)^.*:/),t.normalize=function(e){return e.toLowerCase()},t.firstCharLowerCase=function(e){return e.charAt(0).toLowerCase()+e.slice(1)},t.stripPrefix=function(t){return t.replace(e,"")},t.parseNumbers=function(e){return isNaN(e)||(e=e%1==0?parseInt(e,10):parseFloat(e)),e},t.parseBooleans=function(e){return/^(?:true|false)$/i.test(e)&&(e="true"===e.toLowerCase()),e}}).call(this)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ResourceStrings={}},function(e,t){e.exports=function(e,t){return e===t||e!=e&&t!=t}},function(e,t,n){var o=n(69),r=n(44),i="[object AsyncFunction]",a="[object Function]",s="[object GeneratorFunction]",l="[object Proxy]";e.exports=function(e){if(!r(e))return!1;var t=o(e);return t==a||t==s||t==i||t==l}},function(e,t,n){(function(t){var n="object"==typeof t&&t&&t.Object===Object&&t;e.exports=n}).call(this,n(31))},function(e,t){var n=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return n.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},function(e,t,n){var o=n(123),r=n(118),i=Object.prototype.hasOwnProperty;e.exports=function(e,t,n){var a=e[t];i.call(e,t)&&r(a,n)&&(void 0!==n||t in e)||o(e,t,n)}},function(e,t,n){var o=n(253);e.exports=function(e,t,n){"__proto__"==t&&o?o(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}},function(e,t,n){var o=n(255),r=n(256),i=n(88),a=n(125),s=n(259),l=n(260),c=Object.prototype.hasOwnProperty;e.exports=function(e,t){var n=i(e),u=!n&&r(e),p=!n&&!u&&a(e),d=!n&&!u&&!p&&l(e),h=n||u||p||d,f=h?o(e.length,String):[],m=f.length;for(var y in e)!t&&!c.call(e,y)||h&&("length"==y||p&&("offset"==y||"parent"==y)||d&&("buffer"==y||"byteLength"==y||"byteOffset"==y)||s(y,m))||f.push(y);return f}},function(e,t,n){(function(e){var o=n(23),r=n(258),i=t&&!t.nodeType&&t,a=i&&"object"==typeof e&&e&&!e.nodeType&&e,s=a&&a.exports===i?o.Buffer:void 0,l=(s?s.isBuffer:void 0)||r;e.exports=l}).call(this,n(89)(e))},function(e,t){var n=9007199254740991;e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=n}},function(e,t){e.exports=function(e,t){return function(n){return e(t(n))}}},function(e,t,n){var o=n(119),r=n(126);e.exports=function(e){return null!=e&&r(e.length)&&!o(e)}},function(e,t,n){var o=n(124),r=n(265),i=n(128);e.exports=function(e){return i(e)?o(e,!0):r(e)}},function(e,t){e.exports=function(){return[]}},function(e,t,n){var o=n(132),r=n(133),i=n(93),a=n(130),s=Object.getOwnPropertySymbols?function(e){for(var t=[];e;)o(t,i(e)),e=r(e);return t}:a;e.exports=s},function(e,t){e.exports=function(e,t){for(var n=-1,o=t.length,r=e.length;++n<o;)e[r+n]=t[n];return e}},function(e,t,n){var o=n(127)(Object.getPrototypeOf,Object);e.exports=o},function(e,t,n){var o=n(132),r=n(88);e.exports=function(e,t,n){var i=t(e);return r(e)?i:o(i,n(e))}},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),a=n(147),s=n(292),l=n(293),c=n(296),u=n(297),p=n(39),d=n(298),h=n(83),f=n(299),m=n(18),y=n(21),b=n(47),g=function(e){function t(t){var n=e.call(this,t)||this;return n.state={loaded:!1,controlMetadata:void 0,contextInputs:{},controlInputs:{properties:{},datasets:{}},controlOutputs:{},message:m.translate(y.strings.loading_harness.key)},n.onFieldInputValueChange=n.onFieldInputValueChange.bind(n),n.onFieldInputTypeChange=n.onFieldInputTypeChange.bind(n),n.onDatasetInputValueChange=n.onDatasetInputValueChange.bind(n),n.onContextInputChange=n.onContextInputChange.bind(n),n.onOutputChange=n.onOutputChange.bind(n),n.onControlLoadingError=n.onControlLoadingError.bind(n),n}return r(t,e),t.prototype.initializeState=function(){var e=this;return this.props.resourceLoader.LoadManifest(p.getResourceInvoker).then(function(t){var n=d.GenerateControlMetadata(t),o=f.SetDefaultContextValues(),r={properties:f.SetDefaultPropertyValues(n),datasets:f.SetDefaultDatasetValues(n)};e.setState({loaded:!0,controlMetadata:n,contextInputs:o,controlInputs:r,controlOutputs:{}})},function(t){e.setState({loaded:!1,message:t})})},t.prototype.onContextInputChange=function(e,t){this.setState(function(n){var o=n.contextInputs;return o[e]=t,{contextInputs:o}})},t.prototype.onFieldInputValueChange=function(e,t){this.setState(function(n){var o=n.controlInputs;return o.properties[e]||(o.properties[e]={Value:void 0,SelectedType:void 0}),o.properties[e].Value=t,{controlInputs:o}})},t.prototype.onFieldInputTypeChange=function(e,t){this.setState(function(n){var o=n.controlInputs;o.properties[e]||(o.properties[e]={Value:void 0,SelectedType:void 0});var r=o.properties[e].Value;return o.properties[e].SelectedType=t,o.properties[e].Value=h.ReformatInputValue(r,t),{controlInputs:o}})},t.prototype.onDatasetInputValueChange=function(e){this.setState(function(t){var n=t.controlInputs;return n.datasets=e,{controlInputs:n}})},t.prototype.onOutputChange=function(e,t){this.setState(function(n){var o=n.controlOutputs;return o[e]=t,{controlOutputs:o}})},t.prototype.onControlLoadingError=function(e){this.setState({loaded:!1,message:e})},t.prototype.componentDidMount=function(){this.initializeState()},t.prototype.render=function(){if(!this.state.loaded)return i.createElement("div",{className:"control-pane"},this.state.message);var e=this.state.controlMetadata.Properties,t=this.state.controlMetadata.DataSetDefinitions,n=e&&Object.keys(e).length>0,o=t&&Object.keys(t).length>0;return i.createElement("div",{className:"harness-root"},i.createElement("div",{className:"navbar"},i.createElement("span",null,"PowerApps component framework Test Environment")),i.createElement("div",{className:"container"},i.createElement(a.ControlHost,{controlMetadata:this.state.controlMetadata,contextInputs:this.state.contextInputs,controlInputs:this.state.controlInputs,onInputChange:this.onFieldInputValueChange,onOutputChange:this.onOutputChange,onLoadingError:this.onControlLoadingError,onContextInputChange:this.onContextInputChange}),i.createElement("div",{className:"io-pane"},i.createElement("div",{className:"io-section"},i.createElement("h3",null,this.state.controlMetadata.ControlConstructor)),i.createElement(c.ContextInputPanel,{contextInputs:this.state.contextInputs,onContextInputChange:this.onContextInputChange}),i.createElement(b.Accordion,{className:"io-section",allowZeroExpanded:!0,preExpanded:["data_inputs"]},i.createElement(b.AccordionItem,{uuid:"data_inputs"},i.createElement(b.AccordionItemButton,null,i.createElement("div",{className:"heading"},m.translate(y.strings.data_inputs.key))),i.createElement(b.AccordionItemPanel,null,n&&i.createElement(s.FieldInputPanel,{controlMetadata:this.state.controlMetadata,controlInputs:this.state.controlInputs,onInputValueChange:this.onFieldInputValueChange,onInputTypeChange:this.onFieldInputTypeChange}),o&&i.createElement(l.DatasetInputPanel,{controlMetadata:this.state.controlMetadata,onApplyNewData:this.onDatasetInputValueChange})))),Object.keys(this.state.controlOutputs).length>0&&i.createElement(u.OutputControl,{controlOutputs:this.state.controlOutputs}))))},t}(i.Component);t.ControlHarness=g},function(e,t,n){e.exports=n(149)},function(e,t,n){e.exports=n(176)},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var o=n(0),r=n(48),i=n(25),a=function(){function e(e){this._popups={},this._host=e}return e.prototype._getKeyName=function(e){return{key:e}},e.prototype._createPopup=function(e){return o.createElement(r.a,Object(Object.assign({},e,this._getKeyName(e.name))))},e.prototype.createPopup=function(e){e.name&&(this._popups[e.name]=this._createPopup(e),this._host.forceUpdate())},e.prototype.openPopup=function(e){if(void 0===e&&(e=""),this._popups[e]){var t=this._popups[e].props;this._popups[e]=this._createPopup(Object.assign({},t,{popupToOpen:e})),this._host.forceUpdate()}},e.prototype.closePopup=function(e){if(void 0===e&&(e=""),this._popups[e]){var t=this._popups[e].props;this._popups[e]=this._createPopup(Object.assign({},t,{popupToOpen:""})),this._host.forceUpdate()}},e.prototype.updatePopup=function(e,t){if(void 0===e&&(e=""),this._popups[e]){var n=this._popups[e].props;this._popups[e]=this._createPopup(Object.assign({},n,t)),this._host.forceUpdate()}},e.prototype.deletePopup=function(e){void 0===e&&(e=""),this._popups[e]&&(delete this._popups[e],this._popupsId=void 0,this._host.forceUpdate())},e.prototype.getPopups=function(){var e=[];for(var t in this._popups)e.push(this._popups[t]);return e},e.prototype.setPopupsId=function(e){this._popupsId=e},e.prototype.getPopupsId=function(){return this._popupsId},e.prototype.renderPopups=function(){var e=this.getPopups(),t=this.getPopupsId();return e.length?o.createElement(i.b,{id:t,parentCustomControlId:this._host.props.controlId,openPopup:this._host.props.actions.openPopup,closePopup:this._host.props.actions.closePopup},e):null},e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var o=new(function(){function e(){this._initialized=!1}return e.prototype._logMessage=function(e,t,n){throw"_logMessage is not overrided by actual implementation"},e.prototype.setProps=function(e){!this._initialized&&e&&e.propBagMethods&&e.propBagMethods.utils&&e.propBagMethods.utils.logMessage&&(this._logMessage=e.propBagMethods.utils.logMessage,this._initialized=!0)},e.prototype.log=function(e,t){this._initialized&&this._logMessage(e,t,3)},e.prototype.warn=function(e,t){this._initialized&&this._logMessage(e,t,2)},e.prototype.error=function(e,t){this._initialized&&this._logMessage(e,t,1)},e}())},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var o=n(7),r=n(2),i=function(){function e(){this._memoizedMap={},this._newMemoizedMap={},this._isCompositing=!1,this._newIsCompositing=!1,this._midRender=!1,this._memoizedRoot=null,this._wrapperMap={},this.addCommandWrapper=this.addCommandWrapper.bind(this)}return e.prototype.startRenderFunction=function(){if(this._midRender){var e=new Error("Start render called without start");throw r.default.Reporting.reportFailure(o.a+".Components",e,"Start Render, midRender "+this._midRender,[{name:"APIName",value:o.a+".Components.CustomControlMemoizationHelper.startRenderFunction"}]),e}this._isCompositing=!1,this._midRender=!0},e.prototype.stopRenderFunction=function(){if(!this._midRender){var e=new Error("Stop render called without start");throw r.default.Reporting.reportFailure(o.a+".Components",e,"Stop Render, midRender "+this._midRender,[{name:"APIName",value:o.a+".Components.CustomControlMemoizationHelper.stopRenderFunction"}]),e}this._isCompositing=this._newIsCompositing,this._memoizedMap=this._newMemoizedMap,this._newMemoizedMap={},this._midRender=!1},e.prototype.destroy=function(){for(var e in this._wrapperMap)this._wrapperMap[e].unmount();this._wrapperMap=null,this._memoizedMap=null,this._newMemoizedMap=null,this._memoizedRoot=null,this._midRender=!1},e.prototype.getVirtualComponentByKey=function(e){return this._memoizedMap&&this._memoizedMap[e]?this._memoizedMap[e].virtualComponent:null},e.prototype.getReactElementByKey=function(e){return this._memoizedMap&&this._memoizedMap[e]?this._memoizedMap[e].reactElement:null},e.prototype.retainElement=function(e){this._midRender&&this._memoizedMap&&(this._newMemoizedMap[e]=this._memoizedMap[e])},e.prototype.addUpdatedEntry=function(e,t,n){this._midRender&&this._newMemoizedMap?this._newMemoizedMap[e]={reactElement:t,virtualComponent:n}:this._memoizedMap&&(this._memoizedMap[e]={reactElement:t,virtualComponent:n})},e.prototype.setIsCompositing=function(e){this._newIsCompositing=e},e.prototype.getIsCompositing=function(){return this._isCompositing},e.prototype.setRoot=function(e){this._memoizedRoot=e},e.prototype.getRoot=function(){return this._memoizedRoot},e.prototype.addCommandWrapper=function(e,t){this._wrapperMap[e]=t},e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var o=function(){function e(){}return Object.defineProperty(e.prototype,"errorMessage",{get:function(){return this._errorMessage},set:function(e){this._errorMessage=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"errorDetails",{get:function(){return this._errorDetails},set:function(e){this._errorDetails=e},enumerable:!0,configurable:!0}),e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return h});var o=n(0),r=n(8),i=n(36),a=n(22),s=n(24),l=n(20),c=n(28),u=n(2),p=n(11),d=c.a.CCF+".CustomControlSeeMoreHelper",h=function(){function e(e){this._seeMorePopupInfo=null,this._seeMorePopupStatus=-1,this._seeMorePopupAnimDiv=null,this._seeMoreTimeoutHelper=-1,this._animFadeInReference=this._seeMoreFadeIn.bind(this),this._animEndReference=this._seeMoreEnd.bind(this),this._parentDomId="",this.shouldGivePoppedOutDimensions=this._shouldGivePoppedOutDimensions.bind(this),this._parentDomId=e?"|"+e:"|"+Object(p.b)()}return e.prototype.destroy=function(){-1!==this._seeMorePopupStatus&&l.a.getInstance().seeMoreClose(),this._seeMorePopupInfo=null,this._seeMorePopupAnimDiv=null,this._animFadeInReference=null,this._animEndReference=null},e.prototype.getSeeMorePopupInfo=function(){return this._seeMorePopupInfo},e.prototype.getSeeMorePopupStatus=function(){return this._seeMorePopupStatus},e.prototype._shouldGivePoppedOutDimensions=function(e){var t=this.getSeeMorePopupInfo(),n=this.getSeeMorePopupStatus();return t&&4!==n&&(e&&0!==n||!e&&3!==n)},e.prototype.seeMorePopup=function(e,t,n,o,r){void 0===o&&(o=!1),void 0===r&&(r=!1);var i=e.getBoundingClientRect();this._seeMoreCallback=t;switch(this._seeMorePopupStatus){case-1:if(!n)return;l.a.getInstance().seeMoreOpen(),this._seeMorePopupStatus=0;var a=document.body.getBoundingClientRect().width,s=!o||i.width>2/3*a?a:i.width>1/3*a?2/3*a:1/3*a,c=a<769,u=s===a&&!c;s-=u?80:0;var p=document.body.getBoundingClientRect().height-(c?0:80),d=.5*p-.5*i.height+(c?0:40),h=(u?40:0)+(u?s:a)/2-i.width/2;this._seeMorePopupInfo={startHeight:i.height,startWidth:i.width,startLeft:i.left,startTop:i.top,endTop:d,endLeft:h,endWidthInner:s-48,endHeightInner:p-48,endWidth:s,endHeight:p,isRTL:r},this._seeMoreCallback(!0);break;case 2:if(n)return;l.a.getInstance().seeMoreClose(),this._seeMorePopupStatus=3,this._seeMoreCallback(!0)}},e.prototype._getPopupDiv=function(e,t,n){switch(this._seeMorePopupStatus){case 0:case 3:return e?n.lastChild:n.parentElement.parentElement;case 4:return e?t?n.lastChild.lastChild:n:n.parentElement.parentElement;case 1:return e?n.lastChild.lastChild:n.parentElement.parentElement}return u.default.Diagnostics.traceInfo(d+"._getPopupDiv","Get pop div success"),n},e.prototype._getCloseElement=function(e){var t=e;if(t){t.id.endsWith("_outer")&&(t=t.firstChild);for(var n=0;n<t.children.length;n++)if(t.children[n].id==="closeButtonContainer"+this._parentDomId)return t.children[n].firstChild}return null},e.prototype.checkOnPopupStatus=function(e,t,n){switch(-1!==this._seeMoreTimeoutHelper&&(window.clearTimeout(this._seeMoreTimeoutHelper),this._seeMoreTimeoutHelper=-1),this._seeMorePopupStatus){case 0:case 3:this._seeMorePopupAnimDiv=this._getPopupDiv(e,t,n),this._seeMorePopupAnimDiv.addEventListener("animationend",this._animFadeInReference),this._seeMorePopupAnimDiv.addEventListener("webkitAnimationEnd",this._animFadeInReference),this._seeMoreTimeoutHelper=window.setTimeout(this._seeMoreFadeIn.bind(this),2500);break;case 4:this._seeMorePopupAnimDiv=this._getPopupDiv(e,t,n),this._seeMorePopupAnimDiv.addEventListener("animationend",this._animEndReference),this._seeMorePopupAnimDiv.addEventListener("webkitAnimationEnd",this._animEndReference),this._seeMoreTimeoutHelper=window.setTimeout(this._seeMoreEnd.bind(this),1e3);break;case 1:this._seeMorePopupAnimDiv=this._getPopupDiv(e,t,n),this._seeMorePopupAnimDiv.addEventListener("animationend",this._animFadeInReference),this._seeMorePopupAnimDiv.addEventListener("webkitAnimationEnd",this._animFadeInReference),this._seeMoreTimeoutHelper=window.setTimeout(this._seeMoreFadeIn.bind(this),1e3)}},e.prototype._seeMoreFadeIn=function(){-1!==this._seeMoreTimeoutHelper&&(window.clearTimeout(this._seeMoreTimeoutHelper),this._seeMoreTimeoutHelper=-1);switch(this._seeMorePopupStatus){case 1:this._seeMorePopupStatus=2,this._getCloseElement(this._seeMorePopupAnimDiv).focus(),this._seeMorePopupAnimDiv.removeEventListener("animationend",this._animFadeInReference),this._seeMorePopupAnimDiv.removeEventListener("webkitAnimationEnd",this._animFadeInReference);break;case 0:this._seeMorePopupStatus=1,this._seeMoreTimeoutHelper=window.setTimeout(this._seeMoreFadeIn.bind(this),1500),this._seeMoreCallback(!1);break;case 3:this._seeMorePopupStatus=4,this._seeMorePopupAnimDiv.removeEventListener("animationend",this._animFadeInReference),this._seeMorePopupAnimDiv.removeEventListener("webkitAnimationEnd",this._animFadeInReference),this._seeMorePopupAnimDiv=null,this._seeMoreCallback(!1)}},e.prototype._seeMoreEnd=function(){-1!==this._seeMoreTimeoutHelper&&(window.clearTimeout(this._seeMoreTimeoutHelper),this._seeMoreTimeoutHelper=-1),this._seeMorePopupAnimDiv.removeEventListener("animationend",this._animEndReference),this._seeMorePopupAnimDiv.removeEventListener("webkitAnimationEnd",this._animEndReference),this._seeMorePopupAnimDiv=null,this._seeMorePopupStatus=-1,this._seeMorePopupInfo=null;this._seeMoreCallback(!0)},e.prototype.renderSpacer=function(e,t){if(void 0===e&&(e=!0),void 0===t&&(t=!1),e&&!t&&(-1===this._seeMorePopupStatus||4===this._seeMorePopupStatus))return u.default.Diagnostics.traceInfo(d+".renderSpacer","Render Spacer return null"),null;var n=1===this._seeMorePopupStatus||2===this._seeMorePopupStatus||3===this._seeMorePopupStatus?{height:"24px",width:"100%",backgroundColor:"white"}:{display:"none"};return o.createElement(r.a,{key:"ccf_spacer",style:n})},e.prototype.renderCloseButton=function(e,t,n,l){if(void 0===t&&(t=!0),void 0===n&&(n=!1),void 0===l&&(l=!1),t&&!n&&(-1===this._seeMorePopupStatus||4===this._seeMorePopupStatus))return null;var c={backgroundColor:"transparent",border:"none",position:"absolute",top:"0px",right:l?"":"-24px",left:l?"-24px":"",height:"48px",width:"48px",textAlign:"center",paddingTop:"16px",cursor:"pointer"},u=1===this._seeMorePopupStatus||2===this._seeMorePopupStatus||3===this._seeMorePopupStatus?{height:"48px",width:"100%",top:"-24px",position:"absolute"}:{display:"none"};return o.createElement(r.a,{key:"closeButtonContainer"+this._parentDomId,id:"closeButtonContainer"+this._parentDomId,style:u},o.createElement(i.a,{key:"closeButton"+this._parentDomId,id:"closeButton"+this._parentDomId,style:c,tabIndex:0,title:"Close Fullscreen Control button",onClick:e,accessibilityLabel:"Close Fullscreen Control button"},o.createElement(a.a,{key:"closeButtonIcon",style:{fontSize:"16px",color:"#333333",position:"absolute",top:"0px",right:"0px",left:"0px",height:"48px",width:"48px",textAlign:"center",paddingTop:"16px",cursor:"pointer"},type:s.a.Close})))},e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var o=n(3),r=function(){return(r=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},i=function(){function e(e){if(this._dependencyMap={},this._propertyValues={},e&&e.manifest&&e.authoringMode)for(var t in this._dependencyMap=this._getDependencyMap(e.manifest),this._dependencyMap)this._propertyValues[t]=null}return e.prototype.handleDependencyUpdate=function(e,t,n){if(!(e&&e.manifest&&e.authoringMode&&t))return Promise.resolve();var i={},a=!1,s=[];for(var l in this._dependencyMap){var c=this._getRawValue(e,l);(!o.c(c)&&c.equals?c.equals(this._propertyValues[l]):c===this._propertyValues[l])||(this._propertyValues[l]=c,i[l]=c,a=!0,this._dependencyMap[l].forEach(function(e){-1===s.indexOf(e)&&s.push(e)}))}if(!a)return Promise.resolve();var u={};for(var l in this._dependencyMap)u[l]={value:this._propertyValues[l],isAuthoringSource:!!i[l]};return t(n,u).then(function(t){var n=r({},t);for(var o in n)-1===s.indexOf(o)&&delete n[o];return Object.keys(n).length>0?e.actions.handleOutputSchemaChange(n):Promise.resolve()})},e.prototype._getRawValue=function(e,t){return e&&e.dynamicData&&e.dynamicData.parameters&&e.dynamicData.parameters[t]&&e.dynamicData.parameters[t].hasOwnProperty("raw")?e.dynamicData.parameters[t].raw:null},e.prototype._getDependencyMap=function(e){return-1!==e.ConstructorName.indexOf("ObjectDetector")?{ModelId:["VisionObjects"]}:-1!==e.ConstructorName.indexOf("FormRecognizer")||-1!==e.ConstructorName.indexOf("FormProcessor")?{ModelId:["FormContent"]}:{}},e}()},function(e,t,n){"use strict";var o=n(0),r=function(){function e(t,n,r,i){this._type=t,this._componentId=n,this._properties=Object.assign({},r),this._children=[],null!=i&&("string"==typeof i||"number"==typeof i||i instanceof e||o.isValidElement(i)?this._children=i:i instanceof Array&&(this._children=i.filter(function(t){return"string"==typeof t||"number"==typeof t||t instanceof e||o.isValidElement(t)}).slice()))}return e.prototype.getVirtualRepresentation=function(t){return new e(this._type,this._componentId,Object.assign(this._properties,t),null)},e.prototype.getType=function(){return this._type},e.prototype.getComponentId=function(){return this._componentId},e.prototype.getProperties=function(){return this._properties},e.prototype.getChildren=function(){return this._children instanceof Array?this._children.slice():this._children},e.prototype.setProperties=function(e){Object.assign(this._properties,e)},e}(),i=n(14),a=n(12),s=n(2),l=n(35),c=n(49),u=function(){function e(e,t){this._externalUtils=t,this._controlId=e.controlId}return e.prototype.addControlId=function(e){null==e&&(e=[]);var t={name:"CustomControlId",value:this._controlId};return e.push(t),e},e.prototype.reportSuccess=function(e,t){return this._externalUtils.xrmProxy.Reporting.reportSuccess(e,this.addControlId(t))},e.prototype.reportFailure=function(e,t,n,o){return this._externalUtils.xrmProxy.Reporting.reportFailure(e,t,n,this.addControlId(o))},e.prototype.reportEvent=function(e){var t=this.addControlId([]);return e.eventParameters.push(t[0]),this._externalUtils.xrmProxy.Reporting.reportEvent(e)},e}(),p=n(34),d=n(29);function h(e){var t={timeZoneUtcOffsetMinutes:0,dateTimeFormatInfo:d.CultureInfo.CurrentCulture.dateTimeFormat,numberFormatInfo:d.CultureInfo.CurrentCulture.numberFormat,timeZoneAdjusters:[],formatInfoCultureName:d.CultureInfo.CurrentCulture.name,formatter:p.SimpleFormatter,languagesByCode:{}},n=e?Object.assign(t.formatter,e.formatter):t.formatter;return Object.assign(t,e,{formatter:n})}var f=function(){function e(e){this._formattingData=h(e.propBagData.formattingData),this._utilsData=e.propBagData.utilsData,this._adjusters=this._formattingData.timeZoneAdjusters,this._dateTimeFormatInfo=this._formattingData.dateTimeFormatInfo,this._currentCultureInfo=new d.CultureInfo(this._formattingData.formatInfoCultureName,this._formattingData.numberFormatInfo,this._formattingData.dateTimeFormatInfo),this._timeZoneOffsetMinutes=this._formattingData.timeZoneUtcOffsetMinutes}return e.prototype.parseDateFromString=function(e,t){var n={cultureInfo:this._currentCultureInfo};return this._formattingData.formatter.ParseDateFromString(e,t,this._currentCultureInfo,n)},e.prototype.formatDateShort=function(e,t){return t?this._formattingData.formatter.formatShortDateTimeValue(e,this._currentCultureInfo,0,this._timeZoneOffsetMinutes,this._adjusters):this._formattingData.formatter.formatShortDateValue(e,this._currentCultureInfo,0,this._timeZoneOffsetMinutes,this._adjusters)},e.prototype.formatDateLongAbbreviated=function(e){return this._formattingData.formatter.formatDateLongAbbreviated(e,this._currentCultureInfo,0,this._timeZoneOffsetMinutes,this._adjusters)},e.prototype.formatDateLong=function(e){return this._formattingData.formatter.formatLongDateValue(e,this._currentCultureInfo,0,this._timeZoneOffsetMinutes,this._adjusters)},e.prototype.formatDateYearMonth=function(e){return this._formattingData.formatter.formatDateYearMonthValue(e,this._currentCultureInfo,0,this._timeZoneOffsetMinutes,this._adjusters)},e.prototype.formatInteger=function(e){return this._formattingData.formatter.formatIntegerValue(e,this._currentCultureInfo)},e.prototype.formatDecimal=function(e,t){return this._formattingData.formatter.formatDecimalValue(e,this._currentCultureInfo,t)},e.prototype.formatCurrency=function(e,t,n){return this._formattingData.formatter.formatCurrencyValue(e,this._currentCultureInfo,n,t)},e.prototype.formatTime=function(e,t){return this._formattingData.formatter.formatShortDateTimeValue(e,this._currentCultureInfo,t,this._timeZoneOffsetMinutes,this._adjusters)},e.prototype.getWeekOfYear=function(e){return this._utilsData.dateTimeUtils.getWeekOfYear(e,this._dateTimeFormatInfo.firstDayOfWeek,this._dateTimeFormatInfo.calendarWeekRule)},e.prototype.formatDateAsFilterStringInUTC=function(e,t){return t?this._formattingData.formatter.formatSortableDateTimeValue(e,this._currentCultureInfo,0,this._timeZoneOffsetMinutes,this._adjusters):this._formattingData.formatter.formatSortableDateValue(e,this._currentCultureInfo,0)},e.prototype.formatLanguage=function(e){return this._formattingData.formatter.formatLanguageValue(e,this._formattingData.languagesByCode)},e}(),m=n(3),y=n(13),b=function(){function e(e,t){this._customControlProperties=e,this._externalUtils=t}return e.prototype.createElement=function(e,t,n){return new r(e,t?t.id:"",t,n)},e.prototype.createComponent=function(e,t,n){return new r(e,t,n,null)},e.prototype.bindDOMElement=function(e,t){this._externalUtils.bindDOMElement(e,t)},e.prototype.bindDOMComponent=function(e,t){this._externalUtils.bindDOMElement(e,t)},e.prototype.fireEvent=function(e,t){var n=this._customControlProperties.parentDefinedControlProps;if(!m.c(n)&&!m.c(n.eventListeners)){for(var o=-1,r=n.eventListeners,i=0;i<r.length;i++)r[i].eventname===e&&(o=i);if(-1!==o){var a=n.eventListeners[o];for(var i in a.eventhandler)m.c(a.eventhandler[i])||a.eventhandler[i](t)}}},e.prototype.getControlDefaultMapping=function(e,t){return Object(y.h)(e,t)},e.prototype.getPopupService=function(){return this._externalUtils.getPopupService()},e.prototype.requestRender=function(e){this._externalUtils.forceUpdate(e)},e.prototype.unbindDOMComponent=function(e){return this._externalUtils.unbindDOMComponent(e)},e.prototype.updateComponent=function(e,t){this._externalUtils.updateComponent(e,t)},e}(),g=function(){function e(e,t){this._traceLocation="CustomControl.",this._externalUtils=t,this._controlId=e.controlId}return e.prototype.addControlId=function(e){return e+"[CustomControlId = "+this._controlId+"]"},e.prototype.traceError=function(e,t){return this._externalUtils.xrmProxy.Diagnostics.traceError(this._traceLocation+e,this.addControlId(t))},e.prototype.traceWarning=function(e,t){return this._externalUtils.xrmProxy.Diagnostics.traceWarning(this._traceLocation+e,this.addControlId(t))},e.prototype.traceInfo=function(e,t){return this._externalUtils.xrmProxy.Diagnostics.traceInfo(this._traceLocation+e,this.addControlId(t))},e.prototype.traceDebug=function(e,t){return this._externalUtils.xrmProxy.Diagnostics.traceDebug(this._traceLocation+e,this.addControlId(t))},e}(),_=function(){function e(){}return e.prototype.getPredictionSchemaAsync=function(e,t){return s.default.IntelligenceApi.getPredictionSchemaAsync(e,t)},e.prototype.predictAsync=function(e,t){return s.default.IntelligenceApi.predictAsync(e,t)},e.prototype.getPreTrainedModelIdAsync=function(e){return s.default.IntelligenceApi.getPreTrainedModelIdAsync(e)},e.prototype.getLabelsForObjectDetectionModelAsync=function(e){return s.default.IntelligenceApi.getLabelsForObjectDetectionModelAsync(e)},e}(),v=function(){function e(e,t){this._event=e,this._parameters=t}return e.prototype.start=function(){this._stop=this._event.startStopwatch(this._parameters)},e.prototype.stop=function(e){this._stop(e)},e}(),C=n(7),E=n(16);function I(e){var t={encoder:null,dateTimeUtils:{getDSTAdjustmentMinutes:function(e){return E.d(e)},getWeekOfYear:function(){return-1}}},n={encoder:Object.assign({},t.encoder,e.encoder),dateTimeUtils:Object.assign({},t.dateTimeUtils,e.dateTimeUtils)};return Object.assign({},e,n)}var P=function(){function e(e,t){this._customControlProperties=e,this._externalUtils=t,this._globalCommandManagerInitialized=e.globalCommandManagerInitialized,this._internalEventListeners=this._generateInternalEventListeners()}return e.prototype._generateInternalEventListeners=function(){return[{eventname:"systemKeyDown",eventhandler:[this._handleSystemKeydown.bind(this)]}]},e.prototype._handleSystemKeydown=function(e){this._customControlProperties.actions&&this._customControlProperties.actions.fireXrmEvent&&this._customControlProperties.controlId&&this._customControlProperties.actions.fireXrmEvent(this._customControlProperties.controlId.split(".")[0],this._customControlProperties.id,this._customControlProperties.contextToken,0,e)},e.prototype.doesControlExist=function(e){return this._customControlProperties&&this._customControlProperties.actions&&this._customControlProperties.actions.loadManifest?this._customControlProperties.actions.loadManifest(e).then(function(){return!0},function(){return!1}):Promise.resolve(!1)},e.prototype.beginSecureSessionForResource=function(e,t,n,o){return s.default.Utils.beginSecureSessionForResource(e,t,n,o)},e.prototype.createPerformanceMarker=function(e){i.a.createPerformanceEvent(e,this._customControlProperties.logLevel,this._customControlProperties.configuration.CustomControlId).createMarker()},e.prototype.createPerformanceStopwatch=function(e){return new v(i.a.createPerformanceEvent(e,this._customControlProperties.logLevel,this._customControlProperties.configuration.CustomControlId))},e.prototype.log=function(e,t,n){this._customControlProperties.propBagMethods.utils.logMessage(e,t,n)},e.prototype.getEntityMetadata=function(e,t){return s.default.Utils.getEntityMetadata(e,t)},e.prototype.getEntitiesMetadata=function(e){if(s.default.Utils.getEntitiesMetadata)return s.default.Utils.getEntitiesMetadata(e);var t=[];for(var n in e)t.push(s.default.Utils.getEntityMetadata(n,e[n]));return Promise.all(t).then(function(e){return e})},e.prototype.getParentControlName=function(){return this._customControlProperties&&this._customControlProperties.parentContextToken&&this._customControlProperties.parentContextToken.controlName||""},e.prototype.getResourceString=function(e,t){return s.default.Utils.getResourceString(e,t)},e.prototype.isFeatureEnabled=function(e){return s.default.Utils.isFeatureEnabled(e)},e.prototype.isDisruptiveFeatureEnabled=function(e){return s.default.Utils.isDisruptiveFeatureEnabled&&s.default.Utils.isDisruptiveFeatureEnabled(e)},e.prototype.canOpenUrl=function(e){return s.default.Utils.canOpenUrl(e)},e.prototype.getFormId=function(e,t){return s.default.Utils.getFormId(e,t)},e.prototype.lookupObjects=function(e){return s.default.Utils.lookupObjects(e)},e.prototype.bindDOMElement=function(e,t){this._externalUtils.bindDOMElement(e,t)},e.prototype.fireEvent=function(e,t){var n=this._customControlProperties.parentDefinedControlProps;if(!m.c(n)&&!m.c(n.eventListeners)){for(var o=-1,r=n.eventListeners,i=0;i<r.length;i++)r[i].eventname===e&&(o=i);if(-1!==o){var a=n.eventListeners[o];for(var i in a.eventhandler)m.c(a.eventhandler[i])||a.eventhandler[i](t)}}if(!m.c(this._internalEventListeners))for(var s=0;s<this._internalEventListeners.length;s++)if(this._internalEventListeners[s].eventname===e){a=this._internalEventListeners[s];for(var l in a.eventhandler)m.c(a.eventhandler[l])||a.eventhandler[l](t)}},e.prototype.getControlDefaultMapping=function(e,t){return Object(y.h)(e,t)},e.prototype.getPopupService=function(){return this._externalUtils.getPopupService()},e.prototype.requestRender=function(e){this._externalUtils.forceUpdate(e)},e.prototype.unbindDOMComponent=function(e){return this._externalUtils.unbindDOMComponent(e)},e.prototype.updateComponent=function(e,t){this._externalUtils.updateComponent(e,t)},e.prototype.createCrmUri=function(e){return this._customControlProperties&&this._customControlProperties.propBagData&&this._customControlProperties.propBagData.clientData?Object(a.f)(e,this._customControlProperties.propBagData.clientData):e},e.prototype.createServerUri=function(e){return this._customControlProperties&&this._customControlProperties.propBagData&&this._customControlProperties.propBagData.clientData?Object(a.f)(e,this._customControlProperties.propBagData.clientData):e},e.prototype.openInBrowser=function(e){e&&window.open(e)},e.prototype.getServiceUri=function(){return""},e.prototype.setState=function(e){var t=this._customControlProperties.personalizationConfiguration;return t&&("form"===t.areaType&&this._customControlProperties.actions.setFieldControlPersonalization(t,e),"grid"===t.areaType&&this._customControlProperties.actions.setGridControlPersonalization(t,e),"dashboard"===t.areaType&&this._customControlProperties.actions.setDashboardControlPersonalization(t,e)),this._customControlProperties.propBagMethods.utils.setState(e)},e.prototype.crmUrlEncode=function(e){return this._customControlProperties.propBagData.utilsData.encoder.CrmUrlEncode(e)},e.prototype.hasEntityPrivilege=function(e,t,n){return this._customControlProperties.propBagData.utilsData.hasEntityPrivilege(e,t,n)},e.prototype.crmHtmlEncode=function(e){return this._customControlProperties.propBagData.utilsData.encoder.CrmHtmlEncode(e)},e.prototype.isNullOrUndefined=function(e){return m.c(e)},e.prototype.isNullOrEmptyString=function(e){return m.b(e)},e.prototype.notifyOutputChanged=function(){},e.prototype.eventListenerExists=function(e){var t=this._customControlProperties.parentDefinedControlProps;if(!m.c(t)&&!m.c(t.eventListeners))for(var n=t.eventListeners,o=0;o<n.length;o++)if(n[o].eventname.toLowerCase()===e.toLowerCase())return!0;return!1},e.prototype.getElementByRef=function(){return null},e.prototype.disablePanoramaScroll=function(){return!1},e.prototype.scrollToView=function(){},e.prototype.setNotification=function(){return!1},e.prototype.clearNotification=function(){return!1},e.prototype.triggerOfflineMetadataSync=function(){return this._customControlProperties.actions.triggerOfflineMetadataSync()},e.prototype.addGlobalNotification=function(e,t,n,o,r,i){return s.default.addGlobalNotification(e,t,n,o,r,i)},e.prototype.clearGlobalNotification=function(e){return s.default.clearGlobalNotification(e)},e.prototype.clearGlobalNotifications=function(){return s.default.clearGlobalNotifications()},e.prototype.retrieveChartDrilldownAttributes=function(e){return this._customControlProperties.actions.retrieveChartDrilldownAttributes(e)},e.prototype.retrieveFormWithAttributes=function(e,t,n){return this._customControlProperties.actions.retrieveFormWithAttributes(e,t,n)},e.prototype.getEntityName=function(e){return s.default.Utils.getEntityName(e)},e.prototype.retrieveRecordCommand=function(e,t,n,o,r,i){var a=this,l=this._customControlProperties&&this._customControlProperties.manifest&&this._customControlProperties.manifest.ConstructorName?this._customControlProperties.manifest.ConstructorName:null,c=this._customControlProperties.id;if("crm_header_global"===t){if(this._globalCommandManagerInitialized)return this._customControlProperties.actions.retrieveRecordCommand(e,t,this._customControlProperties.contextToken,n,o,r,i,l,!0,c);var u=this._externalUtils.getGlobalCommandManagerPromise();if(u)return u.isResolved()?(this._globalCommandManagerInitialized=!0,this._customControlProperties.actions.retrieveRecordCommand(e,t,this._customControlProperties.contextToken,n,o,r,i,l,!0,c)):u.then(function(){return a._globalCommandManagerInitialized=!0,a._customControlProperties.actions.retrieveRecordCommand(e,t,a._customControlProperties.contextToken,n,o,r,i,l,!0,c)},function(){var e=new Error("Global command manager initialization failed");throw s.default.Reporting.reportFailure(C.a+".Models",e,"Rejected promise",[{name:"commandManagerId",value:t},{name:"APIName",value:C.a+".Models.PropertyClasses.Utility.retrieveRecordCommand"}]),e});var p=this._customControlProperties.actions.addPendingCommandManagerId(c,this._customControlProperties.contextToken,this._customControlProperties.controlId,t);return this._externalUtils.setGlobalCommandManagerPromise(p),p.then(function(){return a._globalCommandManagerInitialized=!0,a._customControlProperties.actions.retrieveRecordCommand(e,t,a._customControlProperties.contextToken,n,o,r,i,l,!0,c)})}return this._customControlProperties.actions.retrieveRecordCommand(e,t,this._customControlProperties.contextToken,n,o,r,i,l,!0,c)},e.prototype.getDeclaredFeatures=function(){return{unspecifiedFeatureFallback:{supportStatus:"supported"}}},e.prototype.getFeatureClassName=function(){return"Utility"},e}(),w=function(){function e(e){this._performanceEvents={},this._customControlProperties=e}return e.prototype.createPerformanceStopwatch=function(e,t,n){return void 0===n&&(n=!1),this._performanceEvents[e]||(this._performanceEvents[e]=i.a.createPerformanceEvent(e,n?void 0:this._customControlProperties.logLevel,this._customControlProperties.configuration.CustomControlId)),this._performanceEvents[e].startStopwatch(t)},e.prototype.trackWork=function(e){return i.a.trackWork(e)},e.prototype.addKeyPerformanceIndicator=function(e,t,n){i.a.addKeyPerformanceIndicator(e,t,n)},e.prototype.addKeyPerformanceIndicatorOnIdle=function(e,t){i.a.addKeyPerformanceIndicatorOnIdle(e,t)},e}(),S=function(){return function(e,t){this._customControlExposedOrgSettings=e.propBagData.clientData.orgSettingsData,this._xrmProxy=t.xrmProxy,this.languageId=this._xrmProxy.OrgSettings.languageId,this.attributes=this._xrmProxy.OrgSettings.attributes,this.uniqueName=this._xrmProxy.OrgSettings.uniqueName,this.isAutoSaveEnabled=this._xrmProxy.OrgSettings.isAutoSaveEnabled,this.isRTL=this._customControlExposedOrgSettings.isRTL,this.fiscalYearStartDate=this._customControlExposedOrgSettings.fiscalYearStartDate,this.fiscalPeriodFormat=this._customControlExposedOrgSettings.fiscalPeriodFormat,this.fiscalPeriodType=this._customControlExposedOrgSettings.fiscalPeriodType,this.fiscalYearFormatYear=this._customControlExposedOrgSettings.fiscalYearFormatYear,this.fiscalYearFormatPrefix=this._customControlExposedOrgSettings.fiscalYearFormatPrefix,this.fiscalYearFormatSuffix=this._customControlExposedOrgSettings.fiscalYearFormatSuffix,this.fiscalYearDisplayCode=this._customControlExposedOrgSettings.fiscalYearDisplayCode,this.fiscalPeriodConnector=this._customControlExposedOrgSettings.fiscalPeriodConnector,this.showWeekNumber=this._customControlExposedOrgSettings.showWeekNumber,this.boundDashboardDefaultCardExpanded=this._customControlExposedOrgSettings.boundDashboardDefaultCardExpanded,this.allowUnresolvedPartiesOnEmailSend=this._customControlExposedOrgSettings.allowUnresolvedPartiesOnEmailSend,this.webResourceHash=this._customControlExposedOrgSettings.webResourceHash,this.enableBingMapsIntegration=this._customControlExposedOrgSettings.enableBingMapsIntegration,this.bingMapsApiKey=this._customControlExposedOrgSettings.bingMapsApiKey,this.availableBingMapLocales=this._customControlExposedOrgSettings.availableBingMapLocales,this.excludedCountriesForMaps=this._customControlExposedOrgSettings.excludedCountriesForMaps,this.bFDatacenter=this._customControlExposedOrgSettings.bFDatacenter,this.securitySettingForEmail=this._customControlExposedOrgSettings.securitySettingForEmail,this.appointmentRichEditorExperience=this._customControlExposedOrgSettings.appointmentRichEditorExperience,this.gridTotalRecordCountLimit=this._customControlExposedOrgSettings.gridTotalRecordCountLimit}}(),O=function(){function e(e,t){this._formattingData=h(e.propBagData.formattingData),this._xrmProxy=t.xrmProxy,this._utilsData=I(e.propBagData.utilsData),this.userId=this._xrmProxy.UserSettings.userId,this.userName=this._xrmProxy.UserSettings.userName,this.dateFormattingInfo=this._formattingData.dateTimeFormatInfo,this.numberFormattingInfo=this._formattingData.numberFormatInfo,this.isRTL=this._xrmProxy.UserSettings.isRTL,this.languageId=this._xrmProxy.UserSettings.languageId,this.securityRoles=this._xrmProxy.UserSettings.securityRoles,this.isHighContrastEnabled=this._xrmProxy.UserSettings.isHighContrastEnabled,this.timeZoneUtcOffsetMinutes=this._formattingData.timeZoneUtcOffsetMinutes,this.pagingLimit=this._xrmProxy.UserSettings.pagingLimit}return e.prototype.getTimeZoneOffsetMinutes=function(e){return e?this._formattingData.timeZoneUtcOffsetMinutes+this._utilsData.dateTimeUtils.getDSTAdjustmentMinutes(e,this._formattingData.timeZoneAdjusters):this._formattingData.timeZoneUtcOffsetMinutes},e}(),D=function(){function e(e,t){this._externalUtils=t,this._customControlProperties=e,this._xrmProxy=t.xrmProxy}return e.prototype.getClient=function(){return this._externalUtils.xrmProxy.Client.getClient()},e.prototype.isOffline=function(){return"Offline"===this._externalUtils.xrmProxy.Client.getClientState()},e.prototype.getFormFactor=function(){return this._externalUtils.xrmProxy.Client.getFormFactor()},e.prototype.getClientState=function(){return null},e.prototype.updateClientBag=function(e){var t=h(this._customControlProperties.propBagData.formattingData),n=this._customControlProperties.propBagData.clientData,o=I(this._customControlProperties.propBagData.utilsData);this.formFactor=n.formFactor||this.getFormFactor(),this.userAgent=n.userAgent,this.languageCode=n.languageCode?n.languageCode.toString():null,this.isRTL=this._xrmProxy.UserSettings.isRTL,this.locale=n.locale,this.orgSettings=n.orgSettingsData,this.dateFormattingInfo=t.dateTimeFormatInfo,this.numberFormattingInfo=t.numberFormatInfo,this.userTimeZoneUtcOffsetMinutes=t.timeZoneUtcOffsetMinutes,this.getUserTimeZoneUtcOffset=function(e){return t.timeZoneUtcOffsetMinutes+o.dateTimeUtils.getDSTAdjustmentMinutes(e,t.timeZoneAdjusters)},this.allocatedWidth=m.c(e.allocatedWidth)?-1:e.allocatedWidth,this.allocatedHeight=m.c(e.allocatedHeight)?-1:e.allocatedHeight,this.trackContainerResize=e.trackResize,this.setFullScreen=e.updateFullscreen,this.setFullscreen=e.updateFullscreen,this.ignoreSelfUpdates=e.ignoreUpdates,this.disableScroll=n.disableScroll||!1},e}(),T=function(){function e(e){if(this._customControlProperties=e,e.manifest&&null!==e.manifest.Properties.DataSetDefinitions)for(var t in e.manifest.Properties.DataSetDefinitions)e.manifest.Properties.DataSetDefinitions[t].Primary&&(this._paramKey=t)}return e.prototype.openEditForm=function(e,t,n,o,r){if(t)this._customControlProperties.propBagMethods.navigation.openEditForm(e,t,n,o,r);else{var i=e.entityName||e.LogicalName,a=e.id||e.Id&&e.Id.toString(),l=this._getRecordSetQueryFromProps(this._paramKey);s.default.openForm({entityName:i,entityId:a,recordSetQueryKey:l,processInstanceId:n,selectedStageId:o,isCrossEntityNavigate:r})}},e.prototype.openGridPage=function(e,t,n,o,r){this._customControlProperties.propBagMethods.navigation.openGridPage(e,t,n,null,o,r)},e.prototype.openGrid=function(e,t,n,o,r,i,a){this._customControlProperties.propBagMethods.navigation.openGridPage(e,t,n,o,r,i,a)},e.prototype.openDashboard=function(e){this._customControlProperties.propBagMethods.navigation.openDashboard(e)},e.prototype.openCreateForm=function(e,t,n){this._customControlProperties.propBagMethods.navigation.openCreateForm(e,t,n)},e.prototype.openForm=function(e,t){return e.recordSetQueryKey=this._getRecordSetQueryFromProps(this._paramKey),this._customControlProperties.parentDefinedControlProps&&this._customControlProperties.parentDefinedControlProps.propertyBagOverrides&&this._customControlProperties.parentDefinedControlProps.propertyBagOverrides.openForm?this._customControlProperties.parentDefinedControlProps.propertyBagOverrides.openForm(e,t):s.default.openForm(e,t)},e.prototype.openSearch=function(e){this._customControlProperties.propBagMethods.navigation.openSearch(e)},e.prototype.openPowerBIFullScreenPage=function(e,t,n,o,r,i,a){this._customControlProperties.propBagMethods.navigation.openPowerBIFullScreenPage(e,t,n,o,r,i,a)},e.prototype.openUrl=function(e,t){s.default.openUrl(e,t)},e.prototype.openUrlWithProtocol=function(e,t){this._customControlProperties.propBagMethods.navigation.openUrlWithProtocol(e,t)},e.prototype.openPhoneNumber=function(e,t,n,o,r){var i=n||this._customControlProperties.propBagData.modeData.entityTypeName,a=o||this._customControlProperties.propBagData.modeData.entityId,s=r||this._customControlProperties.propBagData.modeData.entityRecordName;this._customControlProperties.propBagMethods.navigation.openPhoneNumber(e,i,a,s,t)},e.prototype.openMaps=function(e){this._customControlProperties.propBagMethods.navigation.openMaps(e)},e.prototype.openMap=function(e){this._customControlProperties.propBagMethods.navigation.openMap(e)},e.prototype.openAlertDialog=function(e,t){return s.default.openAlertDialog(e,t)},e.prototype.openConfirmDialog=function(e,t){return s.default.openConfirmDialog(e,t)},e.prototype.openErrorDialog=function(e){return s.default.openErrorDialog(e)},e.prototype.openDialog=function(e,t,n){return s.default.openDialog(e,t,n)},e.prototype.openFile=function(e,t){return s.default.openFile(e,t)},e.prototype.openTaskFlow=function(e,t,n){return s.default.openTaskFlow(e,t,n)},e.prototype.openWebResource=function(e,t,n){s.default.openWebResource(e,t,n)},e.prototype._getRecordSetQueryFromProps=function(e){var t=e&&this._customControlProperties.dynamicData?this._customControlProperties.dynamicData.parameters[e]:null;return this._customControlProperties.actions&&this._customControlProperties.actions.getRecordSetQueryKey&&null!==t?this._customControlProperties.actions.getRecordSetQueryKey(t):null},e}(),F=function(){function e(e,t,n){this.hasFocus=!0,this.isPreview=!1,this.isActive=!1,this.isRead=!1,this._customControlProperties=e,this._descriptor=e?e.descriptor:null,this._modeData=e?e.propBagData.modeData:null,this._hostData=n,this.allocatedWidth=m.c(this._hostData.allocatedWidth)?-1:this._hostData.allocatedWidth,this.allocatedHeight=m.c(this._hostData.allocatedHeight)?-1:this._hostData.allocatedHeight,this.trackContainerResize=this._hostData.trackResize,this.setFullScreen=this._hostData.updateFullscreen,this.isControlDisabled=!!this._descriptor&&this._descriptor.Disabled,this.isVisible=!this._descriptor||this._descriptor.Visible,this.label=this._descriptor&&this._descriptor.ShowLabel?this._descriptor.Label:"",this.accessibilityLabel=this._descriptor?this._descriptor.ShowLabel?null:this._descriptor.Label:null,this.isOffline=this._modeData.isOffline,this.isRead=!!this._modeData.isRead,this.fullPageParam=e&&e.descriptor&&e.descriptor.FullPageParamers?e.descriptor.FullPageParamers:null,this.rowSpan=this._customControlProperties?this._customControlProperties.rowSpan:0,this.contextInfo={entityTypeName:this._modeData&&this._modeData.entityTypeName,entityId:this._modeData&&this._modeData.entityId,entityRecordName:this._modeData&&this._modeData.entityRecordName}}return e.prototype.setNotification=function(e,t){if(e&&e.trim().length>0&&this.isVisible&&!this.isControlDisabled&&this._customControlProperties.descriptor.parentFieldSectionItem){var n=this._customControlProperties.descriptor.parentFieldSectionItem;return this._customControlProperties.propBagMethods.mode.setNotification(e,t,this._customControlProperties.id,n,this._customControlProperties.contextToken,this._modeData.entityTypeName,this._modeData.entityId)}return!1},e.prototype.clearNotification=function(e){if(this._customControlProperties.descriptor.parentFieldSectionItem){var t=this._customControlProperties.descriptor.parentFieldSectionItem;return this._customControlProperties.propBagMethods.mode.clearNotification(this._customControlProperties.id,t,this._customControlProperties.contextToken,this._modeData.entityTypeName,this._modeData.entityId,e)}return!1},e.prototype.setControlState=function(e,t){var n=this._customControlProperties.personalizationConfiguration;if(n){if(t)return void(this._customControlProperties.manifest.CustomControlId&&this._customControlProperties.actions.setGlobalControlPersonalization(this._customControlProperties.manifest.CustomControlId,e));"form"===n.areaType&&this._customControlProperties.actions.setFieldControlPersonalization(n,e),"grid"===n.areaType&&this._customControlProperties.actions.setGridControlPersonalization(n,e),"dashboard"===n.areaType&&this._customControlProperties.actions.setDashboardControlPersonalization(n,e)}return this._customControlProperties.propBagMethods.utils.setState(e)},e.prototype.blur=function(){},e.prototype.focus=function(){},e}(),x=function(){function e(e){this._bagProps=e.propBagMethods.device}return e.prototype.captureImage=function(e){return s.default.captureImage(e)},e.prototype.captureAudio=function(){return s.default.captureAudio()},e.prototype.captureVideo=function(){return s.default.captureVideo()},e.prototype.pickFile=function(e){return s.default.pickFile(e)},e.prototype.getBarcodeValue=function(){return s.default.getBarcodeValue()},e.prototype.getCurrentPosition=function(){return s.default.getCurrentPosition()},e.prototype.isGetBarcodeValueOperationAvailable=function(){return this._bagProps.isGetBarcodeValueOperationAvailable()},e.prototype.isTakePictureOperationAvailable=function(){return this._bagProps.isTakePictureOperationAvailable()},e.prototype.isCaptureVideoOperationAvailable=function(){return this._bagProps.isCaptureVideoOperationAvailable()},e.prototype.isCaptureAudioOperationAvailable=function(){return this._bagProps.isCaptureAudioOperationAvailable()},e.prototype.getDeclaredFeatures=function(){return{unspecifiedFeatureFallback:{supportStatus:"supported"},featureList:{captureImage:{supportStatus:this.isTakePictureOperationAvailable&&this.isTakePictureOperationAvailable()?"supported":"unsupported"},captureAudio:{supportStatus:this.isCaptureAudioOperationAvailable&&this.isCaptureAudioOperationAvailable()?"supported":"unsupported"},captureVideo:{supportStatus:this.isCaptureVideoOperationAvailable&&this.isCaptureVideoOperationAvailable()?"supported":"unsupported"},getBarcodeValue:{supportStatus:this.isGetBarcodeValueOperationAvailable&&this.isGetBarcodeValueOperationAvailable()?"supported":"unsupported"},getCurrentPosition:{supportStatus:"supported"},pickFile:{supportStatus:"supported"}}}},e.prototype.getFeatureClassName=function(){return"Device"},e}(),M=function(){function e(){}return e.prototype.getAvailableExternalContexts=function(){return s.default.getAvailableExternalContexts()},e.prototype.getExternalContextProperty=function(e,t,n){return s.default.getExternalContextProperty(e,t,n)},e.prototype.invokeExternalContextAction=function(e,t,n){return s.default.invokeExternalContextAction(e,t,n)},e.prototype.removeExternalContextPropertyListener=function(e,t,n){return s.default.removeExternalContextPropertyListener(e,t,n)},e}(),A=function(){function e(e){this.getPresenceMappedField=e.actions.getPresenceMappedField,this.isPresenceEnabled=e.actions.isPresenceEnabledEntity}return e.prototype.getPresenceMappedField=function(e){return null},e.prototype.isPresenceEnabled=function(e){return null},e}(),k=function(){function e(e){this._themingData=e.propBagData.themingData,this.normalfontcolor=this._themingData.defaultThemingData.normalfontcolor,this.normalfontfamily=this._themingData.defaultThemingData.normalfontfamily,this.normalfontsize=this._themingData.defaultThemingData.normalfontsize,this.solidborderstyle=this._themingData.defaultThemingData.solidborderstyle,this.noneborderstyle=this._themingData.defaultThemingData.noneborderstyle,this.colors=this._themingData.defaultThemingData.colors,this.textbox=this._themingData.defaultThemingData.textbox,this.spacings=this._themingData.defaultThemingData.spacings,this.fontfamilies=this._themingData.defaultThemingData.fontfamilies,this.fontsizes=this._themingData.defaultThemingData.fontsizes,this.breakpoints=this._themingData.defaultThemingData.breakpoints,this.measures=this._themingData.defaultThemingData.measures,this.lookup=this._themingData.defaultThemingData.lookup,this.borders=this._themingData.defaultThemingData.borders,this.shadows=this._themingData.defaultThemingData.shadows,this.buttons=this._themingData.defaultThemingData.buttons}return e.prototype.getEntityColor=function(e){return this._themingData.getEntityColor?this._themingData.getEntityColor(e):""},e.prototype.disableUiTransitions=function(){},e.prototype.rightAlignEdit=function(){},e.prototype.inlineLayout=function(){},e}(),R=function(){function e(e){this._manifest=e.manifest,this._getResource=e.actions.getResource,this._bagPropsResource=e.propBagData.resourcesData}return e.prototype.getString=function(e){return e&&this._bagPropsResource&&this._bagPropsResource.strings[e]?this._bagPropsResource.strings[e]:e},e.prototype.getResource=function(e,t,n){var o=this._manifest.Properties.Resources.filter(function(t){if(t)return t.Name.endsWith(e)})[0];o?this._getResource(o).then(function(e){t(e)},function(){n()}):n()},e}(),L=function(){function e(e){this._customControlProperties=e,this.assignedTabIndex=Object(a.c)(this._customControlProperties),this._accessibilityInternalData={keyboardShortcuts:[]},this.isHighContrastEnabled=Object(a.h)()}return e.prototype.registerShortcut=function(e,t,n,o,r,i){var a=this._customControlProperties.actions.createKeyboardShortcut(e,t,n,o,r,i);this._accessibilityInternalData.keyboardShortcuts.push(a)},e.prototype.getUniqueId=function(e){return Object(a.e)(this._customControlProperties,e)},e.prototype.focusElementById=function(e,t){Object(a.g)(this._customControlProperties,e,t)},e.prototype.blurElementById=function(e,t){Object(a.a)(this._customControlProperties,e,t)},Object.defineProperty(e.prototype,"accessibilityInternalData",{get:function(){return this._accessibilityInternalData},set:function(e){this._accessibilityInternalData=e},enumerable:!0,configurable:!0}),e}(),N=function(){function e(){}return e.prototype.retrieveRecord=function(e,t,n){return s.default.retrieveRecord(e,t,n)},e.prototype.createRecord=function(e,t){return s.default.createRecord(e,t)},e.prototype.updateRecord=function(e,t,n){return s.default.updateRecord(e,t,n)},e.prototype.deleteRecord=function(e,t){return s.default.deleteRecord(e,t)},e.prototype.retrieveMultipleRecords=function(e,t,n){return s.default.retrieveMultipleRecords(e,t,n)},e.prototype.execute=function(e){return s.default.execute(e)},e.prototype.executeMultiple=function(e){return s.default.executeMultiple(e)},e.prototype.getDeclaredFeatures=function(){return{unspecifiedFeatureFallback:{supportStatus:"supported"}}},e.prototype.getFeatureClassName=function(){return"WebAPI"},e}(),U=function(){function e(e,t){this.updateBag(e),this.getClientUrl=function(){return t.xrmProxy.Page.getClientUrl()}}return e.prototype.updateBag=function(e){var t=e.propBagData.pageData,n=e.propBagData.modeData;this.appId=t.appId,this.entityTypeName=n.entityTypeName,this.entityId=n.entityId,this.isPageReadOnly=t.isPageReadOnly},e}(),B="1.1",j="^(\\d+)?\\.?(\\d+)?\\.?(\\d+)?$";function W(e,t,n){if(e&&t&&t.ApiVersion&&!(K(t.ApiVersion,B)<0)&&e.getDeclaredFeatures&&e.getFeatureClassName){var o=e.getDeclaredFeatures();if(o)for(var r=t.Properties&&t.Properties.FeatureUsage,i=function(e){var t=r&&r.find(function(t){return t.Name.toLowerCase()===e.toLowerCase()});return t?t.IsRequired?"required":"optional":"unspecified"},a=e.getFeatureClassName(),s=i(a),l=0,c=function(e){return Reflect.ownKeys(Reflect.getPrototypeOf(e)).filter(function(e){return"string"==typeof e&&!e.startsWith("_")&&"constructor"!==e}).map(function(e){return e})}(e).filter(function(e){return!o.featureList||o.featureList[e]}).map(function(e){return{name:e,featureState:o.featureList?i(a+"."+e):s,versionStatus:V(o,e,t.ApiVersion)}});l<c.length;l++){var u=c[l],p=o.featureList&&o.featureList[u.name],d=p&&p.supportStatus||o.unspecifiedFeatureFallback&&o.unspecifiedFeatureFallback.supportStatus||"unsupported";H(e,u.name,u.featureState,u.versionStatus,d,n)}}}function V(e,t,n){var o=e.featureList&&e.featureList[t]||e.unspecifiedFeatureFallback;if(!o||!o.minApiVersion&&!o.maxApiVersion)return"implemented";var r=o.minApiVersion&&K(n,o.minApiVersion),i=o.maxApiVersion&&K(n,o.maxApiVersion);if(void 0!==r){if(isNaN(r))return"unknown";if(r<0)return"notimplemented"}if(void 0!==i){if(isNaN(i))return"unknown";if(i>0)return"deprecated"}return"implemented"}function H(e,t,n,o,r,i){"unknown"===o||("deprecated"===o?e[t]=function(){throw new Error("Feature has been deprecated")}:"notimplemented"===o?e[t]=function(){throw new Error("Feature not implemented in this version")}:"unspecified"===n?e[t]=i?function(){throw new Error("API not declared")}:null:"required"===n&&"unsupported"===r?e[t]=function(){throw new Error("Required method not supported on device")}:"optional"===n&&"unsupported"===r&&(e[t]=null))}function K(e,t){var n=t.match(j),o=e.match(j);if(!n||!o)return Number.NaN;for(var r=1;r<4;r++){var i=n.length>r&&parseInt(n[r],10)||0,a=o.length>r&&parseInt(o[r],10)||0;if(a-i!=0)return Math.min(Math.max(a-i,-1),1)}return 0}var z=function(){function e(e,t,n){this._customControlProperties=e,this._externalUtils=t,this._hostData=n}return e.prototype.getInstance=function(e){var t=new e(this._customControlProperties,this._externalUtils,this._hostData);return t instanceof Object&&void 0!==t.getDeclaredFeatures&&this._modifyDeclaredFunctions(t),t},e.prototype._modifyDeclaredFunctions=function(e){W(e,this._customControlProperties.manifest)},e}(),G={base:{font:{landing_48_600:'600 48px "Segoe UI", "-apple-system", BlinkMacSystemFont, Roboto, "Helvetica Neue", Helvetica, Ubuntu, Arial, sans-serif',subheader_34_600:'600 34px "Segoe UI", "-apple-system", BlinkMacSystemFont, Roboto, "Helvetica Neue", Helvetica, Ubuntu, Arial, sans-serif',pageheader_24_600:'600 24px "Segoe UI", "-apple-system", BlinkMacSystemFont, Roboto, "Helvetica Neue", Helvetica, Ubuntu, Arial, sans-serif',sectiontitle_20_600:'600 20px "Segoe UI", "-apple-system", BlinkMacSystemFont, Roboto, "Helvetica Neue", Helvetica, Ubuntu, Arial, sans-serif',smalltitle_16_600:'600 16px "Segoe UI", "-apple-system", BlinkMacSystemFont, Roboto, "Helvetica Neue", Helvetica, Ubuntu, Arial, sans-serif',lrgbody_16_400:'400 16px "Segoe UI", "-apple-system", BlinkMacSystemFont, Roboto, "Helvetica Neue", Helvetica, Ubuntu, Arial, sans-serif',body_14_600:'600 14px "Segoe UI", "-apple-system", BlinkMacSystemFont, Roboto, "Helvetica Neue", Helvetica, Ubuntu, Arial, sans-serif',body_14_400:'400 14px "Segoe UI", "-apple-system", BlinkMacSystemFont, Roboto, "Helvetica Neue", Helvetica, Ubuntu, Arial, sans-serif',cap_12_600:'600 12px "Segoe UI", "-apple-system", BlinkMacSystemFont, Roboto, "Helvetica Neue", Helvetica, Ubuntu, Arial, sans-serif',cap_12_400:'400 12px "Segoe UI", "-apple-system", BlinkMacSystemFont, Roboto, "Helvetica Neue", Helvetica, Ubuntu, Arial, sans-serif',button_14_600:'600 14px "Segoe UI", "-apple-system", BlinkMacSystemFont, Roboto, "Helvetica Neue", Helvetica, Ubuntu, Arial, sans-serif'},font_size:{px12:"12px",px14:"14px",px16:"16px",px20:"20px",px24:"24px",px34:"34px",px48:"48px"},font_weight:{semibold:"600",normal:"400"},font_family:{segoe_ui:'"Segoe UI", "-apple-system", BlinkMacSystemFont, Roboto, "Helvetica Neue", Helvetica, Ubuntu, Arial, sans-serif'},box_shadow:{box_shadow_1:"0px 0.3px 0.9px rgba(0, 0, 0, 0.108), 0px 1.6px 3.6px rgba(0, 0, 0, 0.132)",box_shadow_2:"0px 0.6px 1.8px rgba(0, 0, 0, 0.108), 0px 3.2px 7.2px rgba(0, 0, 0, 0.132)",box_shadow_3:"0px 1.2px 3.6px rgba(0, 0, 0, 0.108), 0px 6.4px 14.4px rgba(0, 0, 0, 0.132)",box_shadow_4:"0px 4.8px 14.4px rgba(0, 0, 0, 0.18), 0px 25.6px 57.6px rgba(0, 0, 0, 0.22)"},color:{grey_10:"#F8F8F9",grey_20:"#F1F2F4",grey_30:"#E8EAEC",grey_40:"#D8DADE",grey_50:"#CED0D4",grey_60:"#C6C8CC",grey_90:"#A4A6AC",grey_130:"#6E6F77",grey_150:"#3A3C42",grey_160:"#31333A",grey_190:"#1F2126"}},control:{button:{border_radius:"2px",border:"none",box_shadow:"0px 2px 4px rgba(0, 0, 0, 0.14)",font:'600 14px/20px "Segoe UI", "-apple-system", BlinkMacSystemFont, Roboto, "Helvetica Neue", Helvetica, Ubuntu, Arial, sans-serif',height:"32px",min_width:"100px",padding:"0 20px",_disabled:{background_color:"#E8EAEC",text_color:"#A4A6AD"},_enabled:{cursor:"pointer",_hover:{box_shadow:"0px 1.2px 3.6px rgba(0, 0, 0, 0.12), 0px 6.4px 7.2px rgba(0, 0, 0, 0.1)"},_primary:{text_color:"white",background_color:"#2266E3",_hover:{text_color:"#2266E3",background_color:"white"}},_secondary:{text_color:"#2266E3",background_color:"white",_hover:{text_color:"white",background_color:"#2266E3"}}}},label:{font:'600 12px/16px "Segoe UI", "-apple-system", BlinkMacSystemFont, Roboto, "Helvetica Neue", Helvetica, Ubuntu, Arial, sans-serif',text_color:"#6E6F77",_required:{asterisk_color:"#A80000"}},text_input:{box_sizing:"border-box",font:'400 14px/20px "Segoe UI", "-apple-system", BlinkMacSystemFont, Roboto, "Helvetica Neue", Helvetica, Ubuntu, Arial, sans-serif',height:"32px",border_radius:"2px 2px 0 0",padding:"6px",border_width:"0 0 1px 0",border_color:"#A4A6AC",_disabled:{text_color:"#A4A6AD",background_color:"#E8EAEC"},_enabled:{text_color:"#1F2126",background_color:"transparent",_valid:{_hover:{border_color:"#2266E3"},_focus:{border_color:"#2266E3"}},_invalid:{border_color:"#A80000"}}},form_field:{text_input_to_label_margin_top:"4px"}}},q=new(function(){function e(){this._map={}}return e.prototype.GetThemeData=function(e,t){t||(t=G);var n=e.ConstructorName;if(this._map.hasOwnProperty(n))return this._map[n];if(!e.DesignMap||!e.DesignMap.DesignMap)return{};var o={};for(var r in e.DesignMap.DesignMap){for(var i=e.DesignMap.DesignMap[r],a=i.split("."),s=t,l=0;l<a.length;l++){if(!s){s=i;break}s=s[a[l]]}o[r]=s||i}return this._map[n]=o,o},e}());n.d(t,"a",function(){return Y});var Y=function(){function e(e,t){this._accessibilityInternalData={keyboardShortcuts:[]};var n=new z(e,t),o=i.a.createPerformanceEvent("PropertyBag.constructor",e.logLevel).startStopwatch({controlId:e.controlId,manifestControlName:e.manifest.CustomControlId,parentId:Object(a.i)(e),level:(0).toString()});this._bagObject={formatting:n.getInstance(f),factory:n.getInstance(b),navigation:n.getInstance(T),reporting:n.getInstance(u),diagnostics:n.getInstance(g),resources:n.getInstance(R),theming:n.getInstance(k),design:q.GetThemeData(e.manifest,e.designLanguage),performance:n.getInstance(w),utils:n.getInstance(P),orgSettings:n.getInstance(S),userSettings:n.getInstance(O),offline:t.xrmProxy.Offline,learningPath:null,page:n.getInstance(U),webAPI:null,intelligenceApi:null,client:n.getInstance(D),parameters:{labelForPrefix:{type:"",raw:e.descriptor.DomId+"-"+e.descriptor.Id+"-"+e.descriptor.Id,error:!1,errorMessage:"",security:null}},mode:null,accessibility:null,updatedProperties:[],device:n.getInstance(x),externalContext:n.getInstance(M),communicationChannel:null},o()}return e.prototype.generateBag=function(e,t){var n=new z(e,null,t),o=i.a.createPerformanceEvent("PropertyBag.generateBag",e.logLevel).startStopwatch({controlId:e.controlId,manifestControlName:e.manifest.CustomControlId,parentId:Object(a.i)(e),level:1..toString()});return this._bagObject.accessibility=n.getInstance(L),this._bagObject.mode=n.getInstance(F),this._bagObject.parameters=this._updateLatestParameters(e),this._bagObject.children=this._getChildren(e.children),this._bagObject.resources=n.getInstance(R),this._bagObject.webAPI=n.getInstance(N),this._bagObject.intelligenceApi=n.getInstance(_),this._bagObject.offline=s.default.Offline,this._bagObject.learningPath=this._getLearningPathBag(e),this._bagObject.updatedProperties=this._getUpdatedPropertiesBag(e,t),this._bagObject.communicationChannel=n.getInstance(A),this._bagObject.decorators=null!=e.parentDefinedControlProps?e.parentDefinedControlProps.decorators:null,this._accessibilityInternalData=this._bagObject.accessibility.accessibilityInternalData,this._bagObject.client.updateClientBag(t),null!=e.propBagData.pageData&&this._bagObject.page.updateBag(e),o(),this._bagObject.utils.setNotification=this._bagObject.mode.setNotification.bind(this._bagObject.mode),this._bagObject.utils.clearNotification=this._bagObject.mode.clearNotification.bind(this._bagObject.mode),this._bagObject},e.prototype._getChildren=function(e){if(this._memoizedChildrenRaw!==e){this._memoizedChildrenRaw=e;var t={};for(var n in this._memoizedChildrenRaw){var o=this._memoizedChildrenRaw[n];t[n]=new r(o.CustomControlId,n,{parameters:o.Parameters},null)}this._memoizedChildrenConverted=t}return this._memoizedChildrenConverted},e.prototype._updateLatestParameters=function(e){var t={labelForPrefix:this._bagObject.parameters.labelForPrefix};e.dynamicData.generateDummySystemProps&&Object.assign(t,{deviceSizeMode:{Usage:1,Static:!0,Type:"WholeNumber.None",Value:0,Primary:!1},viewportSizeMode:{Usage:1,Static:!0,Type:"WholeNumber.None",Value:0,Primary:!1},scope:{Usage:1,Static:!0,Type:"WholeNumber.None",Value:1,Primary:!1},syncError:{Usage:1,Static:!0,Type:"TwoOptions",Value:!1,Primary:!1},isEmpty:{Usage:1,Static:!0,Type:"TwoOptions",Value:!1,Primary:!1}});var n=e.dynamicData&&e.dynamicData.parameters,o=function(o){var r=n[o];if(r&&r.attributes&&r.attributes.SourceType&&2===r.attributes.SourceType){var i=e.propBagData.modeData.entityTypeName,s=e.propBagData.modeData.entityId,c=r.attributes.LogicalName;r.attributes.recalculate=function(){e.actions.executeRollupRequest({entityType:i,id:s},c,e.id)}}if(n[o]&&n[o].getLatestData){var u=n[o],p=u.getLatestData();if(u&&u.ensureLookupMetaDataInitialization){if(!(e.descriptor.Parameters&&e.descriptor.Parameters.delayMetadataInitialization))u.ensureLookupMetaDataInitialization({retrieveLookupMetadataAction:e.actions.retrieveLookupMetadataAction,refreshDataSetParameter:e.actions.refreshDataSetParameter})}u.linkToParameter(p,{retrieveAction:e.actions.retrieveLookupData,retrieveViewAction:e.actions.retrieveView,retrieveViewSelectorAction:e.actions.retrieveViewSelector,retrieveLookupMetadataAction:e.actions.retrieveLookupMetadataAction,retrieveRecordDataForForm:e.actions.retrieveRecordDataForForm,updateFieldValue:e.actions.updateFieldValue,saveEmbeddedEntity:e.actions.saveEmbeddedEntity,refreshDataSetParameter:e.actions.refreshDataSetParameter,retrieveDataSetLookupCellParameter:e.actions.retrieveDataSetLookupCellParameter,executeAddOnLoad:e.actions.executeAddOnLoad,setPowerBISignedInState:e.actions.setPowerBISignedInState,beginSecureSessionForResource:e.actions.beginSecureSessionForResource,executeNotifyHandlersThatEventOccurred:e.actions.executeNotifyHandlersThatEventOccurred,addSessionTab:e.actions.addSessionTab,closeSessionTab:e.actions.closeSessionTab,updateSessionTab:e.actions.updateSessionTab,closeAllSessionTabs:e.actions.closeAllSessionTabs,dismissMessage:e.actions.dismissMessage,markActiveTab:e.actions.markActiveTab,initializeReferencePanelControl:e.actions.initializeReferencePanelControl,cleanReferencePanelState:e.actions.cleanReferencePanelState,openDatasetItem:a.m.bind(null,e,p,o),updateControlMemoizedDataSet:e.actions.updateControlMemoizedDataSet,executeRollupRequest:e.actions.executeRollupRequest,loadWebResource:e.actions.loadWebResource,updateChartFilterExpression:e.actions.updateChartFilterExpression,sendLookupRequest:e.actions.sendLookupRequest,runPreSearch:e.actions.runPreSearch});var d=u;if(d.applyDataSetInputs){var h=d.applyDataSetInputs(p),f=p;if(0!==h)switch(h){case 1:f.refresh&&f.refresh();break;case 2:f.paging&&f.paging.hasNextPage&&f.paging.loadNextPage&&f.paging.loadNextPage();break;case 3:f.paging&&f.paging.hasPreviousPage&&f.paging.loadPreviousPage&&f.paging.loadPreviousPage();break;case 6:var m=n[o]&&n[o]._wrapper&&n[o]._wrapper.previousAppliedSubParametersInput.pagingInput?n[o]._wrapper.previousAppliedSubParametersInput.pagingInput.raw:null,y=m?JSON.parse(m).firstPageNumber:null;f.paging&&f.paging.loadExactPage&&f.paging.loadExactPage(y)}}var b=l.a.getWrapperByCommandManagerId(e.id+":"+e.controlId);b&&p.getTargetEntityType&&b.linkParameterMethod(p),t[o]=p}else t[o]=n[o]};for(var r in n)o(r);return t},e.prototype.getAccessibilityData=function(){return this._accessibilityInternalData},e.prototype.getLearningPathBag=function(){return this._bagObject.learningPath},e.prototype.getCommunicationBag=function(){return this._bagObject.communicationChannel},e.prototype._getLearningPathBag=function(e){var t=c.a.getLearningPathControlId(e);return{DOMAttributeName:c.a.LEARNING_PATH_ATTRIBUTE,baseControlId:t}},e.prototype._getUpdatedPropertiesBag=function(e,t){var n=[];for(var o in t&&t.updatedProperties&&(n=t.updatedProperties),e.dynamicData.parameters)if(e.dynamicData.parameters[o]&&e.dynamicData.parameters[o].getUpdatedPropertiesDic){var r=e.dynamicData.parameters[o].getUpdatedPropertiesDic();for(var i in r)r[i]&&-1===n.indexOf(i)&&n.push(i);e.dynamicData.parameters[o].clearUpdatedPropertiesDic&&e.dynamicData.parameters[o].clearUpdatedPropertiesDic()}return n},e}()},function(e,t,n){"use strict";var o=function(){function e(){}return e._outerOutKeyframeGen=function(e){var t,n=e.endHeight/e.startHeight,o=e.endWidth/e.startWidth;return(t={})["0%"]={left:e.startLeft+"px",top:e.startTop+"px",transform:"scaleX(1) scaleY(1)"},t["25%"]={left:e.startLeft+"px",top:e.startTop+"px",transform:"scaleX(1) scaleY(1)"},t["65%"]={left:e.endLeft+"px",top:e.endTop+"px",transform:"scaleX(1) scaleY(1)"},t["70%"]={left:e.endLeft+"px",top:e.endTop+"px",transform:"scaleX(1) scaleY("+n+")"},t["75%"]={left:e.endLeft+"px",top:e.endTop+"px",transform:"scaleX("+o+") scaleY("+n+")"},t["100%"]={left:e.endLeft+"px",top:e.endTop+"px",transform:"scaleX("+o+") scaleY("+n+")"},t},e._outerInKeyframeGen=function(e){var t,n=e.endHeight/e.startHeight,o=e.endWidth/e.startWidth;return(t={})["100%"]={left:e.startLeft+"px",top:e.startTop+"px",transform:"scaleX(1) scaleY(1)"},t["75%"]={left:e.startLeft+"px",top:e.startTop+"px",transform:"scaleX(1) scaleY(1)"},t["35%"]={left:e.endLeft+"px",top:e.endTop+"px",transform:"scaleX(1) scaleY(1)"},t["30%"]={left:e.endLeft+"px",top:e.endTop+"px",transform:"scaleX(1) scaleY("+n+")"},t["25%"]={left:e.endLeft+"px",top:e.endTop+"px",transform:"scaleX("+o+") scaleY("+n+")"},t["0%"]={left:e.endLeft+"px",top:e.endTop+"px",transform:"scaleX("+o+") scaleY("+n+")"},t},e.generateOuterClass=function(t,n,o){var r={animationDuration:"1.5s",animationFillMode:"forwards",animationDirection:"normal",animationIterationCount:"1",animationName:"",position:"fixed",display:"initial",height:o.startHeight+"px",width:o.startWidth+"px",overflow:"hidden",backgroundColor:"#FFFFFF",transform:"",left:"",top:"",zIndex:1},i=o.endHeight/o.startHeight,a=o.endWidth/o.startWidth;switch(n){case 0:r.animationName=t.renderKeyframe(e._outerOutKeyframeGen,o);break;case 1:case 2:r.left=o.endLeft+"px",r.top=o.endTop+"px",r.transform="scaleX("+a+") scaleY("+i+")";break;case 3:r.animationName=t.renderKeyframe(e._outerInKeyframeGen,o);break;case 4:case-1:return null}return r},e}(),r=function(){function e(){}return e._innerOutKeyframeGen=function(e){var t;return(t={})["0%"]={opacity:1,height:e.startHeight+"px",width:e.startWidth+"px",transform:"scaleX(1) scaleY(1)",marginTop:"0px",marginLeft:"0px",marginRight:"0px",paddingTop:"0px"},t["25%"]={opacity:0,height:e.startHeight+"px",width:e.startWidth+"px",transform:"scaleX(1) scaleY(1)",marginTop:"0px",marginLeft:"0px",marginRight:"0px",paddingTop:"0px"},t["30%"]={opacity:0,height:e.endHeightInner+"px",width:e.endWidthInner+"px",transform:"scaleX(1) scaleY(1)",marginTop:"0px",marginLeft:"0px",marginRight:"0px",paddingTop:"0px"},t["40%"]={opacity:0,height:e.endHeightInner+"px",width:e.endWidthInner+"px",transform:"scaleX("+e.transX+") scaleY("+e.transY+")",marginTop:e.margTop+"px",marginLeft:e.isRTL?"0px":e.margLeft+"px",marginRight:e.isRTL?e.margLeft+"px":"0px",paddingTop:e.padTop},t["100%"]={opacity:0,height:e.endHeightInner+"px",width:e.endWidthInner+"px",transform:"scaleX("+e.transX+") scaleY("+e.transY+")",marginTop:e.margTop+"px",marginLeft:e.isRTL?"0px":e.margLeft+"px",marginRight:e.isRTL?e.margLeft+"px":"0px",paddingTop:e.padTop},t},e._innerInKeyframeGen=function(e){var t;return(t={})["0%"]={opacity:1,height:e.endHeightInner+"px",width:e.endWidthInner+"px",transform:"scaleX("+e.transX+") scaleY("+e.transY+")",marginTop:e.margTop+"px",marginLeft:e.isRTL?"0px":e.margLeft+"px",marginRight:e.isRTL?e.margLeft+"px":"0px",paddingTop:e.padTop},t["25%"]={opacity:0,height:e.endHeightInner+"px",width:e.endWidthInner+"px",transform:"scaleX("+e.transX+") scaleY("+e.transY+")",marginTop:e.margTop+"px",marginLeft:e.isRTL?"0px":e.margLeft+"px",marginRight:e.isRTL?e.margLeft+"px":"0px",paddingTop:e.padTop},t["60%"]={opacity:0,height:e.endHeightInner+"px",width:e.endWidthInner+"px",transform:"scaleX("+e.transX+") scaleY("+e.transY+")",marginTop:e.margTop+"px",marginLeft:e.isRTL?"0px":e.margLeft+"px",marginRight:e.isRTL?e.margLeft+"px":"0px",paddingTop:e.padTop},t["70%"]={opacity:0,height:e.endHeightInner+"px",width:e.endWidthInner+"px",transform:"scaleX(1) scaleY(1)",marginTop:"0px",marginLeft:"0px",marginRight:"0px",paddingTop:"0px"},t["75%"]={opacity:0,height:e.startHeight+"px",width:e.startWidth+"px",transform:"scaleX(1) scaleY(1)",marginTop:"0px",marginLeft:"0px",marginRight:"0px",paddingTop:"0px"},t["100%"]={opacity:0,height:e.startHeight+"px",width:e.startWidth+"px",transform:"scaleX(1) scaleY(1)",marginTop:"0px",marginLeft:"0px",marginRight:"0px",paddingTop:"0px"},t},e._fadeInAnimation=function(){var e;return(e={})["0%"]={opacity:0},e["100%"]={opacity:1},e},e._isIE=function(){return!!window.navigator.userAgent.match("MSIE")||!!window.navigator.userAgent.match("Trident")},e.generateInnerClass=function(t,n,o){var r={animationFillMode:"forwards",animationDirection:"normal",animationIterationCount:"1",display:"block",backgroundColor:"#FFFFFF",opacity:"",height:"",width:"",transform:"",marginTop:"",marginLeft:"",marginRight:"",paddingTop:"",animationName:"",animationDuration:"",webkitBackfaceVisibility:"hidden",backfaceVisibility:"hidden",position:""},i=o.startHeight/o.endHeight,a=o.startWidth/o.endWidth,s=-1*(o.endWidthInner-o.startWidth)/2,l=-1*(o.endHeightInner-o.startHeight)/2,c="";l!==Math.floor(l)&&(l=Math.floor(l),c="1px"),s!==Math.floor(s)&&(s=Math.floor(s));var u=Object.assign({},o,{margLeft:s,margTop:l,padTop:c,transX:a,transY:i});switch(n){case 0:r.animationName=t.renderKeyframe(e._innerOutKeyframeGen,u),r.animationDuration="1.4s";break;case 1:r.animationName=t.renderKeyframe(e._fadeInAnimation,u),r.animationDuration=".5s",r.height=o.endHeightInner+"px",r.width=o.endWidthInner+"px",r.transform="scaleX("+a+") scaleY("+i+")",r.marginTop=l+"px",r.paddingTop=c,r.marginLeft=o.isRTL?"0px":s+"px",r.marginRight=o.isRTL?s+"px":"0px",r.position=e._isIE()?"":"fixed";break;case 2:r.height=o.endHeightInner+"px",r.width=o.endWidthInner+"px",r.transform="scaleX("+a+") scaleY("+i+")",r.marginTop=l+"px",r.marginLeft=o.isRTL?"0px":s+"px",r.marginRight=o.isRTL?s+"px":"0px",r.opacity="1",r.position=e._isIE()?"":"fixed";break;case 3:r.animationName=t.renderKeyframe(e._innerInKeyframeGen,u),r.animationDuration="1.4s";break;case 4:r.animationDuration=".5s",r.width="100%",r.animationName=t.renderKeyframe(e._fadeInAnimation,u)}return r},e}(),i=function(){function e(){}return e._shadowOutKeyframeGen=function(){var e;return(e={})["0%"]={opacity:0},e["75%"]={opacity:.5},e["100%"]={opacity:.5},e},e._shadowInKeyframeGen=function(){var e;return(e={})["0%"]={opacity:.5},e["25%"]={opacity:.5},e["100%"]={opacity:0},e},e.generateFancyShadowInAnimationName=function(t){return e._shadowOutAnimationName||(e._shadowOutAnimationName=t.renderKeyframe(e._shadowOutKeyframeGen,null)),e._shadowOutAnimationName},e.generateFancyShadowOutAnimationName=function(t){return e._shadowInAnimationName||(e._shadowInAnimationName=t.renderKeyframe(e._shadowInKeyframeGen,null)),e._shadowInAnimationName},e.generateShadowClass=function(t,n){var o={width:"100%",height:"100%",top:"0px",left:"0px",backgroundColor:"#000000",position:"fixed",animationDuration:"2s",animationFillMode:"forwards",animationDirection:"normal",animationIterationCount:"1",zIndex:"1",animationName:null,opacity:null};switch(n){case 0:o.animationName=e.generateFancyShadowInAnimationName(t);break;case 1:case 2:o.opacity=".5";break;case 3:o.animationName=e.generateFancyShadowOutAnimationName(t);break;case 4:case-1:return{display:"none"}}return o},e._shadowOutAnimationName=null,e._shadowInAnimationName=null,e}();n.d(t,"a",function(){return a});var a=function(){function e(){}return e.getCustomControlFancyPopoutStyles=function(e,t,n){return{shadowStyle:i.generateShadowClass(e,t),outerStyle:o.generateOuterClass(e,t,n),innerStyle:r.generateInnerClass(e,t,n)}},e}()},function(e,t,n){"use strict";n.r(t);var o=n(0),r=n(10),i=n.n(r),a=n(135),s=n(39),l=n(18);n(300);var c=navigator.languages&&navigator.languages.length?navigator.languages[0]:navigator.userLanguage||navigator.language||navigator.browserLanguage||"en";c?console.log("Detected preferred language: ".concat(c)):(console.log("No preferred language detected: defaulting to en"),c="en"),Object(l.configureLocale)({directory:"./loc",diagnosticFileName:"diagnosticMessages.localized.json",locale:c,runtime:"browser"}).then(function(){document.documentElement.setAttribute("lang",c);var e=document.getElementById("app-root");i.a.render(o.createElement(a.ControlHarness,{resourceLoader:s}),e)}).catch(function(e){console.log(e)})},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__assign||function(){return(i=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var a,s=n(0),l=n(148),c=n(39),u=n(74),p=n(217),d=n(18),h=n(21),f=n(2),m=n(46);!function(e){e[e.LOADING=0]="LOADING",e[e.LOADED=1]="LOADED",e[e.UNLOADED=2]="UNLOADED"}(a||(a={}));var y=function(e){function t(t){var n=e.call(this,t)||this;n.state={loadStatus:a.UNLOADED};var o=f.default;return o.Client.getFormFactor=function(){return n.props.contextInputs[m.constants.formFactor]},u.InitializeXrm(o),n.updateOutputs=n.updateOutputs.bind(n),n}return r(t,e),t.prototype.componentDidMount=function(){this.props.controlMetadata.Resources&&this.state.loadStatus===a.UNLOADED?(this.setState({loadStatus:a.LOADING}),this.processResources(),this.setMaximumContainerDim()):this.props.controlMetadata.Resources||this.state.loadStatus!==a.UNLOADED||this.setState({loadStatus:a.LOADED})},t.prototype.render=function(){if(this.state.loadStatus!==a.LOADED)return s.createElement("div",{className:"control-pane"},d.translate(h.strings.loading_control.key));var e=this.props.contextInputs[m.constants.controlContainerWidth],t=this.props.contextInputs[m.constants.controlContainerHeight],n=p.createWebClientWrapperProps(this.props.controlMetadata,this.props.contextInputs,this.props.controlInputs,this.updateOutputs);return s.createElement("div",{className:"control-pane"},s.createElement("div",{className:"control-container",style:{width:e,height:t}},s.createElement(l.CustomControlWebClientWrapper,i({},n))))},t.prototype.processResources=function(){var e=this;return c.ProcessResourcesInOrder(this.props.controlMetadata.Resources,c.loadResourceFile).then(function(){e.setState({loadStatus:a.LOADED})},function(t){e.props.onLoadingError(t)})},t.prototype.setMaximumContainerDim=function(){var e=document.getElementsByClassName("control-pane"),t=window.getComputedStyle(e[0]),n=parseInt(t.getPropertyValue("width"),10)-parseInt(t.getPropertyValue("padding-left"),10)-parseInt(t.getPropertyValue("padding-right"),10),o=parseInt(t.getPropertyValue("height"),10)-parseInt(t.getPropertyValue("padding-top"),10)-parseInt(t.getPropertyValue("padding-bottom"),10);this.props.onContextInputChange(m.constants.controlContainerMaxWidth,n),this.props.onContextInputChange(m.constants.controlContainerMaxHeight,o)},t.prototype.updateOutputs=function(e,t,n,o,r,i,a){var s=this,l=Object.keys(i);!l||l.length<1||l.forEach(function(e){s.props.onOutputChange(e,i[e].value),s.props.onInputChange(e,i[e].value)})},t}(s.Component);t.ControlHost=y},function(e,t,n){"use strict";n.r(t),n.d(t,"CustomControlWebClientWrapper",function(){return f});var o,r=n(0),i=n(136),a=n(137),s=n(27),l=n(97),c=n(19),u=n(2),p=n(13),d=(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),h=function(){return(h=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},f=function(e){function t(t){return e.call(this,t)||this}return d(t,e),t.prototype._initializeFela=function(){t._FelaInitialized||(t._FelaRenderer||(t._FelaRenderer=i.createRenderer()),t._FelaElement||(t._FelaElement=document.createElement("style"),t._FelaElement.id="stylesheet",document.head.appendChild(t._FelaElement)),a.render(t._FelaRenderer,t._FelaElement),t._FelaInitialized=!0)},t.prototype._forceUpdate=function(e){this.forceUpdate(e)},t.prototype.getChildContext=function(){return t._FelaInitialized||this._initializeFela(),{renderer:t._FelaRenderer}},t.prototype.componentDidMount=function(){this.props.setReRenderCallBack(this._forceUpdate.bind(this))},t.prototype.render=function(){return r.createElement(l.a,h({},this.props.givenHostProps))},t._FelaInitialized=!1,t._FelaRenderer=null,t._FelaElement=null,t}(r.Component);f.childContextTypes={renderer:s.object},window.CustomControls={},window.CustomControls.CustomControlHostRoot=l.a,window.CustomControls.CustomControlWebClientWrapper=f,window.CustomControls.MeasuringHandler=c.a.getInstance(),window.CustomControls.XrmProxy=u.default,window.CustomControls.Utilities={},window.CustomControls.Utilities.GetDefaultControlConfig=p.f,window.CustomControls.Utilities.GetDefaultControlManifest=p.g},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=a(n(150)),r=a(n(105)),i=a(n(175));function a(e){return e&&e.__esModule?e:{default:e}}t.default={createRenderer:o.default,combineRules:r.default,enhance:i.default},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t={listeners:[],keyframePrefixes:e.keyframePrefixes||["-webkit-","-moz-"],plugins:e.plugins||[],mediaQueryOrder:e.mediaQueryOrder||[],selectorPrefix:e.selectorPrefix||"",fontFaces:"",keyframes:"",statics:"",rules:"",mediaRules:(0,v.default)(e.mediaQueryOrder||[]),uniqueRuleIdentifier:0,uniqueKeyframeIdentifier:0,cache:{},renderRule:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=(0,C.default)(t.plugins,e(n),O.RULE_TYPE);return t._renderStyleToClassNames(o).slice(1)},renderKeyframe:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=e(n),r=JSON.stringify(o);if(!t.cache.hasOwnProperty(r)){var i=(0,l.default)(++t.uniqueKeyframeIdentifier),s=(0,C.default)(t.plugins,o,O.KEYFRAME_TYPE),c=(0,a.default)(s,i,t.keyframePrefixes);t.cache[r]=i,t.keyframes+=c,t._emitChange({name:i,keyframe:c,type:O.KEYFRAME_TYPE})}return t.cache[r]},renderFont:function(e,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},a=e+JSON.stringify(r);if(!t.cache.hasOwnProperty(a)){var s=(0,E.default)(e),l=o({},r,{src:n.map(function(e){return"url("+(0,P.default)(e)+") format('"+(0,I.default)(e)+"')"}).join(","),fontFamily:s}),c=(0,i.default)(l);t.cache[a]=s,t.fontFaces+=c,t._emitChange({fontFamily:s,fontFace:c,type:O.FONT_TYPE})}return t.cache[a]},renderStatic:function(e,n){var o=(0,f.default)(e,n);if(!t.cache.hasOwnProperty(o)){var r=(0,h.default)(e,t.plugins);t.cache[o]="","string"==typeof e?(t.statics+=r,t._emitChange({type:O.STATIC_TYPE,css:r})):n&&(t.statics+=(0,p.default)(n,r),t._emitChange({selector:n,declaration:r,type:O.RULE_TYPE,static:!0,media:""}))}},renderToString:function(){var e=t.fontFaces+t.statics+t.keyframes+t.rules;return(0,w.default)(t.mediaRules,function(e,t,n){return e+(0,s.default)(n,t)},e)},subscribe:function(e){return t.listeners.push(e),{unsubscribe:function(){return t.listeners.splice(t.listeners.indexOf(e),1)}}},clear:function(){t.fontFaces="",t.keyframes="",t.statics="",t.rules="",t.mediaRules=(0,v.default)(t.mediaQueryOrder),t.uniqueRuleIdentifier=0,t.uniqueKeyframeIdentifier=0,t.cache={},t._emitChange({type:O.CLEAR_TYPE})},_renderStyleToClassNames:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",i="";for(var a in e){var s=e[a];if((0,g.default)(s)){if((0,y.default)(a))i+=t._renderStyleToClassNames(s,n+(0,_.default)(a),o);else if((0,m.default)(a)){var l=(0,u.default)(o,a.slice(6).trim());i+=t._renderStyleToClassNames(s,n,l)}}else{var h=o+n+a+s;if(!t.cache.hasOwnProperty(h)){if((0,b.default)(s)){t.cache[h]="";continue}var f=t.selectorPrefix+(0,c.default)(++t.uniqueRuleIdentifier);t.cache[h]=f;var v=(0,r.default)(a,s),C=(0,d.default)(f,n),E=(0,p.default)(C,v);o.length>0?(t.mediaRules.hasOwnProperty(o)||(t.mediaRules[o]=""),t.mediaRules[o]+=E):t.rules+=E,t._emitChange({selector:C,declaration:v,media:o,type:O.RULE_TYPE})}i+=" "+t.cache[h]}}return i},_emitChange:function(e){(0,S.default)(t.listeners,function(t){return t(e)})}};t.keyframePrefixes.push(""),t.clear(),e.enhancers&&(0,S.default)(e.enhancers,function(e){t=e(t)});return t};var r=D(n(100)),i=D(n(153)),a=D(n(154)),s=D(n(155)),l=D(n(156)),c=D(n(157)),u=D(n(158)),p=D(n(159)),d=D(n(160)),h=D(n(161)),f=D(n(163)),m=D(n(164)),y=D(n(165)),b=D(n(166)),g=D(n(167)),_=D(n(168)),v=D(n(169)),C=D(n(102)),E=D(n(170)),I=D(n(171)),P=D(n(172)),w=D(n(101)),S=D(n(173)),O=n(76);function D(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,i.default)(e)};var o,r=n(152),i=(o=r)&&o.__esModule?o:{default:o};e.exports=t.default},function(e,t,n){"use strict";n.r(t);var o=/[A-Z]/g,r=/^ms-/,i={};function a(e){return"-"+e.toLowerCase()}t.default=function(e){if(i.hasOwnProperty(e))return i[e];var t=e.replace(o,a);return i[e]=r.test(t)?"-"+t:t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return"@font-face{"+(0,i.default)(e)+"}"};var o,r=n(75),i=(o=r)&&o.__esModule?o:{default:o};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[""],a=(0,i.default)(e,function(e,t,n){return""+e+n+"{"+(0,o.default)(t)+"}"},"");return(0,r.default)(n,function(e,n){return e+"@"+n+"keyframes "+t+"{"+a+"}"},"")};var o=a(n(75)),r=a(n(37)),i=a(n(101));function a(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(t)return"@media "+e+"{"+t+"}";return""},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return"k"+e},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";if(t<=r)return o[t-1]+n;return e(t/r|0,o[t%r]+n)};var o="abcdefghijklmnopqrstuvwxyz",r=o.length;e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(0===e.length)return t;return e+" and "+t},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return e+"{"+t+"}"},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return"."+e+t},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof e)return(0,r.default)(e);var n=(0,i.default)(t,e,a.STATIC_TYPE);return(0,o.default)(n)};var o=s(n(75)),r=s(n(162)),i=s(n(102)),a=n(76);function s(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e.replace(/\s{2,}/g,"")},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof e)return e;if(t)return t+JSON.stringify(e);return""},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return"@media"===e.substr(0,6)},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return o.test(e)};var o=/^(:|\[|>|&)/;e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return void 0===e||"string"==typeof e&&-1!==e.indexOf("undefined")},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.default=function(e){return"object"===(void 0===e?"undefined":o(e))&&!Array.isArray(e)},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){if("&"===e.charAt(0))return e.slice(1);return e},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,i.default)(e,function(e,t){return e[t]="",e},{})};var o,r=n(37),i=(o=r)&&o.__esModule?o:{default:o};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){if('"'===e.charAt(0))return e;return'"'+e+'"'},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){for(var t=0,n=s.length;t<n;++t){var r=s[t];if(-1!==e.indexOf(r))return i[r]}if((0,o.default)(e))for(var c=0,u=l.length;c<u;++c){var p=l[c];if(-1!==e.indexOf(p))return a[p]}return""};r(n(103));var o=r(n(104));function r(e){return e&&e.__esModule?e:{default:e}}var i={".woff":"woff",".eot":"eot",".ttf":"truetype",".svg":"svg"},a={"image/svg+xml":"svg","application/x-font-woff":"woff","application/font-woff":"woff","application/x-font-woff2":"woff2","application/font-woff2":"woff2","font/woff2":"woff2","application/octet-stream":"ttf","application/x-font-ttf":"ttf","application/x-font-truetype":"ttf","application/x-font-opentype":"otf","application/vnd.ms-fontobject":"eot","application/font-sfnt":"sfnt"},s=Object.keys(i),l=Object.keys(a);e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){if((0,i.default)(e))return e;return"'"+e+"'"};var o,r=n(104),i=(o=r)&&o.__esModule?o:{default:o};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){for(var n=0,o=e.length;n<o;++n)t(e[n],n)},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e};function r(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}t.default=function e(t){for(var n=arguments.length,i=Array(n>1?n-1:0),a=1;a<n;a++)i[a-1]=arguments[a];for(var s=0,l=i.length;s<l;++s){var c=i[s];for(var u in c){var p=c[u],d=t[u];if("object"===(void 0===d?"undefined":o(d))){if(Array.isArray(d)){Array.isArray(p)?t[u]=[].concat(r(d),r(p)):t[u]=[].concat(r(d),[p]);continue}if("object"===(void 0===p?"undefined":o(p))&&!Array.isArray(p)){t[u]=e({},d,p);continue}}t[u]=p}}return t},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(n){return(0,i.default)(t,function(e,t){return e=t(e)},e(n))}}};var o,r=n(37),i=(o=r)&&o.__esModule?o:{default:o};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=n(106),i=(o=r)&&o.__esModule?o:{default:o};t.default={render:i.default},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return function(n){if(n.type!==o.RULE_TYPE||n.media)t.textContent=e.renderToString();else try{t.sheet.insertRule(n.selector+"{"+n.declaration+"}",t.sheet.cssRules.length)}catch(e){}}};var o=n(76);e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e&&1===e.nodeType},e.exports=t.default},function(e,t,n){"use strict";var o=n(180);function r(){}function i(){}i.resetWarningCache=r,e.exports=function(){function e(e,t,n,r,i,a){if(a!==o){var s=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw s.name="Invariant Violation",s}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:r};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=s(n(182)),r=s(n(183)),i=s(n(186)),a=s(n(190));function s(e){return e&&e.__esModule?e:{default:e}}t.default={Provider:o.default,connect:r.default,createComponent:i.default,ThemeProvider:a.default},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=n(0),i=s(n(27)),a=s(n(106));function s(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.Component),o(t,[{key:"getChildContext",value:function(){return{renderer:this.props.renderer}}},{key:"componentDidMount",value:function(){var e=this.props,t=e.mountNode,n=e.renderer;t&&(0,a.default)(n,t)}},{key:"render",value:function(){return r.Children.only(this.props.children)}}]),t}();l.propTypes={renderer:i.default.object.isRequired},l.childContextTypes={renderer:i.default.object},t.default=l,e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=a(n(27)),i=a(n(184));function a(e){return e&&e.__esModule?e:{default:e}}t.default=(0,i.default)(o.Component,o.createElement,{renderer:r.default.object,theme:r.default.object}),e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}();t.default=function(e,t,n){return function(i){return function(a){var l=function(e){function n(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(n.__proto__||Object.getPrototypeOf(n)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(n,e),r(n,[{key:"render",value:function(){var e=this.context,n=e.renderer,r=e.theme,s=i(o({},this.props,{theme:r||{}}))(n);return t(a,o({},this.props,{styles:s}))}}]),n}(e);return l.displayName=(0,s.default)(a),n&&(l.contextTypes=o({},a.contextTypes,n)),l}}};var i,a=n(185),s=(i=a)&&i.__esModule?i:{default:i};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=e.displayName||e.name;if(t)return"Fela"+t;return"ConnectedFelaComponent"},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=a(n(27)),i=a(n(187));function a(e){return e&&e.__esModule?e:{default:e}}t.default=(0,i.default)(o.createElement,{renderer:r.default.object,theme:r.default.object}),e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e};t.default=function(e,t){return function(n){var s=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"div",c=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],u=function(t,u){var p=u.renderer,d=u.theme,h=t.children,f=t._felaRule,m=t.passThrough,y=void 0===m?[]:m,b=function(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}(t,["children","_felaRule","passThrough"]);if(!p)throw new Error("createComponent() can't render styles without the renderer in the context. Missing react-fela's <Provider /> at the app root?");var g=f?(0,a.default)(n,f):n,_=[].concat(l((0,i.default)(c,b)),l((0,i.default)(y,b)));if(s._isFelaComponent)return e(s,o({_felaRule:g,passThrough:_},b),h);var v=(0,r.default)(_,b);if(b.theme=d||{},p.isNativeRenderer){var C=p.renderRule(g,b);v.style=b.style?[b.style,C]:C}else{v.style=b.style;var E=b.className?b.className+" ":"";v.className=E+p.renderRule(g,b)}v.id=b.id,v.ref=b.innerRef;var I=b.is||s;return e(I,v,h)};return t&&(u.contextTypes=t),u.displayName=n.name?n.name:"FelaComponent",u._isFelaComponent=!0,u}};var r=s(n(188)),i=s(n(189)),a=s(n(105));function s(e){return e&&e.__esModule?e:{default:e}}function l(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return(0,i.default)(e,function(e,n){return e[n]=t[n],e},{})};var o,r=n(37),i=(o=r)&&o.__esModule?o:{default:o};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("function"==typeof e)return Object.keys(e(t));return e},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),a=n(0),s=n(27),l=(o=s)&&o.__esModule?o:{default:o};var c=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,a.Component),i(t,[{key:"getChildContext",value:function(){var e=this.props,t=e.overwrite,n=e.theme,o=this.context.theme;return{theme:r({},t?{}:o||{},n)}}},{key:"render",value:function(){return a.Children.only(this.props.children)}}]),t}();c.propTypes={theme:l.default.object.isRequired,overwrite:l.default.bool},c.childContextTypes={theme:l.default.object},c.contextTypes={theme:l.default.object},c.defaultProps={overwrite:!1},t.default=c,e.exports=t.default},function(e,t,n){(function(){"use strict";var e,o,r,i,a={}.hasOwnProperty;o=n(77),e=n(192),r=n(197),i=n(116),t.defaults=o.defaults,t.processors=i,t.ValidationError=function(e){function t(e){this.message=e}return function(e,t){for(var n in t)a.call(t,n)&&(e[n]=t[n]);function o(){this.constructor=e}o.prototype=t.prototype,e.prototype=new o,e.__super__=t.prototype}(t,Error),t}(),t.Builder=e.Builder,t.Parser=r.Parser,t.parseString=r.parseString}).call(this)},function(e,t,n){(function(){"use strict";var e,o,r,i,a,s={}.hasOwnProperty;e=n(193),o=n(77).defaults,i=function(e){return"string"==typeof e&&(e.indexOf("&")>=0||e.indexOf(">")>=0||e.indexOf("<")>=0)},a=function(e){return"<![CDATA["+r(e)+"]]>"},r=function(e){return e.replace("]]>","]]]]><![CDATA[>")},t.Builder=function(){function t(e){var t,n,r;for(t in this.options={},n=o[.2])s.call(n,t)&&(r=n[t],this.options[t]=r);for(t in e)s.call(e,t)&&(r=e[t],this.options[t]=r)}return t.prototype.buildObject=function(t){var n,r,l,c,u,p;return n=this.options.attrkey,r=this.options.charkey,1===Object.keys(t).length&&this.options.rootName===o[.2].rootName?t=t[u=Object.keys(t)[0]]:u=this.options.rootName,p=this,l=function(e,t){var o,c,u,d,h,f;if("object"!=typeof t)p.options.cdata&&i(t)?e.raw(a(t)):e.txt(t);else if(Array.isArray(t)){for(d in t)if(s.call(t,d))for(h in c=t[d])u=c[h],e=l(e.ele(h),u).up()}else for(h in t)if(s.call(t,h))if(c=t[h],h===n){if("object"==typeof c)for(o in c)f=c[o],e=e.att(o,f)}else if(h===r)e=p.options.cdata&&i(c)?e.raw(a(c)):e.txt(c);else if(Array.isArray(c))for(d in c)s.call(c,d)&&(e="string"==typeof(u=c[d])?p.options.cdata&&i(u)?e.ele(h).raw(a(u)).up():e.ele(h,u).up():l(e.ele(h),u).up());else"object"==typeof c?e=l(e.ele(h),c).up():"string"==typeof c&&p.options.cdata&&i(c)?e=e.ele(h).raw(a(c)).up():(null==c&&(c=""),e=e.ele(h,c.toString()).up());return e},c=e.create(u,this.options.xmldec,this.options.doctype,{headless:this.options.headless,allowSurrogateChars:this.options.allowSurrogateChars}),l(c,t).end(this.options.renderOpts)},t}()}).call(this)},function(e,t,n){(function(){var t,o,r,i,a,s,l;l=n(26),a=l.assign,s=l.isFunction,t=n(194),o=n(195),i=n(78),r=n(196),e.exports.create=function(e,n,o,r){var i,s;if(null==e)throw new Error("Root element needs a name");return r=a({},n,o,r),s=(i=new t(r)).element(e),r.headless||(i.declaration(r),null==r.pubID&&null==r.sysID||i.doctype(r)),s},e.exports.begin=function(e,n,r){var i;return s(e)&&(n=(i=[e,n])[0],r=i[1],e={}),n?new o(e,n,r):new t(e)},e.exports.stringWriter=function(e){return new i(e)},e.exports.streamWriter=function(e,t){return new r(e,t)}}).call(this)},function(e,t,n){(function(){var t,o,r,i,a={}.hasOwnProperty;i=n(26).isPlainObject,t=n(17),r=n(109),o=n(78),e.exports=function(e){function n(e){n.__super__.constructor.call(this,null),e||(e={}),e.writer||(e.writer=new o),this.options=e,this.stringify=new r(e),this.isDocument=!0}return function(e,t){for(var n in t)a.call(t,n)&&(e[n]=t[n]);function o(){this.constructor=e}o.prototype=t.prototype,e.prototype=new o,e.__super__=t.prototype}(n,t),n.prototype.end=function(e){var t;return e?i(e)&&(t=e,e=this.options.writer.set(t)):e=this.options.writer,e.document(this)},n.prototype.toString=function(e){return this.options.writer.set(e).document(this)},n}()}).call(this)},function(e,t,n){(function(){var t,o,r,i,a,s,l,c,u,p,d,h,f,m,y,b,g,_,v,C={}.hasOwnProperty;v=n(26),g=v.isObject,b=v.isFunction,_=v.isPlainObject,p=n(52),o=n(53),r=n(54),h=n(61),y=n(62),d=n(63),c=n(55),u=n(56),i=n(57),s=n(58),a=n(59),l=n(60),t=n(108),m=n(109),f=n(78),e.exports=function(){function e(e,t,n){var o;e||(e={}),e.writer?_(e.writer)&&(o=e.writer,e.writer=new f(o)):e.writer=new f(e),this.options=e,this.writer=e.writer,this.stringify=new m(e),this.onDataCallback=t||function(){},this.onEndCallback=n||function(){},this.currentNode=null,this.currentLevel=-1,this.openTags={},this.documentStarted=!1,this.documentCompleted=!1,this.root=null}return e.prototype.node=function(e,t,n){var o;if(null==e)throw new Error("Missing node name");if(this.root&&-1===this.currentLevel)throw new Error("Document can only have one root node");return this.openCurrent(),e=e.valueOf(),null==t&&(t={}),t=t.valueOf(),g(t)||(n=(o=[t,n])[0],t=o[1]),this.currentNode=new p(this,e,t),this.currentNode.children=!1,this.currentLevel++,this.openTags[this.currentLevel]=this.currentNode,null!=n&&this.text(n),this},e.prototype.element=function(e,t,n){return this.currentNode&&this.currentNode instanceof u?this.dtdElement.apply(this,arguments):this.node(e,t,n)},e.prototype.attribute=function(e,n){var o,r;if(!this.currentNode||this.currentNode.children)throw new Error("att() can only be used immediately after an ele() call in callback mode");if(null!=e&&(e=e.valueOf()),g(e))for(o in e)C.call(e,o)&&(r=e[o],this.attribute(o,r));else b(n)&&(n=n.apply()),this.options.skipNullAttributes&&null==n||(this.currentNode.attributes[e]=new t(this,e,n));return this},e.prototype.text=function(e){var t;return this.openCurrent(),t=new y(this,e),this.onData(this.writer.text(t,this.currentLevel+1)),this},e.prototype.cdata=function(e){var t;return this.openCurrent(),t=new o(this,e),this.onData(this.writer.cdata(t,this.currentLevel+1)),this},e.prototype.comment=function(e){var t;return this.openCurrent(),t=new r(this,e),this.onData(this.writer.comment(t,this.currentLevel+1)),this},e.prototype.raw=function(e){var t;return this.openCurrent(),t=new h(this,e),this.onData(this.writer.raw(t,this.currentLevel+1)),this},e.prototype.instruction=function(e,t){var n,o,r,i,a;if(this.openCurrent(),null!=e&&(e=e.valueOf()),null!=t&&(t=t.valueOf()),Array.isArray(e))for(n=0,i=e.length;n<i;n++)o=e[n],this.instruction(o);else if(g(e))for(o in e)C.call(e,o)&&(r=e[o],this.instruction(o,r));else b(t)&&(t=t.apply()),a=new d(this,e,t),this.onData(this.writer.processingInstruction(a,this.currentLevel+1));return this},e.prototype.declaration=function(e,t,n){var o;if(this.openCurrent(),this.documentStarted)throw new Error("declaration() must be the first node");return o=new c(this,e,t,n),this.onData(this.writer.declaration(o,this.currentLevel+1)),this},e.prototype.doctype=function(e,t,n){if(this.openCurrent(),null==e)throw new Error("Missing root node name");if(this.root)throw new Error("dtd() must come before the root node");return this.currentNode=new u(this,t,n),this.currentNode.rootNodeName=e,this.currentNode.children=!1,this.currentLevel++,this.openTags[this.currentLevel]=this.currentNode,this},e.prototype.dtdElement=function(e,t){var n;return this.openCurrent(),n=new a(this,e,t),this.onData(this.writer.dtdElement(n,this.currentLevel+1)),this},e.prototype.attList=function(e,t,n,o,r){var a;return this.openCurrent(),a=new i(this,e,t,n,o,r),this.onData(this.writer.dtdAttList(a,this.currentLevel+1)),this},e.prototype.entity=function(e,t){var n;return this.openCurrent(),n=new s(this,!1,e,t),this.onData(this.writer.dtdEntity(n,this.currentLevel+1)),this},e.prototype.pEntity=function(e,t){var n;return this.openCurrent(),n=new s(this,!0,e,t),this.onData(this.writer.dtdEntity(n,this.currentLevel+1)),this},e.prototype.notation=function(e,t){var n;return this.openCurrent(),n=new l(this,e,t),this.onData(this.writer.dtdNotation(n,this.currentLevel+1)),this},e.prototype.up=function(){if(this.currentLevel<0)throw new Error("The document node has no parent");return this.currentNode?(this.currentNode.children?this.closeNode(this.currentNode):this.openNode(this.currentNode),this.currentNode=null):this.closeNode(this.openTags[this.currentLevel]),delete this.openTags[this.currentLevel],this.currentLevel--,this},e.prototype.end=function(){for(;this.currentLevel>=0;)this.up();return this.onEnd()},e.prototype.openCurrent=function(){if(this.currentNode)return this.currentNode.children=!0,this.openNode(this.currentNode)},e.prototype.openNode=function(e){if(!e.isOpen)return!this.root&&0===this.currentLevel&&e instanceof p&&(this.root=e),this.onData(this.writer.openNode(e,this.currentLevel)),e.isOpen=!0},e.prototype.closeNode=function(e){if(!e.isClosed)return this.onData(this.writer.closeNode(e,this.currentLevel)),e.isClosed=!0},e.prototype.onData=function(e){return this.documentStarted=!0,this.onDataCallback(e)},e.prototype.onEnd=function(){return this.documentCompleted=!0,this.onEndCallback()},e.prototype.ele=function(){return this.element.apply(this,arguments)},e.prototype.nod=function(e,t,n){return this.node(e,t,n)},e.prototype.txt=function(e){return this.text(e)},e.prototype.dat=function(e){return this.cdata(e)},e.prototype.com=function(e){return this.comment(e)},e.prototype.ins=function(e,t){return this.instruction(e,t)},e.prototype.dec=function(e,t,n){return this.declaration(e,t,n)},e.prototype.dtd=function(e,t,n){return this.doctype(e,t,n)},e.prototype.e=function(e,t,n){return this.element(e,t,n)},e.prototype.n=function(e,t,n){return this.node(e,t,n)},e.prototype.t=function(e){return this.text(e)},e.prototype.d=function(e){return this.cdata(e)},e.prototype.c=function(e){return this.comment(e)},e.prototype.r=function(e){return this.raw(e)},e.prototype.i=function(e,t){return this.instruction(e,t)},e.prototype.att=function(){return this.currentNode&&this.currentNode instanceof u?this.attList.apply(this,arguments):this.attribute.apply(this,arguments)},e.prototype.a=function(){return this.currentNode&&this.currentNode instanceof u?this.attList.apply(this,arguments):this.attribute.apply(this,arguments)},e.prototype.ent=function(e,t){return this.entity(e,t)},e.prototype.pent=function(e,t){return this.pEntity(e,t)},e.prototype.not=function(e,t){return this.notation(e,t)},e}()}).call(this)},function(e,t,n){(function(){var t,o,r,i,a,s,l,c,u,p,d,h,f,m={}.hasOwnProperty;l=n(55),c=n(56),t=n(53),o=n(54),u=n(52),d=n(61),h=n(62),p=n(63),r=n(57),i=n(59),a=n(58),s=n(60),f=n(110),e.exports=function(e){function n(e,t){n.__super__.constructor.call(this,t),this.stream=e}return function(e,t){for(var n in t)m.call(t,n)&&(e[n]=t[n]);function o(){this.constructor=e}o.prototype=t.prototype,e.prototype=new o,e.__super__=t.prototype}(n,f),n.prototype.document=function(e){var t,n,r,i,a,s,u,d;for(n=0,i=(s=e.children).length;n<i;n++)(t=s[n]).isLastRootNode=!1;for(e.children[e.children.length-1].isLastRootNode=!0,d=[],r=0,a=(u=e.children).length;r<a;r++)switch(t=u[r],!1){case!(t instanceof l):d.push(this.declaration(t));break;case!(t instanceof c):d.push(this.docType(t));break;case!(t instanceof o):d.push(this.comment(t));break;case!(t instanceof p):d.push(this.processingInstruction(t));break;default:d.push(this.element(t))}return d},n.prototype.attribute=function(e){return this.stream.write(" "+e.name+'="'+e.value+'"')},n.prototype.cdata=function(e,t){return this.stream.write(this.space(t)+"<![CDATA["+e.text+"]]>"+this.endline(e))},n.prototype.comment=function(e,t){return this.stream.write(this.space(t)+"\x3c!-- "+e.text+" --\x3e"+this.endline(e))},n.prototype.declaration=function(e,t){return this.stream.write(this.space(t)),this.stream.write('<?xml version="'+e.version+'"'),null!=e.encoding&&this.stream.write(' encoding="'+e.encoding+'"'),null!=e.standalone&&this.stream.write(' standalone="'+e.standalone+'"'),this.stream.write(this.spacebeforeslash+"?>"),this.stream.write(this.endline(e))},n.prototype.docType=function(e,n){var l,c,u,d;if(n||(n=0),this.stream.write(this.space(n)),this.stream.write("<!DOCTYPE "+e.root().name),e.pubID&&e.sysID?this.stream.write(' PUBLIC "'+e.pubID+'" "'+e.sysID+'"'):e.sysID&&this.stream.write(' SYSTEM "'+e.sysID+'"'),e.children.length>0){for(this.stream.write(" ["),this.stream.write(this.endline(e)),c=0,u=(d=e.children).length;c<u;c++)switch(l=d[c],!1){case!(l instanceof r):this.dtdAttList(l,n+1);break;case!(l instanceof i):this.dtdElement(l,n+1);break;case!(l instanceof a):this.dtdEntity(l,n+1);break;case!(l instanceof s):this.dtdNotation(l,n+1);break;case!(l instanceof t):this.cdata(l,n+1);break;case!(l instanceof o):this.comment(l,n+1);break;case!(l instanceof p):this.processingInstruction(l,n+1);break;default:throw new Error("Unknown DTD node type: "+l.constructor.name)}this.stream.write("]")}return this.stream.write(this.spacebeforeslash+">"),this.stream.write(this.endline(e))},n.prototype.element=function(e,n){var r,i,a,s,l,c,f,y;for(l in n||(n=0),y=this.space(n),this.stream.write(y+"<"+e.name),c=e.attributes)m.call(c,l)&&(r=c[l],this.attribute(r));if(0===e.children.length||e.children.every(function(e){return""===e.value}))this.allowEmpty?this.stream.write("></"+e.name+">"):this.stream.write(this.spacebeforeslash+"/>");else if(this.pretty&&1===e.children.length&&null!=e.children[0].value)this.stream.write(">"),this.stream.write(e.children[0].value),this.stream.write("</"+e.name+">");else{for(this.stream.write(">"+this.newline),a=0,s=(f=e.children).length;a<s;a++)switch(i=f[a],!1){case!(i instanceof t):this.cdata(i,n+1);break;case!(i instanceof o):this.comment(i,n+1);break;case!(i instanceof u):this.element(i,n+1);break;case!(i instanceof d):this.raw(i,n+1);break;case!(i instanceof h):this.text(i,n+1);break;case!(i instanceof p):this.processingInstruction(i,n+1);break;default:throw new Error("Unknown XML node type: "+i.constructor.name)}this.stream.write(y+"</"+e.name+">")}return this.stream.write(this.endline(e))},n.prototype.processingInstruction=function(e,t){return this.stream.write(this.space(t)+"<?"+e.target),e.value&&this.stream.write(" "+e.value),this.stream.write(this.spacebeforeslash+"?>"+this.endline(e))},n.prototype.raw=function(e,t){return this.stream.write(this.space(t)+e.value+this.endline(e))},n.prototype.text=function(e,t){return this.stream.write(this.space(t)+e.value+this.endline(e))},n.prototype.dtdAttList=function(e,t){return this.stream.write(this.space(t)+"<!ATTLIST "+e.elementName+" "+e.attributeName+" "+e.attributeType),"#DEFAULT"!==e.defaultValueType&&this.stream.write(" "+e.defaultValueType),e.defaultValue&&this.stream.write(' "'+e.defaultValue+'"'),this.stream.write(this.spacebeforeslash+">"+this.endline(e))},n.prototype.dtdElement=function(e,t){return this.stream.write(this.space(t)+"<!ELEMENT "+e.name+" "+e.value),this.stream.write(this.spacebeforeslash+">"+this.endline(e))},n.prototype.dtdEntity=function(e,t){return this.stream.write(this.space(t)+"<!ENTITY"),e.pe&&this.stream.write(" %"),this.stream.write(" "+e.name),e.value?this.stream.write(' "'+e.value+'"'):(e.pubID&&e.sysID?this.stream.write(' PUBLIC "'+e.pubID+'" "'+e.sysID+'"'):e.sysID&&this.stream.write(' SYSTEM "'+e.sysID+'"'),e.nData&&this.stream.write(" NDATA "+e.nData)),this.stream.write(this.spacebeforeslash+">"+this.endline(e))},n.prototype.dtdNotation=function(e,t){return this.stream.write(this.space(t)+"<!NOTATION "+e.name),e.pubID&&e.sysID?this.stream.write(' PUBLIC "'+e.pubID+'" "'+e.sysID+'"'):e.pubID?this.stream.write(' PUBLIC "'+e.pubID+'"'):e.sysID&&this.stream.write(' SYSTEM "'+e.sysID+'"'),this.stream.write(this.spacebeforeslash+">"+this.endline(e))},n.prototype.endline=function(e){return e.isLastRootNode?"":this.newline},n}()}).call(this)},function(e,t,n){(function(){"use strict";var e,o,r,i,a,s,l,c,u=function(e,t){return function(){return e.apply(t,arguments)}},p={}.hasOwnProperty;l=n(198),r=n(64),e=n(214),s=n(116),c=n(114).setImmediate,o=n(77).defaults,i=function(e){return"object"==typeof e&&null!=e&&0===Object.keys(e).length},a=function(e,t,n){var o,r;for(o=0,r=e.length;o<r;o++)t=(0,e[o])(t,n);return t},t.Parser=function(n){function d(e){var n,r,i;if(this.parseString=u(this.parseString,this),this.reset=u(this.reset,this),this.assignOrPush=u(this.assignOrPush,this),this.processAsync=u(this.processAsync,this),!(this instanceof t.Parser))return new t.Parser(e);for(n in this.options={},r=o[.2])p.call(r,n)&&(i=r[n],this.options[n]=i);for(n in e)p.call(e,n)&&(i=e[n],this.options[n]=i);this.options.xmlns&&(this.options.xmlnskey=this.options.attrkey+"ns"),this.options.normalizeTags&&(this.options.tagNameProcessors||(this.options.tagNameProcessors=[]),this.options.tagNameProcessors.unshift(s.normalize)),this.reset()}return function(e,t){for(var n in t)p.call(t,n)&&(e[n]=t[n]);function o(){this.constructor=e}o.prototype=t.prototype,e.prototype=new o,e.__super__=t.prototype}(d,r.EventEmitter),d.prototype.processAsync=function(){var e,t;try{return this.remaining.length<=this.options.chunkSize?(e=this.remaining,this.remaining="",this.saxParser=this.saxParser.write(e),this.saxParser.close()):(e=this.remaining.substr(0,this.options.chunkSize),this.remaining=this.remaining.substr(this.options.chunkSize,this.remaining.length),this.saxParser=this.saxParser.write(e),c(this.processAsync))}catch(e){if(t=e,!this.saxParser.errThrown)return this.saxParser.errThrown=!0,this.emit(t)}},d.prototype.assignOrPush=function(e,t,n){return t in e?(e[t]instanceof Array||(e[t]=[e[t]]),e[t].push(n)):this.options.explicitArray?e[t]=[n]:e[t]=n},d.prototype.reset=function(){var e,t,n,o,r;return this.removeAllListeners(),this.saxParser=l.parser(this.options.strict,{trim:!1,normalize:!1,xmlns:this.options.xmlns}),this.saxParser.errThrown=!1,this.saxParser.onerror=(r=this,function(e){if(r.saxParser.resume(),!r.saxParser.errThrown)return r.saxParser.errThrown=!0,r.emit("error",e)}),this.saxParser.onend=function(e){return function(){if(!e.saxParser.ended)return e.saxParser.ended=!0,e.emit("end",e.resultObject)}}(this),this.saxParser.ended=!1,this.EXPLICIT_CHARKEY=this.options.explicitCharkey,this.resultObject=null,o=[],e=this.options.attrkey,t=this.options.charkey,this.saxParser.onopentag=function(n){return function(r){var i,s,l,c,u;if((l={})[t]="",!n.options.ignoreAttrs)for(i in u=r.attributes)p.call(u,i)&&(e in l||n.options.mergeAttrs||(l[e]={}),s=n.options.attrValueProcessors?a(n.options.attrValueProcessors,r.attributes[i],i):r.attributes[i],c=n.options.attrNameProcessors?a(n.options.attrNameProcessors,i):i,n.options.mergeAttrs?n.assignOrPush(l,c,s):l[e][c]=s);return l["#name"]=n.options.tagNameProcessors?a(n.options.tagNameProcessors,r.name):r.name,n.options.xmlns&&(l[n.options.xmlnskey]={uri:r.uri,local:r.local}),o.push(l)}}(this),this.saxParser.onclosetag=function(e){return function(){var n,r,s,l,c,u,d,h,f,m;if(u=o.pop(),c=u["#name"],e.options.explicitChildren&&e.options.preserveChildrenOrder||delete u["#name"],!0===u.cdata&&(n=u.cdata,delete u.cdata),f=o[o.length-1],u[t].match(/^\s*$/)&&!n?(r=u[t],delete u[t]):(e.options.trim&&(u[t]=u[t].trim()),e.options.normalize&&(u[t]=u[t].replace(/\s{2,}/g," ").trim()),u[t]=e.options.valueProcessors?a(e.options.valueProcessors,u[t],c):u[t],1===Object.keys(u).length&&t in u&&!e.EXPLICIT_CHARKEY&&(u=u[t])),i(u)&&(u=""!==e.options.emptyTag?e.options.emptyTag:r),null!=e.options.validator&&(m="/"+function(){var e,t,n;for(n=[],e=0,t=o.length;e<t;e++)l=o[e],n.push(l["#name"]);return n}().concat(c).join("/"),function(){var t;try{u=e.options.validator(m,f&&f[c],u)}catch(n){return t=n,e.emit("error",t)}}()),e.options.explicitChildren&&!e.options.mergeAttrs&&"object"==typeof u)if(e.options.preserveChildrenOrder){if(f){for(s in f[e.options.childkey]=f[e.options.childkey]||[],d={},u)p.call(u,s)&&(d[s]=u[s]);f[e.options.childkey].push(d),delete u["#name"],1===Object.keys(u).length&&t in u&&!e.EXPLICIT_CHARKEY&&(u=u[t])}}else l={},e.options.attrkey in u&&(l[e.options.attrkey]=u[e.options.attrkey],delete u[e.options.attrkey]),!e.options.charsAsChildren&&e.options.charkey in u&&(l[e.options.charkey]=u[e.options.charkey],delete u[e.options.charkey]),Object.getOwnPropertyNames(u).length>0&&(l[e.options.childkey]=u),u=l;return o.length>0?e.assignOrPush(f,c,u):(e.options.explicitRoot&&(h=u,(u={})[c]=h),e.resultObject=u,e.saxParser.ended=!0,e.emit("end",e.resultObject))}}(this),n=function(e){return function(n){var r,i;if(i=o[o.length-1])return i[t]+=n,e.options.explicitChildren&&e.options.preserveChildrenOrder&&e.options.charsAsChildren&&(e.options.includeWhiteChars||""!==n.replace(/\\n/g,"").trim())&&(i[e.options.childkey]=i[e.options.childkey]||[],(r={"#name":"__text__"})[t]=n,e.options.normalize&&(r[t]=r[t].replace(/\s{2,}/g," ").trim()),i[e.options.childkey].push(r)),i}}(this),this.saxParser.ontext=n,this.saxParser.oncdata=function(e){var t;if(t=n(e))return t.cdata=!0}},d.prototype.parseString=function(t,n){var o;null!=n&&"function"==typeof n&&(this.on("end",function(e){return this.reset(),n(null,e)}),this.on("error",function(e){return this.reset(),n(e)}));try{return""===(t=t.toString()).trim()?(this.emit("end",null),!0):(t=e.stripBOM(t),this.options.async?(this.remaining=t,c(this.processAsync),this.saxParser):this.saxParser.write(t).close())}catch(e){if(o=e,!this.saxParser.errThrown&&!this.saxParser.ended)return this.emit("error",o),this.saxParser.errThrown=!0;if(this.saxParser.ended)throw o}},d}(),t.parseString=function(e,n,o){var r,i;return null!=o?("function"==typeof o&&(r=o),"object"==typeof n&&(i=n)):("function"==typeof n&&(r=n),i={}),new t.Parser(i).parseString(e,r)}}).call(this)},function(e,t,n){(function(e){!function(t){t.parser=function(e,t){return new i(e,t)},t.SAXParser=i,t.SAXStream=s,t.createStream=function(e,t){return new s(e,t)},t.MAX_BUFFER_LENGTH=65536;var o,r=["comment","sgmlDecl","textNode","tagName","doctype","procInstName","procInstBody","entity","attribName","attribValue","cdata","script"];function i(e,n){if(!(this instanceof i))return new i(e,n);!function(e){for(var t=0,n=r.length;t<n;t++)e[r[t]]=""}(this),this.q=this.c="",this.bufferCheckPosition=t.MAX_BUFFER_LENGTH,this.opt=n||{},this.opt.lowercase=this.opt.lowercase||this.opt.lowercasetags,this.looseCase=this.opt.lowercase?"toLowerCase":"toUpperCase",this.tags=[],this.closed=this.closedRoot=this.sawRoot=!1,this.tag=this.error=null,this.strict=!!e,this.noscript=!(!e&&!this.opt.noscript),this.state=w.BEGIN,this.strictEntities=this.opt.strictEntities,this.ENTITIES=this.strictEntities?Object.create(t.XML_ENTITIES):Object.create(t.ENTITIES),this.attribList=[],this.opt.xmlns&&(this.ns=Object.create(d)),this.trackPosition=!1!==this.opt.position,this.trackPosition&&(this.position=this.line=this.column=0),O(this,"onready")}t.EVENTS=["text","processinginstruction","sgmldeclaration","doctype","comment","opentagstart","attribute","opentag","closetag","opencdata","cdata","closecdata","error","end","ready","script","opennamespace","closenamespace"],Object.create||(Object.create=function(e){function t(){}return t.prototype=e,new t}),Object.keys||(Object.keys=function(e){var t=[];for(var n in e)e.hasOwnProperty(n)&&t.push(n);return t}),i.prototype={end:function(){M(this)},write:function(e){if(this.error)throw this.error;if(this.closed)return x(this,"Cannot write after close. Assign an onready handler.");if(null===e)return M(this);"object"==typeof e&&(e=e.toString());var n=0,o="";for(;o=W(e,n++),this.c=o,o;)switch(this.trackPosition&&(this.position++,"\n"===o?(this.line++,this.column=0):this.column++),this.state){case w.BEGIN:if(this.state=w.BEGIN_WHITESPACE,"\ufeff"===o)continue;j(this,o);continue;case w.BEGIN_WHITESPACE:j(this,o);continue;case w.TEXT:if(this.sawRoot&&!this.closedRoot){for(var i=n-1;o&&"<"!==o&&"&"!==o;)(o=W(e,n++))&&this.trackPosition&&(this.position++,"\n"===o?(this.line++,this.column=0):this.column++);this.textNode+=e.substring(i,n-1)}"<"!==o||this.sawRoot&&this.closedRoot&&!this.strict?(b(o)||this.sawRoot&&!this.closedRoot||A(this,"Text data outside of root node."),"&"===o?this.state=w.TEXT_ENTITY:this.textNode+=o):(this.state=w.OPEN_WAKA,this.startTagPosition=this.position);continue;case w.SCRIPT:"<"===o?this.state=w.SCRIPT_ENDING:this.script+=o;continue;case w.SCRIPT_ENDING:"/"===o?this.state=w.CLOSE_TAG:(this.script+="<"+o,this.state=w.SCRIPT);continue;case w.OPEN_WAKA:if("!"===o)this.state=w.SGML_DECL,this.sgmlDecl="";else if(b(o));else if(v(h,o))this.state=w.OPEN_TAG,this.tagName=o;else if("/"===o)this.state=w.CLOSE_TAG,this.tagName="";else if("?"===o)this.state=w.PROC_INST,this.procInstName=this.procInstBody="";else{if(A(this,"Unencoded <"),this.startTagPosition+1<this.position){var a=this.position-this.startTagPosition;o=new Array(a).join(" ")+o}this.textNode+="<"+o,this.state=w.TEXT}continue;case w.SGML_DECL:(this.sgmlDecl+o).toUpperCase()===l?(D(this,"onopencdata"),this.state=w.CDATA,this.sgmlDecl="",this.cdata=""):this.sgmlDecl+o==="--"?(this.state=w.COMMENT,this.comment="",this.sgmlDecl=""):(this.sgmlDecl+o).toUpperCase()===c?(this.state=w.DOCTYPE,(this.doctype||this.sawRoot)&&A(this,"Inappropriately located doctype declaration"),this.doctype="",this.sgmlDecl=""):">"===o?(D(this,"onsgmldeclaration",this.sgmlDecl),this.sgmlDecl="",this.state=w.TEXT):g(o)?(this.state=w.SGML_DECL_QUOTED,this.sgmlDecl+=o):this.sgmlDecl+=o;continue;case w.SGML_DECL_QUOTED:o===this.q&&(this.state=w.SGML_DECL,this.q=""),this.sgmlDecl+=o;continue;case w.DOCTYPE:">"===o?(this.state=w.TEXT,D(this,"ondoctype",this.doctype),this.doctype=!0):(this.doctype+=o,"["===o?this.state=w.DOCTYPE_DTD:g(o)&&(this.state=w.DOCTYPE_QUOTED,this.q=o));continue;case w.DOCTYPE_QUOTED:this.doctype+=o,o===this.q&&(this.q="",this.state=w.DOCTYPE);continue;case w.DOCTYPE_DTD:this.doctype+=o,"]"===o?this.state=w.DOCTYPE:g(o)&&(this.state=w.DOCTYPE_DTD_QUOTED,this.q=o);continue;case w.DOCTYPE_DTD_QUOTED:this.doctype+=o,o===this.q&&(this.state=w.DOCTYPE_DTD,this.q="");continue;case w.COMMENT:"-"===o?this.state=w.COMMENT_ENDING:this.comment+=o;continue;case w.COMMENT_ENDING:"-"===o?(this.state=w.COMMENT_ENDED,this.comment=F(this.opt,this.comment),this.comment&&D(this,"oncomment",this.comment),this.comment=""):(this.comment+="-"+o,this.state=w.COMMENT);continue;case w.COMMENT_ENDED:">"!==o?(A(this,"Malformed comment"),this.comment+="--"+o,this.state=w.COMMENT):this.state=w.TEXT;continue;case w.CDATA:"]"===o?this.state=w.CDATA_ENDING:this.cdata+=o;continue;case w.CDATA_ENDING:"]"===o?this.state=w.CDATA_ENDING_2:(this.cdata+="]"+o,this.state=w.CDATA);continue;case w.CDATA_ENDING_2:">"===o?(this.cdata&&D(this,"oncdata",this.cdata),D(this,"onclosecdata"),this.cdata="",this.state=w.TEXT):"]"===o?this.cdata+="]":(this.cdata+="]]"+o,this.state=w.CDATA);continue;case w.PROC_INST:"?"===o?this.state=w.PROC_INST_ENDING:b(o)?this.state=w.PROC_INST_BODY:this.procInstName+=o;continue;case w.PROC_INST_BODY:if(!this.procInstBody&&b(o))continue;"?"===o?this.state=w.PROC_INST_ENDING:this.procInstBody+=o;continue;case w.PROC_INST_ENDING:">"===o?(D(this,"onprocessinginstruction",{name:this.procInstName,body:this.procInstBody}),this.procInstName=this.procInstBody="",this.state=w.TEXT):(this.procInstBody+="?"+o,this.state=w.PROC_INST_BODY);continue;case w.OPEN_TAG:v(f,o)?this.tagName+=o:(k(this),">"===o?N(this):"/"===o?this.state=w.OPEN_TAG_SLASH:(b(o)||A(this,"Invalid character in tag name"),this.state=w.ATTRIB));continue;case w.OPEN_TAG_SLASH:">"===o?(N(this,!0),U(this)):(A(this,"Forward-slash in opening tag not followed by >"),this.state=w.ATTRIB);continue;case w.ATTRIB:if(b(o))continue;">"===o?N(this):"/"===o?this.state=w.OPEN_TAG_SLASH:v(h,o)?(this.attribName=o,this.attribValue="",this.state=w.ATTRIB_NAME):A(this,"Invalid attribute name");continue;case w.ATTRIB_NAME:"="===o?this.state=w.ATTRIB_VALUE:">"===o?(A(this,"Attribute without value"),this.attribValue=this.attribName,L(this),N(this)):b(o)?this.state=w.ATTRIB_NAME_SAW_WHITE:v(f,o)?this.attribName+=o:A(this,"Invalid attribute name");continue;case w.ATTRIB_NAME_SAW_WHITE:if("="===o)this.state=w.ATTRIB_VALUE;else{if(b(o))continue;A(this,"Attribute without value"),this.tag.attributes[this.attribName]="",this.attribValue="",D(this,"onattribute",{name:this.attribName,value:""}),this.attribName="",">"===o?N(this):v(h,o)?(this.attribName=o,this.state=w.ATTRIB_NAME):(A(this,"Invalid attribute name"),this.state=w.ATTRIB)}continue;case w.ATTRIB_VALUE:if(b(o))continue;g(o)?(this.q=o,this.state=w.ATTRIB_VALUE_QUOTED):(A(this,"Unquoted attribute value"),this.state=w.ATTRIB_VALUE_UNQUOTED,this.attribValue=o);continue;case w.ATTRIB_VALUE_QUOTED:if(o!==this.q){"&"===o?this.state=w.ATTRIB_VALUE_ENTITY_Q:this.attribValue+=o;continue}L(this),this.q="",this.state=w.ATTRIB_VALUE_CLOSED;continue;case w.ATTRIB_VALUE_CLOSED:b(o)?this.state=w.ATTRIB:">"===o?N(this):"/"===o?this.state=w.OPEN_TAG_SLASH:v(h,o)?(A(this,"No whitespace between attributes"),this.attribName=o,this.attribValue="",this.state=w.ATTRIB_NAME):A(this,"Invalid attribute name");continue;case w.ATTRIB_VALUE_UNQUOTED:if(!_(o)){"&"===o?this.state=w.ATTRIB_VALUE_ENTITY_U:this.attribValue+=o;continue}L(this),">"===o?N(this):this.state=w.ATTRIB;continue;case w.CLOSE_TAG:if(this.tagName)">"===o?U(this):v(f,o)?this.tagName+=o:this.script?(this.script+="</"+this.tagName,this.tagName="",this.state=w.SCRIPT):(b(o)||A(this,"Invalid tagname in closing tag"),this.state=w.CLOSE_TAG_SAW_WHITE);else{if(b(o))continue;C(h,o)?this.script?(this.script+="</"+o,this.state=w.SCRIPT):A(this,"Invalid tagname in closing tag."):this.tagName=o}continue;case w.CLOSE_TAG_SAW_WHITE:if(b(o))continue;">"===o?U(this):A(this,"Invalid characters in closing tag");continue;case w.TEXT_ENTITY:case w.ATTRIB_VALUE_ENTITY_Q:case w.ATTRIB_VALUE_ENTITY_U:var s,u;switch(this.state){case w.TEXT_ENTITY:s=w.TEXT,u="textNode";break;case w.ATTRIB_VALUE_ENTITY_Q:s=w.ATTRIB_VALUE_QUOTED,u="attribValue";break;case w.ATTRIB_VALUE_ENTITY_U:s=w.ATTRIB_VALUE_UNQUOTED,u="attribValue"}";"===o?(this[u]+=B(this),this.entity="",this.state=s):v(this.entity.length?y:m,o)?this.entity+=o:(A(this,"Invalid character in entity name"),this[u]+="&"+this.entity+o,this.entity="",this.state=s);continue;default:throw new Error(this,"Unknown state: "+this.state)}this.position>=this.bufferCheckPosition&&function(e){for(var n=Math.max(t.MAX_BUFFER_LENGTH,10),o=0,i=0,a=r.length;i<a;i++){var s=e[r[i]].length;if(s>n)switch(r[i]){case"textNode":T(e);break;case"cdata":D(e,"oncdata",e.cdata),e.cdata="";break;case"script":D(e,"onscript",e.script),e.script="";break;default:x(e,"Max buffer length exceeded: "+r[i])}o=Math.max(o,s)}var l=t.MAX_BUFFER_LENGTH-o;e.bufferCheckPosition=l+e.position}(this);return this}
/*! http://mths.be/fromcodepoint v0.1.0 by @mathias */,resume:function(){return this.error=null,this},close:function(){return this.write(null)},flush:function(){var e;T(e=this),""!==e.cdata&&(D(e,"oncdata",e.cdata),e.cdata=""),""!==e.script&&(D(e,"onscript",e.script),e.script="")}};try{o=n(202).Stream}catch(e){o=function(){}}var a=t.EVENTS.filter(function(e){return"error"!==e&&"end"!==e});function s(e,t){if(!(this instanceof s))return new s(e,t);o.apply(this),this._parser=new i(e,t),this.writable=!0,this.readable=!0;var n=this;this._parser.onend=function(){n.emit("end")},this._parser.onerror=function(e){n.emit("error",e),n._parser.error=null},this._decoder=null,a.forEach(function(e){Object.defineProperty(n,"on"+e,{get:function(){return n._parser["on"+e]},set:function(t){if(!t)return n.removeAllListeners(e),n._parser["on"+e]=t,t;n.on(e,t)},enumerable:!0,configurable:!1})})}s.prototype=Object.create(o.prototype,{constructor:{value:s}}),s.prototype.write=function(t){if("function"==typeof e&&"function"==typeof e.isBuffer&&e.isBuffer(t)){if(!this._decoder){var o=n(82).StringDecoder;this._decoder=new o("utf8")}t=this._decoder.write(t)}return this._parser.write(t.toString()),this.emit("data",t),!0},s.prototype.end=function(e){return e&&e.length&&this.write(e),this._parser.end(),!0},s.prototype.on=function(e,t){var n=this;return n._parser["on"+e]||-1===a.indexOf(e)||(n._parser["on"+e]=function(){var t=1===arguments.length?[arguments[0]]:Array.apply(null,arguments);t.splice(0,0,e),n.emit.apply(n,t)}),o.prototype.on.call(n,e,t)};var l="[CDATA[",c="DOCTYPE",u="http://www.w3.org/XML/1998/namespace",p="http://www.w3.org/2000/xmlns/",d={xml:u,xmlns:p},h=/[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,f=/[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/,m=/[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,y=/[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;function b(e){return" "===e||"\n"===e||"\r"===e||"\t"===e}function g(e){return'"'===e||"'"===e}function _(e){return">"===e||b(e)}function v(e,t){return e.test(t)}function C(e,t){return!v(e,t)}var E,I,P,w=0;for(var S in t.STATE={BEGIN:w++,BEGIN_WHITESPACE:w++,TEXT:w++,TEXT_ENTITY:w++,OPEN_WAKA:w++,SGML_DECL:w++,SGML_DECL_QUOTED:w++,DOCTYPE:w++,DOCTYPE_QUOTED:w++,DOCTYPE_DTD:w++,DOCTYPE_DTD_QUOTED:w++,COMMENT_STARTING:w++,COMMENT:w++,COMMENT_ENDING:w++,COMMENT_ENDED:w++,CDATA:w++,CDATA_ENDING:w++,CDATA_ENDING_2:w++,PROC_INST:w++,PROC_INST_BODY:w++,PROC_INST_ENDING:w++,OPEN_TAG:w++,OPEN_TAG_SLASH:w++,ATTRIB:w++,ATTRIB_NAME:w++,ATTRIB_NAME_SAW_WHITE:w++,ATTRIB_VALUE:w++,ATTRIB_VALUE_QUOTED:w++,ATTRIB_VALUE_CLOSED:w++,ATTRIB_VALUE_UNQUOTED:w++,ATTRIB_VALUE_ENTITY_Q:w++,ATTRIB_VALUE_ENTITY_U:w++,CLOSE_TAG:w++,CLOSE_TAG_SAW_WHITE:w++,SCRIPT:w++,SCRIPT_ENDING:w++},t.XML_ENTITIES={amp:"&",gt:">",lt:"<",quot:'"',apos:"'"},t.ENTITIES={amp:"&",gt:">",lt:"<",quot:'"',apos:"'",AElig:198,Aacute:193,Acirc:194,Agrave:192,Aring:197,Atilde:195,Auml:196,Ccedil:199,ETH:208,Eacute:201,Ecirc:202,Egrave:200,Euml:203,Iacute:205,Icirc:206,Igrave:204,Iuml:207,Ntilde:209,Oacute:211,Ocirc:212,Ograve:210,Oslash:216,Otilde:213,Ouml:214,THORN:222,Uacute:218,Ucirc:219,Ugrave:217,Uuml:220,Yacute:221,aacute:225,acirc:226,aelig:230,agrave:224,aring:229,atilde:227,auml:228,ccedil:231,eacute:233,ecirc:234,egrave:232,eth:240,euml:235,iacute:237,icirc:238,igrave:236,iuml:239,ntilde:241,oacute:243,ocirc:244,ograve:242,oslash:248,otilde:245,ouml:246,szlig:223,thorn:254,uacute:250,ucirc:251,ugrave:249,uuml:252,yacute:253,yuml:255,copy:169,reg:174,nbsp:160,iexcl:161,cent:162,pound:163,curren:164,yen:165,brvbar:166,sect:167,uml:168,ordf:170,laquo:171,not:172,shy:173,macr:175,deg:176,plusmn:177,sup1:185,sup2:178,sup3:179,acute:180,micro:181,para:182,middot:183,cedil:184,ordm:186,raquo:187,frac14:188,frac12:189,frac34:190,iquest:191,times:215,divide:247,OElig:338,oelig:339,Scaron:352,scaron:353,Yuml:376,fnof:402,circ:710,tilde:732,Alpha:913,Beta:914,Gamma:915,Delta:916,Epsilon:917,Zeta:918,Eta:919,Theta:920,Iota:921,Kappa:922,Lambda:923,Mu:924,Nu:925,Xi:926,Omicron:927,Pi:928,Rho:929,Sigma:931,Tau:932,Upsilon:933,Phi:934,Chi:935,Psi:936,Omega:937,alpha:945,beta:946,gamma:947,delta:948,epsilon:949,zeta:950,eta:951,theta:952,iota:953,kappa:954,lambda:955,mu:956,nu:957,xi:958,omicron:959,pi:960,rho:961,sigmaf:962,sigma:963,tau:964,upsilon:965,phi:966,chi:967,psi:968,omega:969,thetasym:977,upsih:978,piv:982,ensp:8194,emsp:8195,thinsp:8201,zwnj:8204,zwj:8205,lrm:8206,rlm:8207,ndash:8211,mdash:8212,lsquo:8216,rsquo:8217,sbquo:8218,ldquo:8220,rdquo:8221,bdquo:8222,dagger:8224,Dagger:8225,bull:8226,hellip:8230,permil:8240,prime:8242,Prime:8243,lsaquo:8249,rsaquo:8250,oline:8254,frasl:8260,euro:8364,image:8465,weierp:8472,real:8476,trade:8482,alefsym:8501,larr:8592,uarr:8593,rarr:8594,darr:8595,harr:8596,crarr:8629,lArr:8656,uArr:8657,rArr:8658,dArr:8659,hArr:8660,forall:8704,part:8706,exist:8707,empty:8709,nabla:8711,isin:8712,notin:8713,ni:8715,prod:8719,sum:8721,minus:8722,lowast:8727,radic:8730,prop:8733,infin:8734,ang:8736,and:8743,or:8744,cap:8745,cup:8746,int:8747,there4:8756,sim:8764,cong:8773,asymp:8776,ne:8800,equiv:8801,le:8804,ge:8805,sub:8834,sup:8835,nsub:8836,sube:8838,supe:8839,oplus:8853,otimes:8855,perp:8869,sdot:8901,lceil:8968,rceil:8969,lfloor:8970,rfloor:8971,lang:9001,rang:9002,loz:9674,spades:9824,clubs:9827,hearts:9829,diams:9830},Object.keys(t.ENTITIES).forEach(function(e){var n=t.ENTITIES[e],o="number"==typeof n?String.fromCharCode(n):n;t.ENTITIES[e]=o}),t.STATE)t.STATE[t.STATE[S]]=S;function O(e,t,n){e[t]&&e[t](n)}function D(e,t,n){e.textNode&&T(e),O(e,t,n)}function T(e){e.textNode=F(e.opt,e.textNode),e.textNode&&O(e,"ontext",e.textNode),e.textNode=""}function F(e,t){return e.trim&&(t=t.trim()),e.normalize&&(t=t.replace(/\s+/g," ")),t}function x(e,t){return T(e),e.trackPosition&&(t+="\nLine: "+e.line+"\nColumn: "+e.column+"\nChar: "+e.c),t=new Error(t),e.error=t,O(e,"onerror",t),e}function M(e){return e.sawRoot&&!e.closedRoot&&A(e,"Unclosed root tag"),e.state!==w.BEGIN&&e.state!==w.BEGIN_WHITESPACE&&e.state!==w.TEXT&&x(e,"Unexpected end"),T(e),e.c="",e.closed=!0,O(e,"onend"),i.call(e,e.strict,e.opt),e}function A(e,t){if("object"!=typeof e||!(e instanceof i))throw new Error("bad call to strictFail");e.strict&&x(e,t)}function k(e){e.strict||(e.tagName=e.tagName[e.looseCase]());var t=e.tags[e.tags.length-1]||e,n=e.tag={name:e.tagName,attributes:{}};e.opt.xmlns&&(n.ns=t.ns),e.attribList.length=0,D(e,"onopentagstart",n)}function R(e,t){var n=e.indexOf(":")<0?["",e]:e.split(":"),o=n[0],r=n[1];return t&&"xmlns"===e&&(o="xmlns",r=""),{prefix:o,local:r}}function L(e){if(e.strict||(e.attribName=e.attribName[e.looseCase]()),-1!==e.attribList.indexOf(e.attribName)||e.tag.attributes.hasOwnProperty(e.attribName))e.attribName=e.attribValue="";else{if(e.opt.xmlns){var t=R(e.attribName,!0),n=t.prefix,o=t.local;if("xmlns"===n)if("xml"===o&&e.attribValue!==u)A(e,"xml: prefix must be bound to "+u+"\nActual: "+e.attribValue);else if("xmlns"===o&&e.attribValue!==p)A(e,"xmlns: prefix must be bound to "+p+"\nActual: "+e.attribValue);else{var r=e.tag,i=e.tags[e.tags.length-1]||e;r.ns===i.ns&&(r.ns=Object.create(i.ns)),r.ns[o]=e.attribValue}e.attribList.push([e.attribName,e.attribValue])}else e.tag.attributes[e.attribName]=e.attribValue,D(e,"onattribute",{name:e.attribName,value:e.attribValue});e.attribName=e.attribValue=""}}function N(e,t){if(e.opt.xmlns){var n=e.tag,o=R(e.tagName);n.prefix=o.prefix,n.local=o.local,n.uri=n.ns[o.prefix]||"",n.prefix&&!n.uri&&(A(e,"Unbound namespace prefix: "+JSON.stringify(e.tagName)),n.uri=o.prefix);var r=e.tags[e.tags.length-1]||e;n.ns&&r.ns!==n.ns&&Object.keys(n.ns).forEach(function(t){D(e,"onopennamespace",{prefix:t,uri:n.ns[t]})});for(var i=0,a=e.attribList.length;i<a;i++){var s=e.attribList[i],l=s[0],c=s[1],u=R(l,!0),p=u.prefix,d=u.local,h=""===p?"":n.ns[p]||"",f={name:l,value:c,prefix:p,local:d,uri:h};p&&"xmlns"!==p&&!h&&(A(e,"Unbound namespace prefix: "+JSON.stringify(p)),f.uri=p),e.tag.attributes[l]=f,D(e,"onattribute",f)}e.attribList.length=0}e.tag.isSelfClosing=!!t,e.sawRoot=!0,e.tags.push(e.tag),D(e,"onopentag",e.tag),t||(e.noscript||"script"!==e.tagName.toLowerCase()?e.state=w.TEXT:e.state=w.SCRIPT,e.tag=null,e.tagName=""),e.attribName=e.attribValue="",e.attribList.length=0}function U(e){if(!e.tagName)return A(e,"Weird empty close tag."),e.textNode+="</>",void(e.state=w.TEXT);if(e.script){if("script"!==e.tagName)return e.script+="</"+e.tagName+">",e.tagName="",void(e.state=w.SCRIPT);D(e,"onscript",e.script),e.script=""}var t=e.tags.length,n=e.tagName;e.strict||(n=n[e.looseCase]());for(var o=n;t--;){if(e.tags[t].name===o)break;A(e,"Unexpected close tag")}if(t<0)return A(e,"Unmatched closing tag: "+e.tagName),e.textNode+="</"+e.tagName+">",void(e.state=w.TEXT);e.tagName=n;for(var r=e.tags.length;r-- >t;){var i=e.tag=e.tags.pop();e.tagName=e.tag.name,D(e,"onclosetag",e.tagName);var a={};for(var s in i.ns)a[s]=i.ns[s];var l=e.tags[e.tags.length-1]||e;e.opt.xmlns&&i.ns!==l.ns&&Object.keys(i.ns).forEach(function(t){var n=i.ns[t];D(e,"onclosenamespace",{prefix:t,uri:n})})}0===t&&(e.closedRoot=!0),e.tagName=e.attribValue=e.attribName="",e.attribList.length=0,e.state=w.TEXT}function B(e){var t,n=e.entity,o=n.toLowerCase(),r="";return e.ENTITIES[n]?e.ENTITIES[n]:e.ENTITIES[o]?e.ENTITIES[o]:("#"===(n=o).charAt(0)&&("x"===n.charAt(1)?(n=n.slice(2),r=(t=parseInt(n,16)).toString(16)):(n=n.slice(1),r=(t=parseInt(n,10)).toString(10))),n=n.replace(/^0+/,""),isNaN(t)||r.toLowerCase()!==n?(A(e,"Invalid character entity"),"&"+e.entity+";"):String.fromCodePoint(t))}function j(e,t){"<"===t?(e.state=w.OPEN_WAKA,e.startTagPosition=e.position):b(t)||(A(e,"Non-whitespace before first tag."),e.textNode=t,e.state=w.TEXT)}function W(e,t){var n="";return t<e.length&&(n=e.charAt(t)),n}w=t.STATE,String.fromCodePoint||(E=String.fromCharCode,I=Math.floor,P=function(){var e,t,n=[],o=-1,r=arguments.length;if(!r)return"";for(var i="";++o<r;){var a=Number(arguments[o]);if(!isFinite(a)||a<0||a>1114111||I(a)!==a)throw RangeError("Invalid code point: "+a);a<=65535?n.push(a):(e=55296+((a-=65536)>>10),t=a%1024+56320,n.push(e,t)),(o+1===r||n.length>16384)&&(i+=E.apply(null,n),n.length=0)}return i},Object.defineProperty?Object.defineProperty(String,"fromCodePoint",{value:P,configurable:!0,writable:!0}):String.fromCodePoint=P)}(t)}).call(this,n(79).Buffer)},function(e,t,n){"use strict";t.byteLength=function(e){var t=c(e),n=t[0],o=t[1];return 3*(n+o)/4-o},t.toByteArray=function(e){for(var t,n=c(e),o=n[0],a=n[1],s=new i(function(e,t,n){return 3*(t+n)/4-n}(0,o,a)),l=0,u=a>0?o-4:o,p=0;p<u;p+=4)t=r[e.charCodeAt(p)]<<18|r[e.charCodeAt(p+1)]<<12|r[e.charCodeAt(p+2)]<<6|r[e.charCodeAt(p+3)],s[l++]=t>>16&255,s[l++]=t>>8&255,s[l++]=255&t;2===a&&(t=r[e.charCodeAt(p)]<<2|r[e.charCodeAt(p+1)]>>4,s[l++]=255&t);1===a&&(t=r[e.charCodeAt(p)]<<10|r[e.charCodeAt(p+1)]<<4|r[e.charCodeAt(p+2)]>>2,s[l++]=t>>8&255,s[l++]=255&t);return s},t.fromByteArray=function(e){for(var t,n=e.length,r=n%3,i=[],a=0,s=n-r;a<s;a+=16383)i.push(u(e,a,a+16383>s?s:a+16383));1===r?(t=e[n-1],i.push(o[t>>2]+o[t<<4&63]+"==")):2===r&&(t=(e[n-2]<<8)+e[n-1],i.push(o[t>>10]+o[t>>4&63]+o[t<<2&63]+"="));return i.join("")};for(var o=[],r=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,a="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",s=0,l=a.length;s<l;++s)o[s]=a[s],r[a.charCodeAt(s)]=s;function c(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function u(e,t,n){for(var r,i,a=[],s=t;s<n;s+=3)r=(e[s]<<16&16711680)+(e[s+1]<<8&65280)+(255&e[s+2]),a.push(o[(i=r)>>18&63]+o[i>>12&63]+o[i>>6&63]+o[63&i]);return a.join("")}r["-".charCodeAt(0)]=62,r["_".charCodeAt(0)]=63},function(e,t){t.read=function(e,t,n,o,r){var i,a,s=8*r-o-1,l=(1<<s)-1,c=l>>1,u=-7,p=n?r-1:0,d=n?-1:1,h=e[t+p];for(p+=d,i=h&(1<<-u)-1,h>>=-u,u+=s;u>0;i=256*i+e[t+p],p+=d,u-=8);for(a=i&(1<<-u)-1,i>>=-u,u+=o;u>0;a=256*a+e[t+p],p+=d,u-=8);if(0===i)i=1-c;else{if(i===l)return a?NaN:1/0*(h?-1:1);a+=Math.pow(2,o),i-=c}return(h?-1:1)*a*Math.pow(2,i-o)},t.write=function(e,t,n,o,r,i){var a,s,l,c=8*i-r-1,u=(1<<c)-1,p=u>>1,d=23===r?Math.pow(2,-24)-Math.pow(2,-77):0,h=o?0:i-1,f=o?1:-1,m=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(s=isNaN(t)?1:0,a=u):(a=Math.floor(Math.log(t)/Math.LN2),t*(l=Math.pow(2,-a))<1&&(a--,l*=2),(t+=a+p>=1?d/l:d*Math.pow(2,1-p))*l>=2&&(a++,l/=2),a+p>=u?(s=0,a=u):a+p>=1?(s=(t*l-1)*Math.pow(2,r),a+=p):(s=t*Math.pow(2,p-1)*Math.pow(2,r),a=0));r>=8;e[n+h]=255&s,h+=f,s/=256,r-=8);for(a=a<<r|s,c+=r;c>0;e[n+h]=255&a,h+=f,a/=256,c-=8);e[n+h-f]|=128*m}},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t,n){e.exports=r;var o=n(64).EventEmitter;function r(){o.call(this)}n(38)(r,o),r.Readable=n(80),r.Writable=n(210),r.Duplex=n(211),r.Transform=n(212),r.PassThrough=n(213),r.Stream=r,r.prototype.pipe=function(e,t){var n=this;function r(t){e.writable&&!1===e.write(t)&&n.pause&&n.pause()}function i(){n.readable&&n.resume&&n.resume()}n.on("data",r),e.on("drain",i),e._isStdio||t&&!1===t.end||(n.on("end",s),n.on("close",l));var a=!1;function s(){a||(a=!0,e.end())}function l(){a||(a=!0,"function"==typeof e.destroy&&e.destroy())}function c(e){if(u(),0===o.listenerCount(this,"error"))throw e}function u(){n.removeListener("data",r),e.removeListener("drain",i),n.removeListener("end",s),n.removeListener("close",l),n.removeListener("error",c),e.removeListener("error",c),n.removeListener("end",u),n.removeListener("close",u),e.removeListener("close",u)}return n.on("error",c),e.on("error",c),n.on("end",u),n.on("close",u),e.on("close",u),e.emit("pipe",n),e}},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t){},function(e,t,n){"use strict";var o=n(66).Buffer,r=n(206);e.exports=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.head=null,this.tail=null,this.length=0}return e.prototype.push=function(e){var t={data:e,next:null};this.length>0?this.tail.next=t:this.head=t,this.tail=t,++this.length},e.prototype.unshift=function(e){var t={data:e,next:this.head};0===this.length&&(this.tail=t),this.head=t,++this.length},e.prototype.shift=function(){if(0!==this.length){var e=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,e}},e.prototype.clear=function(){this.head=this.tail=null,this.length=0},e.prototype.join=function(e){if(0===this.length)return"";for(var t=this.head,n=""+t.data;t=t.next;)n+=e+t.data;return n},e.prototype.concat=function(e){if(0===this.length)return o.alloc(0);if(1===this.length)return this.head.data;for(var t,n,r,i=o.allocUnsafe(e>>>0),a=this.head,s=0;a;)t=a.data,n=i,r=s,t.copy(n,r),s+=a.data.length,a=a.next;return i},e}(),r&&r.inspect&&r.inspect.custom&&(e.exports.prototype[r.inspect.custom]=function(){var e=r.inspect({length:this.length});return this.constructor.name+" "+e})},function(e,t){},function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var o,r,i,a,s,l=1,c={},u=!1,p=e.document,d=Object.getPrototypeOf&&Object.getPrototypeOf(e);d=d&&d.setTimeout?d:e,"[object process]"==={}.toString.call(e.process)?o=function(e){t.nextTick(function(){f(e)})}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?e.MessageChannel?((i=new MessageChannel).port1.onmessage=function(e){f(e.data)},o=function(e){i.port2.postMessage(e)}):p&&"onreadystatechange"in p.createElement("script")?(r=p.documentElement,o=function(e){var t=p.createElement("script");t.onreadystatechange=function(){f(e),t.onreadystatechange=null,r.removeChild(t),t=null},r.appendChild(t)}):o=function(e){setTimeout(f,0,e)}:(a="setImmediate$"+Math.random()+"$",s=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(a)&&f(+t.data.slice(a.length))},e.addEventListener?e.addEventListener("message",s,!1):e.attachEvent("onmessage",s),o=function(t){e.postMessage(a+t,"*")}),d.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var r={callback:e,args:t};return c[l]=r,o(l),l++},d.clearImmediate=h}function h(e){delete c[e]}function f(e){if(u)setTimeout(f,0,e);else{var t=c[e];if(t){u=!0;try{!function(e){var t=e.callback,o=e.args;switch(o.length){case 0:t();break;case 1:t(o[0]);break;case 2:t(o[0],o[1]);break;case 3:t(o[0],o[1],o[2]);break;default:t.apply(n,o)}}(t)}finally{h(e),u=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,n(31),n(42))},function(e,t,n){(function(t){function n(e){try{if(!t.localStorage)return!1}catch(e){return!1}var n=t.localStorage[e];return null!=n&&"true"===String(n).toLowerCase()}e.exports=function(e,t){if(n("noDeprecation"))return e;var o=!1;return function(){if(!o){if(n("throwDeprecation"))throw new Error(t);n("traceDeprecation")?console.trace(t):console.warn(t),o=!0}return e.apply(this,arguments)}}}).call(this,n(31))},function(e,t,n){"use strict";e.exports=i;var o=n(115),r=n(43);function i(e){if(!(this instanceof i))return new i(e);o.call(this,e)}r.inherits=n(38),r.inherits(i,o),i.prototype._transform=function(e,t,n){n(null,e)}},function(e,t,n){e.exports=n(81)},function(e,t,n){e.exports=n(32)},function(e,t,n){e.exports=n(80).Transform},function(e,t,n){e.exports=n(80).PassThrough},function(e,t){(function(){"use strict";t.stripBOM=function(e){return"\ufeff"===e[0]?e.substring(1):e}}).call(this)},function(e,t,n){var o,r,i;
/* @license
Papa Parse
v5.0.0
https://github.com/mholt/PapaParse
License: MIT
*/r=[],void 0===(i="function"==typeof(o=function e(){"use strict";var t="undefined"!=typeof self?self:"undefined"!=typeof window?window:void 0!==t?t:{},n=!t.document&&!!t.postMessage,o=n&&/blob:/i.test((t.location||{}).protocol),r={},i=0,a={parse:function(n,o){var s=(o=o||{}).dynamicTyping||!1;if(C(s)&&(o.dynamicTypingFunction=s,s={}),o.dynamicTyping=s,o.transform=!!C(o.transform)&&o.transform,o.worker&&a.WORKERS_SUPPORTED){var l=function(){if(!a.WORKERS_SUPPORTED)return!1;var n,o,s=(n=t.URL||t.webkitURL||null,o=e.toString(),a.BLOB_URL||(a.BLOB_URL=n.createObjectURL(new Blob(["(",o,")();"],{type:"text/javascript"})))),l=new t.Worker(s);return l.onmessage=y,l.id=i++,r[l.id]=l}();return l.userStep=o.step,l.userChunk=o.chunk,l.userComplete=o.complete,l.userError=o.error,o.step=C(o.step),o.chunk=C(o.chunk),o.complete=C(o.complete),o.error=C(o.error),delete o.worker,void l.postMessage({input:n,config:o,workerId:l.id})}var h=null;return a.NODE_STREAM_INPUT,"string"==typeof n?h=o.download?new c(o):new p(o):!0===n.readable&&C(n.read)&&C(n.on)?h=new d(o):(t.File&&n instanceof File||n instanceof Object)&&(h=new u(o)),h.stream(n)},unparse:function(e,t){var n=!1,o=!0,r=",",i="\r\n",s='"',l=s+s,c=!1,u=null;!function(){if("object"==typeof t){if("string"!=typeof t.delimiter||a.BAD_DELIMITERS.filter(function(e){return-1!==t.delimiter.indexOf(e)}).length||(r=t.delimiter),("boolean"==typeof t.quotes||Array.isArray(t.quotes))&&(n=t.quotes),"boolean"!=typeof t.skipEmptyLines&&"string"!=typeof t.skipEmptyLines||(c=t.skipEmptyLines),"string"==typeof t.newline&&(i=t.newline),"string"==typeof t.quoteChar&&(s=t.quoteChar),"boolean"==typeof t.header&&(o=t.header),Array.isArray(t.columns)){if(0===t.columns.length)throw new Error("Option columns is empty");u=t.columns}void 0!==t.escapeChar&&(l=t.escapeChar+s)}}();var p=new RegExp(f(s),"g");if("string"==typeof e&&(e=JSON.parse(e)),Array.isArray(e)){if(!e.length||Array.isArray(e[0]))return h(null,e,c);if("object"==typeof e[0])return h(u||d(e[0]),e,c)}else if("object"==typeof e)return"string"==typeof e.data&&(e.data=JSON.parse(e.data)),Array.isArray(e.data)&&(e.fields||(e.fields=e.meta&&e.meta.fields),e.fields||(e.fields=Array.isArray(e.data[0])?e.fields:d(e.data[0])),Array.isArray(e.data[0])||"object"==typeof e.data[0]||(e.data=[e.data])),h(e.fields||[],e.data||[],c);throw new Error("Unable to serialize unrecognized input");function d(e){if("object"!=typeof e)return[];var t=[];for(var n in e)t.push(n);return t}function h(e,t,n){var a="";"string"==typeof e&&(e=JSON.parse(e)),"string"==typeof t&&(t=JSON.parse(t));var s=Array.isArray(e)&&0<e.length,l=!Array.isArray(t[0]);if(s&&o){for(var c=0;c<e.length;c++)0<c&&(a+=r),a+=m(e[c],c);0<t.length&&(a+=i)}for(var u=0;u<t.length;u++){var p=s?e.length:t[u].length,d=!1,h=s?0===Object.keys(t[u]).length:0===t[u].length;if(n&&!s&&(d="greedy"===n?""===t[u].join("").trim():1===t[u].length&&0===t[u][0].length),"greedy"===n&&s){for(var f=[],y=0;y<p;y++){var b=l?e[y]:y;f.push(t[u][b])}d=""===f.join("").trim()}if(!d){for(var g=0;g<p;g++){0<g&&!h&&(a+=r);var _=s&&l?e[g]:g;a+=m(t[u][_],g)}u<t.length-1&&(!n||0<p&&!h)&&(a+=i)}}return a}function m(e,t){if(null==e)return"";if(e.constructor===Date)return JSON.stringify(e).slice(1,25);e=e.toString().replace(p,l);var o="boolean"==typeof n&&n||Array.isArray(n)&&n[t]||function(e,t){for(var n=0;n<t.length;n++)if(-1<e.indexOf(t[n]))return!0;return!1}(e,a.BAD_DELIMITERS)||-1<e.indexOf(r)||" "===e.charAt(0)||" "===e.charAt(e.length-1);return o?s+e+s:e}}};if(a.RECORD_SEP=String.fromCharCode(30),a.UNIT_SEP=String.fromCharCode(31),a.BYTE_ORDER_MARK="\ufeff",a.BAD_DELIMITERS=["\r","\n",'"',a.BYTE_ORDER_MARK],a.WORKERS_SUPPORTED=!n&&!!t.Worker,a.NODE_STREAM_INPUT=1,a.LocalChunkSize=10485760,a.RemoteChunkSize=5242880,a.DefaultDelimiter=",",a.Parser=m,a.ParserHandle=h,a.NetworkStreamer=c,a.FileStreamer=u,a.StringStreamer=p,a.ReadableStreamStreamer=d,t.jQuery){var s=t.jQuery;s.fn.parse=function(e){var n=e.config||{},o=[];return this.each(function(e){if("INPUT"!==s(this).prop("tagName").toUpperCase()||"file"!==s(this).attr("type").toLowerCase()||!t.FileReader||!this.files||0===this.files.length)return!0;for(var r=0;r<this.files.length;r++)o.push({file:this.files[r],inputElem:this,instanceConfig:s.extend({},n)})}),r(),this;function r(){if(0!==o.length){var t,n,r,l=o[0];if(C(e.before)){var c=e.before(l.file,l.inputElem);if("object"==typeof c){if("abort"===c.action)return t=l.file,n=l.inputElem,r=c.reason,void(C(e.error)&&e.error({name:"AbortError"},t,n,r));if("skip"===c.action)return void i();"object"==typeof c.config&&(l.instanceConfig=s.extend(l.instanceConfig,c.config))}else if("skip"===c)return void i()}var u=l.instanceConfig.complete;l.instanceConfig.complete=function(e){C(u)&&u(e,l.file,l.inputElem),i()},a.parse(l.file,l.instanceConfig)}else C(e.complete)&&e.complete()}function i(){o.splice(0,1),r()}}}function l(e){this._handle=null,this._finished=!1,this._completed=!1,this._halted=!1,this._input=null,this._baseIndex=0,this._partialLine="",this._rowCount=0,this._start=0,this._nextChunk=null,this.isFirstChunk=!0,this._completeResults={data:[],errors:[],meta:{}},function(e){var t=_(e);t.chunkSize=parseInt(t.chunkSize),e.step||e.chunk||(t.chunkSize=null),this._handle=new h(t),(this._handle.streamer=this)._config=t}.call(this,e),this.parseChunk=function(e,n){if(this.isFirstChunk&&C(this._config.beforeFirstChunk)){var r=this._config.beforeFirstChunk(e);void 0!==r&&(e=r)}this.isFirstChunk=!1,this._halted=!1;var i=this._partialLine+e;this._partialLine="";var s=this._handle.parse(i,this._baseIndex,!this._finished);if(!this._handle.paused()&&!this._handle.aborted()){var l=s.meta.cursor;this._finished||(this._partialLine=i.substring(l-this._baseIndex),this._baseIndex=l),s&&s.data&&(this._rowCount+=s.data.length);var c=this._finished||this._config.preview&&this._rowCount>=this._config.preview;if(o)t.postMessage({results:s,workerId:a.WORKER_ID,finished:c});else if(C(this._config.chunk)&&!n){if(this._config.chunk(s,this._handle),this._handle.paused()||this._handle.aborted())return void(this._halted=!0);s=void 0,this._completeResults=void 0}return this._config.step||this._config.chunk||(this._completeResults.data=this._completeResults.data.concat(s.data),this._completeResults.errors=this._completeResults.errors.concat(s.errors),this._completeResults.meta=s.meta),this._completed||!c||!C(this._config.complete)||s&&s.meta.aborted||(this._config.complete(this._completeResults,this._input),this._completed=!0),c||s&&s.meta.paused||this._nextChunk(),s}this._halted=!0},this._sendError=function(e){C(this._config.error)?this._config.error(e):o&&this._config.error&&t.postMessage({workerId:a.WORKER_ID,error:e,finished:!1})}}function c(e){var t;(e=e||{}).chunkSize||(e.chunkSize=a.RemoteChunkSize),l.call(this,e),this._nextChunk=n?function(){this._readChunk(),this._chunkLoaded()}:function(){this._readChunk()},this.stream=function(e){this._input=e,this._nextChunk()},this._readChunk=function(){if(this._finished)this._chunkLoaded();else{if(t=new XMLHttpRequest,this._config.withCredentials&&(t.withCredentials=this._config.withCredentials),n||(t.onload=v(this._chunkLoaded,this),t.onerror=v(this._chunkError,this)),t.open("GET",this._input,!n),this._config.downloadRequestHeaders){var e=this._config.downloadRequestHeaders;for(var o in e)t.setRequestHeader(o,e[o])}if(this._config.chunkSize){var r=this._start+this._config.chunkSize-1;t.setRequestHeader("Range","bytes="+this._start+"-"+r)}try{t.send()}catch(e){this._chunkError(e.message)}n&&0===t.status?this._chunkError():this._start+=this._config.chunkSize}},this._chunkLoaded=function(){var e;4===t.readyState&&(t.status<200||400<=t.status?this._chunkError():(this._finished=!this._config.chunkSize||this._start>(null===(e=t.getResponseHeader("Content-Range"))?-1:parseInt(e.substr(e.lastIndexOf("/")+1))),this.parseChunk(t.responseText)))},this._chunkError=function(e){var n=t.statusText||e;this._sendError(new Error(n))}}function u(e){var t,n;(e=e||{}).chunkSize||(e.chunkSize=a.LocalChunkSize),l.call(this,e);var o="undefined"!=typeof FileReader;this.stream=function(e){this._input=e,n=e.slice||e.webkitSlice||e.mozSlice,o?((t=new FileReader).onload=v(this._chunkLoaded,this),t.onerror=v(this._chunkError,this)):t=new FileReaderSync,this._nextChunk()},this._nextChunk=function(){this._finished||this._config.preview&&!(this._rowCount<this._config.preview)||this._readChunk()},this._readChunk=function(){var e=this._input;if(this._config.chunkSize){var r=Math.min(this._start+this._config.chunkSize,this._input.size);e=n.call(e,this._start,r)}var i=t.readAsText(e,this._config.encoding);o||this._chunkLoaded({target:{result:i}})},this._chunkLoaded=function(e){this._start+=this._config.chunkSize,this._finished=!this._config.chunkSize||this._start>=this._input.size,this.parseChunk(e.target.result)},this._chunkError=function(){this._sendError(t.error)}}function p(e){var t;l.call(this,e=e||{}),this.stream=function(e){return t=e,this._nextChunk()},this._nextChunk=function(){if(!this._finished){var e=this._config.chunkSize,n=e?t.substr(0,e):t;return t=e?t.substr(e):"",this._finished=!t,this.parseChunk(n)}}}function d(e){l.call(this,e=e||{});var t=[],n=!0,o=!1;this.pause=function(){l.prototype.pause.apply(this,arguments),this._input.pause()},this.resume=function(){l.prototype.resume.apply(this,arguments),this._input.resume()},this.stream=function(e){this._input=e,this._input.on("data",this._streamData),this._input.on("end",this._streamEnd),this._input.on("error",this._streamError)},this._checkIsFinished=function(){o&&1===t.length&&(this._finished=!0)},this._nextChunk=function(){this._checkIsFinished(),t.length?this.parseChunk(t.shift()):n=!0},this._streamData=v(function(e){try{t.push("string"==typeof e?e:e.toString(this._config.encoding)),n&&(n=!1,this._checkIsFinished(),this.parseChunk(t.shift()))}catch(e){this._streamError(e)}},this),this._streamError=v(function(e){this._streamCleanUp(),this._sendError(e)},this),this._streamEnd=v(function(){this._streamCleanUp(),o=!0,this._streamData("")},this),this._streamCleanUp=v(function(){this._input.removeListener("data",this._streamData),this._input.removeListener("end",this._streamEnd),this._input.removeListener("error",this._streamError)},this)}function h(e){var t,n,o,r=/^\s*-?(\d*\.?\d+|\d+\.?\d*)(e[-+]?\d+)?\s*$/i,i=/(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d\.\d+([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))|(\d{4}-[01]\d-[0-3]\dT[0-2]\d:[0-5]\d([+-][0-2]\d:[0-5]\d|Z))/,s=this,l=0,c=0,u=!1,p=!1,d=[],h={data:[],errors:[],meta:{}};if(C(e.step)){var y=e.step;e.step=function(t){if(h=t,v())g();else{if(g(),0===h.data.length)return;l+=t.data.length,e.preview&&l>e.preview?n.abort():y(h,s)}}}function b(t){return"greedy"===e.skipEmptyLines?""===t.join("").trim():1===t.length&&0===t[0].length}function g(){if(h&&o&&(I("Delimiter","UndetectableDelimiter","Unable to auto-detect delimiting character; defaulted to '"+a.DefaultDelimiter+"'"),o=!1),e.skipEmptyLines)for(var t=0;t<h.data.length;t++)b(h.data[t])&&h.data.splice(t--,1);return v()&&function(){if(h)if(Array.isArray(h.data[0])){for(var t=0;v()&&t<h.data.length;t++)h.data[t].forEach(n);h.data.splice(0,1)}else h.data.forEach(n);function n(t){C(e.transformHeader)&&(t=e.transformHeader(t)),d.push(t)}}(),function(){if(!h||!e.header&&!e.dynamicTyping&&!e.transform)return h;function t(t,n){var o,r=e.header?{}:[];for(o=0;o<t.length;o++){var i=o,a=t[o];e.header&&(i=o>=d.length?"__parsed_extra":d[o]),e.transform&&(a=e.transform(a,i)),a=E(i,a),"__parsed_extra"===i?(r[i]=r[i]||[],r[i].push(a)):r[i]=a}return e.header&&(o>d.length?I("FieldMismatch","TooManyFields","Too many fields: expected "+d.length+" fields but parsed "+o,c+n):o<d.length&&I("FieldMismatch","TooFewFields","Too few fields: expected "+d.length+" fields but parsed "+o,c+n)),r}var n=1;return!h.data[0]||Array.isArray(h.data[0])?(h.data=h.data.map(t),n=h.data.length):h.data=t(h.data,0),e.header&&h.meta&&(h.meta.fields=d),c+=n,h}()}function v(){return e.header&&0===d.length}function E(t,n){return o=t,e.dynamicTypingFunction&&void 0===e.dynamicTyping[o]&&(e.dynamicTyping[o]=e.dynamicTypingFunction(o)),!0===(e.dynamicTyping[o]||e.dynamicTyping)?"true"===n||"TRUE"===n||"false"!==n&&"FALSE"!==n&&(r.test(n)?parseFloat(n):i.test(n)?new Date(n):""===n?null:n):n;var o}function I(e,t,n,o){h.errors.push({type:e,code:t,message:n,row:o})}this.parse=function(r,i,s){var l=e.quoteChar||'"';if(e.newline||(e.newline=function(e,t){e=e.substr(0,1048576);var n=new RegExp(f(t)+"([^]*?)"+f(t),"gm"),o=(e=e.replace(n,"")).split("\r"),r=e.split("\n"),i=1<r.length&&r[0].length<o[0].length;if(1===o.length||i)return"\n";for(var a=0,s=0;s<o.length;s++)"\n"===o[s][0]&&a++;return a>=o.length/2?"\r\n":"\r"}(r,l)),o=!1,e.delimiter)C(e.delimiter)&&(e.delimiter=e.delimiter(r),h.meta.delimiter=e.delimiter);else{var c=function(t,n,o,r,i){var s,l,c;i=i||[",","\t","|",";",a.RECORD_SEP,a.UNIT_SEP];for(var u=0;u<i.length;u++){var p=i[u],d=0,h=0,f=0;c=void 0;for(var y=new m({comments:r,delimiter:p,newline:n,preview:10}).parse(t),g=0;g<y.data.length;g++)if(o&&b(y.data[g]))f++;else{var _=y.data[g].length;h+=_,void 0!==c?1<_&&(d+=Math.abs(_-c),c=_):c=0}0<y.data.length&&(h/=y.data.length-f),(void 0===l||l<d)&&1.99<h&&(l=d,s=p)}return{successful:!!(e.delimiter=s),bestDelimiter:s}}(r,e.newline,e.skipEmptyLines,e.comments,e.delimitersToGuess);c.successful?e.delimiter=c.bestDelimiter:(o=!0,e.delimiter=a.DefaultDelimiter),h.meta.delimiter=e.delimiter}var p=_(e);return e.preview&&e.header&&p.preview++,t=r,n=new m(p),h=n.parse(t,i,s),g(),u?{meta:{paused:!0}}:h||{meta:{paused:!1}}},this.paused=function(){return u},this.pause=function(){u=!0,n.abort(),t=t.substr(n.getCharIndex())},this.resume=function(){s.streamer._halted?(u=!1,s.streamer.parseChunk(t,!0)):setTimeout(this.resume,3)},this.aborted=function(){return p},this.abort=function(){p=!0,n.abort(),h.meta.aborted=!0,C(e.complete)&&e.complete(h),t=""}}function f(e){return e.replace(/[.*+?^${}()|[\]\\]/g,"\\$&")}function m(e){var t,n=(e=e||{}).delimiter,o=e.newline,r=e.comments,i=e.step,s=e.preview,l=e.fastMode,c=t=void 0===e.quoteChar?'"':e.quoteChar;if(void 0!==e.escapeChar&&(c=e.escapeChar),("string"!=typeof n||-1<a.BAD_DELIMITERS.indexOf(n))&&(n=","),r===n)throw new Error("Comment character same as delimiter");!0===r?r="#":("string"!=typeof r||-1<a.BAD_DELIMITERS.indexOf(r))&&(r=!1),"\n"!==o&&"\r"!==o&&"\r\n"!==o&&(o="\n");var u=0,p=!1;this.parse=function(e,a,d){if("string"!=typeof e)throw new Error("Input must be a string");var h=e.length,m=n.length,y=o.length,b=r.length,g=C(i),_=[],v=[],E=[],I=u=0;if(!e)return N();if(l||!1!==l&&-1===e.indexOf(t)){for(var P=e.split(o),w=0;w<P.length;w++){if(E=P[w],u+=E.length,w!==P.length-1)u+=o.length;else if(d)return N();if(!r||E.substr(0,b)!==r){if(g){if(_=[],A(E.split(n)),U(),p)return N()}else A(E.split(n));if(s&&s<=w)return _=_.slice(0,s),N(!0)}}return N()}for(var S=e.indexOf(n,u),O=e.indexOf(o,u),D=new RegExp(f(c)+f(t),"g"),T=e.indexOf(t,u);;)if(e[u]!==t)if(r&&0===E.length&&e.substr(u,b)===r){if(-1===O)return N();u=O+y,O=e.indexOf(o,u),S=e.indexOf(n,u)}else{if(-1!==S&&(S<O||-1===O)){if(-1===T){E.push(e.substring(u,S)),u=S+m,S=e.indexOf(n,u);continue}var F=B(S,T,O);if(F&&F.nextDelim){S=F.nextDelim,T=F.quoteSearch,E.push(e.substring(u,S)),u=S+m,S=e.indexOf(n,u);continue}}if(-1===O)break;if(E.push(e.substring(u,O)),L(O+y),g&&(U(),p))return N();if(s&&_.length>=s)return N(!0)}else for(T=u,u++;;){if(-1===(T=e.indexOf(t,T+1)))return d||v.push({type:"Quotes",code:"MissingQuotes",message:"Quoted field unterminated",row:_.length,index:u}),R();if(T===h-1)return R(e.substring(u,T).replace(D,t));if(t!==c||e[T+1]!==c){if(t===c||0===T||e[T-1]!==c){var x=k(-1===O?S:Math.min(S,O));if(e[T+1+x]===n){E.push(e.substring(u,T).replace(D,t)),e[u=T+1+x+m]!==t&&(T=e.indexOf(t,u)),S=e.indexOf(n,u),O=e.indexOf(o,u);break}var M=k(O);if(e.substr(T+1+M,y)===o){if(E.push(e.substring(u,T).replace(D,t)),L(T+1+M+y),S=e.indexOf(n,u),T=e.indexOf(t,u),g&&(U(),p))return N();if(s&&_.length>=s)return N(!0);break}v.push({type:"Quotes",code:"InvalidQuotes",message:"Trailing quote on quoted field is malformed",row:_.length,index:u}),T++}}else T++}return R();function A(e){_.push(e),I=u}function k(t){var n=0;if(-1!==t){var o=e.substring(T+1,t);o&&""===o.trim()&&(n=o.length)}return n}function R(t){return d||(void 0===t&&(t=e.substr(u)),E.push(t),u=h,A(E),g&&U()),N()}function L(t){u=t,A(E),E=[],O=e.indexOf(o,u)}function N(e,t){return{data:t?_[0]:_,errors:v,meta:{delimiter:n,linebreak:o,aborted:p,truncated:!!e,cursor:I+(a||0)}}}function U(){i(N(void 0,!0)),_=[],v=[]}function B(o,r,i){var a={nextDelim:void 0,quoteSearch:void 0},s=e.indexOf(t,r+1);if(r<o&&o<s&&(s<i||-1===i)){var l=e.indexOf(n,s);if(-1===l)return a;s<l&&(s=e.indexOf(t,s+1)),a=B(l,s,i)}else a={nextDelim:o,quoteSearch:r};return a}},this.abort=function(){p=!0},this.getCharIndex=function(){return u}}function y(e){var t=e.data,n=r[t.workerId],o=!1;if(t.error)n.userError(t.error,t.file);else if(t.results&&t.results.data){var i={abort:function(){o=!0,b(t.workerId,{data:[],errors:[],meta:{aborted:!0}})},pause:g,resume:g};if(C(n.userStep)){for(var a=0;a<t.results.data.length&&(n.userStep({data:t.results.data[a],errors:t.results.errors,meta:t.results.meta},i),!o);a++);delete t.results}else C(n.userChunk)&&(n.userChunk(t.results,i,t.file),delete t.results)}t.finished&&!o&&b(t.workerId,t.results)}function b(e,t){var n=r[e];C(n.userComplete)&&n.userComplete(t),n.terminate(),delete r[e]}function g(){throw new Error("Not implemented.")}function _(e){if("object"!=typeof e||null===e)return e;var t=Array.isArray(e)?[]:{};for(var n in e)t[n]=_(e[n]);return t}function v(e,t){return function(){e.apply(t,arguments)}}function C(e){return"function"==typeof e}return o&&(t.onmessage=function(e){var n=e.data;if(void 0===a.WORKER_ID&&n&&(a.WORKER_ID=n.workerId),"string"==typeof n.input)t.postMessage({workerId:a.WORKER_ID,results:a.parse(n.input,n.config),finished:!0});else if(t.File&&n.input instanceof File||n.input instanceof Object){var o=a.parse(n.input,n.config);o&&t.postMessage({workerId:a.WORKER_ID,results:o,finished:!0})}}),(c.prototype=Object.create(l.prototype)).constructor=c,(u.prototype=Object.create(l.prototype)).constructor=u,(p.prototype=Object.create(p.prototype)).constructor=p,(d.prototype=Object.create(l.prototype)).constructor=d,a})?o.apply(t,r):o)||(e.exports=i)},function(e,t){},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(83),r=n(117),i=n(84),a=n(218),s=n(291),l=n(305),c=n(46);function u(e,t,n){var o=p(e,t,n),i=d(e),a=f(e,n,o.Parameters),s=t[c.constants.controlContainerWidth],u=t[c.constants.controlContainerHeight],h=l.GenerateDefaultCustomControlProps(o,i,void 0,a);return h.propBagData.resourcesData.strings=r.ResourceStrings,h.parentDefinedControlProps={width:s,height:u},h}function p(e,t,n){var o={},r=e.Properties,a=e.DataSetDefinitions;return r&&Object.keys(r).forEach(function(e){n.properties[e]&&(o[e]={Usage:r[e].Usage,Static:r[e].Static,Type:n.properties[e].SelectedType,Value:n.properties[e].Value,Primary:r[e].IsPrimary})}),a&&Object.keys(a).forEach(function(e){if(n.datasets[e]){var t;t=Object.keys(n.datasets[e].SelectedTypes).map(function(t){return{Alias:t,DisplayName:""+t,DataType:n.datasets[e].SelectedTypes[t],Name:""+t,Type:void 0}}),o[e]={Name:e,Columns:t,ViewId:i.DefaultEntity.ViewId,TargetEntityType:i.DefaultEntity.EntityLogicalName}}}),{FormFactor:t[c.constants.formFactor],CustomControlId:e.ConstructorName,Name:e.ConstructorName,DisplayNameKey:e.DisplayNameKey,Version:e.Version,Parameters:o,ShouldOverrideControlVisible:!1}}function d(e){var t=h(e.Properties),n={};return e.DataSetDefinitions&&Object.keys(e.DataSetDefinitions).forEach(function(t){var o=h(e.DataSetDefinitions[t].Columns);n[t]={DisplayName:e.DataSetDefinitions[t].DisplayName,Type:e.DataSetDefinitions[t].Type,Columns:o,Primary:e.DataSetDefinitions[t].Primary}}),{ConstructorName:e.ConstructorName,CustomControlId:e.ConstructorName,IsVirtual:e.IsVirtual,ApiVersion:e.ApiVersion,Properties:{Resources:e.Resources,GroupDefinitions:e.GroupDefinitions,DataSetDefinitions:n,Properties:t,FeatureUsage:e.FeatureUsage}}}function h(e){var t={};return e&&Object.keys(e).forEach(function(n){t[n]={Required:e[n].Required,DefaultValue:e[n].DefaultValue,Usage:e[n].Usage,Name:n}}),t}function f(e,t,n){var r={updated:!0,dataReady:!0,parameters:{}};return e.Properties&&Object.keys(e.Properties).forEach(function(n){var i=t.properties[n],a=o.ParseRaw(i.Value,i.SelectedType),l=o.GenerateFormatted(a,i.SelectedType),c=0===e.Properties[n].Usage,u=t.properties[n].SelectedType;r.parameters[n]={raw:a,formatted:c?l:void 0,attributes:c?s.CreateAttributesFromProp(n,u):void 0,type:u,error:!1,errorMessage:void 0,notifications:void 0,security:{secured:!1,editable:!0,readable:!0}}}),e.DataSetDefinitions&&Object.keys(e.DataSetDefinitions).forEach(function(e){r.parameters[e]=a.CreateIDataSetParameter(n[e],t.datasets[e],e)}),r}t.createWebClientWrapperProps=function(e,t,n,o){var r=u(e,t,n);return r.actions.updateOutputs=o,{givenHostProps:r,setReRenderCallBack:function(e){}}},t.createDefaultHostProps=u,t.createControlConfiguration=p,t.createControlManifest=d,t.createDynamicData=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(84),r=n(83),i=n(219),a=n(220),s={},l="DataSet",c="Paging";function u(e){var t=[],n=0;return e.Columns.forEach(function(e){t.push({name:e.Alias,displayName:e.DisplayName,dataType:e.DataType,alias:e.Alias,order:n,visualSizeFactor:100,isHidden:!1,isPrimary:!0,disableSorting:!1}),n++}),t}function p(e){return{getFilter:function(){return s[e].filtering},setFilter:function(t){s[e].filtering=a(t)},clearFilter:function(){s[e].filtering=void 0}}}function d(e){return{getLinkedEntities:function(){return s[e].linkedEntities},addLinkedEntity:function(t){s[e].linkedEntities.push(t)}}}function h(e){var t={};return Object.keys(e.Entries).forEach(function(n){var o={getFormattedValue:function(t){var o=e.SelectedTypes[t],i=r.ParseRaw(e.Entries[n][t],o);return r.GenerateFormatted(i,o)},getRecordId:function(){return n},getValue:function(t){return r.ParseRaw(e.Entries[n][t],e.SelectedTypes[t])},getNamedReference:function(){return{id:n,entityType:"account",name:"account"}}};t[n]=o}),t}t.CreateIDataSetParameter=function(e,t,n){return s[n]={selectedRecordIds:void 0,filtering:void 0,linkedEntities:[]},{addColumn:function(e,t){i.LogInfoMessage("addColumn",l,[e,t])},columns:u(e),error:!1,errorMessage:void 0,filtering:p(n),linking:d(n),loading:!1,paging:(r=Object.keys(t.Entries).length,{totalResultCount:r,hasNextPage:!1,hasPreviousPage:!1,loadNextPage:function(){i.LogInfoMessage("loadNextPage",c)},loadPreviousPage:function(){i.LogInfoMessage("loadPreviousPage",c)},reset:function(){i.LogInfoMessage("reset",c)},setPageSize:function(e){i.LogInfoMessage("loadNextPage",c,[e])}}),records:h(t),sortedRecordIds:Object.keys(t.Entries),sorting:void 0,clearSelectedRecordIds:function(){s[n].selectedRecordIds=void 0},getSelectedRecordIds:function(){return s[n].selectedRecordIds},getTargetEntityType:function(){return o.DefaultEntity.EntityLogicalName},getTitle:function(){return o.DefaultEntity.Title},getViewId:function(){return o.DefaultEntity.ViewId},openDatasetItem:function(e){i.LogInfoMessage("openDatasetItem",l,[e])},refresh:function(){i.LogInfoMessage("refresh",l)},setSelectedRecordIds:function(e){s[n].selectedRecordIds=a(e)}};var r}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(18),r=n(21);function i(e,t,n){var i=n?" "+o.translate(r.strings.function_parameters.key)+": "+function(e){return e.map(function(e){return e?JSON.stringify(e):"undefined"}).join(", ")}(n)+".":"";return""+o.translateA(r.strings.invoke_method.key,[e,t])+i}t.getInfoMessage=i,t.LogInfoMessage=function(e,t,n){console.log(i(e,t,n))}},function(e,t,n){var o=n(221),r=1,i=4;e.exports=function(e){return o(e,r|i)}},function(e,t,n){var o=n(222),r=n(252),i=n(122),a=n(254),s=n(264),l=n(267),c=n(268),u=n(269),p=n(271),d=n(272),h=n(273),f=n(94),m=n(278),y=n(279),b=n(285),g=n(88),_=n(125),v=n(287),C=n(44),E=n(289),I=n(87),P=1,w=2,S=4,O="[object Arguments]",D="[object Function]",T="[object GeneratorFunction]",F="[object Object]",x={};x[O]=x["[object Array]"]=x["[object ArrayBuffer]"]=x["[object DataView]"]=x["[object Boolean]"]=x["[object Date]"]=x["[object Float32Array]"]=x["[object Float64Array]"]=x["[object Int8Array]"]=x["[object Int16Array]"]=x["[object Int32Array]"]=x["[object Map]"]=x["[object Number]"]=x[F]=x["[object RegExp]"]=x["[object Set]"]=x["[object String]"]=x["[object Symbol]"]=x["[object Uint8Array]"]=x["[object Uint8ClampedArray]"]=x["[object Uint16Array]"]=x["[object Uint32Array]"]=!0,x["[object Error]"]=x[D]=x["[object WeakMap]"]=!1,e.exports=function e(t,n,M,A,k,R){var L,N=n&P,U=n&w,B=n&S;if(M&&(L=k?M(t,A,k,R):M(t)),void 0!==L)return L;if(!C(t))return t;var j=g(t);if(j){if(L=m(t),!N)return c(t,L)}else{var W=f(t),V=W==D||W==T;if(_(t))return l(t,N);if(W==F||W==O||V&&!k){if(L=U||V?{}:b(t),!N)return U?p(t,s(L,t)):u(t,a(L,t))}else{if(!x[W])return k?t:{};L=y(t,W,N)}}R||(R=new o);var H=R.get(t);if(H)return H;R.set(t,L),E(t)?t.forEach(function(o){L.add(e(o,n,M,o,t,R))}):v(t)&&t.forEach(function(o,r){L.set(r,e(o,n,M,r,t,R))});var K=B?U?h:d:U?keysIn:I,z=j?void 0:K(t);return r(z||t,function(o,r){z&&(o=t[r=o]),i(L,r,e(o,n,M,r,t,R))}),L}},function(e,t,n){var o=n(67),r=n(228),i=n(229),a=n(230),s=n(231),l=n(232);function c(e){var t=this.__data__=new o(e);this.size=t.size}c.prototype.clear=r,c.prototype.delete=i,c.prototype.get=a,c.prototype.has=s,c.prototype.set=l,e.exports=c},function(e,t){e.exports=function(){this.__data__=[],this.size=0}},function(e,t,n){var o=n(68),r=Array.prototype.splice;e.exports=function(e){var t=this.__data__,n=o(t,e);return!(n<0||(n==t.length-1?t.pop():r.call(t,n,1),--this.size,0))}},function(e,t,n){var o=n(68);e.exports=function(e){var t=this.__data__,n=o(t,e);return n<0?void 0:t[n][1]}},function(e,t,n){var o=n(68);e.exports=function(e){return o(this.__data__,e)>-1}},function(e,t,n){var o=n(68);e.exports=function(e,t){var n=this.__data__,r=o(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this}},function(e,t,n){var o=n(67);e.exports=function(){this.__data__=new o,this.size=0}},function(e,t){e.exports=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n}},function(e,t){e.exports=function(e){return this.__data__.get(e)}},function(e,t){e.exports=function(e){return this.__data__.has(e)}},function(e,t,n){var o=n(67),r=n(85),i=n(239),a=200;e.exports=function(e,t){var n=this.__data__;if(n instanceof o){var s=n.__data__;if(!r||s.length<a-1)return s.push([e,t]),this.size=++n.size,this;n=this.__data__=new i(s)}return n.set(e,t),this.size=n.size,this}},function(e,t,n){var o=n(119),r=n(236),i=n(44),a=n(121),s=/^\[object .+?Constructor\]$/,l=Function.prototype,c=Object.prototype,u=l.toString,p=c.hasOwnProperty,d=RegExp("^"+u.call(p).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!i(e)||r(e))&&(o(e)?d:s).test(a(e))}},function(e,t,n){var o=n(86),r=Object.prototype,i=r.hasOwnProperty,a=r.toString,s=o?o.toStringTag:void 0;e.exports=function(e){var t=i.call(e,s),n=e[s];try{e[s]=void 0;var o=!0}catch(e){}var r=a.call(e);return o&&(t?e[s]=n:delete e[s]),r}},function(e,t){var n=Object.prototype.toString;e.exports=function(e){return n.call(e)}},function(e,t,n){var o,r=n(237),i=(o=/[^.]+$/.exec(r&&r.keys&&r.keys.IE_PROTO||""))?"Symbol(src)_1."+o:"";e.exports=function(e){return!!i&&i in e}},function(e,t,n){var o=n(23)["__core-js_shared__"];e.exports=o},function(e,t){e.exports=function(e,t){return null==e?void 0:e[t]}},function(e,t,n){var o=n(240),r=n(247),i=n(249),a=n(250),s=n(251);function l(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var o=e[t];this.set(o[0],o[1])}}l.prototype.clear=o,l.prototype.delete=r,l.prototype.get=i,l.prototype.has=a,l.prototype.set=s,e.exports=l},function(e,t,n){var o=n(241),r=n(67),i=n(85);e.exports=function(){this.size=0,this.__data__={hash:new o,map:new(i||r),string:new o}}},function(e,t,n){var o=n(242),r=n(243),i=n(244),a=n(245),s=n(246);function l(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var o=e[t];this.set(o[0],o[1])}}l.prototype.clear=o,l.prototype.delete=r,l.prototype.get=i,l.prototype.has=a,l.prototype.set=s,e.exports=l},function(e,t,n){var o=n(70);e.exports=function(){this.__data__=o?o(null):{},this.size=0}},function(e,t){e.exports=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}},function(e,t,n){var o=n(70),r="__lodash_hash_undefined__",i=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;if(o){var n=t[e];return n===r?void 0:n}return i.call(t,e)?t[e]:void 0}},function(e,t,n){var o=n(70),r=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;return o?void 0!==t[e]:r.call(t,e)}},function(e,t,n){var o=n(70),r="__lodash_hash_undefined__";e.exports=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=o&&void 0===t?r:t,this}},function(e,t,n){var o=n(71);e.exports=function(e){var t=o(this,e).delete(e);return this.size-=t?1:0,t}},function(e,t){e.exports=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}},function(e,t,n){var o=n(71);e.exports=function(e){return o(this,e).get(e)}},function(e,t,n){var o=n(71);e.exports=function(e){return o(this,e).has(e)}},function(e,t,n){var o=n(71);e.exports=function(e,t){var n=o(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this}},function(e,t){e.exports=function(e,t){for(var n=-1,o=null==e?0:e.length;++n<o&&!1!==t(e[n],n,e););return e}},function(e,t,n){var o=n(33),r=function(){try{var e=o(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();e.exports=r},function(e,t,n){var o=n(72),r=n(87);e.exports=function(e,t){return e&&o(t,r(t),e)}},function(e,t){e.exports=function(e,t){for(var n=-1,o=Array(e);++n<e;)o[n]=t(n);return o}},function(e,t,n){var o=n(257),r=n(45),i=Object.prototype,a=i.hasOwnProperty,s=i.propertyIsEnumerable,l=o(function(){return arguments}())?o:function(e){return r(e)&&a.call(e,"callee")&&!s.call(e,"callee")};e.exports=l},function(e,t,n){var o=n(69),r=n(45),i="[object Arguments]";e.exports=function(e){return r(e)&&o(e)==i}},function(e,t){e.exports=function(){return!1}},function(e,t){var n=9007199254740991,o=/^(?:0|[1-9]\d*)$/;e.exports=function(e,t){var r=typeof e;return!!(t=null==t?n:t)&&("number"==r||"symbol"!=r&&o.test(e))&&e>-1&&e%1==0&&e<t}},function(e,t,n){var o=n(261),r=n(90),i=n(91),a=i&&i.isTypedArray,s=a?r(a):o;e.exports=s},function(e,t,n){var o=n(69),r=n(126),i=n(45),a={};a["[object Float32Array]"]=a["[object Float64Array]"]=a["[object Int8Array]"]=a["[object Int16Array]"]=a["[object Int32Array]"]=a["[object Uint8Array]"]=a["[object Uint8ClampedArray]"]=a["[object Uint16Array]"]=a["[object Uint32Array]"]=!0,a["[object Arguments]"]=a["[object Array]"]=a["[object ArrayBuffer]"]=a["[object Boolean]"]=a["[object DataView]"]=a["[object Date]"]=a["[object Error]"]=a["[object Function]"]=a["[object Map]"]=a["[object Number]"]=a["[object Object]"]=a["[object RegExp]"]=a["[object Set]"]=a["[object String]"]=a["[object WeakMap]"]=!1,e.exports=function(e){return i(e)&&r(e.length)&&!!a[o(e)]}},function(e,t,n){var o=n(92),r=n(263),i=Object.prototype.hasOwnProperty;e.exports=function(e){if(!o(e))return r(e);var t=[];for(var n in Object(e))i.call(e,n)&&"constructor"!=n&&t.push(n);return t}},function(e,t,n){var o=n(127)(Object.keys,Object);e.exports=o},function(e,t,n){var o=n(72),r=n(129);e.exports=function(e,t){return e&&o(t,r(t),e)}},function(e,t,n){var o=n(44),r=n(92),i=n(266),a=Object.prototype.hasOwnProperty;e.exports=function(e){if(!o(e))return i(e);var t=r(e),n=[];for(var s in e)("constructor"!=s||!t&&a.call(e,s))&&n.push(s);return n}},function(e,t){e.exports=function(e){var t=[];if(null!=e)for(var n in Object(e))t.push(n);return t}},function(e,t,n){(function(e){var o=n(23),r=t&&!t.nodeType&&t,i=r&&"object"==typeof e&&e&&!e.nodeType&&e,a=i&&i.exports===r?o.Buffer:void 0,s=a?a.allocUnsafe:void 0;e.exports=function(e,t){if(t)return e.slice();var n=e.length,o=s?s(n):new e.constructor(n);return e.copy(o),o}}).call(this,n(89)(e))},function(e,t){e.exports=function(e,t){var n=-1,o=e.length;for(t||(t=Array(o));++n<o;)t[n]=e[n];return t}},function(e,t,n){var o=n(72),r=n(93);e.exports=function(e,t){return o(e,r(e),t)}},function(e,t){e.exports=function(e,t){for(var n=-1,o=null==e?0:e.length,r=0,i=[];++n<o;){var a=e[n];t(a,n,e)&&(i[r++]=a)}return i}},function(e,t,n){var o=n(72),r=n(131);e.exports=function(e,t){return o(e,r(e),t)}},function(e,t,n){var o=n(134),r=n(93),i=n(87);e.exports=function(e){return o(e,i,r)}},function(e,t,n){var o=n(134),r=n(131),i=n(129);e.exports=function(e){return o(e,i,r)}},function(e,t,n){var o=n(33)(n(23),"DataView");e.exports=o},function(e,t,n){var o=n(33)(n(23),"Promise");e.exports=o},function(e,t,n){var o=n(33)(n(23),"Set");e.exports=o},function(e,t,n){var o=n(33)(n(23),"WeakMap");e.exports=o},function(e,t){var n=Object.prototype.hasOwnProperty;e.exports=function(e){var t=e.length,o=new e.constructor(t);return t&&"string"==typeof e[0]&&n.call(e,"index")&&(o.index=e.index,o.input=e.input),o}},function(e,t,n){var o=n(95),r=n(281),i=n(282),a=n(283),s=n(284),l="[object Boolean]",c="[object Date]",u="[object Map]",p="[object Number]",d="[object RegExp]",h="[object Set]",f="[object String]",m="[object Symbol]",y="[object ArrayBuffer]",b="[object DataView]",g="[object Float32Array]",_="[object Float64Array]",v="[object Int8Array]",C="[object Int16Array]",E="[object Int32Array]",I="[object Uint8Array]",P="[object Uint8ClampedArray]",w="[object Uint16Array]",S="[object Uint32Array]";e.exports=function(e,t,n){var O=e.constructor;switch(t){case y:return o(e);case l:case c:return new O(+e);case b:return r(e,n);case g:case _:case v:case C:case E:case I:case P:case w:case S:return s(e,n);case u:return new O;case p:case f:return new O(e);case d:return i(e);case h:return new O;case m:return a(e)}}},function(e,t,n){var o=n(23).Uint8Array;e.exports=o},function(e,t,n){var o=n(95);e.exports=function(e,t){var n=t?o(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}},function(e,t){var n=/\w*$/;e.exports=function(e){var t=new e.constructor(e.source,n.exec(e));return t.lastIndex=e.lastIndex,t}},function(e,t,n){var o=n(86),r=o?o.prototype:void 0,i=r?r.valueOf:void 0;e.exports=function(e){return i?Object(i.call(e)):{}}},function(e,t,n){var o=n(95);e.exports=function(e,t){var n=t?o(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}},function(e,t,n){var o=n(286),r=n(133),i=n(92);e.exports=function(e){return"function"!=typeof e.constructor||i(e)?{}:o(r(e))}},function(e,t,n){var o=n(44),r=Object.create,i=function(){function e(){}return function(t){if(!o(t))return{};if(r)return r(t);e.prototype=t;var n=new e;return e.prototype=void 0,n}}();e.exports=i},function(e,t,n){var o=n(288),r=n(90),i=n(91),a=i&&i.isMap,s=a?r(a):o;e.exports=s},function(e,t,n){var o=n(94),r=n(45),i="[object Map]";e.exports=function(e){return r(e)&&o(e)==i}},function(e,t,n){var o=n(290),r=n(90),i=n(91),a=i&&i.isSet,s=a?r(a):o;e.exports=s},function(e,t,n){var o=n(94),r=n(45),i="[object Set]";e.exports=function(e){return r(e)&&o(e)==i}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(1),r={"SingleLine.Text":"Text","SingleLine.Phone":"Phone","SingleLine.TextArea":"Text Area","SingleLine.Ticker":"Ticker Symbol","SingleLine.Email":"E-mail","SingleLine.URL":"Url","Whole.None":"None","DateAndTime.DateAndTime":"Date and Time","DateAndTime.DateOnly":"Date Only"};t.CreateAttributesFromProp=function(e,t){var n,i={DisplayName:e+"'s Display Name",LogicalName:e+"_logical_name",RequiredLevel:-1,IsSecured:!0,SourceType:0,Description:"Property "+e+"'s description",Format:r[t]};switch(t){case o.ManifestType.SingleLineText:case o.ManifestType.SingleLineEmail:case o.ManifestType.SingleLinePhone:n={MaxLength:200,ImeMode:2};break;case o.ManifestType.SingleLineURL:n={MaxLength:500,ImeMode:2};break;case o.ManifestType.SingleLineTickerSymbol:n={MaxLength:10,ImeMode:2};break;case o.ManifestType.SingleLineTextArea:n={MaxLength:4e3,ImeMode:2};break;case o.ManifestType.Multiple:n={MaxLength:1048576,ImeMode:2};break;case o.ManifestType.WholeNone:n={MaxValue:1e11,MinValue:-1e11,ImeMode:2,LanguageByCode:{},TimeZoneByCode:{}};break;case o.ManifestType.Currency:n={MaxValue:922337203685477,MinValue:-922337203685477,ImeMode:2,Precision:2};break;case o.ManifestType.Decimal:n={MaxValue:1e11,MinValue:-1e11,ImeMode:2,Precision:10};break;case o.ManifestType.FP:n={MaxValue:1e11,MinValue:-1e11,ImeMode:2,Precision:5};break;case o.ManifestType.DateAndTimeDateAndTime:case o.ManifestType.DateAndTimeDateOnly:n={Behavior:0,ImeMode:2};break;case o.ManifestType.OptionSet:n={Options:[{Label:"Option A",Value:0,Color:void 0},{Label:"Option B",Value:1,Color:void 0},{Label:"Option C",Value:2,Color:void 0}],DefaultValue:0};break;case o.ManifestType.TwoOptions:n={Options:[{Label:"Yes",Value:0,Color:void 0},{Label:"No",Value:1,Color:void 0}],DefaultValue:0};break;default:n={MaxLength:200,Format:"Text",ImeMode:2}}return Object.assign(i,n)}},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),a=n(96),s=n(18),l=n(21),c=function(e){function t(t){return e.call(this,t)||this}return r(t,e),t.prototype.render=function(){var e=this,t=this.props.controlMetadata.Properties;return i.createElement("div",{className:"property-inputs"},Object.keys(t).map(function(t){return i.createElement("div",{className:"io-item",key:t},i.createElement("div",{className:"key-value-pair"},i.createElement("span",{className:"key-value-pair-key"},s.translate(l.strings.property.key)),i.createElement("div",{className:"key-value-pair-value"},i.createElement("span",null,t))),i.createElement("div",{className:"key-value-pair"},i.createElement("label",null,i.createElement("span",{className:"key-value-pair-key"},s.translate(l.strings.value.key)),i.createElement("div",{className:"key-value-pair-value"},e.createInputFormBasedOnProperty(t)))),i.createElement("div",{className:"key-value-pair"},i.createElement("label",null,i.createElement("span",{className:"key-value-pair-key"},s.translate(l.strings.type.key)),i.createElement("div",{className:"key-value-pair-value"},e.createDropdownListForTypes(t)))))}))},t.prototype.createInputFormBasedOnProperty=function(e){var t=this,n=this.props.controlMetadata.Properties[e],o=this.props.controlInputs.properties[e],r=o.SelectedType,s=n.EnumValues;return"Enum"===r?i.createElement("select",{value:o.Value,onChange:function(n){return t.onInputValueChange(n,e)}},s.map(function(e){return i.createElement("option",{key:e.name,value:e.value},e.name)})):"TwoOptions"===r?i.createElement("select",{value:o.Value,onChange:function(n){return t.onInputValueChange(n,e)}},i.createElement("option",{value:"true"},"True"),i.createElement("option",{value:"false"},"False")):i.createElement("input",{type:a.GetInputFormType(r),value:o.Value,onChange:function(n){return t.onInputValueChange(n,e)}})},t.prototype.createDropdownListForTypes=function(e){var t=this,n=this.props.controlInputs.properties[e].SelectedType,o=this.props.controlMetadata.Properties[e],r=a.GetAllCompatibleTypesFromProp(o,this.props.controlMetadata.GroupDefinitions);return 1===r.length?i.createElement("span",null,r[0]):i.createElement("select",{value:n,onChange:function(n){return t.onInputTypeChange(n,e)}},r.map(function(e){return i.createElement("option",{key:e,value:e},e)}))},t.prototype.onInputValueChange=function(e,t){var n=e.target.value;this.props.onInputValueChange(t,n)},t.prototype.onInputTypeChange=function(e,t){var n=e.target.value;this.props.onInputTypeChange(t,n)},t}(i.Component);t.FieldInputPanel=c},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),a=n(294),s=n(39),l=n(96),c=n(18),u=n(21),p=n(47),d=n(1),h=n(46),f=function(e){function t(t){var n=e.call(this,t)||this;return n.datasetDefinitions=n.props.controlMetadata.DataSetDefinitions,n.state=n.initializeState(),n.onDatasetFileInputChange=n.onDatasetFileInputChange.bind(n),n.onPropertySetColumnUpdate=n.onPropertySetColumnUpdate.bind(n),n.onColumnTypeUpdate=n.onColumnTypeUpdate.bind(n),n.onApply=n.onApply.bind(n),n}return r(t,e),t.prototype.render=function(){var e=this;return i.createElement("div",{className:"dataset-inputs"},i.createElement(p.Accordion,{allowMultipleExpanded:!0,allowZeroExpanded:!0,preExpanded:Object.keys(this.datasetDefinitions)},Object.keys(this.datasetDefinitions).map(function(t){return i.createElement(a.DatasetInput,{key:t,datasetName:t,datasetStateInfo:e.state[t],propertySets:e.datasetDefinitions[t].Columns,typeGroups:e.props.controlMetadata.GroupDefinitions,onFileInputChange:e.onDatasetFileInputChange,onPropertySetColumnChange:e.onPropertySetColumnUpdate,onColumnTypeChange:e.onColumnTypeUpdate})})),i.createElement("input",{type:"button","aria-label":"Apply the data",value:c.translate(u.strings.apply.key),disabled:!this.isBindingComplete(),onClick:this.onApply}))},t.prototype.initializeState=function(){var e={};return this.datasetDefinitions&&Object.keys(this.datasetDefinitions).forEach(function(t){e[t]={fileData:{filename:void 0,columns:[],rawData:[],errors:void 0},bindingMap:{}}}),e},t.prototype.isBindingComplete=function(){for(var e=0,t=Object.keys(this.state);e<t.length;e++){var n=t[e],o=this.state[n],r=this.datasetDefinitions[n];if(!l.CheckBindingMap(o,r))return!1}return!0},t.prototype.onApply=function(){var e=this,t={};Object.keys(this.state).forEach(function(n){t[n]=l.CompileDatasetStateIntoDatasetInputs(e.state[n])}),this.props.onApplyNewData(t)},t.prototype.onDatasetFileInputChange=function(e,t,n){var o=this;return s.ReadFileContent(e).then(function(r){var i=e.name,a=t(i,r),s=a.errors;s&&s.length>0?window.alert(c.translateA(u.strings.error_parse_file.key,[i])+":\n"+s.join("\n")):n&&o.setState(function(e){var t,r=e[n],i={},s=o.datasetDefinitions[n].Columns;if(s&&0===Object.keys(s).length)for(var l=0,c=a.columns;l<c.length;l++){var u=c[l];i[u]={ColumnName:u,Type:d.ManifestType.SingleLineText}}return r.fileData=a,r.bindingMap=i,(t={})[n]=r,t})},function(e){window.alert(e)})},t.prototype.onPropertySetColumnUpdate=function(e,t,n,o){e&&t&&n!==h.constants.defaultOptionValue&&this.setState(function(r){var i,a=r[e];return a.bindingMap[t]||(a.bindingMap[t]={ColumnName:void 0,Type:o}),a.bindingMap[t].ColumnName=n,(i={})[e]=a,i})},t.prototype.onColumnTypeUpdate=function(e,t,n,o){e&&t&&this.setState(function(r){var i,a=r[e];return a.bindingMap[t]||(a.bindingMap[t]={ColumnName:o?void 0:t,Type:void 0}),a.bindingMap[t].Type=n,(i={})[e]=a,i})},t}(i.Component);t.DatasetInputPanel=f},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),a=n(96),s=n(295),l=n(39),c=n(18),u=n(21),p=n(47),d=n(1),h=n(46),f=function(e){function t(t){return e.call(this,t)||this}return r(t,e),t.prototype.render=function(){var e=this,t=this.props.propertySets&&Object.keys(this.props.propertySets).length>0,n=this.props.datasetStateInfo.fileData.columns.length>0,o=this.props.datasetStateInfo.fileData.filename,r=this.props.datasetName+"Input",a=o||c.translate(u.strings.no_file_chosen.key),s=c.translateA(u.strings.aria_label_data_file.key,[this.props.datasetName,a]);return i.createElement("div",{className:"io-item"},i.createElement(p.AccordionItem,{key:this.props.datasetName,uuid:this.props.datasetName},i.createElement(p.AccordionItemButton,null,i.createElement("label",null,this.props.datasetName)),i.createElement(p.AccordionItemPanel,null,i.createElement("input",{id:r,type:"file",accept:".csv, text/csv",onChange:function(t){return e.onFileInputChange(t,l.ParseCsvFile,e.props.datasetName)},onClick:this.onFileInputClick}),i.createElement("label",{"aria-label":s,htmlFor:r},i.createElement("span",{className:"plus-button"},"+"),i.createElement("span",{className:"file-selector"},c.translate(u.strings.select_a_file.key)),i.createElement("span",{className:"file-chosen"},a)),n&&(t?this.renderPropertyBindingPanel():this.renderColumnTypeSelectionPanel()))))},t.prototype.renderPropertyBindingPanel=function(){var e=this;return Object.keys(this.props.propertySets).map(function(t){var n=e.props.propertySets[t],o=a.GetAllCompatibleTypesFromProp(n,e.props.typeGroups);return i.createElement("div",{className:"io-panel",key:t},i.createElement("div",{className:"key-value-pair"},i.createElement("span",{className:"key-value-pair-key"},c.translate(u.strings.property.key)),i.createElement("div",{className:"key-value-pair-value"},i.createElement("span",null,t))),i.createElement("div",{className:"key-value-pair"},i.createElement("label",null,i.createElement("span",{className:"key-value-pair-key"},c.translate(u.strings.column.key)),i.createElement("div",{className:"key-value-pair-value"},e.createDropdownListForColumns(t,o)))),i.createElement("div",{className:"key-value-pair"},i.createElement("label",null,i.createElement("span",{className:"key-value-pair-key"},c.translate(u.strings.type.key)),i.createElement("div",{className:"key-value-pair-value"},e.createDropdownListForCompatibleTypes(t,o)))))})},t.prototype.renderColumnTypeSelectionPanel=function(){var e=this;return this.props.datasetStateInfo.fileData.columns.map(function(t){return i.createElement("div",{className:"io-panel",key:t},i.createElement("div",{className:"key-value-pair"},i.createElement("span",{className:"key-value-pair-key"},c.translate(u.strings.column.key)),i.createElement("div",{className:"key-value-pair-value"},i.createElement("span",null,t))),i.createElement("div",{className:"key-value-pair"},i.createElement("label",null,i.createElement("span",{className:"key-value-pair-key"},c.translate(u.strings.type.key)),i.createElement("div",{className:"key-value-pair-value"},e.createDropdownListForAllTypes(t)))))})},t.prototype.createDropdownListForColumns=function(e,t){var n=this,o=this.props.datasetStateInfo.fileData.columns,r=this.props.datasetStateInfo.bindingMap[e],a=r&&r.ColumnName?r.ColumnName:h.constants.defaultOptionValue;return i.createElement("select",{value:a,onChange:function(o){return n.onPropertySetColumnChange(o,e,t[0])}},i.createElement("option",{value:h.constants.defaultOptionValue},c.translate(u.strings.choose_column.key)),o.map(function(e){return i.createElement("option",{key:e,value:e},e)}))},t.prototype.createDropdownListForCompatibleTypes=function(e,t){var n=this,o=void 0===this.props.datasetStateInfo.bindingMap[e];if(1===t.length)return i.createElement("span",null,t[0]);var r=this.props.datasetStateInfo.bindingMap[e],a=r&&r.Type?r.Type:t[0];return i.createElement("select",{value:a,disabled:o,onChange:function(t){return n.onColumnTypeChange(t,e,!0)}},t.map(function(e){return i.createElement("option",{key:e,value:e},e)}))},t.prototype.createDropdownListForAllTypes=function(e){var t=this,n=this.props.datasetStateInfo.bindingMap[e],o=n&&n.Type?n.Type:d.ManifestType.SingleLineText;return i.createElement("select",{value:o,onChange:function(n){return t.onColumnTypeChange(n,e,!1)}},s.SUPPORTED_PCF_TYPES.map(function(e){return i.createElement("option",{key:e,value:e},e)}))},t.prototype.onFileInputChange=function(e,t,n){var o=e.target.files;o&&o.length>0&&o[0]&&this.props.onFileInputChange(o[0],t,n)},t.prototype.onFileInputClick=function(e){e.target.value=""},t.prototype.onPropertySetColumnChange=function(e,t,n){var o=e.target.value;this.props.onPropertySetColumnChange(this.props.datasetName,t,o,n)},t.prototype.onColumnTypeChange=function(e,t,n){var o=e.target.value;this.props.onColumnTypeChange(this.props.datasetName,t,o,n)},t}(i.Component);t.DatasetInput=f},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(1);t.SUPPORTED_PCF_TYPES=[o.ManifestType.Currency,o.ManifestType.DateAndTimeDateAndTime,o.ManifestType.DateAndTimeDateOnly,o.ManifestType.Decimal,"Enum",o.ManifestType.FP,o.ManifestType.Multiple,o.ManifestType.OptionSet,o.ManifestType.SingleLineEmail,o.ManifestType.SingleLinePhone,o.ManifestType.SingleLineText,o.ManifestType.SingleLineTextArea,o.ManifestType.SingleLineTickerSymbol,o.ManifestType.SingleLineURL,o.ManifestType.TwoOptions,o.ManifestType.WholeNone]},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),a=n(46),s=n(18),l=n(21),c=n(47),u=function(e){function t(t){return e.call(this,t)||this}return r(t,e),t.prototype.render=function(){return i.createElement(c.Accordion,{className:"io-section",allowZeroExpanded:!0,preExpanded:["context_inputs"]},i.createElement(c.AccordionItem,{uuid:"context_inputs"},i.createElement(c.AccordionItemButton,null,i.createElement("div",{className:"heading"},s.translate(l.strings.context_inputs.key))),i.createElement(c.AccordionItemPanel,null,i.createElement("div",{className:"io-item"},i.createElement("div",{className:"key-value-pair"},i.createElement("label",null,i.createElement("span",{className:"key-value-pair-key"},s.translate(l.strings.form_factor.key)),i.createElement("div",{className:"key-value-pair-value"},this.createDropdownListForContextInput(a.constants.formFactor,a.constants.formFactorOptions)))),i.createElement("div",{id:"control-dimensions",className:"key-value-pair"},i.createElement("label",{id:"control-width",className:"control-dimensions-item"},i.createElement("span",{id:"control-width-name",className:"key-value-pair-key"},s.translate(l.strings.control_container_width.key)),i.createElement("div",{className:"key-value-pair-value"},this.createInputFormBasedOnContextAttrib(a.constants.controlContainerWidth))),i.createElement("label",{id:"control-height",className:"control-dimensions-item"},i.createElement("span",{id:"control-height-name",className:"key-value-pair-key"},s.translate(l.strings.control_container_height.key)),i.createElement("div",{className:"key-value-pair-value"},this.createInputFormBasedOnContextAttrib(a.constants.controlContainerHeight))))))))},t.prototype.createDropdownListForContextInput=function(e,t){var n=this,o=this.props.contextInputs[e];return i.createElement("div",null,i.createElement("select",{value:o,onChange:function(t){return n.onContextInputChange(t,e)}},t.map(function(e){return i.createElement("option",{key:e.name,value:e.value},n.getLocalizedName(e.name))})))},t.prototype.createInputFormBasedOnContextAttrib=function(e){var t,n,o=this,r=this.props.contextInputs[e];switch(e){case a.constants.controlContainerWidth:n=this.props.contextInputs.controlContainerMaxWidth,t="number";break;case a.constants.controlContainerHeight:n=this.props.contextInputs.controlContainerMaxHeight,t="number";break;default:t="text"}return i.createElement("div",null,i.createElement("input",{type:t,value:r,"aria-valuemax":n,"aria-describedby":"number"===t?"number-inputs":void 0,onChange:function(t){return o.onContextInputChange(t,e)}}),i.createElement("div",{id:"number-inputs"},s.translate(l.strings.only_numbers_allowed.key)))},t.prototype.getLocalizedName=function(e){switch(e){case a.constants.formFactorOptions[0].name:return s.translate(l.strings.web.key);case a.constants.formFactorOptions[1].name:return s.translate(l.strings.tablet.key);case a.constants.formFactorOptions[2].name:return s.translate(l.strings.phone.key);default:return s.translate(l.strings.unknown.key)}},t.prototype.onContextInputChange=function(e,t){var n;switch(t){case a.constants.formFactor:n=parseInt(e.target.value,10);break;case a.constants.controlContainerWidth:case a.constants.controlContainerHeight:n=this.computeContainerSize(parseInt(e.target.value,10),t);break;default:n=e.target.value}this.props.onContextInputChange(t,n)},t.prototype.computeContainerSize=function(e,t){var n,o,r,i=document.getElementsByClassName("control-container"),s=window.getComputedStyle(i[0]);return t===a.constants.controlContainerHeight?(n=a.constants.controlContainerWidth,o=parseInt(s.getPropertyValue("width"),10)-parseInt(s.getPropertyValue("padding-left"),10)-parseInt(s.getPropertyValue("padding-right"),10),r=this.props.contextInputs.controlContainerMaxHeight):(n=a.constants.controlContainerHeight,o=parseInt(s.getPropertyValue("height"),10)-parseInt(s.getPropertyValue("padding-top"),10)-parseInt(s.getPropertyValue("padding-bottom"),10),r=this.props.contextInputs.controlContainerMaxWidth),this.props.contextInputs[n]||this.props.onContextInputChange(n,o),e>r?r:e},t}(i.Component);t.ContextInputPanel=u},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),a=n(18),s=n(21),l=n(47),c=function(e){function t(t){return e.call(this,t)||this}return r(t,e),t.prototype.render=function(){var e=this;return i.createElement(l.Accordion,{className:"io-section",allowZeroExpanded:!0,preExpanded:["data_outputs"]},i.createElement(l.AccordionItem,{uuid:"data_outputs"},i.createElement(l.AccordionItemButton,null,i.createElement("div",{className:"heading"},a.translate(s.strings.data_outputs.key))),i.createElement(l.AccordionItemPanel,null,Object.keys(this.props.controlOutputs).map(function(t){return i.createElement("div",{className:"io-item",key:t},i.createElement("div",{className:"key-value-pair"},i.createElement("span",{className:"key-value-pair-key"},t),i.createElement("div",{className:"key-value-pair-value"},i.createElement("span",null,e.props.controlOutputs[t]))))}))))},t}(i.Component);t.OutputControl=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(18),r=n(21);function i(e){var t=[];return e&&(e.library&&e.library.forEach(function(e){e.packaged_library.forEach(function(n){t.push({Name:n.$.path,LoadOrder:e.$.order,Type:0,LibraryName:e.$.name})})}),e.code&&e.code.forEach(function(e){t.push({Name:e.$.path,LoadOrder:e.$.order,Type:0})}),e.css&&e.css.forEach(function(e){t.push({Name:e.$.path,LoadOrder:e.$.order,Type:1})}),e.resx&&e.resx.forEach(function(e){t.push({Name:e.$.path,LoadOrder:0,Type:5})}),e.html&&e.html.forEach(function(e){t.push({Name:e.$.path,LoadOrder:e.$.order,Type:3})}),e.img&&e.img.forEach(function(e){t.push({Name:e.$.path,LoadOrder:0,Type:2})})),t}function a(e){var t={};return e&&e.forEach(function(e){var n=e.$.name,o=e.type,r=[];o.forEach(function(e){r.push(e)}),t[n]=r}),t}function s(e){var t={};return e&&e.forEach(function(e){var n;switch(e.$.usage){case"bound":n=0;break;case"input":n=1;break;case"output":n=2;break;default:throw new Error(o.translate(r.strings.unknown_property_usage.key)+" "+e.$.usage+".")}var i=[];e.value&&e.value.forEach(function(e){i.push({name:e.$.name,value:e._})}),t[e.$.name]={Required:"true"===e.$.required,DefaultValue:void 0,Usage:n,Hidden:"true"===e.$.hidden,Static:!0,Type:e.$["of-type"],TypeGroup:e.$["of-type-group"],EnumValues:i,IsPrimary:!0}}),t}function l(e){var t={};return e&&e.forEach(function(e){var n=s(e["property-set"]);t[e.$.name]={DisplayName:e.$["display-name-key"],Type:void 0,Columns:n,Primary:void 0}}),t}function c(e){var t=[];return e&&e.forEach(function(e){t.push({Name:e.$.name,Type:e.$.type,IsRequired:"true"===e.$.required})}),t}t.GenerateControlMetadata=function(e){var t=e.manifest.control,n={ConstructorName:t.$.namespace+"."+t.$.constructor,ControlNamespace:t.$.namespace,ControlConstructor:t.$.constructor,DisplayNameKey:t.$["display-name-key"],Version:t.$.version,IsVirtual:"virtual"===t.$["control-type"],ApiVersion:t.$["api-version"],Resources:[],GroupDefinitions:void 0,DataSetDefinitions:void 0,Properties:void 0,FeatureUsage:void 0};return n.Resources=i(t.resources),n.GroupDefinitions=a(t["type-group"]),n.Properties=s(t.property),n.DataSetDefinitions=l(t["data-set"]),n.FeatureUsage=c(t["feature-usage"]&&t["feature-usage"]["uses-feature"]),n},t.InitializeResourceMetadata=i,t.InitializeTypeGroupMetadata=a,t.InitializePropertyMetadata=s,t.InitializeDatasetMetadata=l,t.InitializeFeatureUsageMetadata=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(84);function r(e,t){switch(e){case"Whole.None":case"OptionSet":return"0";case"Currency":return"0.00";case"FP":case"Decimal":return"0.0";case"Enum":return t.EnumValues[0].value;case"TwoOptions":return"true";case"DateAndTime.DateOnly":return"2019-01-01";case"DateAndTime.DateAndTime":return"2019-01-01T12:00";default:return"val"}}t.DefaultDatasetRecordCount=3,t.SetDefaultContextValues=function(){return{formFactor:1,controlContainerWidth:void 0,controlContainerHeight:void 0,controlContainerMaxWidth:void 0,controlContainerMaxHeight:void 0}},t.SetDefaultPropertyValues=function(e){var t={},n=e.Properties;return n&&Object.keys(n).map(function(o){var i,a=n[o],s=r(i=a.TypeGroup?e.GroupDefinitions[a.TypeGroup][0]:(a.EnumValues&&a.EnumValues.length,a.Type),a);t[o]={Value:s,SelectedType:i}}),t},t.SetDefaultDatasetValues=function(e){var n={},i=e.DataSetDefinitions;return i&&Object.keys(i).forEach(function(a){var s={},l={},c=Object.keys(i[a].Columns).length?i[a].Columns:o.DefaultColumns;Object.keys(c).forEach(function(t){var n,o=c[t];n=o.TypeGroup?e.GroupDefinitions[o.TypeGroup][0]:o.Type,s[t]=r(n,o),l[t]=n});for(var u={},p=0;p<t.DefaultDatasetRecordCount;p++)u["id"+p]=s;n[a]={Entries:u,SelectedTypes:l}}),n},t.GetDefaultValueFromSelectedType=r},function(e,t,n){var o=n(301);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(303)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(302)(!1)).push([e.i,'body, #app-root {\r\n  margin: 0;\r\n  display: flex;\r\n  min-height: 100vh;\r\n  width: 100vw;\r\n}\r\n\r\n.harness-root  {\r\n  display: flex;\r\n  flex-direction: column;\r\n  height: 100%;\r\n  width: 100%;\r\n  font-family: "Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,"Helvetica Neue",Arial,sans-serif;\r\n}\r\n\r\n.container {\r\n  display: flex;\r\n  height: 100%;\r\n}\r\n\r\n.navbar {\r\n  background: #742774;\r\n  display: flex;\r\n}\r\n\r\n.navbar span {\r\n  color: white;\r\n  font-size: 16px;\r\n  padding-top: 12px;\r\n  padding-bottom: 14px;\r\n  padding-left: 22px;\r\n}\r\n\r\n.control-pane {\r\n  flex: 80%;\r\n  padding: 20px;\r\n  text-align: center;\r\n  box-sizing: border-box;\r\n}\r\n\r\n.control-container {\r\n  border-width: thin;\r\n  border-style: solid;\r\n  box-sizing: border-box;\r\n  border-color: lightgray;\r\n}\r\n\r\n.io-pane {\r\n  flex: 20%;\r\n  background: #F3F2F1;\r\n  box-shadow: 0px 6px 16px rgba(0, 0, 0, 0.16);\r\n  box-sizing: border-box;\r\n}\r\n\r\n.io-section {\r\n  padding: 16px;\r\n  flex: 100%;\r\n}\r\n\r\n.io-section + .io-section {\r\n  border-top: 1px solid #C8C6C4;\r\n}\r\n\r\n.heading, h3 {\r\n  font-size: 20px;\r\n  font-weight: bold;\r\n  line-height: 27px;\r\n  margin: 0;\r\n  color: #323130;\r\n  display: inline-block;\r\n}\r\n\r\ninput, select, .key-value-pair-value span {\r\n  padding: 6px 8px;\r\n  width: 92%;\r\n  font-family: "Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,"Helvetica Neue",Arial,sans-serif;\r\n  -ms-box-sizing:content-box;\r\n  -moz-box-sizing:content-box;\r\n  box-sizing: border-box;\r\n  -webkit-box-sizing: content-box;\r\n}\r\n\r\n#control-dimensions {\r\n  display: flex;\r\n}\r\n\r\n.control-dimensions-item {\r\n  width: 100%;\r\n}\r\n\r\n#control-width {\r\n  margin: 0 40px 0 0;\r\n}\r\n\r\n#control-height {\r\n  margin: 0 20px 0 0;\r\n}\r\n\r\n#control-width-name, #control-height-name {\r\n  margin: 0 0 3px;\r\n}\r\n\r\n#number-inputs {\r\n  display: none;\r\n}\r\n\r\n.key-value-pair-value span {\r\n  line-height: 19px;\r\n  color: #595959;\r\n}\r\n\r\n.io-item {\r\n  margin-top: 16px;\r\n}\r\n\r\n.io-item + .io-item {\r\n  margin-top: 16px;\r\n  padding-top: 16px;\r\n  border-top: 1px solid lightgrey;\r\n}\r\n\r\n.property-inputs + .dataset-inputs {\r\n  margin-top: 16px;\r\n  border-top: 1px solid lightgrey;\r\n}\r\n\r\n.io-panel + .io-panel {\r\n  margin-top: 16px;\r\n  padding-top: 16px;\r\n  border-top: 1px dotted lightgrey;\r\n}\r\n\r\n.key-value-pair + .key-value-pair {\r\n  margin-top: 16px;\r\n}\r\n\r\n.key-value-pair-key {\r\n  font-size: 14px;\r\n  font-weight: 600;\r\n  line-height: 20px;\r\n}\r\n\r\n.key-value-pair-value {\r\n  margin-top: 4px;\r\n}\r\n\r\ninput[type="file"] {\r\n  opacity: 0;\r\n  position: absolute;\r\n  pointer-events: none;\r\n  width: 1px;\r\n  height: 1px;\r\n}\r\n\r\ninput[type="file"] + label {\r\n  cursor: pointer;\r\n  margin: 12px 0px 15px 0px;\r\n  display: block;\r\n}\r\n\r\ninput[type="file"]:focus + label {\r\n  outline: 1px dotted #000;\r\n  outline: -webkit-focus-ring-color auto 5px;\r\n}\r\n\r\n.plus-button {\r\n  font-family: Fabric MDL2 Assets;\r\n  position: relative;\r\n  top: 2px;\r\n  font-size: 24px;    \r\n  color: #742774;\r\n  padding-right: 8px;\r\n  font-weight: 500;\r\n}\r\n\r\n.file-selector {\r\n  font-family: Segoe UI;\r\n  font-size: 14px;\r\n  line-height: 24px;\r\n  color: #323130;\r\n}\r\n\r\n.file-chosen {\r\n  font-family: Segoe UI;\r\n  font-size: 14px;\r\n  text-align: right;\r\n  color: #323130;\r\n  padding-top: 6px;\r\n  padding-right: 6px;\r\n  float: right;\r\n  max-width: 150px;\r\n  text-overflow: ellipsis;\r\n  white-space: nowrap;\r\n  overflow: hidden;\r\n}\r\n\r\ninput[type="button"] {\r\n  margin-top: 24px; \r\n  width: 78px;\r\n  height: 28px;\r\n  /* padding: 6px 20px; */\r\n  font-size: 14px;\r\n  line-height: 20px;\r\n  text-align: center;\r\n  border: none;\r\n  border-radius: 2px;\r\n}\r\n\r\ninput[type="button"]:enabled {\r\n  color: #FFFFFF;\r\n  background: #742774;\r\n}\r\n\r\ninput[type="button"]:disabled {\r\n  color: #A19F9D;\r\n  background: #F3F2F1;\r\n  font-weight: 700;\r\n  border: 1px solid #A19F9D;\r\n}\r\n\r\n.accordion__button label {\r\n  font-weight: 600;\r\n  font-size: 14px;\r\n  line-height: 20px;\r\n}\r\n\r\n.accordion__button:before {\r\n  display: inline-block;\r\n  content: \'\';\r\n  height: 10px;\r\n  width: 10px;\r\n  margin-right: 16px;\r\n  border-bottom: 1px solid currentColor;\r\n  border-right: 1px solid currentColor;\r\n  transform: rotate(-45deg);\r\n}\r\n\r\n.accordion__button[aria-expanded=\'true\']::before,\r\n.accordion__button[aria-selected=\'true\']::before {\r\n  transform: rotate(45deg);\r\n}',""])},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",o=e[3];if(!o)return n;if(t&&"function"==typeof btoa){var r=(a=o,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(a))))+" */"),i=o.sources.map(function(e){return"/*# sourceURL="+o.sourceRoot+e+" */"});return[n].concat(i).concat([r]).join("\n")}var a;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var o={},r=0;r<this.length;r++){var i=this[r][0];null!=i&&(o[i]=!0)}for(r=0;r<e.length;r++){var a=e[r];null!=a[0]&&o[a[0]]||(n&&!a[2]?a[2]=n:n&&(a[2]="("+a[2]+") and ("+n+")"),t.push(a))}},t}},function(e,t,n){var o,r,i={},a=(o=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===r&&(r=o.apply(this,arguments)),r}),s=function(e){var t={};return function(e,n){if("function"==typeof e)return e();if(void 0===t[e]){var o=function(e,t){return t?t.querySelector(e):document.querySelector(e)}.call(this,e,n);if(window.HTMLIFrameElement&&o instanceof window.HTMLIFrameElement)try{o=o.contentDocument.head}catch(e){o=null}t[e]=o}return t[e]}}(),l=null,c=0,u=[],p=n(304);function d(e,t){for(var n=0;n<e.length;n++){var o=e[n],r=i[o.id];if(r){r.refs++;for(var a=0;a<r.parts.length;a++)r.parts[a](o.parts[a]);for(;a<o.parts.length;a++)r.parts.push(g(o.parts[a],t))}else{var s=[];for(a=0;a<o.parts.length;a++)s.push(g(o.parts[a],t));i[o.id]={id:o.id,refs:1,parts:s}}}}function h(e,t){for(var n=[],o={},r=0;r<e.length;r++){var i=e[r],a=t.base?i[0]+t.base:i[0],s={css:i[1],media:i[2],sourceMap:i[3]};o[a]?o[a].parts.push(s):n.push(o[a]={id:a,parts:[s]})}return n}function f(e,t){var n=s(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var o=u[u.length-1];if("top"===e.insertAt)o?o.nextSibling?n.insertBefore(t,o.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),u.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var r=s(e.insertAt.before,n);n.insertBefore(t,r)}}function m(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=u.indexOf(e);t>=0&&u.splice(t,1)}function y(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var o=function(){0;return n.nc}();o&&(e.attrs.nonce=o)}return b(t,e.attrs),f(e,t),t}function b(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function g(e,t){var n,o,r,i;if(t.transform&&e.css){if(!(i="function"==typeof t.transform?t.transform(e.css):t.transform.default(e.css)))return function(){};e.css=i}if(t.singleton){var a=c++;n=l||(l=y(t)),o=C.bind(null,n,a,!1),r=C.bind(null,n,a,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",b(t,e.attrs),f(e,t),t}(t),o=function(e,t,n){var o=n.css,r=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&r;(t.convertToAbsoluteUrls||i)&&(o=p(o));r&&(o+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var a=new Blob([o],{type:"text/css"}),s=e.href;e.href=URL.createObjectURL(a),s&&URL.revokeObjectURL(s)}.bind(null,n,t),r=function(){m(n),n.href&&URL.revokeObjectURL(n.href)}):(n=y(t),o=function(e,t){var n=t.css,o=t.media;o&&e.setAttribute("media",o);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),r=function(){m(n)});return o(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;o(e=t)}else r()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=a()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=h(e,t);return d(n,t),function(e){for(var o=[],r=0;r<n.length;r++){var a=n[r];(s=i[a.id]).refs--,o.push(s)}e&&d(h(e,t),t);for(r=0;r<o.length;r++){var s;if(0===(s=o[r]).refs){for(var l=0;l<s.parts.length;l++)s.parts[l]();delete i[s.id]}}}};var _,v=(_=[],function(e,t){return _[e]=t,_.filter(Boolean).join("\n")});function C(e,t,n,o){var r=n?"":o.css;if(e.styleSheet)e.styleSheet.cssText=v(t,r);else{var i=document.createTextNode(r),a=e.childNodes;a[t]&&e.removeChild(a[t]),a.length?e.insertBefore(i,a[t]):e.appendChild(i)}}},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,o=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var r,i=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(r=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:o+i.replace(/^\.\//,""),"url("+JSON.stringify(r)+")")})}},function(e,t,n){"use strict";n.r(t);var o=n(74),r={propBagMethods:{utils:{setState:function(e){return console.debug("Invoked method setState()"),!1},logMessage:function(e,t,n){console.debug("Invoked method logMessage()")}},navigation:{openEditForm:function(e,t,n,o,r){console.debug("Invoked method openEditForm()")},openGridPage:function(e,t,n,o,r,i,a){console.debug("Invoked method openGridPage()")},openDashboard:function(e){console.debug("Invoked method openDashboard()")},openCreateForm:function(e,t,n){console.debug("Invoked method openCreateForm()")},openSearch:function(e){console.debug("Invoked method openSearch()")},openPowerBIFullScreenPage:function(e,t,n,o,r,i,a){console.debug("Invoked method openPowerBIFullScreenPage()")},openUrl:function(e,t){console.debug("Invoked method openUrl()")},openUrlWithProtocol:function(e,t){console.debug("Invoked method openUrlWithProtocol()")},openPhoneNumber:function(e,t,n,o,r){console.debug("Invoked method openPhoneNumber()")},openMaps:function(e){console.debug("Invoked method openMaps()")},openMap:function(e){console.debug("Invoked method openMap()")}},device:{isGetBarcodeValueOperationAvailable:function(){return!1},isTakePictureOperationAvailable:function(){return!1},isCaptureVideoOperationAvailable:function(){return!1},isCaptureAudioOperationAvailable:function(){return!1}},mode:{setNotification:function(e,t,n,o,r,i,a){return console.debug("Invoked method setNotification()"),!1},clearNotification:function(e,t,n,o,r,i){return console.debug("Invoked method clearNotification()"),!1}}},actions:{clearNestedChild:function(e){return!1},createAccessibilityComponent:function(e){},createCommandManagerUXComponent:function(){},createKeyboardShortcut:function(e,t,n,o,r,i){},createXrmForm:function(e,t,n,o){return!1},createXrmGrid:function(e,t,n,o){return!1},registerNewControl:function(e,t,n,o){return!1},executeAddOnLoad:function(e,t){},executeNotifyHandlersThatEventOccurred:function(e){return new Promise(function(e){e()})},getRecordSetQueryKey:function(e){return""},addSessionTab:function(e){return new Promise(function(e){e()})},closeSessionTab:function(e){return new Promise(function(e){e()})},updateSessionTab:function(e){return new Promise(function(e){e()})},closeAllSessionTabs:function(){return new Promise(function(e){e()})},dismissMessage:function(){return new Promise(function(e){e()})},initializeReferencePanelControl:function(e){return new Promise(function(e){e()})},cleanReferencePanelState:function(){return new Promise(function(e){e()})},markActiveTab:function(e,t){return new Promise(function(e){e()})},getResource:function(e){return new Promise(function(e){e()})},initializeCommandManager:function(e,t,n,o){return new Promise(function(e){e()})},loadManifest:function(e,t){return new Promise(function(e){e()})},loadResources:function(e){return new Promise(function(e){e()})},loadResourceStrings:function(e){return new Promise(function(e){e()})},triggerOfflineMetadataSync:function(){return new Promise(function(e){e()})},retrieveFormWithAttributes:function(e,t,n){return new Promise(function(e){e()})},refreshDataSetParameter:function(e,t){},retrieveDataSetLookupCellParameter:function(e,t,n){},renderNestedCustomControl:function(e,t,n){},renderReactSubtree:function(e,t){},retrieveGridData:function(e){},retrieveLookupData:function(e){},retrieveLookupMetadataAction:function(e){},addPendingCommandManagerId:function(e,t,n,o){},retrieveRecordCommand:function(e,t,n,o,r,i,a,s,l,c){},retrieveRecordDataForForm:function(e,t,n,o,r){return new Promise(function(e){e()})},retrieveForm:function(e,t){return new Promise(function(e){e()})},retrieveEntityData:function(e){return new Promise(function(e){e()})},retrieveChartDrilldownAttributes:function(e){return new Promise(function(e){e()})},retrieveView:function(e,t,n,o){},retrieveViewSelector:function(e,t){},save:function(e,t){return new Promise(function(e){e()})},saveEmbeddedEntity:function(e,t,n,o,r){return new Promise(function(e){e()})},setFieldControlPersonalization:function(e,t){},setGridControlPersonalization:function(e,t){},setDashboardControlPersonalization:function(e,t){},setGlobalControlPersonalization:function(e,t){},setPowerBISignedInState:function(e,t){},setValue:function(e,t,n,o){return new Promise(function(e){e("")})},setXrmObject:function(e){},updateFieldValue:function(e,t,n,o,r,i){},updateOutputs:function(e,t,n,o,r,i,a){},openPopup:function(e){return new Promise(function(e){e()})},closePopup:function(e){return new Promise(function(e){e()})},updateControlMemoizedDataSet:function(e,t,n){},executeRollupRequest:function(e,t,n){},isPresenceEnabledEntity:function(e){},getPresenceMappedField:function(e){}}},i={propBagMethods:r.propBagMethods,actions:r.actions},a=n(34),s={defaultThemingData:{normalfontfamily:"'SegoeUI', 'Segoe UI'",normalfontcolor:"#F26197",normalfontsize:"13px",solidborderstyle:"solid",noneborderstyle:"none",colors:{whitebackground:"#FFFFFF",defaulttheming:"#3B79B7",navbarshelf:"#FFFFFF",header:"#F26151",globallink:"#1160B7",selectedlinkeffect:"#F26158",hoverlinkeffect:"#E7EFF7",processcontrol:"#41A053",defaultentity:"#666666",defaultcustomentity:"#00CCA3",controlshade:"#FFFFFF",controlborder:"#BDC3C7",statustheme:{Alert1:{Text:"#FFFFFF",Fill:"#ea0600"},Alert2:{Text:"#000000",Fill:"#ff0c00"},Priority1:{Text:"#FFFFFF",Fill:"#b22912"},Priority2:{Text:"#000000",Fill:"#ff5b45"},Priority3:{Text:"#000000",Fill:"#f2c624"},Positive1:{Text:"#FFFFFF",Fill:"#358717"},Positive2:{Text:"#000000",Fill:"#47c21d"},Info1:{Text:"#FFFFFF",Fill:"#3b79b7"},Neutral1:{Text:"#FFFFFF",Fill:"#666666"}},status:{neutral:"#FFFFFF",error:"#000000",warning:"#000000",success:"#000000",info:"#FFFFFF"},baseColor:{Red:{red1:"#ffa2a2",red2:"#ff0c00",red3:"#ea0600",red4:"#bf0900",red5:"#800600"},Orange:{orange1:"#ffd5d2",orange2:"#ff9685",orange3:"#ff5b45",orange4:"#b22912",orange5:"#80281a"},Yellow:{yellow1:"#fae8a7",yellow2:"#f7cf52",yellow3:"#f2c624",yellow4:"#bf991f",yellow5:"#725a0d"},Green:{green1:"#bdf2a7",green2:"#70bc57",green3:"#47c21d",green4:"#358717",green5:"#1c6512"},Blue:{blue1:"#a8d0ff",blue2:"#6aa6ff",blue3:"#3b79b7",blue4:"#315fa2",blue5:"#25477a"},Teal:{teal1:"#99ebed",teal2:"#00ced3",teal3:"#00b7c3",teal4:"#008992",teal5:"#005c62"},Purple:{purple1:"#e9bbff",purple2:"#a350c4",purple3:"#8c2ab5",purple4:"#691b88",purple5:"#46125b"},Clay:{clay1:"#f4c0b9",clay2:"#e2614f",clay3:"#db3923",clay4:"#a42b1a",clay5:"#6e1d12"},Pink:{pink1:"#ffddf2",pink2:"#ffc7ea",pink3:"#ffa8da",pink4:"#b26491",pink5:"#652f4e"},Grey:{grey1:"#efefef",grey2:"#e2e2e2",grey3:"#d8d8d8",grey4:"#b3b3b3",grey5:"#666666",grey6:"#444444",grey7:"#333333"},Violet:{violet1:"#e6bdee",violet2:"#b860c1",violet3:"#a638b2",violet4:"#6a1e7a",violet5:"#47104c"},White:"#FFFFFF",Black:"#000000",Transparent:"#FFFFFF",CalculateContrast:function(){}},base:{white:"#FFFFFF",black:"#000000",red:"#ffa2a2",orange:"#ffd5d2",yellow:"#fae8a7",green:"#bdf2a7",blue:"#a8d0ff",teal:"#99ebed",purple:"#e9bbff"},links:{default:"#1160B7",visited:"#F8FAFC",disabled:"#666666"},linkstheme:{Normal:{Text:"#1160B7",Fill:"#FFFFFF"},Hover:{Text:"#E7EFF7",Fill:"#FFFFFF"},Visited:{Text:"#F8FAFC",Fill:"#FFFFFF"},Pressed:{Text:"#25477a",Fill:"#FFFFFF"},Disabled:{Text:"#666666",Fill:"#666666"}},grays:{gray01:"#efefef",gray02:"#e2e2e2",gray03:"#d8d8d8",gray04:"#b3b3b3",gray05:"#666666",gray06:"#444444",gray07:"#333333",gray08:"#333333",gray09:"#333333"}},textbox:{fonticonsize:"1em",fontweight:400,contentfontweight:600,fontsize:"1em",errorfontsize:"0.9em",spacing:"0.25em",containerspacing:"0.75em",rightmargin:"2em",lineheight:"1.5em",linethickness:"1px",errorlinethickness:"2px",horizontalpadding:"0.5em",verticalpadding:"0.5em",maxlength:200,labelcolor:"#444444",contentcolor:"#000000",linecolor:"#DDDDDD",hoverboxcolor:"#0072C6",backgroundcolor:"#F2F8FF",errorbackgroundcolor:"#FFF5F5",redcolor:"#EA0600",bluecolor:"#0000FF",restmodecolor:"#FFFFFF"},spacings:{xshorizontal:"0.5em",shorizontal:"0.5em",bhorizontal:"1em",mhorizontal:"2em",lhorizontal:"2.5em",xlhorizontal:"3.5em",xxlhorizontal:"4.5em",xsvertical:"0.5em",svertical:"0.5em",bvertical:"1em",mvertical:"2em",lvertical:"2.5em",xlvertical:"3.5em",xxlvertical:"4.5em"},fontfamilies:{semilight:"'SegoeUI-Light', 'Segoe UI Semilight', 'Segoe UI Regular', 'Segoe UI'",semibold:"'SegoeUI-Semibold', 'Segoe UI Semibold', 'Segoe UI Regular', 'Segoe UI'",regular:"'Segoe UI Regular', 'Segoe UI'",bold:"'SegoeUI-Bold', 'Segoe UI Bold', 'Segoe UI'"},fontsizes:{xsfontsize:"0.750rem",sfontsize:"0.875rem",bfontsize:"1rem",mfontsize:"1rem",lfontsize:"1.25rem",xlfontsize:"1.5rem",font225:"2.25rem",font200:"2.00rem",font175:"1.75rem",font150:"1.50rem",font125:"1.25rem",font115:"1.15rem",font100:"1.00rem",font085:"0.85rem",font075:"0.75rem"},breakpoints:{dimensionxs:"320",dimensions:"480",dimensionm:"768",dimensionl:"1024",dimensionxl:"1024"},measures:{measure025:"0.25rem",measure050:"0.5rem",measure075:"0.75rem",measure100:"1.00rem",measure125:"1.25rem",measure150:"1.50rem",measure175:"1.75rem",measure200:"2.00rem",measure225:"2.25rem",measure250:"2.50rem",measure300:"3.00rem",measure350:"3.50rem",measure400:"4.00rem",measure450:"4.50rem",measure500:"5.00rem",measure550:"5.50rem",measure600:"6.00rem"},lookup:{tagpadding:"6px",tagmargin:"-5px",tagbackgroundcolor:"#ECF4FA"},borders:{border01:"1px solid #efefef",border02:"1px solid #d8d8d8",border03:"1px dashed black"},shadows:{shadow01:"0px 2px 4px 0px rgba(0, 0, 0, 0.5);"},buttons:{button01primary:{borderColor:"transparent",backgroundColor:"#3b79b7",height:"2.50rem",minWidth:"6.00rem",cursor:"pointer",justifyContent:"center",alignItems:"center",paddingLeft:"1.00rem",paddingRight:"1.00rem",":focus":{outline:"1px dashed black"},":hover":{backgroundColor:"#25477a"},":active":{backgroundColor:"#25477a",outline:"1px solid #25477a",border:"1px solid white",":disabled":{outline:0,border:"1px solid transparent"}},":disabled":{backgroundColor:"#666666",cursor:"not-allowed","> span":{color:"#efefef"}}},button01secondary:{border:"1px solid #3b79b7",backgroundColor:"#FFFFFF",height:"2.50rem",minWidth:"6.00rem",cursor:"pointer",justifyContent:"center",alignItems:"center",paddingLeft:"1.00rem",paddingRight:"1.00rem",":focus":{outline:"1px dashed black"},":hover":{backgroundColor:"#25477a",borderColor:"transparent","> span":{color:"#FFFFFF"},":disabled":{"> span":{color:"#efefef"}}},":active":{backgroundColor:"#25477a",outline:"1px solid #25477a",border:"1px solid white",borderColor:"transparent","> span":{color:"#FFFFFF"},":disabled":{outline:0,border:"1px solid transparent"}},":disabled":{backgroundColor:"#666666",cursor:"not-allowed",borderColor:"transparent","> span":{color:"#efefef"}}},buttonprimarytext:{fontSize:"1.00rem",fontFamily:"'Segoe UI Regular', 'Segoe UI'",color:"#FFFFFF",textOverflow:"ellipsis",whiteSpace:"nowrap",overflow:"hidden"},buttonsecondarytext:{fontSize:"1.00rem",fontFamily:"'Segoe UI Regular', 'Segoe UI'",color:"#3b79b7",textOverflow:"ellipsis",whiteSpace:"nowrap",overflow:"hidden"},actioniconbutton01:{height:"2.50rem",width:"2.50rem",borderStyle:"none",backgroundColor:"transparent",justifyContent:"center",alignItems:"center",cursor:"pointer","> span":{fontSize:"1.00rem",color:"#333333"},":focus":{outline:"1px dashed black"},":hover":{backgroundColor:"#efefef"},":disabled":{cursor:"not-allowed","> span":{color:"#b3b3b3"}}},button02primary:{borderColor:"transparent",backgroundColor:"#3b79b7",height:"1.50rem",minWidth:"4.00rem",cursor:"pointer",justifyContent:"center",alignItems:"center",paddingLeft:"0.5rem",paddingRight:"0.5rem",":focus":{outline:"1px dashed black"},":hover":{backgroundColor:"#25477a"},":active":{backgroundColor:"#25477a",outline:"1px solid #25477a",border:"1px solid white",":disabled":{outline:0,border:"1px solid transparent"}},":disabled":{backgroundColor:"#666666",cursor:"not-allowed","> span":{color:"#efefef"}}},button02secondary:{border:"1px solid #3b79b7",backgroundColor:"#FFFFFF",height:"1.50rem",minWidth:"4.00rem",cursor:"pointer",justifyContent:"center",alignItems:"center",paddingLeft:"0.5rem",paddingRight:"0.5rem",":focus":{outline:"1px dashed black"},":hover":{backgroundColor:"#25477a",borderColor:"transparent","> span":{color:"#FFFFFF"},":disabled":{"> span":{color:"#efefef"}}},":active":{backgroundColor:"#25477a",outline:"1px solid #25477a",border:"1px solid white",borderColor:"transparent","> span":{color:"#FFFFFF"},":disabled":{outline:0,border:"1px solid transparent"}},":disabled":{backgroundColor:"#666666",cursor:"not-allowed",borderColor:"transparent","> span":{color:"#efefef"}}}}},getEntityColor:function(e){return"blue"},fullScreenOverrideStyle:void 0},l={stateToPropsMappingError:void 0,stateToPropsMappingErrorMessage:void 0,dynamicData:{parameters:void 0,dataReady:!0,updated:!0},manifest:void 0,personalizationState:void 0,propBagData:{formattingData:{timeZoneUtcOffsetMinutes:-480,dateTimeFormatInfo:{AMDesignator:"AM",AbbreviatedDayNames:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],AbbreviatedMonthGenitiveNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec",""],AbbreviatedMonthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec",""],CalendarWeekRule:0,Calendar:{MinSupportedDateTime:new Date,MaxSupportedDateTime:new Date,AlgorithmType:1,CalendarType:1,Eras:[1],TwoDigitYearMax:2029,IsReadOnly:!1,minSupportedDateTime:new Date,maxSupportedDateTime:new Date,algorithmType:1,calendarType:1,eras:[1],twoDigitYearMax:2029,isReadOnly:!1},DateSeparator:"/",DayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],FirstDayOfWeek:0,FullDateTimePattern:"dddd, MMMM d, yyyy h:mm:ss tt",LongDatePattern:"dddd, MMMM d, yyyy",LongTimePattern:"h:mm:ss tt",MonthDayPattern:"MMMM dd",MonthGenitiveNames:["January","February","March","April","May","June","July","August","September","October","November","December",""],MonthNames:["January","February","March","April","May","June","July","August","September","October","November","December",""],PMDesignator:"PM",ShortDatePattern:"M/d/yyyy",ShortTimePattern:"h:mm tt",ShortestDayNames:["Su","Mo","Tu","We","Th","Fr","Sa"],SortableDateTimePattern:"yyyy'-'MM'-'dd'T'HH':'mm':'ss",TimeSeparator:":",UniversalSortableDateTimePattern:"yyyy'-'MM'-'dd HH':'mm':'ss'Z'",YearMonthPattern:"MMMM yyyy",amDesignator:"AM",abbreviatedDayNames:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],abbreviatedMonthGenitiveNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec",""],abbreviatedMonthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec",""],calendarWeekRule:0,calendar:{MinSupportedDateTime:new Date,MaxSupportedDateTime:new Date,AlgorithmType:1,CalendarType:1,Eras:[1],TwoDigitYearMax:2029,IsReadOnly:!1,minSupportedDateTime:new Date,maxSupportedDateTime:new Date,algorithmType:1,calendarType:1,eras:[1],twoDigitYearMax:2029,isReadOnly:!1},dateSeparator:"/",dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],firstDayOfWeek:0,fullDateTimePattern:"dddd, MMMM d, yyyy h:mm:ss tt",longDatePattern:"dddd, MMMM d, yyyy",longTimePattern:"h:mm:ss tt",monthDayPattern:"MMMM dd",monthGenitiveNames:["January","February","March","April","May","June","July","August","September","October","November","December",""],monthNames:["January","February","March","April","May","June","July","August","September","October","November","December",""],pmDesignator:"PM",shortDatePattern:"M/d/yyyy",shortTimePattern:"h:mm tt",shortestDayNames:["Su","Mo","Tu","We","Th","Fr","Sa"],sortableDateTimePattern:"yyyy'-'MM'-'dd'T'HH':'mm':'ss",timeSeparator:":",universalSortableDateTimePattern:"yyyy'-'MM'-'dd HH':'mm':'ss'Z'",yearMonthPattern:"MMMM yyyy"},numberFormatInfo:{CurrencyDecimalDigits:2,CurrencyDecimalSeparator:".",CurrencyGroupSeparator:",",CurrencyGroupSizes:[3],CurrencyNegativePattern:0,CurrencyPositivePattern:0,CurrencySymbol:"$",NativeDigits:["0","1","2","3","4","5","6","7","8","9"],NANSymbol:"",NegativeInfinitySymbol:"-Infinity",NegativeSign:"-",NumberDecimalDigits:2,NumberDecimalSeparator:".",NumberGroupSeparator:",",NumberGroupSizes:[3],NumberNegativePattern:1,PerMilleSymbol:"�",PercentDecimalDigits:2,PercentDecimalSeparator:".",PercentGroupSeparator:",",PercentGroupSizes:[3],PercentNegativePattern:0,PercentPositivePattern:0,PercentSymbol:"%",PositiveInfinitySymbol:"Infinity",PositiveSign:"+",currencyDecimalDigits:2,currencyDecimalSeparator:".",currencyGroupSeparator:",",currencyGroupSizes:[3],currencyNegativePattern:0,currencyPositivePattern:0,currencySymbol:"$",nativeDigits:["0","1","2","3","4","5","6","7","8","9"],nanSymbol:"",negativeInfinitySymbol:"-Infinity",negativeSign:"-",numberDecimalDigits:2,numberDecimalSeparator:".",numberGroupSeparator:",",numberGroupSizes:[3],numberNegativePattern:1,perMilleSymbol:"�",percentDecimalDigits:2,percentDecimalSeparator:".",percentGroupSeparator:",",percentGroupSizes:[3],percentNegativePattern:0,percentPositivePattern:0,percentSymbol:"%",positiveInfinitySymbol:"Infinity",positiveSign:"+"},timeZoneAdjusters:[],formatInfoCultureName:"en-US",formatter:a.SimpleFormatter,languagesByCode:{1033:"English","-1":"All Languages"}},clientData:{orgSettingsData:{isRTL:!1,fiscalYearStartDate:new Date("2017-01-01T18:59:00.000Z"),fiscalPeriodFormat:1,fiscalPeriodType:2002,fiscalYearFormatYear:1,fiscalYearFormatPrefix:1,fiscalYearFormatSuffix:3,fiscalYearDisplayCode:1,fiscalPeriodConnector:"s",showWeekNumber:!1,boundDashboardDefaultCardExpanded:!1,organizationId:"{E534EEBD-1E20-4C07-894A-99CD76927368}",isActionCardEnabled:!1,isEmailMonitoringAllowed:!1,allowUnresolvedPartiesOnEmailSend:!1},languageCode:1033,isRTL:!1,showWeekNumber:!1,locale:"en-US",userAgent:{isWin:!0,isAndroid:!1,isAndroidModern:!1,isIos:!1,isBrowserIE:!1,isBrowserChrome:!0,isBrowserFirefox:!1},usePathBasedUrls:!1,organizationUniqueName:"OneFarm",disableScroll:!1,formFactor:2},utilsData:{encoder:{CrmHtmlEncode:function(){},CrmUrlEncode:function(){}},dateTimeUtils:{getDSTAdjustmentMinutes:function(e,t){return 0},getWeekOfYear:function(e,t,n){return 0}},scheduleRender:function(e){},hasEntityPrivilege:function(e,t,n){return!0}},themingData:s,accessibilityData:{assignedTabIndex:0},resourcesData:{strings:{},stringsLoaded:!0},modeData:{entityTypeName:void 0,entityId:"4ff37e24-3c76-e711-8105-000d3aa167ac",entityRecordName:"A. Datum Corporation (sample)",isOffline:!1},pageData:{appId:"047efa7c-0976-e711-8104-000d3aa167ac",isPageReadOnly:!1}},children:void 0,personalizationConfiguration:void 0,pageType:void 0,popupStack:[],contextToken:void 0,internalCommandManagerEtns:void 0,updatedProperties:[],internalCommandManagerIds:[],globalCommandManagerInitialized:!1,portalFlyoutToDialogId:""},c={Id:"",Label:"TestLabel",Name:"",DomId:"",ShowLabel:!0,Visible:!0,Disabled:!1},u={controlId:"TestControl",configuration:void 0,descriptor:c,id:"0",systemDefinedProperties:{},formInfo:void 0,parentDefinedControlProps:{},rowSpan:1,themingData:s,children:void 0,contextString:"",parentContextToken:void 0,externalCommandManagerId:void 0,externalCommandPromise:void 0,shouldRender:void 0,logLevel:2};
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
/**
 * @license Copyright (c) Microsoft Corporation. All rights reserved.
 */
function p(e,t,n,o){void 0===n&&(n=c),void 0===o&&(o=null);var r=i,a=l;a.manifest=t,a.dynamicData=o;var s=u;return s.configuration=e,n&&(s.descriptor=n),Object.assign(r,a,s)}n.d(t,"GenerateDefaultCustomControlProps",function(){return p}),window.PCFUtilities={},window.PCFUtilities.GenerateDefaultCustomControlProps=p,window.PCFUtilities.InitializeMockXrmProxy=o.InitializeXrm,window.PCFUtilities.Defaults={},window.PCFUtilities.Defaults.ControlDescriptor=c,window.PCFUtilities.Defaults.Formatter=a.SimpleFormatter,window.PCFUtilities.Defaults.XrmObject=o.MockXrmProxy}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,