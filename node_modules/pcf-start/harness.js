!function(e){var t={};function n(o){if(t[o])return t[o].exports;var r=t[o]={i:o,l:!1,exports:{}};return e[o].call(r.exports,r,r.exports,n),r.l=!0,r.exports}n.m=e,n.c=t,n.d=function(e,t,o){n.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:o})},n.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},n.t=function(e,t){if(1&t&&(e=n(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var o=Object.create(null);if(n.r(o),Object.defineProperty(o,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var r in e)n.d(o,r,function(t){return e[t]}.bind(null,r));return o},n.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return n.d(t,"a",t),t},n.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},n.p="",n(n.s=142)}([function(e,t){e.exports=React},function(e,t,n){"use strict";n.r(t),n.d(t,"ManifestType",function(){return o});var o=function(){function e(){}return e.TwoOptions="TwoOptions",e.DateAndTimeDateOnly="DateAndTime.DateOnly",e.DateAndTimeDateAndTime="DateAndTime.DateAndTime",e.Decimal="Decimal",e.FP="FP",e.WholeNone="Whole.None",e.WholeDuration="Whole.Duration",e.WholeTimeZone="Whole.TimeZone",e.WholeLanguage="Whole.Language",e.LookupSimple="Lookup.Simple",e.LookupCustomer="Lookup.Customer",e.LookupOwner="Lookup.Owner",e.LookupPartyList="Lookup.PartyList",e.LookupRegarding="Lookup.Regarding",e.LookupMultiEntity="Lookup.MultiEntity",e.MultiSelectPicklist="MultiSelectPicklist",e.Multiple="Multiple",e.Currency="Currency",e.OptionSet="OptionSet",e.StatusOptionSet="StatusOptionSet",e.EntityNameOptionSet="EntityNameOptionSet",e.SingleLineEmail="SingleLine.Email",e.SingleLineText="SingleLine.Text",e.SingleLineTextArea="SingleLine.TextArea",e.SingleLineURL="SingleLine.URL",e.SingleLineTickerSymbol="SingleLine.Ticker",e.SingleLinePhone="SingleLine.Phone",e.Grid="Grid",e.BusinessProcessFlow="BusinessProcessFlow",e.WebResourceHtmlControl="WebResource.HTML",e.TimelineWall="TimelineWall",e.QuickForm="Form.QuickForm",e.Card="Card",e.Dashboard="Dashboard",e.Search="Search",e.SearchWidget="SearchWidget.SearchWidget",e.KbArticle="KbArticle",e.KbContent="KbContent",e.PowerBI="PowerBI",e.MicrosoftFlow="MicrosoftFlow",e.EmailEngagementRecipientActivity="emailrecipientactivitycontrol",e.ReferencePanelSearchWidget="SearchWidget.ReferencePanelSearchWidget",e.Timer="Timer",e.SingleLineAddress="SingleLine.Address",e.GlobalFilter="GlobalFilter",e.AppliedFilters="AppliedFilters",e.ReferencePanel="ReferencePanel",e.EmailEngagementActions="emailengagementactionscontrol",e.SocialInsightsControl="SocialInsightsControl",e.ClassIdControlMap={"fd2a7985-3187-444e-908d-6624b21f69c0":"iframe","270bd3db-d9af-4782-9025-509e298dec0a":"lookup","f3015350-44a2-4aa0-97b5-00166532b5e9":"regarding","cbfb742c-14e7-4a17-96bb-1a13f7f64aa2":"partylist","aa987274-ce4e-4271-a803-66164311a958":"duration","c6d124ca-7eda-4a60-aea9-7fb8d318b68f":"integer","0d2c745a-e5a8-4c8f-ba63-c6d3bb604660":"float","533b9e00-756b-4312-95a0-dc888637ac78":"money","c3efe0c3-0ec6-42be-8349-cbd9079dfd8e":"decimal","ada2203e-b4cd-49be-9ddf-234642b43b52":"email","6f3fb987-393b-4d2d-859f-9d0f0349b6ad":"emailbody","4273edbd-ac1d-40d3-9fb2-095c621b552d":"text","e0dece4b-6fc8-4a8f-a065-082708572369":"memo","71716b6c-711e-476c-8ab8-5d11542bfb47":"url","1e1fc551-f7a8-43af-ac34-a8dc35c7b6d4":"tickersymbol","3ef39988-22bb-4f0b-bbbe-64b5a3748aee":"picklist","5d68b988-0661-4db2-bc3e-17598ad3be6c":"status","5b773807-9fb2-42db-97c3-7a91eff8adff":"datetime","67fac785-cd58-4f9f-abb3-4b7ddc6ed5ed":"boolean","b0c6723a-8503-4fd7-bb28-c8a06ac933c2":"boolean","671a9387-ca5a-4d1e-8ab7-06e39ddcf6b5":"language","e7a81278-8635-4d9e-8d4d-59480b391c5b":"subgrid","7c624a0b-f59e-493d-9583-638d34759266":"timezone","3246f906-1f71-45f7-b11f-d7be0f9d04c9":"connection","821acf1a-7e46-4a0c-965d-fe14a57d78c7":"connectionroleojbjecttypecodelist","9fdf5f91-88b1-47f4-ad53-c11efc01a01d":"webResourceHtml","587cdf98-c1d5-4bde-8473-14a0bc7644a7":"webResourceImage","080677db-86ec-4544-ac42-f927e74b491f":"webResourceSilverlight","8c54228c-1b25-4909-a12a-f2b968bb0d62":"powerBITile","06375649-c143-495e-a496-c962e5b4488e":"notes","5c5600e0-1d6e-4205-a272-be80da87fd42":"quickformcollection","b68b05f0-a46d-43f8-843b-917920af806a":"referencepanelquickformcollection","02d4264b-47e2-4b4c-aa95-f439f3f4d458":"referencepanelsubgrid","1f179106-fa28-4495-961e-f6bd93c21974":"interactionwall","62b0df79-0464-470f-8af7-4483cfea0c7d":"bingmap","86b9e25e-695e-4fef-ac69-f05cfa96739c":"socialInsight","76b9e25e-695e-4fef-ac69-f05cfa96739c":"orgInsights","9c5ca0a1-ab4d-4781-be7e-8dfbe867b87e":"timercontrol","e616a57f-20e0-4534-8662-a101b5ddf4e0":"searchwidget","03c5aed6-ee88-404e-b63c-4c53429c8bfb":"kbarticle","1b9fc842-b45e-4fc1-b080-81e96b6d857f":"kbcontent","7ccd1494-1f7a-4e3a-8bde-f32069daeb9f":"referencepanelsearchwidget","ee9078c8-6946-4e2c-b8f8-35e65f4be6a8":"queuecontainer","f130d8ae-ce5b-43c5-bed1-1a6a5856cf3d":"multiplepiechart","6fae836f-fc01-48de-9b63-9b68a8fd86b8":"tagcontrol","f9a8a302-114e-466a-b582-6771b2ae0d92":"customControl","c8bfbbef-6851-4401-a0cc-7450062fe085":"aci","8c10015a-b339-4982-9474-a95fe05631a5":"phone","d2561f53-b292-42d9-b222-478e40ffe29f":"dashboard","7c7059a6-74d9-4b02-80ad-19bc60426393":"search","39354e4a-5015-4d74-8031-ea9eb73a1322":"label","fff0e632-9d7b-4f21-bbc1-05d1567ad144":"globalfilter","9c310a73-a360-42c5-8943-47a06f1b51ea":"appliedfilters"},e}()},function(e,t,n){"use strict";n.r(t),n.d(t,"XrmProxy",function(){return o}),n.d(t,"default",function(){return r});var o=function(){function e(){this._userSettings={userId:null,getTimeZoneOffsetMinutes:null,isHighContrastEnabled:null,isRTL:null,languageId:null,userName:null,securityRoles:null,pagingLimit:null},this._orgSettings={languageId:null,uniqueName:null,isAutoSaveEnabled:null,attributes:null},this._utils={beginSecureSessionForResource:null,getEntityMetadata:null,getEntitiesMetadata:null,getResourceString:null,isFeatureEnabled:null,lookupObjects:null,getEntityName:null,getFormId:null,canOpenUrl:null},this._page={getClientUrl:null},this._reporting={reportSuccess:null,reportFailure:null,reportEvent:null},this._diagnostics={traceError:null,traceWarning:null,traceInfo:null,traceDebug:null},this._intelligenceApi={getPredictionSchemaAsync:null,predictAsync:null,getPreTrainedModelIdAsync:null,getLabelsForObjectDetectionModelAsync:null},this._client={getClient:null,getClientState:null,getFormFactor:null},this._applicationUI={addGlobalNotification:null,clearGlobalNotification:null,clearGlobalNotifications:null},this._webApiContext={online:{retrieveRecord:null,retrieveMultipleRecords:null,updateRecord:null,createRecord:null,deleteRecord:null,execute:null,executeMultiple:null},offline:{retrieveRecord:null,retrieveMultipleRecords:null,updateRecord:null,createRecord:null,deleteRecord:null,execute:null,executeMultiple:null}},this._initialized=!1}return Object.defineProperty(e.prototype,"Initialized",{get:function(){return this._initialized},set:function(e){this._initialized=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"OrgSettings",{get:function(){return this._orgSettings},set:function(e){this._orgSettings=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"UserSettings",{get:function(){return this._userSettings},set:function(e){this._userSettings=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"Offline",{get:function(){return this._offline},set:function(e){this._offline=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"Utils",{get:function(){return this._utils},set:function(e){this._utils=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"Page",{get:function(){return this._page},set:function(e){this._page=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"Reporting",{get:function(){return this._reporting},set:function(e){this._reporting=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"Diagnostics",{get:function(){return this._diagnostics},set:function(e){this._diagnostics=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"IntelligenceApi",{get:function(){return this._intelligenceApi},set:function(e){this._intelligenceApi=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"Client",{get:function(){return this._client},set:function(e){this._client=e},enumerable:!0,configurable:!0}),e.prototype.setUserSettings=function(e){this._userSettings=e},e.prototype.setOrgSettings=function(e){this._orgSettings=e},e.prototype.setOffline=function(e){this._offline=e},e.prototype.setUtils=function(e){this._utils=e},e.prototype.setPage=function(e){this._page=e},e.prototype.setReporting=function(e){this._reporting=e},e.prototype.setIntelligenceApi=function(e){this._intelligenceApi=e},e.prototype.setDiagnostics=function(e){this._diagnostics=e},e.prototype.setClient=function(e){this._client=e},e.prototype.setNavigationContext=function(e){this._navigationContext=e},e.prototype.setDeviceContext=function(e){this._deviceContext=e},e.prototype.setExternalContext=function(e){this._externalContext=e},e.prototype.setApplicationUI=function(e){this._applicationUI=e},e.prototype.setWebApi=function(e){this._webApiContext=e},e.prototype.openForm=function(e,t){return this._navigationContext.openForm(e,t)},e.prototype.openUrl=function(e,t){return this._navigationContext.openUrl(e,t)},e.prototype.openFile=function(e,t){return this._navigationContext.openFile(e,t)},e.prototype.openAlertDialog=function(e,t){return this._navigationContext.openAlertDialog(e,t)},e.prototype.openConfirmDialog=function(e,t){return this._navigationContext.openConfirmDialog(e,t)},e.prototype.openDialog=function(e,t,n){return this._navigationContext.openDialog(e,t,n)},e.prototype.openErrorDialog=function(e){return this._navigationContext.openErrorDialog(e)},e.prototype.openTaskFlow=function(e,t,n){return this._navigationContext.openTaskFlow(e,t,n)},e.prototype.openWebResource=function(e,t,n){return this._navigationContext.openWebResource(e,t,n)},e.prototype.captureImage=function(e){return this._deviceContext.captureImage(e)},e.prototype.captureAudio=function(){return this._deviceContext.captureAudio()},e.prototype.captureVideo=function(){return this._deviceContext.captureVideo()},e.prototype.pickFile=function(e){return this._deviceContext.pickFile(e)},e.prototype.getBarcodeValue=function(){return this._deviceContext.getBarcodeValue()},e.prototype.getCurrentPosition=function(){return this._deviceContext.getCurrentPosition()},e.prototype.getAvailableExternalContexts=function(){return this._externalContext.getAvailableExternalContexts()},e.prototype.getExternalContextProperty=function(e,t,n){return this._externalContext.getExternalContextProperty(e,t,n)},e.prototype.invokeExternalContextAction=function(e,t,n){return this._externalContext.invokeExternalContextAction(e,t,n)},e.prototype.removeExternalContextPropertyListener=function(e,t,n){return this._externalContext.removeExternalContextPropertyListener(e,t,n)},e.prototype.addGlobalNotification=function(e,t,n,o,r,i){return this._applicationUI.addGlobalNotification(e,t,n,o,r,i)},e.prototype.clearGlobalNotification=function(e){return this._applicationUI.clearGlobalNotification(e)},e.prototype.clearGlobalNotifications=function(){return this._applicationUI.clearGlobalNotifications()},e.prototype._getWebApiContext=function(){return"Offline"===this._client.getClientState()?this._webApiContext.offline:this._webApiContext.online},e.prototype.retrieveRecord=function(e,t,n){return this._getWebApiContext().retrieveRecord(e,t,n)},e.prototype.createRecord=function(e,t){return this._getWebApiContext().createRecord(e,t)},e.prototype.updateRecord=function(e,t,n){return this._getWebApiContext().updateRecord(e,t,n)},e.prototype.deleteRecord=function(e,t){return this._getWebApiContext().deleteRecord(e,t)},e.prototype.retrieveMultipleRecords=function(e,t,n){return this._getWebApiContext().retrieveMultipleRecords(e,t,n)},e.prototype.execute=function(e){return this._getWebApiContext().execute(e)},e.prototype.executeMultiple=function(e){var t=this._getWebApiContext();return t.executeMultiple?t.executeMultiple(e):Promise.resolve(null)},e}(),r=new o},function(e,t,n){"use strict";function o(e){return null==e}function r(e){return o(e)||!e.length}function i(e){return!o(e)&&e.constructor===Array}n.d(t,"c",function(){return o}),n.d(t,"b",function(){return r}),n.d(t,"a",function(){return i})},function(e,t,n){"use strict";function o(e){return e.style?(Object.assign(e.style,function(e){if(!e)return{};var t={};null!=e.borderBottomWidth&&(t.borderBottomWidth=r(e.borderBottomWidth));null!=e.borderLeftWidth&&(t.borderLeftWidth=r(e.borderLeftWidth));null!=e.borderRightWidth&&(t.borderRightWidth=r(e.borderRightWidth));null!=e.borderTopWidth&&(t.borderTopWidth=r(e.borderTopWidth));null!=e.borderWidth&&(t.borderWidth=r(e.borderWidth));null!=e.height&&(t.height=r(e.height));null!=e.width&&(t.width=r(e.width));null!=e.minWidth&&(t.minWidth=r(e.minWidth));null!=e.minHeight&&(t.minHeight=r(e.minHeight));null!=e.maxWidth&&(t.maxWidth=r(e.maxWidth));null!=e.maxHeight&&(t.maxHeight=r(e.maxHeight));null!=e.margin&&(t.margin=r(e.margin));null!=e.marginBottom&&(t.marginBottom=r(e.marginBottom));null!=e.marginLeft&&(t.marginLeft=r(e.marginLeft));null!=e.marginRight&&(t.marginRight=r(e.marginRight));null!=e.marginTop&&(t.marginTop=r(e.marginTop));null!=e.padding&&(t.padding=r(e.padding));null!=e.paddingBottom&&(t.paddingBottom=r(e.paddingBottom));null!=e.paddingLeft&&(t.paddingLeft=r(e.paddingLeft));null!=e.paddingRight&&(t.paddingRight=r(e.paddingRight));null!=e.paddingTop&&(t.paddingTop=r(e.paddingTop));null!=e.position&&(t.position=r(e.position));null!=e.bottom&&(t.bottom=r(e.bottom));null!=e.right&&(t.right=r(e.right));null!=e.top&&(t.top=r(e.top));null!=e.left&&(t.left=r(e.left));null!=e.flex&&(t.flex=(n=e.flex,o=Number(n),isNaN(o)?n:o));var n,o;null!=e.animationDirection&&(t.animationDirection=e.animationDirection);null!=e.animationDuration&&(t.animationDuration=e.animationDuration);null!=e.animationFillMode&&(t.animationFillMode=e.animationFillMode);null!=e.animationIterationCount&&(t.animationIterationCount=e.animationIterationCount);null!=e.animationName&&(t.animationName=e.animationName);null!=e.backgroundColor&&(t.backgroundColor=e.backgroundColor);return t}(e.style)),e.style):{}}function r(e){return"number"==typeof e?e.toString()+"px":e}n.d(t,"b",function(){return o}),n.d(t,"a",function(){return i});var i=function(e){return function(t){return t.renderRule(o,e)}}},function(e,t,n){e.exports=n(177)},function(e,t,n){"use strict";n.d(t,"a",function(){return u});var o,r=n(0),i=n(9),s=n(27),a=(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),l=!!window.navigator.userAgent.match("MSIE")||!!window.navigator.userAgent.match("Trident"),c=!!window.navigator.userAgent.match("Edge"),u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return a(t,e),t.prototype.getElementName=function(){return"div"},t.prototype.getElementProps=function(){return null},t.prototype.hasAriaProperty=function(){return!!(this.props.accessibilityLabel||this.props.accessibilityChecked||this.props.accessibilityLive||this.props.accessibilityRelevant||this.props.accessibilityAtomic||this.props.labelledByElementId||this.props.describedByElementId||this.props.controlsElementId||this.props.ownsElementId||this.props.accessibilityRequired||"boolean"==typeof this.props.accessibilityExpanded||"boolean"==typeof this.props.accessibilityHasPopup||"boolean"==typeof this.props.accessibilityReadOnly||"boolean"==typeof this.props.accessibilityDisabled||"number"==typeof this.props.accessibilityLevel||"boolean"==typeof this.props.accessibilityHidden||"boolean"==typeof this.props.isSelected||this.props.activeDescendantId||this.props.accessibilityCurrent||"number"==typeof this.props.accessibilityValueMin||"number"==typeof this.props.accessibilityValueMax||"number"==typeof this.props.accessibilityValueNow||"boolean"==typeof this.props.accessibilityModal||this.props.accessibilityValueText||this.props.role||this.props.accessibilityAriaOrientation)},t.prototype.getElementPropsInternal=function(){var e={};e.id=this.props.id,this.props.hidden&&(e[i.D]=!0),this.props.accessibilityLabel&&(e[i.m]=this.props.accessibilityLabel),this.props.accessibilityChecked&&(e[i.e]=this.props.accessibilityChecked),this.props.accessibilityLive&&(e[i.p]=this.props.accessibilityLive),this.props.accessibilityRelevant&&(e[i.v]=this.props.accessibilityRelevant),this.props.accessibilityAtomic&&(e[i.c]=this.props.accessibilityAtomic),this.props.labelledByElementId&&(e[i.n]=this.props.labelledByElementId),this.props.describedByElementId&&(e[i.h]=this.props.describedByElementId),this.props.controlsElementId&&(e[i.f]=this.props.controlsElementId),this.props.ownsElementId&&(e[i.t]=this.props.ownsElementId),this.props.accessibilityRequired&&(e[i.w]=this.props.accessibilityRequired),"boolean"==typeof this.props.accessibilityExpanded&&(e[i.j]=this.props.accessibilityExpanded),"boolean"==typeof this.props.accessibilityHasPopup&&(e[i.k]=this.props.accessibilityHasPopup),"boolean"==typeof this.props.accessibilityReadOnly&&(e[i.u]=this.props.accessibilityReadOnly),"boolean"==typeof this.props.accessibilityDisabled&&(e[i.i]=this.props.accessibilityDisabled),"number"==typeof this.props.accessibilityLevel&&(e[i.o]=this.props.accessibilityLevel),"boolean"==typeof this.props.accessibilityHidden&&(e[i.l]=this.props.accessibilityHidden),"boolean"==typeof this.props.isSelected&&(e[i.x]=this.props.isSelected),this.props.activeDescendantId&&(e[i.b]=this.props.activeDescendantId),this.props.accessibilityCurrent&&(e[i.g]=this.props.accessibilityCurrent),"number"==typeof this.props.accessibilityValueMin&&(e[i.z]=this.props.accessibilityValueMin),"number"==typeof this.props.accessibilityValueMax&&(e[i.y]=this.props.accessibilityValueMax),"number"==typeof this.props.accessibilityValueNow&&(e[i.A]=this.props.accessibilityValueNow),"boolean"==typeof this.props.accessibilityModal&&(e[i.q]=this.props.accessibilityModal),this.props.accessibilityValueText&&(e[i.B]=this.props.accessibilityValueText),this.props.role&&(e[i.E]=this.props.role),this.props.title&&(e[i.F]=this.props.title),this.props.accessibilityAriaOrientation&&(e[i.s]=this.props.accessibilityAriaOrientation),"number"==typeof this.props.tabIndex&&(e.tabIndex=this.props.tabIndex);var t=this.props[s.a.LearningPathAttributeName];if(t&&(e[s.a.LearningPathAttributeName]=t),this.props.testhooks){var n=this.props.testhooks;for(var o in n)e["data-"+o]=n[o]}null!=this.props.onClick&&(e.onClick=this.props.onClick),null!=this.props.onDoubleClick&&(e.onDoubleClick=this.props.onDoubleClick),null!=this.props.onDrag&&(e.onDrag=this.props.onDrag),null!=this.props.onDragEnd&&(e.onDragEnd=this.props.onDragEnd),null!=this.props.onDragEnter&&(e.onDragEnter=this.props.onDragEnter),null!=this.props.onDragExit&&(e.onDragExit=this.props.onDragExit),null!=this.props.onDragLeave&&(e.onDragLeave=this.props.onDragLeave),null!=this.props.onDragOver&&(e.onDragOver=this.props.onDragOver),null!=this.props.onDragStart&&(e.onDragStart=this.props.onDragStart),null!=this.props.onDrop&&(e.onDrop=this.props.onDrop),null!=this.props.onClickCapture&&(e.onClickCapture=this.props.onClickCapture),null!=this.props.onPointerOver&&(e.onPointerOver=this.props.onPointerOver),null!=this.props.onPointerOut&&(e.onPointerOut=this.props.onPointerOut),null!=this.props.onPointerUp&&(e.onPointerUp=this.props.onPointerUp),null!=this.props.onPointerDown&&(e.onPointerDown=this.props.onPointerDown),null!=this.props.onPointerEnter&&(e.onPointerEnter=this.props.onPointerEnter),null!=this.props.onPointerLeave&&(e.onPointerLeave=this.props.onPointerLeave),null!=this.props.onPointerMove&&(e.onPointerMove=this.props.onPointerMove),null!=this.props.onPointerCancel&&(e.onPointerCancel=this.props.onPointerCancel),null!=this.props.onBlur&&(e.onBlur=this.props.onBlur),null!=this.props.onFocus&&(e.onFocus=this.props.onFocus),null!=this.props.onMouseEnter&&(e.onMouseEnter=this.props.onMouseEnter),null!=this.props.onMouseLeave&&(e.onMouseLeave=this.props.onMouseLeave),null!=this.props.onKeyDown&&(e.onKeyDown=this.props.onKeyDown),null!=this.props.onKeyUp&&(e.onKeyUp=this.props.onKeyUp),null!=this.props.onScroll&&(e.onScroll=this.props.onScroll),Object.assign(e,this.getElementProps()),e.children=null,e.style=this.getElementStyle();var r=this.getElementClassName()+" "+this.getFlexClassName(e.style);return r.length>0&&(e.className=r,e.style={}),e},t.prototype.getElementStyle=function(){return this.props.style},t.prototype.getElementClassName=function(){return(this.props.styles?this.props.styles:"")+(this.props.explicitStyles?" "+this.props.explicitStyles:"")},t.prototype.getFlexClassName=function(e){return""},t.prototype.getElementChildren=function(){var e=this.props.children;if(Array.isArray(e)){if(0===e.length)return null;if(e.length>1&&window.DEBUG){var t=e.filter(function(e){return r.isValidElement(e)});if(t.length>1)for(var n={},o=0;o<t.length;o++){var i=t[o];if(!i.key){var s=i.key||i.type.name;n[s]&&console.warn("The React child should have a unique key within the parent's scope:",s,", current element id/key =",this.props.id,", this element type:",this.constructor.name),n[s]=s}}}}return"string"==typeof e&&0===e.length?null:e},t.isElementScrollable=function(e){return"auto"===e.overflow||"auto"===e.overflowX||"auto"===e.overflowY||"scroll"===e.overflow||"scroll"===e.overflowX||"scroll"===e.overflowY},t.prototype.render=function(){return r.createElement(this.getElementName(),this.getElementPropsInternal(),this.getElementChildren())},Object.defineProperty(t.prototype,"isIE",{get:function(){return l},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"isEdge",{get:function(){return c},enumerable:!0,configurable:!0}),t}(r.Component)},function(e,t,n){"use strict";n.d(t,"b",function(){return i}),n.d(t,"a",function(){return r});var o=n(2),r="CustomControlFramework",i=new(function(){function e(){}return e.prototype.reportUsage=function(e,t){var n={eventName:"uci_controlframework_usage",eventParameters:this.generateEventParams(e,null,null,t)};o.default.Reporting.reportEvent(n)},e.prototype.reportEventFailure=function(e,t,n,i,s,a){var l=e.manifest?e.manifest.ConstructorName:e.configuration.CustomControlId;a&&"ControlFramework"===a&&(l=r+"."+l),o.default.Reporting.reportFailure(l,t,s,this.generateEventParams(e,n,i))},e.prototype.reportEventSuccess=function(e,t){var n=e.manifest?e.manifest.ConstructorName:e.configuration.CustomControlId;n=r+"."+n,o.default.Reporting.reportSuccess(n,this.generateEventParams(e,t))},e.prototype.generateEventParams=function(e,t,n,o){var r=[],i={name:"ControlName",value:e?e.controlId:""},s={name:"ControlId",value:e&&e.manifest?e.manifest.CustomControlId:""},a={name:"APIName",value:t},l={name:"HostPage",value:e?e.pageType:""},c={name:"ResourceArrayLength",value:e&&e.manifest?e.manifest.Properties.Resources.length:""};if(r.push(i),r.push(s),r.push(l),r.push(c),o){var u={name:"ControlLoadStatus",value:o};r.push(u)}if(t&&r.push(a),n){var p={name:"ParentCCContext",value:n};r.push(p)}if(e.propBagData){var d={name:"Entity",value:e.propBagData&&e.propBagData.modeData?e.propBagData.modeData.entityTypeName:null};r.push(d)}return r},e}())},function(e,t,n){"use strict";n.d(t,"a",function(){return m});var o,r=n(0),i=n(10),s=n(15),a=n(6),l=n(17),c=n(5),u=n(4),p=n(19),d=(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),h=function(e){function t(t){var n=e.call(this,t)||this;return n._subscriber=null,n._mountedElement=null,n._getReference=n._getReference.bind(n),n}return d(t,e),t.prototype.getElementName=function(){return this.props.semanticTag||"div"},t.prototype.getFlexClassName=function(e){return Object(s.b)(e?e.display:null)},t.prototype.componentDidMount=function(){this.props.isRequestedMeasuring&&(this._subscriber={forceMeasure:this.props.forceMeasure,getComponent:this.getComponent.bind(this),onMeasure:this.props.onMeasuring},l.a.getInstance().addMeasuringSubscribers(this._subscriber))},t.prototype.componentDidUpdate=function(){this.props.isRequestedMeasuring&&(this._mountedElement=i.findDOMNode(this))},t.prototype._getReference=function(e){e&&this.props.isRequestedMeasuring&&(this._mountedElement=i.findDOMNode(e))},t.prototype.getComponent=function(){return this._mountedElement},t.prototype.componentWillUnmount=function(){this.props.isRequestedMeasuring&&l.a.getInstance().removeMeasuringSubscribers(this._subscriber)},t.prototype.getElementStyle=function(){if(this.props.style)return Object(s.a)(this.props.style)},t.prototype.getElementClassName=function(){var n=e.prototype.getElementClassName.call(this);return this.props&&this.props.className&&(n+=" "+this.props.className),this.props.style&&t.isElementScrollable(this.props.style)&&(n+=p.a.getInstance().getDisableScrollStyle()&&!this.props.isWithinATopMostSeeMore?" webkitScrollAuto":" webkitScroll"),n},t.prototype.getElementProps=function(){var e={id:this.props.id,accessKey:""===this.props.accessKey?null:this.props.accessKey,ref:this.props.isRequestedMeasuring?this._getReference:void 0};return"boolean"==typeof this.props.isRTL&&(e.dir=this.props.isRTL?"rtl":"ltr"),this.isIE||this.hasAriaProperty()||"number"==typeof this.props.tabIndex||this.props.semanticTag&&"div"!==this.props.semanticTag&&"span"!==this.props.semanticTag||(e.role="presentation"),e},t.prototype.render=function(){return r.createElement(this.getElementName(),this.getElementPropsInternal(),this.getElementChildren())},t.displayName="View",t}(a.a);function f(e){return e&&e.style?Object.assign(e.style,Object(u.b)(e)):{}}var m=c.connect(function(e){return function(t){return t.renderRule(f,e)}})(h)},function(e,t,n){"use strict";n.d(t,"E",function(){return o}),n.d(t,"F",function(){return r}),n.d(t,"a",function(){return i}),n.d(t,"D",function(){return s}),n.d(t,"C",function(){return a}),n.d(t,"b",function(){return l}),n.d(t,"c",function(){return c}),n.d(t,"d",function(){return u}),n.d(t,"f",function(){return p}),n.d(t,"e",function(){return d}),n.d(t,"h",function(){return h}),n.d(t,"i",function(){return f}),n.d(t,"j",function(){return m}),n.d(t,"k",function(){return y}),n.d(t,"l",function(){return b}),n.d(t,"m",function(){return g}),n.d(t,"n",function(){return _}),n.d(t,"o",function(){return v}),n.d(t,"p",function(){return C}),n.d(t,"q",function(){return I}),n.d(t,"r",function(){return P}),n.d(t,"t",function(){return E}),n.d(t,"v",function(){return S}),n.d(t,"u",function(){return D}),n.d(t,"w",function(){return w}),n.d(t,"x",function(){return O}),n.d(t,"g",function(){return T}),n.d(t,"y",function(){return F}),n.d(t,"z",function(){return M}),n.d(t,"A",function(){return x}),n.d(t,"B",function(){return A}),n.d(t,"s",function(){return k});var o="role",r="title",i="accessKey",s="hidden",a="disabled",l="aria-activedescendant",c="aria-atomic",u="aria-autocomplete",p="aria-controls",d="aria-checked",h="aria-describedby",f="aria-disabled",m="aria-expanded",y="aria-haspopup",b="aria-hidden",g="aria-label",_="aria-labelledby",v="aria-level",C="aria-live",I="aria-modal",P="aria-multiline",E="aria-owns",S="aria-relevant",D="aria-readonly",w="aria-required",O="aria-selected",T="aria-current",F="aria-valuemax",M="aria-valuemin",x="aria-valuenow",A="aria-valuetext",k="aria-orientation"},function(e,t){e.exports=ReactDOM},function(e,t,n){"use strict";n.d(t,"e",function(){return p}),n.d(t,"b",function(){return d}),n.d(t,"g",function(){return y}),n.d(t,"a",function(){return b}),n.d(t,"f",function(){return _}),n.d(t,"m",function(){return v}),n.d(t,"d",function(){return h}),n.d(t,"c",function(){return f}),n.d(t,"i",function(){return C}),n.d(t,"h",function(){return m}),n.d(t,"k",function(){return I}),n.d(t,"l",function(){return P}),n.d(t,"j",function(){return E});var o,r=n(2),i=n(3),s=n(1),a=n(7),l=n(12),c="-",u="Mscrm.OpenRecordItem";function p(e,t,n){if(n)return n;if(!t)return t;var o=d(e);return(o?o+c:"")+t}function d(e){if(e.configuration&&e.configuration.CustomControlId===l.b)return function(e){return e.descriptor.DomId+c+e.descriptor.Id}(e);var t="";e.descriptor&&(t=e.descriptor.DomId?e.descriptor.DomId:"");var n=e.controlId?e.controlId:"";return(t?t+c:"")+(n||"")}function h(e,t){var n=e&&e.controlId?e.controlId:"";return t?(n?n+c:"")+t:n||""}function f(e){return Object(i.c)(e)||Object(i.c)(e.propBagData)||Object(i.c)(e.propBagData.accessibilityData)||Object(i.c)(e.propBagData.accessibilityData.assignedTabIndex)?0:e.propBagData.accessibilityData.assignedTabIndex}function m(){if(void 0===o){if(window.matchMedia("(-ms-high-contrast: active)").matches)o=!0;else{var e=document.getElementsByTagName("html");o=null!=e[0].getAttribute("hc")}}return o}function y(e,t,n){var o=g(e,t,n);if(o&&null!==o){var r=document.getElementById(o);r&&null!==r&&r.focus()}}function b(e,t,n){var o=g(e,t,n);if(o&&null!==o){var r=document.getElementById(o);r&&null!==r&&r.blur()}}function g(e,t,n){if(t)return!0===n?t:p(e,t)}function _(e,t){var n=t.organizationUniqueName?t.organizationUniqueName:"";return!!t.usePathBasedUrls&&t.usePathBasedUrls&&n?"/"+n+e:e}function v(e,t,n,o,i){if(o){var s=o.entityName||o.LogicalName,l=o.id||o.Id&&o.Id.toString(),c=function(e,t){var n=t&&e.dynamicData?e.dynamicData.parameters[t]:null;return e.actions&&e.actions.getRecordSetQueryKey&&null!==n?e.actions.getRecordSetQueryKey(n):null}(e,n),p=function(){try{var t={entityName:s,entityId:l,recordSetQueryKey:c};if(e.parentDefinedControlProps&&e.parentDefinedControlProps.propertyBagOverrides&&e.parentDefinedControlProps.propertyBagOverrides.openForm)e.parentDefinedControlProps.propertyBagOverrides.openForm(t);else{if(!t.entityName)throw new Error("EntityName was not passed in to method, cannot call openForm");r.default.openForm(t)}}catch(t){var n="";try{n=JSON.stringify(e)}catch(e){n="Unable to parse ownProps"}try{e.propBagMethods.navigation&&e.propBagMethods.navigation.openEditForm&&e.propBagMethods.navigation.openEditForm(o)}catch(e){r.default.Reporting.reportFailure(a.a+".Utilities",t,"propBagMethods.navigation.openEditForm failed",[{name:"ownProps",value:n},{name:"APIName",value:a.a+".Utilities.CustomControlHelper.openDatasetItemAction"}])}r.default.Reporting.reportFailure(a.a+".Utilities",t,"XrmProxyInstance.openForm failed",[{name:"ownProps",value:n},{name:"APIName",value:a.a+"Utilities.CustomControlHelper.openFormAction"}])}};if(s===t.getTargetEntityType())if(t.retrieveRecordCommand){var d=i&&i.CommandButtonId?i.CommandButtonId:u;t.retrieveRecordCommand([l],[d],!1,!1,!1).then(function(e){e&&e.length>0?e[0].execute():p()},function(){p()})}else p();else p()}}function C(e){var t,n=d(e).split(c);for(t=0;t<n.length-1;t++)if("id"!==n[t]&&isNaN(Number(n[t])))return n[t];return""}function I(e){if(e&&e.Properties&&e.Properties.DataSetDefinitions){var t=e.Properties.DataSetDefinitions;for(var n in t)if(e.Properties.DataSetDefinitions[n]&&e.Properties.DataSetDefinitions[n].Primary){for(var o=!1,r=0,i=e.Properties.Properties;r<i.length;r++){if(0===i[r].Usage){o=!0;break}}return!o}}return!1}function P(e){if(e&&e.Parameters)for(var t in e.Parameters)if(e.Parameters[t]&&e.Parameters[t].Type===s.ManifestType.QuickForm)return!0;return!1}function E(e){var t,n,o=function(e){if(e&&e.Parameters)for(var t in e.Parameters)if(e.Parameters[t]&&e.Parameters[t].Type===s.ManifestType.QuickForm&&e.Parameters[t].Primary)return t;return"value"}(e.configuration),r=e.dynamicData.parameters[o];if(r&&r.getLatestData){var i=r.getLatestData();t=i?i.entityName:S(e.configuration,1),n=i?i.recordId:function(e){return S(e,2)}(e.configuration)}return{recordId:n,entityTypeName:t}}function S(e,t){var n;if(e&&e.Parameters&&e.Parameters.value){var o=e.Parameters.value,r=o.Value?o.Value.split("|"):null;r&&r.length>t&&(n=r[t])}return n}},function(e,t,n){"use strict";n.d(t,"a",function(){return s}),n.d(t,"f",function(){return _e}),n.d(t,"h",function(){return Ce}),n.d(t,"g",function(){return Ie}),n.d(t,"e",function(){return ve}),n.d(t,"b",function(){return u}),n.d(t,"c",function(){return V}),n.d(t,"d",function(){return ce}),n.d(t,"i",function(){return pe});var o,r,i,s,a=n(1),l=n(13),c=n(2),u="MscrmControls.Containers.FieldSectionItem",p="MscrmControls.FieldControls.DummyControl",d="MscrmControls.FieldControls.LabelControl",h="MscrmControls.Grid.GridControl",f="MscrmControls.Grid.ReadOnlyGrid",m="MscrmControls.SharepointAssociatedGrid.SharepointControl",y="MscrmControls.Containers.RelevanceSearchControl",b="MscrmControls.KbSearchControl.KbSearchControl",g="MscrmControls.KbArticleControl.KbArticleControl",_="MscrmControls.KbContentControl.KbContentControl",v="MscrmControls.EmailEngagement.EmailView",C="MscrmControls.ActivityControls.ActivityEditorControl",I="MscrmControls.Calendar.CalendarControl",P="MscrmControls.EmailEngagement.EmailEngagementActionsControl",E="MscrmControls.SocialInsightsControl.SocialInsightsControl",S="MscrmControls.Containers.DashboardControl",D="MscrmControls.Chart.ChartControl",w="MscrmControls.Map.MapControl",O="mapcontrol",T="62b0df79-0464-470f-8af7-4483cfea0c7d",F="{E7A81278-8635-4D9E-8D4D-59480B391C5B}",M="{02d4264b-47e2-4b4c-aa95-f439f3f4d458}",x="{39354E4A-5015-4D74-8031-EA9EB73A1322}",A="{e616a57f-20e0-4534-8662-a101b5ddf4e0}",k="{03c5aed6-ee88-404e-b63c-4c53429c8bfb}",R="{1b9fc842-b45e-4fc1-b080-81e96b6d857f}",L="{26E9760F-7454-40DE-BB07-F6DCCCB82040}",N="{7CCD1494-1F7A-4E3A-8BDE-F32069DAEB9F}",B="{6F3FB987-393B-4d2d-859F-9D0F0349B6AD}",U="{F94DB24F-263D-44A7-B38E-A35E9854812B}",j="{F454228D-1D25-4319-E12F-D27968BC0234}",W="{86b9e25e-695e-4fef-ac69-f05cfa96739c}",V="{fd2a7985-3187-444e-908d-6624b21f69c0}",H="3ef39988-22bb-4f0b-bbbe-64b5a3748aee",K="67fac785-cd58-4f9f-abb3-4b7ddc6ed5ed",z="b0c6723a-8503-4fd7-bb28-c8a06ac933c2",G={"3ef39988-22bb-4f0b-bbbe-64b5a3748aee":"picklist","67fac785-cd58-4f9f-abb3-4b7ddc6ed5ed":"radio","b0c6723a-8503-4fd7-bb28-c8a06ac933c2":"checkbox"},Y="{4E3600FA-B9C8-49F4-B69A-51EBA06D9BDF}",q="{FE4BC089-8901-466C-A41B-1C1090F204D4}",$="MscrmControls.Containers.QuickForm",X="MscrmControls.Containers.QuickFormCardControl",Q="MscrmControls.WebResource.WebResourceHtmlControl",Z="MscrmControls.TimelineWallControl.TimelineWall",J="CC_ReadOnlyGrid_Name",ee="value",te={},ne={},oe={},re={},ie={},se={},ae={},le={};!function(e){e[e.Read=0]="Read",e[e.Edit=1]="Edit",e[e.Both=2]="Both"}(o||(o={})),function(e){e[e.Normal=0]="Normal",e[e.Card=1]="Card"}(r||(r={})),function(e){e[e.Text=0]="Text",e[e.Icon=1]="Icon"}(i||(i={})),function(e){e[e.GridContainer=0]="GridContainer",e[e.DashboardContainer=1]="DashboardContainer",e[e.QuickCreateForm=2]="QuickCreateForm",e[e.FieldSectionContainer=3]="FieldSectionContainer",e[e.TimelineContainer=4]="TimelineContainer",e[e.ChartControl=5]="ChartControl",e[e.WebresourceControl=6]="WebresourceControl",e[e.DummyControl=7]="DummyControl",e[e.CalendarControl=8]="CalendarControl"}(s||(s={}));var ce={"MscrmControls.MultiSelectPicklist.UpdMSPicklistControl":"MscrmControls.MultiSelectPicklist.MultiSelectPicklistControl"},ue={};function pe(e,t){ue[e]=t}function de(e){for(var t in e.Parameters){var n=e.Parameters[t];if(n.Primary)return n}return null}function he(e){return{Usage:1,Static:!0,Type:a.ManifestType.SingleLineText,Value:JSON.stringify(e),Primary:!1}}function fe(e){return{Usage:1,Static:!0,Type:a.ManifestType.SingleLineText,Value:G[e],Primary:!1}}function me(e,t){if(e.CustomControlId!==u)return null;var n=de(e);return function(e){return e&&e===z||e===K||e===H}(t)?{valueSpecification:he(n),twoOptionRenderParam:fe(t)}:{valueSpecification:he(n)}}function ye(e){return null==e}function be(e,t,n,s,h,f,m){if(!t){if(e===O&&Object(l.a)(T,h)){var I=e+"-"+f.Parameters.AddressField;return re[I]||(re[I]={FormFactor:2,CustomControlId:u,Name:e,Version:"1.0.0",Parameters:{value:{Usage:0,Static:!1,Type:a.ManifestType.SingleLineAddress,Value:f.Parameters.AddressField,Primary:!0},controlMode:{Usage:2,Static:!0,Type:"Enum",Value:o.Read,Primary:!1}},ShouldOverrideControlVisible:!1}),re[I]}if(n===y)return te[e]||(te[e]={FormFactor:2,CustomControlId:y,Name:e,Version:"1.0.0",Parameters:{value:{Type:a.ManifestType.Search,Primary:!0}},ShouldOverrideControlVisible:!1}),te[e];if(h&&(Object(l.a)(A,h)||Object(l.a)(N,h))){if(!te[e]){var S=f&&f.Parameters&&"true"===f.Parameters.EnableAutoSuggestions&&"0"===f.Parameters.AutoSuggestionSource?f.Parameters.SearchForAutoSuggestionsUsing:void 0;te[e]={FormFactor:2,CustomControlId:b,Name:e,Version:"1.0.0",Parameters:{value:{Type:a.ManifestType.SearchWidget,Primary:!0},AutoSuggestionField:{Type:"all",Primary:!1,Static:!1,Usage:0,Value:S}},ShouldOverrideControlVisible:!1}}return te[e]}return h&&Object(l.a)(h,k)&&(te[e]={FormFactor:2,CustomControlId:g,Name:e,Version:"1.0.0",Parameters:{value:{Type:a.ManifestType.KbArticle,Primary:!0}},ShouldOverrideControlVisible:!1}),h&&Object(l.a)(h,R)&&(te[e]={FormFactor:2,CustomControlId:_,Name:e,Version:"1.0.0",Parameters:{value:{Type:a.ManifestType.KbContent,Primary:!0}},ShouldOverrideControlVisible:!1}),h&&Object(l.a)(L,h)?(te[e]||(te[e]={FormFactor:2,CustomControlId:v,Name:e,Version:"1.0.0",Parameters:{value:{Type:a.ManifestType.EmailEngagementRecipientActivity,Primary:!0}},ShouldOverrideControlVisible:!1}),te[e]):!ye(c.default)&&!ye(c.default.Utils)&&!ye(c.default.Utils.isFeatureEnabled)&&c.default.Utils.isFeatureEnabled("EmailEngagementComposeForUCI")&&h&&Object(l.a)(j,h)?(te[e]||(te[e]={FormFactor:2,CustomControlId:P,Name:e,Version:"1.0.0",Parameters:{value:{Type:a.ManifestType.EmailEngagementActions,Primary:!0},toparams:{Usage:0,Static:!1,Type:a.ManifestType.LookupPartyList,Value:"to",Primary:!1},ccparams:{Usage:0,Static:!1,Type:a.ManifestType.LookupPartyList,Value:"cc",Primary:!1},directioncode:{Usage:0,Static:!1,Type:a.ManifestType.TwoOptions,Value:"directioncode",Primary:!1},isemailfollowed:{Usage:0,Static:!1,Type:a.ManifestType.TwoOptions,Value:"isemailfollowed",Primary:!1},followemailuserpreference:{Usage:0,Static:!1,Type:a.ManifestType.TwoOptions,Value:"followemailuserpreference",Primary:!1},emailreminderstatus:{Usage:0,Static:!1,Type:a.ManifestType.OptionSet,Value:"emailreminderstatus",Primary:!1},emailremindertype:{Usage:0,Static:!1,Type:a.ManifestType.OptionSet,Value:"emailremindertype",Primary:!1},emailremindertext:{Usage:0,Static:!1,Type:a.ManifestType.SingleLineText,Value:"emailremindertext",Primary:!1},emailreminderexpirytime:{Usage:0,Static:!1,Type:a.ManifestType.DateAndTimeDateAndTime,Value:"emailreminderexpirytime",Primary:!1},delayedemailsendtime:{Usage:0,Static:!1,Type:a.ManifestType.DateAndTimeDateAndTime,Value:"delayedemailsendtime",Primary:!1},statuscode:{Usage:0,Static:!1,Type:a.ManifestType.OptionSet,Value:"statuscode",Primary:!1}},ShouldOverrideControlVisible:!1}),te[e]):n===a.ManifestType.WebResourceHtmlControl?(ae[e]||(ae[e]={FormFactor:2,CustomControlId:Q,Name:e,Version:"1.0.0",Parameters:{value:{Usage:0,Type:a.ManifestType.WebResourceHtmlControl,Value:null,Static:!1,Primary:!0}},ShouldOverrideControlVisible:!1}),ae[e]):n===a.ManifestType.TimelineWall?{FormFactor:2,CustomControlId:Z,Name:e,Version:"1.0.0",Parameters:{value:{Type:a.ManifestType.TimelineWall,Primary:!0}},ShouldOverrideControlVisible:!1}:c.default&&c.default.Utils&&c.default.Utils.isFeatureEnabled&&!c.default.Utils.isFeatureEnabled("SocialInsightsMapping")||!h||!Object(l.a)(W,h)?(oe[e]||(oe[e]={FormFactor:2,CustomControlId:p,Name:e,Version:"1.0.0",Parameters:{value:{Usage:1,Static:!0,Type:h||n,Value:null,Primary:!0},controlMode:{Usage:1,Static:!0,Type:"Enum",Value:o.Both,Primary:!1}},ShouldOverrideControlVisible:!1}),oe[e]):(ne[e]||(ne[e]={FormFactor:2,CustomControlId:E,Name:e,Version:"1.0.0",Parameters:{value:{Type:a.ManifestType.SocialInsightsControl,Primary:!0}},ShouldOverrideControlVisible:!1}),ne[e])}if(h&&(Object(l.a)(B,h)||Object(l.a)(U,h)))return(n.includes("memo")||n===a.ManifestType.SingleLineText||n===a.ManifestType.SingleLineTextArea||n===a.ManifestType.Multiple)&&(te[e]||(te[e]={FormFactor:2,CustomControlId:C,Name:e,Version:"1.0.0",Parameters:{value:{Usage:0,Static:!1,Type:n,Value:t,Primary:!0},isUnsafe:{Usage:1,Static:!1,Type:a.ManifestType.WholeNone,Value:"isunsafe",Primary:!1}},ShouldOverrideControlVisible:!1})),te[e];if(h&&Object(l.a)(x,h))return le[e]||(le[e]={FormFactor:2,CustomControlId:d,Name:e,Version:"1.0.0",Parameters:{value:{Type:a.ManifestType.SingleLineText,Static:!0,Primary:!0}},ShouldOverrideControlVisible:!1}),le[e];if(n===a.ManifestType.QuickForm){var D=Pe(f,m);return ie[e]&&ie[e].Parameters[ee].Value===D||(ie[e]={FormFactor:2,CustomControlId:$,Name:e,Version:"1.0.0",Parameters:{value:{Usage:0,Type:a.ManifestType.QuickForm,Value:D,Static:!1,Primary:!0,FirstDataRequestType:m&&m.chartDataRequestType?m.chartDataRequestType:1}},ShouldOverrideControlVisible:!1}),ie[e]}if(n===a.ManifestType.Card){D=Pe(f,m);return se[e]&&se[e].Parameters[ee].Value===D||(se[e]={FormFactor:2,CustomControlId:X,Name:e,Version:"1.0.0",Parameters:{value:{Usage:0,Type:a.ManifestType.QuickForm,Value:D,Static:!1,Primary:!0}},ShouldOverrideControlVisible:!1}),se[e]}var w=function(e,t){var n,o=e?e.split("."):[null,null],r=o[0],i=o[1];r||(r="string");i&&"null"!==i&&"undefined"!==i||(i=t&&a.ManifestType.ClassIdControlMap[t]||"text");switch(r){case"boolean":n=a.ManifestType.TwoOptions;break;case"customer":n=a.ManifestType.LookupCustomer;break;case"datetime":switch(i.toLowerCase()){case"date":case"0":n=a.ManifestType.DateAndTimeDateOnly;break;case"datetime":case"dateandtime":case"1":n=a.ManifestType.DateAndTimeDateAndTime;break;default:n=a.ManifestType.DateAndTimeDateOnly}break;case"decimal":n=a.ManifestType.Decimal;break;case"float":case"double":n=a.ManifestType.FP;break;case"integer":switch(i.toLowerCase()){case"duration":case"1":n=a.ManifestType.WholeDuration;break;case"timezone":case"2":n=a.ManifestType.WholeTimeZone;break;case"language":case"3":n=a.ManifestType.WholeLanguage;break;default:n=a.ManifestType.WholeNone}break;case"lookup":switch(i.toLowerCase()){case"connection":case"regarding":case"1":case"2":n=a.ManifestType.LookupRegarding;break;default:n=a.ManifestType.LookupSimple}break;case"memo":n=a.ManifestType.Multiple;break;case"money":n=a.ManifestType.Currency;break;case"owner":n=a.ManifestType.LookupOwner;break;case"partylist":n=a.ManifestType.LookupPartyList;break;case"multiselectpicklist":n=a.ManifestType.MultiSelectPicklist;break;case"picklist":case"state":n=a.ManifestType.OptionSet;break;case"status":n=a.ManifestType.StatusOptionSet;break;case"text":case"string":switch(i.toLowerCase()){case"email":case"0":n=a.ManifestType.SingleLineEmail;break;case"textarea":case"2":n=a.ManifestType.Multiple;break;case"url":case"3":n=a.ManifestType.SingleLineURL;break;case"tickersymbol":case"4":n=a.ManifestType.SingleLineTickerSymbol;break;case"phone":case"7":n=a.ManifestType.SingleLinePhone;break;case"memo":n=a.ManifestType.Multiple;break;default:n=a.ManifestType.SingleLineText}break;case"Timer":n=a.ManifestType.Timer;break;default:n=a.ManifestType.SingleLineText}return n}(n,h),F=function(e){return e===a.ManifestType.Timer?o.Read:o.Both}(w),M=function(e){return e===a.ManifestType.Timer?2:1}(w),V=(s?s.toLowerCase()+"-":"")+e;return re[V]||(re[V]={FormFactor:2,CustomControlId:u,Name:e,Version:"1.0.0",Parameters:{value:{Usage:0,Static:!1,Type:w,Value:t,Primary:!0},controlMode:{Usage:M,Static:!0,Type:"Enum",Value:F,Primary:!1},displayMode:{Usage:M,Static:!0,Type:"Enum",Value:r.Normal,Primary:!1},labelMode:{Usage:M,Static:!0,Type:"Enum",Value:i.Text,Primary:!1}},ShouldOverrideControlVisible:!1}),re[V]}function ge(e,t){if("sharepointdocument"===e.TargetEntityType)return{Grid:{Type:a.ManifestType.Grid,ViewId:e.DefaultViewId||e.ViewId,TargetEntityType:e.TargetEntityType,EnableViewPicker:e.EnableViewPicker,RelationshipName:e.RelationshipName,Columns:[],Primary:!0,DataSetUIOptions:{displayQuickFind:!1,displayIndex:!1,displayCommandBar:!0,displayViewSelector:!0}},EnableEditing:{Usage:1,Static:!0,Type:"Enum",Value:"No",Primary:!1},EnableGroupBy:{Usage:1,Static:!0,Type:"Enum",Value:"No",Primary:!1},EnableFiltering:{Usage:1,Static:!0,Type:"Enum",Value:"No",Primary:!1}};if("connection"===e.TargetEntityType&&e.ViewId&&(e.ViewId.toUpperCase()===q||e.ViewId.toUpperCase()===Y)&&(ye(c.default)||ye(c.default.Utils)||ye(c.default.Utils.isFeatureEnabled)||!c.default.Utils.isFeatureEnabled("DisableEditableGridControlOnPhone")||ye(c.default.Client.getFormFactor)||3!==c.default.Client.getFormFactor()))return{Grid:{Type:a.ManifestType.Grid,ViewId:e.DefaultViewId||e.ViewId,TargetEntityType:e.TargetEntityType,EnableViewPicker:e.EnableViewPicker,RelationshipName:e.RelationshipName,Columns:[],Primary:!0},EnableEditing:{Usage:1,Static:!0,Type:"Enum",Value:"Yes",Primary:!1},EnableGroupBy:{Usage:1,Static:!0,Type:"Enum",Value:"No",Primary:!1},EnableFiltering:{Usage:1,Static:!0,Type:"Enum",Value:"No",Primary:!1}};var n={Grid:{Type:a.ManifestType.Grid,ViewId:e.DefaultViewId||e.ViewId,TargetEntityType:e.TargetEntityType,EnableViewPicker:e.EnableViewPicker,RelationshipName:e.RelationshipName,Columns:[],Primary:!0},EnableEditing:{Usage:1,Static:!0,Type:"Enum",Value:"No",Primary:!1},EnableGroupBy:{Usage:1,Static:!0,Type:"Enum",Value:"No",Primary:!1},EnableFiltering:{Usage:1,Static:!0,Type:"Enum",Value:"No",Primary:!1}};return t&&(n.EnableFiltering.Value="Yes"),n}function _e(e,t,n,o,r,i){var s,c,u,p,d;i&&(Object(l.a)(i,F)||Object(l.a)(i,M))?(c=e,u=o.Parameters,void 0===p&&(p=!1),s={FormFactor:1,DisplayNameKey:J,CustomControlId:(d=u.TargetEntityType,"sharepointdocument"===d?m:"connection"===d?h:f),Name:c,Version:"1.0.0",Parameters:ge(u,p),ShouldOverrideControlVisible:!1,isDefaultConfig:!0}):s=be(e,t,n,r,i,o);var y=de(s);y&&function(e,t){switch(e.Type){case a.ManifestType.Grid:var n=t.Parameters,o=e;o.EnableViewPicker="true"===n.EnableViewPicker,o.RelationshipName=n.RelationshipName,o.TargetEntityType=n.TargetEntityType,o.ViewId=n.ViewId||n.DefaultViewId||n.defaultviewid;break;case a.ManifestType.LookupSimple:n=t.Parameters;var r=e;r.EnableViewPicker=n.DisableViewPicker&&"true"!==n.DisableViewPicker||!n.DisableViewPicker,r.TargetEntityType=n.TargetEntityType,r.ViewId=n.ViewId||n.DefaultViewId||n.defaultviewid,r.AllowFilterOff="true"===n.AllowFilterOff,r.AvailableViewIds=n.AvailableViewIds,r.DependentAttributeName=n.DependentAttributeName,r.DependentAttributeType=n.DependentAttributeType,r.DisableQuickFind="true"===n.DisableQuickFind,r.ExtraCondition=n.ExtraCondition,r.FilterRelationshipName=n.FilterRelationshipName,r.DisableMru=n.DisableMru;for(var i=0;i<n.length;i++){var s=n[i];if(s&&s.TargetEntities&&s.TargetEntities.length){s.TargetEntities.length>1&&(r.Type=a.ManifestType.LookupMultiEntity);var c=s.TargetEntities[0];!r.ViewId&&c.DefaultViewId&&(r.ViewId=c.DefaultViewId),!r.TargetEntityType&&c.EntityLogicalName&&(r.TargetEntityType=c.EntityLogicalName)}}break;case a.ManifestType.SingleLineText:Object(l.a)(x,t.ClassId.guid)&&(e.Value=t.Label);break;case a.ManifestType.Timer:var u=t.Parameters;e.TimerParameters=function(e){var t={};return t.CancelConditionName=e.CancelConditionName,t.CancelConditionValue=e.CancelConditionValue,t.FailureConditionName=e.FailureConditionName,t.FailureConditionValue=e.FailureConditionValue,t.FailureTimeField=e.FailureTimeField,t.PauseConditionName=e.PauseConditionName,t.PauseConditionValue=e.PauseConditionValue,t.SuccessConditionName=e.SuccessConditionName,t.SuccessConditionValue=e.SuccessConditionValue,t.WarningConditionName=e.WarningConditionName,t.WarningConditionValue=e.WarningConditionValue,t}(u)}}(y,o);var b=me(s,i);return null!==b&&Object.assign(s.Parameters,b),s}function ve(e){switch(e){case f:case h:return s.GridContainer;case S:return s.DashboardContainer;case $:return s.QuickCreateForm;case u:return s.FieldSectionContainer;case Z:return s.TimelineContainer;case D:return s.ChartControl;case Q:return s.WebresourceControl;case I:return s.CalendarControl;case p:return s.DummyControl}}function Ce(e,t){var n,o;switch(e){case"TwoOptions":n="MscrmControls.FieldControls.CheckboxControl";break;case"Currency":n="MscrmControls.FieldControls.CurrencyControl";break;case"Decimal":n="MscrmControls.FieldControls.DecimalNumberControl";break;case"SingleLine.Email":n="MscrmControls.FieldControls.EmailAddressControl";break;case"FP":n="MscrmControls.FieldControls.FloatingPointNumberInput";break;case"Whole.Language":n="MscrmControls.FieldControls.LanguagePickerControl";break;case"OptionSet":n="MscrmControls.FieldControls.OptionSet";break;case"StatusOptionSet":n="MscrmControls.FieldControls.PicklistStatusControl";break;case"SingleLine.Phone":n="MscrmControls.FieldControls.PhoneNumberControl";break;case"SingleLine.Text":case"Multiple":n="MscrmControls.FieldControls.TextBoxControl";break;case"SingleLine.Ticker":n="MscrmControls.FieldControls.TickerSymbolControl";break;case"Whole.TimeZone":n="MscrmControls.FieldControls.TimeZonePickListControl";break;case"SingleLine.URL":n="MscrmControls.FieldControls.UrlControl";break;case"Whole.None":n="MscrmControls.FieldControls.WholeNumberControl";break;case"Whole.Duration":n="MscrmControls.FieldControls.DurationControl";break;case"Lookup.PartyList":case"Lookup.Regarding":case"Lookup.Simple":case"Lookup.Owner":case"Lookup.Customer":case"Lookup.MultiEntity":n=function(e,t){return"Lookup.Simple"===e&&t&&t.Targets&&1===t.Targets.length&&"subject"===t.Targets[0]?"MscrmControls.FieldControls.SubjectTreeControl":"MscrmControls.FieldControls.SimpleLookupControl"}(e,t);break;case"MultiSelectPicklist":n="MscrmControls.MultiSelectPicklist.UpdMSPicklistControl";break;case"DateAndTime.DateOnly":case"DateAndTime.DateAndTime":n="MscrmControls.FieldControls.DateTimeControl";break;case"Grid":n="MscrmControls.Grid.ReadOnlyGrid";break;case"SearchWidget":case"SearchWidget.SearchWidget":case"ReferencePanelSearchWidget":n="MscrmControls.KbSearchControl.KbSearchControl";break;case"KbArticle":n="MscrmControls.KbArticleControl.KbArticleControl";break;case"KbContent":n="MscrmControls.KbContentControl.KbContentControl";break;case"Timer":n="MscrmControls.FieldControls.TimerControl";break;case a.ManifestType.SingleLineAddress:n=w;break;case"SingleLine.TextArea":default:n="MscrmControls.FieldControls.DummyControl"}return o=n,n=ue.hasOwnProperty(o)?ue[o]:o}function Ie(e){if(!e)return null;var t=de(e);return t?Ce(t.Type):null}function Pe(e,t){var n=t?t.quickFormId:"00000000-0000-0000-0000-000000000000",o=e?e.DataFieldName:"";return n+(o?"|"+o:"")}},function(e,t,n){"use strict";n.d(t,"a",function(){return r}),n.d(t,"b",function(){return i});var o=/^\{?([0-9a-f]{8}(-?)[0-9a-f]{4}\2[a-f\d]{4}\2[0-9a-f]{4}\2[0-9a-f]{12})}?$/;function r(e,t){var n=o.exec(e.toLocaleLowerCase()),r=o.exec(t.toLocaleLowerCase());return n[1]===r[1]}function i(){return"xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx".replace(/[xy]/g,function(e){var t=16*Math.random()|0;return("x"===e?t:3&t|8).toString(16)})}},function(e,t,n){"use strict";n.d(t,"a",function(){return r});var o={createMarker:function(){},startStopwatch:function(){return function(){}},createRetroactiveStopwatch:function(){}},r=new(function(){function e(){this._creator=null}return e.prototype.setPerformanceHooks=function(e,t,n,o,r){this._creator=e,this._addKpi=t,this._addKpiOnIdle=n,this._trackWork=o,this._scheduleControlUpdate=r},e.prototype.createPerformanceEvent=function(e,t,n){return void 0===t&&(t=3),void 0===n&&(n="CustomControlsFramework"),this._creator&&t>2?this._creator(e,n):o},e.prototype.startLifecycleStopwatch=function(e,t,n){return this.createPerformanceEvent(e,void 0,"CustomControls").startStopwatch({controlId:t,manifestControlName:n})},e.prototype.addKeyPerformanceIndicator=function(e,t,n){this._addKpi&&this._addKpi(e,t,n)},e.prototype.addKeyPerformanceIndicatorOnIdle=function(e,t){this._addKpiOnIdle&&this._addKpiOnIdle(e,t)},e.prototype.trackWork=function(e){return this._trackWork?this._trackWork(e):function(){}},e.prototype.scheduleControlUpdate=function(e){this._scheduleControlUpdate?this._scheduleControlUpdate(e):e()},e}())},function(e,t,n){"use strict";function o(e){if(!e)return null;var t={};return t.display=e.display?e.display:"flex",t}function r(e){return!e||"flex"!==e&&"inlineflexbox"!==e?"":"flex"===e?"flexbox":"inlineflexbox"}n.d(t,"a",function(){return o}),n.d(t,"b",function(){return r})},function(e,t,n){(function(){var t,o,r,i,s,a,l,c,u,p,d,h,f={}.hasOwnProperty;h=n(26),d=h.isObject,p=h.isFunction,u=h.isEmpty,s=null,t=null,o=null,r=null,i=null,l=null,c=null,a=null,e.exports=function(){function e(e){this.parent=e,this.parent&&(this.options=this.parent.options,this.stringify=this.parent.stringify),this.children=[],s||(s=n(47),t=n(48),o=n(49),r=n(50),i=n(51),l=n(56),c=n(57),a=n(58))}return e.prototype.element=function(e,t,n){var o,r,i,s,a,l,c,h,m,y;if(l=null,null==t&&(t={}),t=t.valueOf(),d(t)||(n=(m=[t,n])[0],t=m[1]),null!=e&&(e=e.valueOf()),Array.isArray(e))for(i=0,c=e.length;i<c;i++)r=e[i],l=this.element(r);else if(p(e))l=this.element(e.apply());else if(d(e)){for(a in e)if(f.call(e,a))if(y=e[a],p(y)&&(y=y.apply()),d(y)&&u(y)&&(y=null),!this.options.ignoreDecorators&&this.stringify.convertAttKey&&0===a.indexOf(this.stringify.convertAttKey))l=this.attribute(a.substr(this.stringify.convertAttKey.length),y);else if(!this.options.separateArrayItems&&Array.isArray(y))for(s=0,h=y.length;s<h;s++)r=y[s],(o={})[a]=r,l=this.element(o);else d(y)?(l=this.element(a)).element(y):l=this.element(a,y)}else l=!this.options.ignoreDecorators&&this.stringify.convertTextKey&&0===e.indexOf(this.stringify.convertTextKey)?this.text(n):!this.options.ignoreDecorators&&this.stringify.convertCDataKey&&0===e.indexOf(this.stringify.convertCDataKey)?this.cdata(n):!this.options.ignoreDecorators&&this.stringify.convertCommentKey&&0===e.indexOf(this.stringify.convertCommentKey)?this.comment(n):!this.options.ignoreDecorators&&this.stringify.convertRawKey&&0===e.indexOf(this.stringify.convertRawKey)?this.raw(n):!this.options.ignoreDecorators&&this.stringify.convertPIKey&&0===e.indexOf(this.stringify.convertPIKey)?this.instruction(e.substr(this.stringify.convertPIKey.length),n):this.node(e,t,n);if(null==l)throw new Error("Could not create any elements with: "+e);return l},e.prototype.insertBefore=function(e,t,n){var o,r,i;if(this.isRoot)throw new Error("Cannot insert elements at root level");return r=this.parent.children.indexOf(this),i=this.parent.children.splice(r),o=this.parent.element(e,t,n),Array.prototype.push.apply(this.parent.children,i),o},e.prototype.insertAfter=function(e,t,n){var o,r,i;if(this.isRoot)throw new Error("Cannot insert elements at root level");return r=this.parent.children.indexOf(this),i=this.parent.children.splice(r+1),o=this.parent.element(e,t,n),Array.prototype.push.apply(this.parent.children,i),o},e.prototype.remove=function(){var e;if(this.isRoot)throw new Error("Cannot remove the root element");return e=this.parent.children.indexOf(this),[].splice.apply(this.parent.children,[e,e-e+1].concat([])),this.parent},e.prototype.node=function(e,t,n){var o,r;return null!=e&&(e=e.valueOf()),t||(t={}),t=t.valueOf(),d(t)||(n=(r=[t,n])[0],t=r[1]),o=new s(this,e,t),null!=n&&o.text(n),this.children.push(o),o},e.prototype.text=function(e){var t;return t=new c(this,e),this.children.push(t),this},e.prototype.cdata=function(e){var n;return n=new t(this,e),this.children.push(n),this},e.prototype.comment=function(e){var t;return t=new o(this,e),this.children.push(t),this},e.prototype.commentBefore=function(e){var t,n;return t=this.parent.children.indexOf(this),n=this.parent.children.splice(t),this.parent.comment(e),Array.prototype.push.apply(this.parent.children,n),this},e.prototype.commentAfter=function(e){var t,n;return t=this.parent.children.indexOf(this),n=this.parent.children.splice(t+1),this.parent.comment(e),Array.prototype.push.apply(this.parent.children,n),this},e.prototype.raw=function(e){var t;return t=new l(this,e),this.children.push(t),this},e.prototype.instruction=function(e,t){var n,o,r,i,s;if(null!=e&&(e=e.valueOf()),null!=t&&(t=t.valueOf()),Array.isArray(e))for(i=0,s=e.length;i<s;i++)n=e[i],this.instruction(n);else if(d(e))for(n in e)f.call(e,n)&&(o=e[n],this.instruction(n,o));else p(t)&&(t=t.apply()),r=new a(this,e,t),this.children.push(r);return this},e.prototype.instructionBefore=function(e,t){var n,o;return n=this.parent.children.indexOf(this),o=this.parent.children.splice(n),this.parent.instruction(e,t),Array.prototype.push.apply(this.parent.children,o),this},e.prototype.instructionAfter=function(e,t){var n,o;return n=this.parent.children.indexOf(this),o=this.parent.children.splice(n+1),this.parent.instruction(e,t),Array.prototype.push.apply(this.parent.children,o),this},e.prototype.declaration=function(e,t,n){var o,i;return o=this.document(),i=new r(o,e,t,n),o.children[0]instanceof r?o.children[0]=i:o.children.unshift(i),o.root()||o},e.prototype.doctype=function(e,t){var n,o,r,s,a,l,c,u,p;for(n=this.document(),o=new i(n,e,t),r=s=0,l=(u=n.children).length;s<l;r=++s)if(u[r]instanceof i)return n.children[r]=o,o;for(r=a=0,c=(p=n.children).length;a<c;r=++a)if(p[r].isRoot)return n.children.splice(r,0,o),o;return n.children.push(o),o},e.prototype.up=function(){if(this.isRoot)throw new Error("The root node has no parent. Use doc() if you need to get the document object.");return this.parent},e.prototype.root=function(){var e;for(e=this;e;){if(e.isDocument)return e.rootObject;if(e.isRoot)return e;e=e.parent}},e.prototype.document=function(){var e;for(e=this;e;){if(e.isDocument)return e;e=e.parent}},e.prototype.end=function(e){return this.document().end(e)},e.prototype.prev=function(){var e;if((e=this.parent.children.indexOf(this))<1)throw new Error("Already at the first node");return this.parent.children[e-1]},e.prototype.next=function(){var e;if(-1===(e=this.parent.children.indexOf(this))||e===this.parent.children.length-1)throw new Error("Already at the last node");return this.parent.children[e+1]},e.prototype.importDocument=function(e){var t;return(t=e.root().clone()).parent=this,t.isRoot=!1,this.children.push(t),this},e.prototype.ele=function(e,t,n){return this.element(e,t,n)},e.prototype.nod=function(e,t,n){return this.node(e,t,n)},e.prototype.txt=function(e){return this.text(e)},e.prototype.dat=function(e){return this.cdata(e)},e.prototype.com=function(e){return this.comment(e)},e.prototype.ins=function(e,t){return this.instruction(e,t)},e.prototype.doc=function(){return this.document()},e.prototype.dec=function(e,t,n){return this.declaration(e,t,n)},e.prototype.dtd=function(e,t){return this.doctype(e,t)},e.prototype.e=function(e,t,n){return this.element(e,t,n)},e.prototype.n=function(e,t,n){return this.node(e,t,n)},e.prototype.t=function(e){return this.text(e)},e.prototype.d=function(e){return this.cdata(e)},e.prototype.c=function(e){return this.comment(e)},e.prototype.r=function(e){return this.raw(e)},e.prototype.i=function(e,t){return this.instruction(e,t)},e.prototype.u=function(){return this.up()},e.prototype.importXMLBuilder=function(e){return this.importDocument(e)},e}()}).call(this)},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var o=function(){function e(){var e=this;this._previousDimensions=new Map,this._subscribers=[],this._pendingSubscribers=[],this._pendingUpdates=[],this._schedule=function(){e.takeMeasurements(),e.flushPendingMeasuringNotifications()}}return e.getInstance=function(){return e._instance||(e._instance=new e),e._instance},e.prototype.setSchedulingFunction=function(e){this._schedule=e},Object.defineProperty(e.prototype,"subscribers",{get:function(){return this._subscribers},enumerable:!0,configurable:!0}),e.prototype.addMeasuringSubscribers=function(e){this._subscribers.push(e)},e.prototype.removeMeasuringSubscribers=function(e){var t=this._subscribers.indexOf(e);t>-1&&(this._subscribers.splice(t,1),this._previousDimensions.delete(e))},e.prototype.scheduleMeasuringUpdate=function(){this._schedule()},e.prototype.flushPendingMeasuringNotifications=function(){for(var e=this._pendingUpdates.length,t=0;t<e;t++)this._pendingUpdates[t]();return this._pendingUpdates=[],this._pendingSubscribers=[],e},e.prototype.takeMeasurements=function(){if(this._subscribers)for(var e=0;e<this._subscribers.length;e++){var t=this._subscribers[e],n=t.getComponent();if(n){var o=this._previousDimensions.get(t),r=n.getBoundingClientRect(),i=r.width,s=r.height;if(!o||o.Width!==i||o.Height!==s||this._subscribers[e].forceMeasure){var a=this._pendingSubscribers.indexOf(t);a>-1&&(this._pendingSubscribers.splice(a,1),this._pendingUpdates.splice(a,1)),this._previousDimensions.set(t,{Width:i,Height:s}),this._pendingUpdates.push(t.onMeasure.bind(t,i,s)),this._pendingSubscribers.push(t)}}}},e}()},function(e,t,n){e.exports=n(175)()},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var o=function(){function e(){this._disablingScrollStyle=!1,this._popupCount=0}return e.getInstance=function(){return e._instance||(e._instance=new e),e._instance},e.prototype.seeMoreOpen=function(){this._popupCount++,this.setDisableScrollStyle(!0)},e.prototype.seeMoreClose=function(){this._popupCount--,this.setDisableScrollStyle(!1)},e.prototype.getPopupCount=function(){return this._popupCount},e.prototype.getDisableScrollStyle=function(){return this._disablingScrollStyle},e.prototype.setDisableScrollStyle=function(e){if(this._disablingScrollStyle!==e){this._disablingScrollStyle=e;for(var t=document.querySelectorAll(e?".webkitScroll":".webkitScrollAuto"),n=0;n<t.length;n++)e?(t[n].classList.add("webkitScrollAuto"),t[n].classList.remove("webkitScroll")):(t[n].classList.add("webkitScroll"),t[n].classList.remove("webkitScrollAuto"));var o=document.querySelectorAll(e?".forceNewStackContext":".forceNewStackContextInert");for(n=0;n<o.length;n++)e?(o[n].classList.add("forceNewStackContextInert"),o[n].classList.remove("forceNewStackContext")):(o[n].classList.add("forceNewStackContext"),o[n].classList.remove("forceNewStackContextInert"))}},e}()},function(e,t,n){"use strict";var o=this&&this.__awaiter||function(e,t,n,o){return new(n||(n=Promise))(function(r,i){function s(e){try{l(o.next(e))}catch(e){i(e)}}function a(e){try{l(o.throw(e))}catch(e){i(e)}}function l(e){e.done?r(e.value):new n(function(t){t(e.value)}).then(s,a)}l((o=o.apply(e,t||[])).next())})},r=this&&this.__generator||function(e,t){var n,o,r,i,s={label:0,sent:function(){if(1&r[0])throw r[1];return r[1]},trys:[],ops:[]};return i={next:a(0),throw:a(1),return:a(2)},"function"==typeof Symbol&&(i[Symbol.iterator]=function(){return this}),i;function a(i){return function(a){return function(i){if(n)throw new TypeError("Generator is already executing.");for(;s;)try{if(n=1,o&&(r=2&i[0]?o.return:i[0]?o.throw||((r=o.return)&&r.call(o),0):o.next)&&!(r=r.call(o,i[1])).done)return r;switch(o=0,r&&(i=[2&i[0],r.value]),i[0]){case 0:case 1:r=i;break;case 4:return s.label++,{value:i[1],done:!1};case 5:s.label++,o=i[1],i=[0];continue;case 7:i=s.ops.pop(),s.trys.pop();continue;default:if(!(r=(r=s.trys).length>0&&r[r.length-1])&&(6===i[0]||2===i[0])){s=0;continue}if(3===i[0]&&(!r||i[1]>r[0]&&i[1]<r[3])){s.label=i[1];break}if(6===i[0]&&s.label<r[1]){s.label=r[1],r=i;break}if(r&&s.label<r[2]){s.label=r[2],s.ops.push(i);break}r[2]&&s.ops.pop(),s.trys.pop();continue}i=t.call(e,s)}catch(e){i=[6,e],o=0}finally{n=r=0}if(5&i[0])throw i[1];return{value:i[0]?i[1]:void 0,done:!0}}([i,a])}}};Object.defineProperty(t,"__esModule",{value:!0});var i=n(101),s=n(211),a={},l={};function c(e,t,n){return o(this,void 0,void 0,function(){var o,s;return r(this,function(r){switch(r.label){case 0:return o=i.join(e.directory,t),n&&(o=o+"-"+n),o=i.join(o,e.diagnosticFileName),[4,u(e,o)];case 1:return(s=r.sent())?(a=JSON.parse(s),[2,Promise.resolve(!0)]):[2,Promise.resolve(!1)]}})})}function u(e,t){return new Promise(function(n,o){if("browser"!==e.runtime){if(!s.existsSync(t))return n(void 0);var r=s.readFileSync(t).toString();return n(r)}var i=new XMLHttpRequest;i.onreadystatechange=function(){if(i.readyState===XMLHttpRequest.DONE)return 200===i.status?n(i.responseText):n(void 0)},i.open("GET",t,!0),i.send()})}t.configureLocale=function(e){return o(this,void 0,void 0,function(){var t,n,o,s,a,p;return r(this,function(r){switch(r.label){case 0:return""===e.directory?[2,Promise.reject("E_Unspecified_Directory")]:""===e.diagnosticFileName?[2,Promise.reject("E_Unspecified_Diagnostic_FileName")]:""===e.locale?[2,Promise.reject("E_Unspecified_Locale")]:"node"!==e.runtime&&"browser"!==e.runtime?[2,Promise.reject("E_Unsupported_Runtime")]:(t=/^([a-z]+)([_\-]([a-z]+))?$/.exec(e.locale.toLowerCase()))?(n=t[1],o=t[3],[4,c(e,n,o)]):[2,Promise.reject("E_Unsupported_Locale")];case 1:return(s=r.sent())?[3,3]:[4,c(e,n,void 0)];case 2:s=r.sent(),r.label=3;case 3:return s&&"en"!==n?(a=i.join(e.directory,"en",e.diagnosticFileName),[4,u(e,a)]):[3,5];case 4:return(p=r.sent())&&(l=JSON.parse(p)),[3,7];case 5:return[4,c(e,"en",void 0)];case 6:s=r.sent(),r.label=7;case 7:return s?[2,s]:[2,Promise.reject("E_Locale_Configuration_Error")]}})})},t.translate=function(e){return a[e]?a[e]:l[e]},t.translateA=function(e,t){var n=a[e];return n||(n=l[e]),n.replace(/{(\d+)}/g,function(e,n){return""+function(e,t){if(null==e)throw new Error("E_Arg_Mismatch");return e}(t[+n])})}},function(e,t,n){"use strict";n.d(t,"a",function(){return p});var o,r,i=n(38),s=n(24),a=n(5),l=n(4),c=(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return c(t,e),t.prototype.getSymbolClassName=function(e){return Object(s.b)(e)},t}(i.a);!function(e){e[e.None=0]="None",e[e.Left=1]="Left",e[e.Top=2]="Top"}(r||(r={}));var p=a.connect(l.a)(u)},function(e,t,n){var o=n(116),r="object"==typeof self&&self&&self.Object===Object&&self,i=o||r||Function("return this")();e.exports=i},function(e,t,n){"use strict";function o(e,t,n,o){return{code:e,category:t,key:n,message:o}}Object.defineProperty(t,"__esModule",{value:!0}),t.strings={loading_harness:o(1002,"Info","loading_harness","Loading control harness..."),loading_control:o(1003,"Info","loading_control","Loading control..."),inputs:o(1004,"Info","inputs","Inputs"),property:o(1005,"Info","property","Property"),value:o(1006,"Info","value","Value"),type:o(1007,"Info","type","Type"),error_parse_resource_string:o(1008,"Error","error_parse_resource_string","Error parsing resource '{0}'"),outputs:o(1009,"Info","outputs","Outputs"),resource_file_loaded:o(1010,"Error","resource_file_loaded","Resource file '{0}' loaded."),error_resource_load:o(1011,"Error","error_resource_load","Failed to load resource '{0}'"),error_resource_type_not_supported:o(1012,"Error","error_resource_type_not_supported","Resource '{0}' not loaded because {1} is not supported."),unknown_property_usage:o(1013,"Error","unknown_property_usage","Property has an unknown value for the usage attribute"),unrecognized_type_group:o(1014,"Error","unrecognized_type_group","Property references an unknown type-group '{0}'"),property_missing_type:o(1015,"Error","property_missing_type","Property has neither type-of nor type-group attribute"),error_parsing_control_manifest:o(1016,"Error","error_parsing_control_manifest","Manifest Parsing Error: Cannot parse ControlManifest.xml."),error_http_get_resource:o(1017,"Error","error_http_get_resource","GET resource '{0}' returned with status {1}"),invoke_method:o(1018,"Info","invoke_method","Invoked method {0} on {1} interface."),function_parameters:o(1019,"Info","function_parameters","Parameters"),message:o(1020,"Info","message","Message"),details:o(1021,"Info","details","Details"),error_code:o(1022,"Info","error_code","Error Code")}},function(e,t,n){"use strict";var o;n.d(t,"a",function(){return o}),n.d(t,"b",function(){return i}),function(e){e[e.Expanded=0]="Expanded",e[e.UpArrowHead=1]="UpArrowHead",e[e.LeftArrowHead=2]="LeftArrowHead",e[e.Collapsed=3]="Collapsed",e[e.Edit=4]="Edit",e[e.Save=5]="Save",e[e.Delete=6]="Delete",e[e.Remove=7]="Remove",e[e.Add=8]="Add",e[e.Cancel=9]="Cancel",e[e.HandClick=10]="HandClick",e[e.Accept=11]="Accept",e[e.More=12]="More",e[e.Forward=13]="Forward",e[e.Favorite=14]="Favorite",e[e.Placeholder=15]="Placeholder",e[e.RatingFull=16]="RatingFull",e[e.RatingEmpty=17]="RatingEmpty",e[e.Options=18]="Options",e[e.Manage=19]="Manage",e[e.Settings=20]="Settings",e[e.Find=21]="Find",e[e.Help=22]="Help",e[e.ViewNotifications=23]="ViewNotifications",e[e.StageAdvance=24]="StageAdvance",e[e.CheckMark=25]="CheckMark",e[e.Locked=26]="Locked",e[e.Lock=27]="Lock",e[e.MoreOptions=28]="MoreOptions",e[e.ContactInfo=29]="ContactInfo",e[e.Pin=30]="Pin",e[e.Unpin=31]="Unpin",e[e.Refresh=32]="Refresh",e[e.Details=33]="Details",e[e.VisualFilter=34]="VisualFilter",e[e.GlobalFilter=35]="GlobalFilter",e[e.Diamond=36]="Diamond",e[e.ApplyFilter=37]="ApplyFilter",e[e.CancelFilter=38]="CancelFilter",e[e.StreamView=39]="StreamView",e[e.TileView=40]="TileView",e[e.Import=41]="Import",e[e.Tools=42]="Tools",e[e.Attach=43]="Attach",e[e.Filter=44]="Filter",e[e.Copy=45]="Copy",e[e.HighPriority=46]="HighPriority",e[e.ReduceTile=47]="ReduceTile",e[e.ExpandTile=48]="ExpandTile",e[e.GlobalFilterExpand=49]="GlobalFilterExpand",e[e.GlobalFilterCollapse=50]="GlobalFilterCollapse",e[e.Clear=51]="Clear",e[e.Post=52]="Post",e[e.OneNote=53]="OneNote",e[e.Home=54]="Home",e[e.SetAsHome=55]="SetAsHome",e[e.BackButton=56]="BackButton",e[e.BackButtonWithoutBorder=57]="BackButtonWithoutBorder",e[e.UpArrow=58]="UpArrow",e[e.DownArrow=59]="DownArrow",e[e.SetActiveButton=60]="SetActiveButton",e[e.SearchButton=61]="SearchButton",e[e.ForwardButton=62]="ForwardButton",e[e.Mail=63]="Mail",e[e.CheckedMail=64]="CheckedMail",e[e.FailedMail=65]="FailedMail",e[e.Phone=66]="Phone",e[e.Chat=67]="Chat",e[e.OpenPane=68]="OpenPane",e[e.ClosePane=69]="ClosePane",e[e.AddFriend=70]="AddFriend",e[e.Arrow=71]="Arrow",e[e.DropdownArrow=72]="DropdownArrow",e[e.FlsLocked=73]="FlsLocked",e[e.LinkArticle=74]="LinkArticle",e[e.UnlinkArticle=75]="UnlinkArticle",e[e.CopyLink=76]="CopyLink",e[e.EmailLink=77]="EmailLink",e[e.Share=78]="Share",e[e.Assign=79]="Assign",e[e.Connect=80]="Connect",e[e.Opportunity=81]="Opportunity",e[e.Appointment=82]="Appointment",e[e.Task=83]="Task",e[e.Case=84]="Case",e[e.PhoneCallIncoming=85]="PhoneCallIncoming",e[e.PhoneCallOutgoing=86]="PhoneCallOutgoing",e[e.EmailIncoming=87]="EmailIncoming",e[e.EmailOutgoing=88]="EmailOutgoing",e[e.SendEmail=89]="SendEmail",e[e.ApplyTemplate=90]="ApplyTemplate",e[e.InsertKbArticle=91]="InsertKbArticle",e[e.SendSelected=92]="SendSelected",e[e.SaveAndClose=93]="SaveAndClose",e[e.ReplyEmail=94]="ReplyEmail",e[e.ReplyAllEmail=95]="ReplyAllEmail",e[e.ForwardEmail=96]="ForwardEmail",e[e.Close=97]="Close",e[e.Activate=98]="Activate",e[e.DeActivate=99]="DeActivate",e[e.DeleteBulk=100]="DeleteBulk",e[e.SocialActivityIncoming=101]="SocialActivityIncoming",e[e.SocialActivityOutgoing=102]="SocialActivityOutgoing",e[e.CustomActivity=103]="CustomActivity",e[e.SystemPost=104]="SystemPost",e[e.Convert=105]="Convert",e[e.MarkAsWon=106]="MarkAsWon",e[e.MarkAsLost=107]="MarkAsLost",e[e.SetRegarding=108]="SetRegarding",e[e.SaveAsComplete=109]="SaveAsComplete",e[e.SwitchProcess=110]="SwitchProcess",e[e.Recalculate=111]="Recalculate",e[e.SendDirectEmail=112]="SendDirectEmail",e[e.OpenMailbox=113]="OpenMailbox",e[e.ReOpenOpportunity=114]="ReOpenOpportunity",e[e.ReactivateLead=115]="ReactivateLead",e[e.Disqualify=116]="Disqualify",e[e.Qualify=117]="Qualify",e[e.SelectView=118]="SelectView",e[e.SelectChart=119]="SelectChart",e[e.OpenInBrowser=120]="OpenInBrowser",e[e.NewAppointment=121]="NewAppointment",e[e.NewRecurringAppointment=122]="NewRecurringAppointment",e[e.NewPhoneCall=123]="NewPhoneCall",e[e.NewTask=124]="NewTask",e[e.NewEmail=125]="NewEmail",e[e.AddExisting=126]="AddExisting",e[e.SaveAndEdit=127]="SaveAndEdit",e[e.Default=128]="Default",e[e.ScrollRight=129]="ScrollRight",e[e.ScrollLeft=130]="ScrollLeft",e[e.SaveAndRunRoutingRule=131]="SaveAndRunRoutingRule",e[e.RunRoutingRule=132]="RunRoutingRule",e[e.ResolveCase=133]="ResolveCase",e[e.CancelCase=134]="CancelCase",e[e.ReactivateCase=135]="ReactivateCase",e[e.AddToQueue=136]="AddToQueue",e[e.CreateChildCase=137]="CreateChildCase",e[e.QueueItemRoute=138]="QueueItemRoute",e[e.QueueItemRelease=139]="QueueItemRelease",e[e.QueueItemRemove=140]="QueueItemRemove",e[e.QueueItemPick=141]="QueueItemPick",e[e.Drilldown=142]="Drilldown",e[e.PopOverButton=143]="PopOverButton",e[e.ExitButton=144]="ExitButton",e[e.ExportToExcel=145]="ExportToExcel",e[e.WordTemplates=146]="WordTemplates",e[e.DocumentTemplates=147]="DocumentTemplates",e[e.OpenInPowerBI=148]="OpenInPowerBI",e[e.OpenPowerBIReport=149]="OpenPowerBIReport",e[e.OpenDelve=150]="OpenDelve",e[e.ArticleLink=151]="ArticleLink",e[e.ArchiveArticle=152]="ArchiveArticle",e[e.ApproveArticle=153]="ApproveArticle",e[e.DiscardArticle=154]="DiscardArticle",e[e.Minor=155]="Minor",e[e.Major=156]="Major",e[e.PublishKnowledgeArticle=157]="PublishKnowledgeArticle",e[e.RelateArticle=158]="RelateArticle",e[e.RelateProduct=159]="RelateProduct",e[e.RestoreArticle=160]="RestoreArticle",e[e.RevertToDraftArticle=161]="RevertToDraftArticle",e[e.Translate=162]="Translate",e[e.UpdateArticle=163]="UpdateArticle",e[e.RemoveFilter=164]="RemoveFilter",e[e.Article=165]="Article",e[e.Graph=166]="Graph",e[e.CSR=167]="CSR",e[e.MembersIcon=168]="MembersIcon",e[e.QueueIcon=169]="QueueIcon",e[e.SiteMap=170]="SiteMap",e[e.NormalPriority=171]="NormalPriority",e[e.LowPriority=172]="LowPriority",e[e.ViewIcon=173]="ViewIcon",e[e.RecentCases=174]="RecentCases",e[e.KBRecords=175]="KBRecords",e[e.NumberOfViews=176]="NumberOfViews",e[e.ResizeHandle=177]="ResizeHandle",e[e.TaskBasedFlow=178]="TaskBasedFlow",e[e.InformationIcon=179]="InformationIcon",e[e.PencilIcon=180]="PencilIcon",e[e.ErrorIcon=181]="ErrorIcon",e[e.SuccessIcon=182]="SuccessIcon",e[e.OptionsetIcon=183]="OptionsetIcon",e[e.NotificationIcon=184]="NotificationIcon",e[e.PanelHeaderImportDataIcon=185]="PanelHeaderImportDataIcon",e[e.SidePanelUpload=186]="SidePanelUpload",e[e.New=187]="New",e[e.DetailsPageClose=188]="DetailsPageClose",e[e.SettingsListIcon=189]="SettingsListIcon",e[e.ListIcon=190]="ListIcon",e[e.ForwardDisable=191]="ForwardDisable",e[e.PdfIconFile=192]="PdfIconFile",e[e.PresentationFile=193]="PresentationFile",e[e.OneNoteFile=194]="OneNoteFile",e[e.AccessFile=195]="AccessFile",e[e.VisioFile=196]="VisioFile",e[e.ProjectFile=197]="ProjectFile",e[e.Plus=198]="Plus",e[e.ChevronUp=199]="ChevronUp",e[e.ChevronDown=200]="ChevronDown",e[e.HappySmiley=201]="HappySmiley",e[e.SadSmiley=202]="SadSmiley",e[e.CaseResolution=203]="CaseResolution",e[e.CampaignResolution=204]="CampaignResolution",e[e.ServiceActivity=205]="ServiceActivity",e[e.Notes=206]="Notes",e[e.Audio=207]="Audio",e[e.Camera=208]="Camera",e[e.Video=209]="Video",e[e.Image=210]="Image",e[e.Html=211]="Html",e[e.SharePointEditDocument=212]="SharePointEditDocument",e[e.SharePointDeleteDocument=213]="SharePointDeleteDocument",e[e.SharePointCheckoutDocument=214]="SharePointCheckoutDocument",e[e.SharePointCheckinDocument=215]="SharePointCheckinDocument",e[e.SharePointEditDocumentProperties=216]="SharePointEditDocumentProperties",e[e.SharePointDiscardCheckoutDocument=217]="SharePointDiscardCheckoutDocument",e[e.SharePointNewDocument=218]="SharePointNewDocument",e[e.SharePointNewWordDocument=219]="SharePointNewWordDocument",e[e.SharePointNewExcelDocument=220]="SharePointNewExcelDocument",e[e.SharePointNewPowerPointDocument=221]="SharePointNewPowerPointDocument",e[e.SharePointNewOneNoteDocument=222]="SharePointNewOneNoteDocument",e[e.SharePointUploadDocument=223]="SharePointUploadDocument",e[e.SharePointChangeLocation=224]="SharePointChangeLocation",e[e.SharePointAddDocumentLocation=225]="SharePointAddDocumentLocation",e[e.SharePointEditLocation=226]="SharePointEditLocation",e[e.SharePointOpenLocation=227]="SharePointOpenLocation",e[e.SharePointOpenDocument=228]="SharePointOpenDocument",e[e.SendByEmail=229]="SendByEmail",e[e.CreateQuote=230]="CreateQuote",e[e.Reply=231]="Reply",e[e.Warning=232]="Warning",e[e.Play=233]="Play",e[e.ExpandButton=234]="ExpandButton",e[e.AssociatedArticle=235]="AssociatedArticle",e[e.DisassociatedArticle=236]="DisassociatedArticle",e[e.FormDesign=237]="FormDesign",e[e.GlobalFilterClearAll=238]="GlobalFilterClearAll",e[e.GlobalFilterExpandedRow=239]="GlobalFilterExpandedRow",e[e.GlobalFilterCollapsedRow=240]="GlobalFilterCollapsedRow",e[e.RelationshipAssistant=241]="RelationshipAssistant",e[e.AutomaticSuggestions=242]="AutomaticSuggestions",e[e.SemanticZoom=243]="SemanticZoom",e[e.SemanticZoomMirrored=244]="SemanticZoomMirrored",e[e.BackwardButton=245]="BackwardButton",e[e.MultiSelect=246]="MultiSelect",e[e.MultiSelectMirrored=247]="MultiSelectMirrored",e[e.Spinning=248]="Spinning",e[e.RetireProduct=249]="RetireProduct",e[e.AddProduct=250]="AddProduct",e[e.OfflineStatus=251]="OfflineStatus",e[e.Abandon=252]="Abandon",e[e.Reactivate=253]="Reactivate",e[e.FinishStage=254]="FinishStage",e[e.SortButton=255]="SortButton",e[e.Flows=256]="Flows",e[e.OpenEntityRecord=257]="OpenEntityRecord",e[e.View=258]="View",e[e.CreateView=259]="CreateView",e[e.EditView=260]="EditView",e[e.GuestUser=261]="GuestUser",e[e.History=262]="History",e[e.ReassignRecords=263]="ReassignRecords",e[e.ManageRoles=264]="ManageRoles",e[e.JoinTeams=265]="JoinTeams",e[e.ChangeManager=266]="ChangeManager",e[e.AddMembers=267]="AddMembers",e[e.RemoveMembers=268]="RemoveMembers",e[e.Download=269]="Download",e[e.SetAsDefaultView=270]="SetAsDefaultView",e[e.Pinned=271]="Pinned",e[e.DistributionList=272]="DistributionList",e[e.MergeRecords=273]="MergeRecords",e[e.AssociateChildCase=274]="AssociateChildCase",e[e.SetAsDefault=275]="SetAsDefault",e[e.ConvertKnowledgeArticle=276]="ConvertKnowledgeArticle",e[e.Messenger=277]="Messenger",e[e.AssociateCategory=278]="AssociateCategory",e[e.OfficeWaffle=279]="OfficeWaffle",e[e.TripleColumn=280]="TripleColumn",e[e.Tiles=281]="Tiles",e[e.HideVisualFilter=282]="HideVisualFilter",e[e.InteractiveDashboard=283]="InteractiveDashboard",e[e.Dynamics365=284]="Dynamics365",e[e.SalesLiterature=285]="SalesLiterature",e[e.SelectButton=286]="SelectButton",e[e.SelectButtonRTL=287]="SelectButtonRTL",e[e.LockPricing=288]="LockPricing",e[e.CreateInvoice=289]="CreateInvoice",e[e.FulfillOrder=290]="FulfillOrder",e[e.CancelInvoice=291]="CancelInvoice",e[e.ActivateQuote=292]="ActivateQuote",e[e.InvoicePaid=293]="InvoicePaid",e[e.GetProducts=294]="GetProducts",e[e.UnlockPricing=295]="UnlockPricing",e[e.Checkbox=296]="Checkbox",e[e.CheckboxComposite=297]="CheckboxComposite",e[e.RightChevron=298]="RightChevron",e[e.LeftChevron=299]="LeftChevron",e[e.UntrackedEmail=300]="UntrackedEmail",e[e.OpenEmail=301]="OpenEmail",e[e.GlobalFilterCollapsedRowRTL=302]="GlobalFilterCollapsedRowRTL",e[e.CancelOrder=303]="CancelOrder",e[e.URL=304]="URL",e[e.Ticker=305]="Ticker",e[e.UseCurrentPricing=306]="UseCurrentPricing",e[e.Process=307]="Process",e[e.FirstPageButton=308]="FirstPageButton",e[e.LinkedInLogo=309]="LinkedInLogo",e[e.Health=310]="Health",e[e.Family=311]="Family",e[e.Sports=312]="Sports",e[e.Entertainment=313]="Entertainment",e[e.OOF=314]="OOF",e[e.CarouselView=315]="CarouselView",e[e.HeartEmpty=316]="HeartEmpty",e[e.HeartFilled=317]="HeartFilled",e[e.Follow=318]="Follow",e[e.RunQuery=319]="RunQuery",e[e.GroupAnd=320]="GroupAnd",e[e.GroupOr=321]="GroupOr",e[e.Ungroup=322]="Ungroup",e[e.HideInSimpleMode=323]="HideInSimpleMode",e[e.ShowInSimpleMode=324]="ShowInSimpleMode",e[e.PinnedSolid=325]="PinnedSolid",e[e.FilterSolid=326]="FilterSolid",e[e.Bot=327]="Bot",e[e.SystemDocumentTemplates=328]="SystemDocumentTemplates",e[e.MyDocumentTemplates=329]="MyDocumentTemplates",e[e.ViewAllMyDocumentTemplates=330]="ViewAllMyDocumentTemplates",e[e.EnableSecurityRoles=331]="EnableSecurityRoles",e[e.DocumentTemplateUpload=332]="DocumentTemplateUpload",e[e.DocumentTemplateEdit=333]="DocumentTemplateEdit",e[e.DocumentTemplateActivate=334]="DocumentTemplateActivate",e[e.DocumentTemplateDeactivate=335]="DocumentTemplateDeactivate",e[e.YammerIcon=336]="YammerIcon",e[e.StopIcon=337]="StopIcon",e[e.ReplaceContentIcon=338]="ReplaceContentIcon",e[e.CloseDateComingSoon=339]="CloseDateComingSoon",e[e.NearbyCustomers=340]="NearbyCustomers",e[e.RelevantNews=341]="RelevantNews",e[e.UpcomingMeeting=342]="UpcomingMeeting",e[e.RecentMeeting=343]="RecentMeeting",e[e.ReminderWithCall=344]="ReminderWithCall",e[e.CardsTask=345]="CardsTask",e[e.CardsQuote=346]="CardsQuote",e[e.CardsOpportunity=347]="CardsOpportunity",e[e.CardsInvoice=348]="CardsInvoice",e[e.CardsDashboard=349]="CardsDashboard",e[e.CardsLeads=350]="CardsLeads",e[e.OpportunityNoActivity=351]="OpportunityNoActivity",e[e.CaseNoActivity=352]="CaseNoActivity",e[e.CompetitorMentioned=353]="CompetitorMentioned",e[e.MeetingRequest=354]="MeetingRequest",e[e.MissedCloseDate=355]="MissedCloseDate",e[e.IssueDetection=356]="IssueDetection",e[e.NoActivityWithAccount=357]="NoActivityWithAccount",e[e.YesNo=358]="YesNo",e[e.AgendaActivityServiceAppointment=359]="AgendaActivityServiceAppointment",e[e.AgendaActivityFax=360]="AgendaActivityFax",e[e.UpcomingFlight=361]="UpcomingFlight",e[e.OpportunityAtRiskSentiment=362]="OpportunityAtRiskSentiment",e[e.IconDue=363]="IconDue",e[e.AddProductFamily=364]="AddProductFamily",e[e.AddProductBundle=365]="AddProductBundle",e[e.ProductPublish=366]="ProductPublish",e[e.CloneProduct=367]="CloneProduct",e[e.CloseGoal=368]="CloseGoal",e[e.AlignWithFiscalPeriod=369]="AlignWithFiscalPeriod",e[e.Connection=370]="Connection",e[e.ConnectionToMe=371]="ConnectionToMe",e[e.ConnectionToOther=372]="ConnectionToOther",e[e.ProductUpsell=373]="ProductUpsell",e[e.SubscriptionAdd=374]="SubscriptionAdd",e[e.RefreshDevice=375]="RefreshDevice",e[e.BulletListRemove=376]="BulletListRemove",e[e.BulletListAdd=377]="BulletListAdd",e[e.ScatterChart=378]="ScatterChart",e[e.BarChartHorizontal=379]="BarChartHorizontal",e[e.BarChartVertical=380]="BarChartVertical",e[e.FunnelChart=381]="FunnelChart",e[e.PieDouble=382]="PieDouble",e[e.AALinkedInLogo=383]="AALinkedInLogo",e[e.SendAndClose=384]="SendAndClose",e[e.AdvFind=385]="AdvFind",e[e.DoubleChevronLeft=386]="DoubleChevronLeft",e[e.DoubleChevronRight=387]="DoubleChevronRight",e[e.AreaChart=388]="AreaChart",e[e.DonutChart=389]="DonutChart",e[e.TagChart=390]="TagChart",e[e.Teaser=391]="Teaser",e[e.Clone=392]="Clone",e[e.AreaChartMirrored=393]="AreaChartMirrored",e[e.BarChartHorizontalMirrored=394]="BarChartHorizontalMirrored",e[e.BarChartVerticalMirrored=395]="BarChartVerticalMirrored",e[e.People=396]="People",e[e.PeopleBlock=397]="PeopleBlock",e[e.BulletListDownArrow=398]="BulletListDownArrow",e[e.Recent=399]="Recent",e[e.SharePointIcon=400]="SharePointIcon",e[e.OneDriveIcon=401]="OneDriveIcon",e[e.FolderSharedIcon=402]="FolderSharedIcon",e[e.MSTeamsIcon=403]="MSTeamsIcon",e[e.ScrollUpDown=404]="ScrollUpDown",e[e.SendToCTI=405]="SendToCTI",e[e.CreateQuickCampaign=406]="CreateQuickCampaign",e[e.PageSolid=407]="PageSolid",e[e.Page=408]="Page",e[e.OpportunitiesList=409]="OpportunitiesList",e[e.BrowseCards=410]="BrowseCards",e[e.Letter=411]="Letter",e[e.Fax=412]="Fax",e[e.NewLetter=413]="NewLetter",e[e.NewFax=414]="NewFax",e[e.LetterIncoming=415]="LetterIncoming",e[e.LetterOutgoing=416]="LetterOutgoing",e[e.FaxIncoming=417]="FaxIncoming",e[e.FaxOutgoing=418]="FaxOutgoing",e[e.CreatePersonalView=419]="CreatePersonalView",e[e.ViewHierarchy=420]="ViewHierarchy",e[e.ProductPreview=421]="ProductPreview",e[e.AddTerritoryMember=422]="AddTerritoryMember",e[e.RemoveTerritoryMember=423]="RemoveTerritoryMember",e[e.Report=424]="Report",e[e.NewServiceActivity=425]="NewServiceActivity",e[e.Recurrence=426]="Recurrence",e[e.EditSeries=427]="EditSeries",e[e.EndSeries=428]="EndSeries",e[e.EditDefaultFilter=429]="EditDefaultFilter",e[e.QueueItemDetail=430]="QueueItemDetail",e[e.ThumbsUp=431]="ThumbsUp",e[e.ThumbsDown=432]="ThumbsDown",e[e.Lead=433]="Lead",e[e.TableLink=434]="TableLink",e[e.TableGroup=435]="TableGroup",e[e.ClearDefault=436]="ClearDefault",e[e.SetDefault=437]="SetDefault",e[e.SaveFilterToNewPersonalView=438]="SaveFilterToNewPersonalView",e[e.SaveFilterToCurrentPersonalView=439]="SaveFilterToCurrentPersonalView",e[e.Expand=440]="Expand",e[e.ChromeMinimize=441]="ChromeMinimize",e[e.ChromeMaximize=442]="ChromeMaximize",e[e.ConnectionRoleManageRecordType=443]="ConnectionRoleManageRecordType",e[e.Sync=444]="Sync"}(o||(o={}));var r={Expanded:"symbolFont Expanded-symbol",UpArrowHead:"symbolFont UpArrowHead-symbol",LeftArrowHead:"symbolFont LeftArrowHead-symbol",Collapsed:"symbolFont Collapsed-symbol",Edit:"symbolFont Edit-symbol",Save:"symbolFont Save-symbol",Delete:"symbolFont Delete-symbol",Remove:"symbolFont Remove-symbol",Add:"symbolFont Add-symbol",Cancel:"symbolFont Cancel-symbol",HandClick:"symbolFont HandClick-symbol",Accept:"symbolFont Accept-symbol",More:"symbolFont More-symbol",Forward:"symbolFont Forward-symbol",Favorite:"symbolFont Favorite-symbol",Placeholder:"symbolFont Placeholder-symbol",RatingFull:"symbolFont RatingFull-symbol",RatingEmpty:"symbolFont RatingEmpty-symbol",Options:"symbolFont Options-symbol",Manage:"symbolFont Manage-symbol",Settings:"symbolFont Settings-symbol",Find:"symbolFont Find-symbol",Help:"symbolFont Help-symbol",ViewNotifications:"symbolFont ViewNotifications-symbol",StageAdvance:"symbolFont StageAdvance-symbol",CheckMark:"symbolFont CheckMark-symbol",Locked:"symbolFont Locked-symbol",Lock:"symbolFont Lock-symbol",MoreOptions:"symbolFont MoreOptions-symbol",ContactInfo:"symbolFont ContactInfo-symbol",Pin:"symbolFont Pin-symbol",Unpin:"symbolFont Unpin-symbol",Refresh:"symbolFont Refresh-symbol",Details:"symbolFont Details-symbol",VisualFilter:"symbolFont VisualFilter-symbol",GlobalFilter:"symbolFont GlobalFilter-symbol",Diamond:"symbolFont Diamond-symbol",ApplyFilter:"symbolFont ApplyFilter-symbol",CancelFilter:"symbolFont CancelFilter-symbol",StreamView:"symbolFont StreamView-symbol",TileView:"symbolFont TileView-symbol",Import:"symbolFont Import-symbol",Tools:"symbolFont Tools-symbol",Attach:"symbolFont Attach-symbol",Filter:"symbolFont Filter-symbol",Copy:"symbolFont Copy-symbol",HighPriority:"symbolFont HighPriority-symbol",ReduceTile:"symbolFont ReduceTile-symbol",ExpandTile:"symbolFont ExpandTile-symbol",GlobalFilterExpand:"symbolFont GlobalFilterExpand-symbol",GlobalFilterCollapse:"symbolFont GlobalFilterCollapse-symbol",Clear:"symbolFont Clear-symbol",Post:"symbolFont Post-symbol",OneNote:"symbolFont OneNote-symbol",Home:"symbolFont Home-symbol",SetAsHome:"symbolFont SetAsHome-symbol",BackButton:"symbolFont BackButton-symbol",BackButtonWithoutBorder:"symbolFont BackButtonWithoutBorder-symbol",UpArrow:"symbolFont UpArrow-symbol",DownArrow:"symbolFont DownArrow-symbol",SetActiveButton:"symbolFont SetActiveButton-symbol",SearchButton:"symbolFont SearchButton-symbol",ForwardButton:"symbolFont ForwardButton-symbol",Mail:"symbolFont Mail-symbol",CheckedMail:"symbolFont CheckedMail-symbol",FailedMail:"symbolFont FailedMail-symbol",Phone:"symbolFont Phone-symbol",Chat:"symbolFont Chat-symbol",OpenPane:"symbolFont OpenPane-symbol",ClosePane:"symbolFont ClosePane-symbol",AddFriend:"symbolFont AddFriend-symbol",Arrow:"symbolFont Arrow-symbol",DropdownArrow:"symbolFont DropdownArrow-symbol",FlsLocked:"symbolFont FlsLocked-symbol",LinkArticle:"symbolFont LinkArticle-symbol",UnlinkArticle:"symbolFont UnlinkArticle-symbol",CopyLink:"symbolFont CopyLink-symbol",EmailLink:"symbolFont EmailLink-symbol",Share:"symbolFont Share-symbol",Assign:"symbolFont Assign-symbol",Connect:"symbolFont Connect-symbol",Opportunity:"symbolFont Opportunity-symbol",Appointment:"symbolFont Appointment-symbol",Task:"symbolFont Task-symbol",Case:"symbolFont Case-symbol",PhoneCallIncoming:"symbolFont PhoneCallIncoming-symbol",PhoneCallOutgoing:"symbolFont PhoneCallOutgoing-symbol",EmailIncoming:"symbolFont EmailIncoming-symbol",EmailOutgoing:"symbolFont EmailOutgoing-symbol",SendEmail:"symbolFont SendEmail-symbol",ApplyTemplate:"symbolFont ApplyTemplate-symbol",InsertKbArticle:"symbolFont InsertKbArticle-symbol",SendSelected:"symbolFont SendSelected-symbol",SaveAndClose:"symbolFont SaveAndClose-symbol",ReplyEmail:"symbolFont ReplyEmail-symbol",ReplyAllEmail:"symbolFont ReplyAllEmail-symbol",ForwardEmail:"symbolFont ForwardEmail-symbol",Close:"symbolFont Close-symbol",Activate:"symbolFont Activate-symbol",DeActivate:"symbolFont DeActivate-symbol",DeleteBulk:"symbolFont DeleteBulk-symbol",SocialActivityIncoming:"symbolFont SocialActivityIncoming-symbol",SocialActivityOutgoing:"symbolFont SocialActivityOutgoing-symbol",CustomActivity:"symbolFont CustomActivity-symbol",SystemPost:"symbolFont SystemPost-symbol",Convert:"symbolFont Convert-symbol",MarkAsWon:"symbolFont MarkAsWon-symbol",MarkAsLost:"symbolFont MarkAsLost-symbol",SetRegarding:"symbolFont SetRegarding-symbol",SaveAsComplete:"symbolFont SaveAsComplete-symbol",SwitchProcess:"symbolFont SwitchProcess-symbol",Recalculate:"symbolFont Recalculate-symbol",SendDirectEmail:"symbolFont SendDirectEmail-symbol",OpenMailbox:"symbolFont OpenMailbox-symbol",ReOpenOpportunity:"symbolFont ReOpenOpportunity-symbol",ReactivateLead:"symbolFont ReactivateLead-symbol",Disqualify:"symbolFont Disqualify-symbol",Qualify:"symbolFont Qualify-symbol",SelectView:"symbolFont SelectView-symbol",SelectChart:"symbolFont SelectChart-symbol",OpenInBrowser:"symbolFont OpenInBrowser-symbol",NewAppointment:"symbolFont NewAppointment-symbol",NewRecurringAppointment:"symbolFont NewRecurringAppointment-symbol",NewPhoneCall:"symbolFont NewPhoneCall-symbol",NewTask:"symbolFont NewTask-symbol",NewEmail:"symbolFont NewEmail-symbol",AddExisting:"symbolFont AddExisting-symbol",SaveAndEdit:"symbolFont SaveAndEdit-symbol",Default:"symbolFont Default-symbol",ScrollRight:"symbolFont ScrollRight-symbol",ScrollLeft:"symbolFont ScrollLeft-symbol",SaveAndRunRoutingRule:"symbolFont SaveAndRunRoutingRule-symbol",RunRoutingRule:"symbolFont RunRoutingRule-symbol",ResolveCase:"symbolFont ResolveCase-symbol",CancelCase:"symbolFont CancelCase-symbol",ReactivateCase:"symbolFont ReactivateCase-symbol",AddToQueue:"symbolFont AddToQueue-symbol",CreateChildCase:"symbolFont CreateChildCase-symbol",QueueItemRoute:"symbolFont QueueItemRoute-symbol",QueueItemRelease:"symbolFont QueueItemRelease-symbol",QueueItemRemove:"symbolFont QueueItemRemove-symbol",QueueItemPick:"symbolFont QueueItemPick-symbol",Drilldown:"symbolFont Drilldown-symbol",PopOverButton:"symbolFont PopOverButton-symbol",ExitButton:"symbolFont ExitButton-symbol",ExportToExcel:"symbolFont ExportToExcel-symbol",WordTemplates:"symbolFont WordTemplates-symbol",DocumentTemplates:"symbolFont DocumentTemplates-symbol",OpenInPowerBI:"symbolFont OpenInPowerBI-symbol",OpenPowerBIReport:"symbolFont OpenPowerBIReport-symbol",OpenDelve:"symbolFont OpenDelve-symbol",ArticleLink:"symbolFont ArticleLink-symbol",ArchiveArticle:"symbolFont ArchiveArticle-symbol",ApproveArticle:"symbolFont ApproveArticle-symbol",DiscardArticle:"symbolFont DiscardArticle-symbol",Minor:"symbolFont Minor-symbol",Major:"symbolFont Major-symbol",PublishKnowledgeArticle:"symbolFont PublishKnowledgeArticle-symbol",RelateArticle:"symbolFont RelateArticle-symbol",RelateProduct:"symbolFont RelateProduct-symbol",RestoreArticle:"symbolFont RestoreArticle-symbol",RevertToDraftArticle:"symbolFont RevertToDraftArticle-symbol",Translate:"symbolFont Translate-symbol",UpdateArticle:"symbolFont UpdateArticle-symbol",RemoveFilter:"symbolFont RemoveFilter-symbol",Article:"symbolFont Article-symbol",Graph:"symbolFont Graph-symbol",CSR:"symbolFont CSR-symbol",MembersIcon:"symbolFont MembersIcon-symbol",QueueIcon:"symbolFont QueueIcon-symbol",SiteMap:"symbolFont SiteMap-symbol",NormalPriority:"symbolFont NormalPriority-symbol",LowPriority:"symbolFont LowPriority-symbol",ViewIcon:"symbolFont ViewIcon-symbol",RecentCases:"symbolFont RecentCases-symbol",KBRecords:"symbolFont KBRecords-symbol",NumberOfViews:"symbolFont NumberOfViews-symbol",ResizeHandle:"symbolFont ResizeHandle-symbol",TaskBasedFlow:"symbolFont TaskBasedFlow-symbol",InformationIcon:"symbolFont InformationIcon-symbol",PencilIcon:"symbolFont PencilIcon-symbol",ErrorIcon:"symbolFont ErrorIcon-symbol",SuccessIcon:"symbolFont SuccessIcon-symbol",OptionsetIcon:"symbolFont OptionsetIcon-symbol",NotificationIcon:"symbolFont NotificationIcon-symbol",PanelHeaderImportDataIcon:"symbolFont PanelHeaderImportDataIcon-symbol",SidePanelUpload:"symbolFont SidePanelUpload-symbol",New:"symbolFont New-symbol",DetailsPageClose:"symbolFont DetailsPageClose-symbol",SettingsListIcon:"symbolFont SettingsListIcon-symbol",ListIcon:"symbolFont ListIcon-symbol",ForwardDisable:"symbolFont ForwardDisable-symbol",PdfIconFile:"symbolFont PdfIconFile-symbol",PresentationFile:"symbolFont PresentationFile-symbol",OneNoteFile:"symbolFont OneNoteFile-symbol",AccessFile:"symbolFont AccessFile-symbol",VisioFile:"symbolFont VisioFile-symbol",ProjectFile:"symbolFont ProjectFile-symbol",Plus:"symbolFont Plus-symbol",ChevronUp:"symbolFont ChevronUp-symbol",ChevronDown:"symbolFont ChevronDown-symbol",HappySmiley:"symbolFont HappySmiley-symbol",SadSmiley:"symbolFont SadSmiley-symbol",CaseResolution:"symbolFont CaseResolution-symbol",CampaignResolution:"symbolFont CampaignResolution-symbol",ServiceActivity:"symbolFont ServiceActivity-symbol",Notes:"symbolFont Notes-symbol",Audio:"symbolFont Audio-symbol",Camera:"symbolFont Camera-symbol",Video:"symbolFont Video-symbol",Image:"symbolFont Image-symbol",Html:"symbolFont Html-symbol",SharePointEditDocument:"symbolFont SharePointEditDocument-symbol",SharePointDeleteDocument:"symbolFont SharePointDeleteDocument-symbol",SharePointCheckoutDocument:"symbolFont SharePointCheckoutDocument-symbol",SharePointCheckinDocument:"symbolFont SharePointCheckinDocument-symbol",SharePointEditDocumentProperties:"symbolFont SharePointEditDocumentProperties-symbol",SharePointDiscardCheckoutDocument:"symbolFont SharePointDiscardCheckoutDocument-symbol",SharePointNewDocument:"symbolFont SharePointNewDocument-symbol",SharePointNewWordDocument:"symbolFont SharePointNewWordDocument-symbol",SharePointNewExcelDocument:"symbolFont SharePointNewExcelDocument-symbol",SharePointNewPowerPointDocument:"symbolFont SharePointNewPowerPointDocument-symbol",SharePointNewOneNoteDocument:"symbolFont SharePointNewOneNoteDocument-symbol",SharePointUploadDocument:"symbolFont SharePointUploadDocument-symbol",SharePointChangeLocation:"symbolFont SharePointChangeLocation-symbol",SharePointAddDocumentLocation:"symbolFont SharePointAddDocumentLocation-symbol",SharePointEditLocation:"symbolFont SharePointEditLocation-symbol",SharePointOpenLocation:"symbolFont SharePointOpenLocation-symbol",SharePointOpenDocument:"symbolFont SharePointOpenDocument-symbol",SendByEmail:"symbolFont SendByEmail-symbol",CreateQuote:"symbolFont CreateQuote-symbol",Reply:"symbolFont Reply-symbol",Warning:"symbolFont Warning-symbol",Play:"symbolFont Play-symbol",ExpandButton:"symbolFont ExpandButton-symbol",AssociatedArticle:"symbolFont AssociatedArticle-symbol",DisassociatedArticle:"symbolFont DisassociatedArticle-symbol",FormDesign:"symbolFont FormDesign-symbol",GlobalFilterClearAll:"symbolFont GlobalFilterClearAll-symbol",GlobalFilterExpandedRow:"symbolFont GlobalFilterExpandedRow-symbol",GlobalFilterCollapsedRow:"symbolFont GlobalFilterCollapsedRow-symbol",RelationshipAssistant:"symbolFont RelationshipAssistant-symbol",AutomaticSuggestions:"symbolFont AutomaticSuggestions-symbol",SemanticZoom:"symbolFont SemanticZoom-symbol",SemanticZoomMirrored:"symbolFont SemanticZoomMirrored-symbol",BackwardButton:"symbolFont BackwardButton-symbol",MultiSelect:"symbolFont MultiSelect-symbol",MultiSelectMirrored:"symbolFont MultiSelectMirrored-symbol",Spinning:"symbolFont Spinning-symbol",RetireProduct:"symbolFont RetireProduct-symbol",AddProduct:"symbolFont AddProduct-symbol",OfflineStatus:"symbolFont OfflineStatus-symbol",Abandon:"symbolFont Abandon-symbol",Reactivate:"symbolFont Reactivate-symbol",FinishStage:"symbolFont FinishStage-symbol",SortButton:"symbolFont SortButton-symbol",View:"symbolFont View-symbol",CreateView:"symbolFont CreateView-symbol",EditView:"symbolFont EditView-symbol",Flows:"symbolFont Flows-symbol",OpenEntityRecord:"symbolFont OpenEntityRecord-symbol",GuestUser:"symbolFont GuestUser-symbol",History:"symbolFont History-symbol",ReassignRecords:"symbolFont ReassignRecords-symbol",ManageRoles:"symbolFont ManageRoles-symbol",JoinTeams:"symbolFont JoinTeams-symbol",ChangeManager:"symbolFont ChangeManager-symbol",AddMembers:"symbolFont AddMembers-symbol",RemoveMembers:"symbolFont RemoveMembers-symbol",Download:"symbolFont Download-symbol",SetAsDefaultView:"symbolFont SetAsDefaultView-symbol",Pinned:"symbolFont Pinned-symbol",DistributionList:"symbolFont DistributionList-symbol",MergeRecords:"symbolFont MergeRecords-symbol",AssociateChildCase:"symbolFont AssociateChildCase-symbol",SetAsDefault:"symbolFont SetAsDefault-symbol",ConvertKnowledgeArticle:"symbolFont ConvertKnowledgeArticle-symbol",Messenger:"symbolFont Messenger-symbol",AssociateCategory:"symbolFont AssociateCategory-symbol",OfficeWaffle:"d365Shell OfficeWaffle-symbol",TripleColumn:"symbolFont TripleColumn-symbol",Tiles:"symbolFont Tiles-symbol",HideVisualFilter:"symbolFont HideVisualFilter-symbol",InteractiveDashboard:"symbolFont InteractiveDashboard-symbol",Dynamics365:"symbolFont Dynamics365-symbol",SalesLiterature:"symbolFont SalesLiterature-symbol",SelectButton:"symbolFont SelectButton-symbol",SelectButtonRTL:"symbolFont SelectButtonRTL-symbol",LockPricing:"symbolFont LockPricing-symbol",CreateInvoice:"symbolFont CreateInvoice-symbol",FulfillOrder:"symbolFont FulfillOrder-symbol",CancelInvoice:"symbolFont CancelInvoice-symbol",ActivateQuote:"symbolFont ActivateQuote-symbol",InvoicePaid:"symbolFont InvoicePaid-symbol",GetProducts:"symbolFont GetProducts-symbol",UnlockPricing:"symbolFont UnlockPricing-symbol",Checkbox:"symbolFont Checkbox-symbol",CheckboxComposite:"symbolFont CheckboxComposite-symbol",RightChevron:"symbolFont RightChevron-symbol",LeftChevron:"symbolFont LeftChevron-symbol",BackToStart:"symbolFont BackToStart-symbol",UntrackedEmail:"symbolFont UntrackedEmail-symbol",OpenEmail:"symbolFont OpenEmail-symbol",GlobalFilterCollapsedRowRTL:"symbolFont GlobalFilterCollapsedRowRTL-symbol",CancelOrder:"symbolFont CancelOrder-symbol",URL:"symbolFont URL-symbol",Ticker:"symbolFont Ticker-symbol",UseCurrentPricing:"symbolFont UseCurrentPricing-symbol",Process:"symbolFont Process-symbol",FirstPageButton:"symbolFont FirstPageButton-symbol",LinkedInLogo:"symbolFont LinkedInLogo-symbol",Health:"symbolFont Health-symbol",Family:"symbolFont Family-symbol",Sports:"symbolFont Sports-symbol",Entertainment:"symbolFont Entertainment-symbol",OOF:"symbolFont OOF-symbol",CarouselView:"symbolFont CarouselView-symbol",HeartEmpty:"symbolFont HeartEmpty-symbol",HeartFilled:"symbolFont HeartFilled-symbol",Follow:"symbolFont Follow-symbol",RunQuery:"symbolFont RunQuery-symbol",GroupAnd:"symbolFont GroupAnd-symbol",GroupOr:"symbolFont GroupOr-symbol",Ungroup:"symbolFont Ungroup-symbol",HideInSimpleMode:"symbolFont HideInSimpleMode-symbol",ShowInSimpleMode:"symbolFont ShowInSimpleMode-symbol",PinnedSolid:"symbolFont PinnedSolid-symbol",FilterSolid:"symbolFont FilterSolid-symbol",Bot:"symbolFont Bot-symbol",SystemDocumentTemplates:"symbolFont SystemDocumentTemplates-symbol",MyDocumentTemplates:"symbolFont MyDocumentTemplates-symbol",ViewAllMyDocumentTemplates:"symbolFont ViewAllMyDocumentTemplates-symbol",EnableSecurityRoles:"symbolFont EnableSecurityRoles-symbol",DocumentTemplateUpload:"symbolFont DocumentTemplateUpload-symbol",DocumentTemplateEdit:"symbolFont DocumentTemplateEdit-symbol",DocumentTemplateActivate:"symbolFont DocumentTemplateActivate-symbol",DocumentTemplateDeactivate:"symbolFont DocumentTemplateDeactivate-symbol",YammerIcon:"symbolFont YammerIcon-symbol",StopIcon:"symbolFont StopIcon-symbol",ReplaceContentIcon:"symbolFont ReplaceContentIcon-symbol",CloseDateComingSoon:"symbolFont CloseDateComingSoon-symbol",NearbyCustomers:"symbolFont NearbyCustomers-symbol",RelevantNews:"symbolFont RelevantNews-symbol",UpcomingMeeting:"symbolFont UpcomingMeeting-symbol",RecentMeeting:"symbolFont RecentMeeting-symbol",ReminderWithCall:"symbolFont ReminderWithCall-symbol",CardsTask:"symbolFont CardsTask-symbol",CardsQuote:"symbolFont CardsQuote-symbol",CardsOpportunity:"symbolFont CardsOpportunity-symbol",CardsInvoice:"symbolFont CardsInvoice-symbol",CardsDashboard:"symbolFont CardsDashboard-symbol",CardsLeads:"symbolFont CardsLeads-symbol",OpportunityNoActivity:"symbolFont OpportunityNoActivity-symbol",CaseNoActivity:"symbolFont CaseNoActivity-symbol",CompetitorMentioned:"symbolFont CompetitorMentioned-symbol",MeetingRequest:"symbolFont MeetingRequest-symbol",MissedCloseDate:"symbolFont MissedCloseDate-symbol",IssueDetection:"symbolFont IssueDetection-symbol",NoActivityWithAccount:"symbolFont NoActivityWithAccount-symbol",YesNo:"symbolFont YesNo-symbol",AgendaActivityServiceAppointment:"symbolFont AgendaActivityServiceAppointment-symbol",AgendaActivityFax:"symbolFont AgendaActivityFax-symbol",UpcomingFlight:"symbolFont UpcomingFlight-symbol",OpportunityAtRiskSentiment:"symbolFont OpportunityAtRiskSentiment-symbol",IconDue:"symbolFont IconDue-symbol",AddProductFamily:"symbolFont AddProductFamily-symbol",AddProductBundle:"symbolFont AddProductBundle-symbol",ProductPublish:"symbolFont ProductPublish-symbol",CloneProduct:"symbolFont CloneProduct-symbol",CloseGoal:"symbolFont CloseGoal-symbol",AlignWithFiscalPeriod:"symbolFont AlignWithFiscalPeriod-symbol",Connection:"symbolFont Connection-symbol",ConnectionToMe:"symbolFont ConnectionToMe-symbol",ConnectionToOther:"symbolFont ConnectionToOther-symbol",ProductUpsell:"symbolFont ProductUpsell-symbol",SubscriptionAdd:"symbolFont SubscriptionAdd-symbol",RefreshDevice:"symbolFont RefreshDevice-symbol",BulletListRemove:"symbolFont BulletListRemove-symbol",BulletListAdd:"symbolFont BulletListAdd-symbol",BulletListDownArrow:"symbolFont BulletListDownArrow-symbol",ScatterChart:"symbolFont ScatterChart-symbol",BarChartHorizontal:"symbolFont BarChartHorizontal-symbol",BarChartVertical:"symbolFont BarChartVertical-symbol",FunnelChart:"symbolFont FunnelChart-symbol",PieDouble:"symbolFont PieDouble-symbol",People:"symbolFont People-symbol",PeopleBlock:"symbolFont PeopleBlock-symbol",CreateQuickCampaign:"symbolFont CreateQuickCampaign-symbol",PageSolid:"symbolFont PageSolid-symbol",Page:"symbolFont Page-symbol",OpportunitiesList:"symbolFont OpportunitiesList-symbol",BrowseCards:"symbolFont BrowseCards-symbol",AALinkedInLogo:"symbolFont AALinkedInLogo-symbol",SendAndClose:"symbolFont SendAndClose-symbol",AdvFind:"symbolFont AdvFind-symbol",DoubleChevronLeft:"symbolFont DoubleChevronLeft-symbol",DoubleChevronRight:"symbolFont DoubleChevronRight-symbol",AreaChart:"symbolFont AreaChart-symbol",DonutChart:"symbolFont DonutChart-symbol",TagChart:"symbolFont TagChart-symbol",Teaser:"symbolFont Teaser-symbol",Clone:"symbolFont Clone-symbol",AreaChartMirrored:"symbolFont AreaChartMirrored-symbol",BarChartHorizontalMirrored:"symbolFont BarChartHorizontalMirrored-symbol",BarChartVerticalMirrored:"symbolFont BarChartVerticalMirrored-symbol",Recent:"symbolFont Recent-symbol",SharePointIcon:"symbolFont SharePointIcon-symbol",OneDriveIcon:"symbolFont OneDriveIcon-symbol",FolderSharedIcon:"symbolFont FolderSharedIcon-symbol",MSTeamsIcon:"symbolFont MSTeamsIcon-symbol",ScrollUpDown:"symbolFont AreaSwitcher-symbol",SendToCTI:"symbolFont SendToCTI-symbol",Letter:"symbolFont Letter-symbol",Fax:"symbolFont Fax-symbol",NewLetter:"symbolFont NewLetter-symbol",NewFax:"symbolFont NewFax-symbol",LetterIncoming:"symbolFont LetterIncoming-symbol",LetterOutgoing:"symbolFont LetterOutgoing-symbol",FaxIncoming:"symbolFont FaxIncoming-symbol",FaxOutgoing:"symbolFont FaxOutgoing-symbol",CreatePersonalView:"symbolFont CreatePersonalView-symbol",ViewHierarchy:"symbolFont ViewHierarchy-symbol",ProductPreview:"symbolFont ProductPreview-symbol",AddTerritoryMember:"symbolFont AddTerritoryMember-symbol",RemoveTerritoryMember:"symbolFont RemoveTerritoryMember-symbol",Report:"symbolFont Report-symbol",NewServiceActivity:"symbolFont NewServiceActivity-symbol",Recurrence:"symbolFont Recurrence-symbol",EditSeries:"symbolFont EditSeries-symbol",EndSeries:"symbolFont EndSeries-symbol",EditDefaultFilter:"symbolFont EditDefaultFilter-symbol",QueueItemDetail:"symbolFont QueueItemPick-symbol",ThumbsUp:"symbolFont ThumbsUp-symbol",ThumbsDown:"symbolFont ThumbsDown-symbol",Lead:"symbolFont Lead-symbol",TableLink:"symbolFont TableLink-symbol",TableGroup:"symbolFont TableGroup-symbol",ClearDefault:"symbolFont ClearDefault-symbol",SetDefault:"symbolFont SetDefault-symbol",SaveFilterToCurrentPersonalView:"symbolFont SaveFilterToCurrentPersonalView-symbol",SaveFilterToNewPersonalView:"symbolFont SaveFilterToNewPersonalView-symbol",Expand:"symbolFont Expand-symbol",ChromeMinimize:"symbolFont ChromeMinimize-symbol",ChromeMaximize:"symbolFont ChromeMaximize-symbol",ConnectionRoleManageRecordType:"symbolFont ConnectionRoleManageRecordType-symbol",Sync:"symbolFont Sync-symbol"};function i(e){return r[o[e]]}},function(e,t,n){"use strict";n.d(t,"a",function(){return c}),n.d(t,"b",function(){return p});var o,r=n(0),i=n(10),s=n(8),a=n(19),l=(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),c="openedPopups",u={position:"absolute",top:0,left:0,width:"100%",height:"100%"},p=function(e){function t(t){var n=e.call(this,t)||this;return n._seeMorePopupCount=null,n._initializeRootNode(),n}return l(t,e),t.prototype._getPopupId=function(){return(this.props.parentCustomControlId?this.props.parentCustomControlId+"|":"")+this.props.id+"_popupContainer"},t.prototype._initializeRootNode=function(){this._rootNode||(this._rootNode=document.createElement("section"),this._rootNode.id=this._getPopupId(),Object.assign(this._rootNode.style,{position:"absolute",top:"0",left:"0",width:"100%",height:"100%"}),this._rootNode.setAttribute(c,""),document.body.appendChild(this._rootNode))},t.prototype._getChildrenWithProps=function(e){var t=this;return e?e.map?e.map(function(e){return r.cloneElement(e,{rootPopupId:t._getPopupId()})}):r.cloneElement(e,{rootPopupId:this._getPopupId()}):null},t.prototype._renderToBody=function(){var e=this.props.style?this.props.style:u;null===this._seeMorePopupCount&&(this._seeMorePopupCount=a.a.getInstance().getPopupCount());var t=this._seeMorePopupCount>0;this._style||(this._style=t?Object.assign({zIndex:1},e):e),this._initializeRootNode()},t.prototype.componentWillReceiveProps=function(e){e.style!==this.props.style&&(this._style=null)},t.prototype.componentDidMount=function(){this._renderToBody(),this.props.openPopup&&this.props.openPopup(this._getPopupId())},t.prototype.componentWillUnmount=function(){document.getElementById(this._rootNode.id)&&document.body.removeChild(this._rootNode),this.props.closePopup&&this.props.closePopup(this._getPopupId()),this._rootNode=null},t.prototype.render=function(){return this.props.children?i.createPortal(r.createElement(s.a,{style:this._style,tabIndex:this.props.tabIndex},this._getChildrenWithProps(this.props.children)),this._rootNode):null},t}(r.Component)},function(e,t){(function(){var t,n,o,r,i,s,a=[].slice,l={}.hasOwnProperty;t=function(){var e,t,n,o,i,s;if(s=arguments[0],i=2<=arguments.length?a.call(arguments,1):[],r(Object.assign))Object.assign.apply(null,arguments);else for(e=0,n=i.length;e<n;e++)if(null!=(o=i[e]))for(t in o)l.call(o,t)&&(s[t]=o[t]);return s},r=function(e){return!!e&&"[object Function]"===Object.prototype.toString.call(e)},i=function(e){var t;return!!e&&("function"==(t=typeof e)||"object"===t)},n=function(e){return r(Array.isArray)?Array.isArray(e):"[object Array]"===Object.prototype.toString.call(e)},o=function(e){var t;if(n(e))return!e.length;for(t in e)if(l.call(e,t))return!1;return!0},s=function(e){var t,n;return i(e)&&(n=Object.getPrototypeOf(e))&&(t=n.constructor)&&"function"==typeof t&&t instanceof t&&Function.prototype.toString.call(t)===Function.prototype.toString.call(Object)},e.exports.assign=t,e.exports.isFunction=r,e.exports.isObject=i,e.exports.isArray=n,e.exports.isEmpty=o,e.exports.isPlainObject=s}).call(this)},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var o=function(){function e(){}return e.LearningPathAttributeSuffix="lp-id",e.LearningPathAttributeName="data-"+e.LearningPathAttributeSuffix,e.CCF="CustomControlFramework",e}()},function(e,t,n){"use strict";n.r(t),n.d(t,"CultureInfo",function(){return o});var o=function(){function e(e,t,n){this.name=e,this.dateTimeFormat=n,this.numberFormat=t}return e._getCurrentCulture=function(){return"object"==typeof __cultureInfo?new e(__cultureInfo.name,__cultureInfo.numberFormat,__cultureInfo.dateTimeFormat):new e("en-US",{CurrencyDecimalDigits:2,CurrencyDecimalSeparator:".",IsReadOnly:!1,CurrencyGroupSizes:[3],NumberGroupSizes:[3],PercentGroupSizes:[3],CurrencyGroupSeparator:",",CurrencySymbol:"$",NaNSymbol:"NaN",CurrencyNegativePattern:0,NumberNegativePattern:1,PercentPositivePattern:0,PercentNegativePattern:0,NegativeInfinitySymbol:"-Infinity",NegativeSign:"-",NumberDecimalDigits:2,NumberDecimalSeparator:".",NumberGroupSeparator:",",CurrencyPositivePattern:0,PositiveInfinitySymbol:"Infinity",PositiveSign:"+",PercentDecimalDigits:2,PercentDecimalSeparator:".",PercentGroupSeparator:",",PercentSymbol:"%",PerMilleSymbol:"‰",NativeDigits:["0","1","2","3","4","5","6","7","8","9"],DigitSubstitution:1},{AMDesignator:"AM",Calendar:{MinSupportedDateTime:"@-62135568000000@",MaxSupportedDateTime:"@253402300799999@",AlgorithmType:1,CalendarType:1,Eras:[1],TwoDigitYearMax:2029,IsReadOnly:!1},DateSeparator:"/",FirstDayOfWeek:0,CalendarWeekRule:0,FullDateTimePattern:"dddd, MMMM dd, yyyy h:mm:ss tt",LongDatePattern:"dddd, MMMM dd, yyyy",LongTimePattern:"h:mm:ss tt",MonthDayPattern:"MMMM dd",PMDesignator:"PM",RFC1123Pattern:"ddd, dd MMM yyyy HH':'mm':'ss 'GMT'",ShortDatePattern:"M/d/yyyy",ShortTimePattern:"h:mm tt",SortableDateTimePattern:"yyyy'-'MM'-'dd'T'HH':'mm':'ss",TimeSeparator:":",UniversalSortableDateTimePattern:"yyyy'-'MM'-'dd HH':'mm':'ss'Z'",YearMonthPattern:"MMMM, yyyy",AbbreviatedDayNames:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],ShortestDayNames:["Su","Mo","Tu","We","Th","Fr","Sa"],DayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],AbbreviatedMonthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec",""],MonthNames:["January","February","March","April","May","June","July","August","September","October","November","December",""],IsReadOnly:!1,NativeCalendarName:"Gregorian Calendar",AbbreviatedMonthGenitiveNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec",""],MonthGenitiveNames:["January","February","March","April","May","June","July","August","September","October","November","December",""]})},e._getInvariantCulture=function(){return new e("",{CurrencyDecimalDigits:2,CurrencyDecimalSeparator:".",IsReadOnly:!0,CurrencyGroupSizes:[3],NumberGroupSizes:[3],PercentGroupSizes:[3],CurrencyGroupSeparator:",",CurrencySymbol:"¤",NaNSymbol:"NaN",CurrencyNegativePattern:0,NumberNegativePattern:1,PercentPositivePattern:0,PercentNegativePattern:0,NegativeInfinitySymbol:"-Infinity",NegativeSign:"-",NumberDecimalDigits:2,NumberDecimalSeparator:".",NumberGroupSeparator:",",CurrencyPositivePattern:0,PositiveInfinitySymbol:"Infinity",PositiveSign:"+",PercentDecimalDigits:2,PercentDecimalSeparator:".",PercentGroupSeparator:",",PercentSymbol:"%",PerMilleSymbol:"‰",NativeDigits:["0","1","2","3","4","5","6","7","8","9"],DigitSubstitution:1},{AMDesignator:"AM",Calendar:{MinSupportedDateTime:"@-62135568000000@",MaxSupportedDateTime:"@253402300799999@",AlgorithmType:1,CalendarType:1,Eras:[1],TwoDigitYearMax:2029,IsReadOnly:!0},DateSeparator:"/",FirstDayOfWeek:0,CalendarWeekRule:0,FullDateTimePattern:"dddd, dd MMMM yyyy HH:mm:ss",LongDatePattern:"dddd, dd MMMM yyyy",LongTimePattern:"HH:mm:ss",MonthDayPattern:"MMMM dd",PMDesignator:"PM",RFC1123Pattern:"ddd, dd MMM yyyy HH':'mm':'ss 'GMT'",ShortDatePattern:"MM/dd/yyyy",ShortTimePattern:"HH:mm",SortableDateTimePattern:"yyyy'-'MM'-'dd'T'HH':'mm':'ss",TimeSeparator:":",UniversalSortableDateTimePattern:"yyyy'-'MM'-'dd HH':'mm':'ss'Z'",YearMonthPattern:"yyyy MMMM",AbbreviatedDayNames:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],ShortestDayNames:["Su","Mo","Tu","We","Th","Fr","Sa"],DayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],AbbreviatedMonthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec",""],MonthNames:["January","February","March","April","May","June","July","August","September","October","November","December",""],IsReadOnly:!0,NativeCalendarName:"Gregorian Calendar",AbbreviatedMonthGenitiveNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec",""],MonthGenitiveNames:["January","February","March","April","May","June","July","August","September","October","November","December",""]})},e.CurrentCulture=e._getCurrentCulture(),e.InvariantCulture=e._getInvariantCulture(),e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var o=n(37),r=n(3),i=function(){function e(){this._subscribers=[],this.fireEvent=this.fireEvent.bind(this)}return Object.defineProperty(e,"_isIOS",{get:function(){return/iPad|iPhone|iPod/.test(navigator.userAgent)&&!window.MSStream},enumerable:!0,configurable:!0}),Object.defineProperty(e,"pointerDownEvent",{get:function(){return e._isIOS?"touchstart":"pointerdown"},enumerable:!0,configurable:!0}),Object.defineProperty(e,"scrollEvent",{get:function(){return"scroll"},enumerable:!0,configurable:!0}),e.getInstance=function(){return e._instance||(e._instance=new e),e._instance},Object.defineProperty(e.prototype,"subscribers",{get:function(){return this._subscribers},enumerable:!0,configurable:!0}),e.prototype.addSubscribers=function(t){var n=this;setTimeout(function(){(Object(r.c)(n.subscribers)||n.subscribers.length<=0)&&(document.addEventListener(e.pointerDownEvent,n.fireEvent),t.onScroll&&document.addEventListener(e.scrollEvent,n.fireEvent,!0)),n._subscribers.push(t)},100)},e.prototype.removeSubscribers=function(t){this._subscribers=this._subscribers.filter(function(e){return e!==t}),(Object(r.c)(this.subscribers)||this.subscribers.length<=0)&&(document.removeEventListener(e.pointerDownEvent,this.fireEvent),document.removeEventListener(e.scrollEvent,this.fireEvent))},e.prototype.fireEvent=function(t){if(this.subscribers)for(var n=this._subscribers.length-1;n>=0;n--){var r=this.subscribers[n];if(r&&r.getComponent()&&(r.onPointerDown||r.onScroll)&&r.getComponent().offsetHeight>0){var i=r.isClickInsideSubscriber&&r.isClickInsideSubscriber(t);if(r.onPointerDown&&t.type===e.pointerDownEvent&&r.onPointerDown.bind(r,t)(),r.onScroll&&t.type===e.scrollEvent&&r.onScroll.bind(r,t)(),i)break}if(r&&r.type===o.a.Popup)break}},e}()},function(e,t){var n;n=function(){return this}();try{n=n||new Function("return this")()}catch(e){"object"==typeof window&&(n=window)}e.exports=n},function(e,t,n){"use strict";var o=n(60),r=Object.keys||function(e){var t=[];for(var n in e)t.push(n);return t};e.exports=p;var i=n(40);i.inherits=n(36);var s=n(105),a=n(77);i.inherits(p,s);for(var l=r(a.prototype),c=0;c<l.length;c++){var u=l[c];p.prototype[u]||(p.prototype[u]=a.prototype[u])}function p(e){if(!(this instanceof p))return new p(e);s.call(this,e),a.call(this,e),e&&!1===e.readable&&(this.readable=!1),e&&!1===e.writable&&(this.writable=!1),this.allowHalfOpen=!0,e&&!1===e.allowHalfOpen&&(this.allowHalfOpen=!1),this.once("end",d)}function d(){this.allowHalfOpen||this._writableState.ended||o.nextTick(h,this)}function h(e){e.end()}Object.defineProperty(p.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),Object.defineProperty(p.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed&&this._writableState.destroyed)},set:function(e){void 0!==this._readableState&&void 0!==this._writableState&&(this._readableState.destroyed=e,this._writableState.destroyed=e)}}),p.prototype._destroy=function(e,t){this.push(null),this.end(),o.nextTick(t,e)}},function(e,t,n){var o=n(232),r=n(237);e.exports=function(e,t){var n=r(e,t);return o(n)?n:void 0}},function(e,t,n){"use strict";n.d(t,"a",function(){return a});var o=n(1),r=n(14),i=n(7),s=n(2),a=function(){function e(t){this._commandManagerPromises={},this._commandManagerIds=[],this._memoizedProps={},this._datasetWrappers={},this._ownProps=t,this._commandManagerId=t.id+":"+t.controlId,this._externalCommandManagerId=t.externalCommandManagerId,this._externalCommandManagerPromise=t.externalCommandPromise,this._createCommandManagerUXComponent=t.actions.createCommandManagerUXComponent(),e._commandingWrapperMap[this._commandManagerId]=this}return e.prototype.addDataSetWrapper=function(e){var t=e.getLatestData().getViewId(),n=(t=t?t.toLowerCase():"")+":"+e.getEntityTypeName();this._datasetWrappers[n]=e},e.prototype.retrieveRecordCommandForDatasetWrapper=function(e,t,n,o,a,l,c){var u=this,p=this._commandManagerId+":"+t,d=this,h=this._ownProps.contextToken,f=this._ownProps&&this._ownProps.manifest&&this._ownProps.manifest.ConstructorName?this._ownProps.manifest.ConstructorName:null,m=this._ownProps.id;if(!t)return s.default.Diagnostics.traceError(i.a+".Models.CommandingWrapper","Entity Type Name is undefined"),Promise.reject("Entity Type Name is undefined");if(this._externalCommandManagerId)return this._externalCommandInitialized?this._ownProps.actions.retrieveRecordCommand(e,this._externalCommandManagerId,h,n,o,a,l,f,c,m):this._externalCommandManagerPromise&&this._externalCommandManagerPromise.isResolved()?(this._externalCommandInitialized=!0,d._ownProps.actions.retrieveRecordCommand(e,d._externalCommandManagerId,h,n,o,a,l,f,c,m)):this._externalCommandManagerPromise.then(function(){return d._externalCommandInitialized=!0,d._ownProps.actions.retrieveRecordCommand(e,d._externalCommandManagerId,h,n,o,a,l,f,c,m)},function(){var e=new Error("Command bar initialization failed");throw s.default.Reporting.reportFailure(i.a+".Models",e,"Rejected promise",[{name:"etn",value:t},{name:"commandManagerId",value:u._commandManagerId},{name:"APIName",value:i.a+".Models.CommandingWrapper.retrieveRecordCommandForDatasetWrapper"}]),e});if(this._commandManagerPromises[t])return this._commandManagerPromises[t].then(function(){return d._ownProps.actions.retrieveRecordCommand(e,p,h,n,o,a,l,f,c,m)});if(this._commandManagerIds.indexOf(p)>-1)return this._ownProps.actions.retrieveRecordCommand(e,p,h,n,o,a,l,f,c,m);var y=r.a.createPerformanceEvent("CommandingWrapper.CreateCommandManager").startStopwatch({controlId:this._ownProps.controlId,commandManagerId:p}),b=d._ownProps.actions.initializeCommandManager(m,this._ownProps.contextToken,this._ownProps.controlId,p);return this._commandManagerPromises[t]=b,b.then(function(){return y(),d._commandManagerPromises[t]=null,d._ownProps.actions.retrieveRecordCommand(e,p,h,n,o,a,l,f,c,m)})},e.prototype.retrieveRecordCommand=function(e,t,n,o,r,a,l){var c=this._datasetWrappers[(e?e.toLowerCase():"")+":"+t];if(!c)return s.default.Diagnostics.traceError(i.a+".retrieveRecordCommand","No associated dataset, promise rejected"),Promise.reject(0);var u=c.getLatestData().records;return this.retrieveRecordCommandForDatasetWrapper(u,t,n,o,r,a,l)},e.prototype.getRibbonId=function(e,t,n){return("form"!==t.toLowerCase()&&"editform"!==t.toLowerCase()?"HomePageGrid:":n?"SubGridAssociated:":"SubGridStandard:")+e},e.prototype.getDefaultConfigParameters=function(e){if(e.configuration&&e.configuration.Parameters){var t=e.configuration.Parameters;for(var n in t){var r=t[n];if(r.Type===o.ManifestType.Grid||r.Type===o.ManifestType.TimelineWall)return r}}},e.prototype.populateCommandManagerProps=function(e,t,n){var o=this.getDefaultConfigParameters(t),r=n||(o?o.TargetEntityType||o.EntityName:null),i=o?!!o.RelationshipName:null;if(e.id=t.id,void 0===e.ribbonId)if(t.formInfo&&t.formInfo.RibbonId)e.ribbonId=t.formInfo.RibbonId;else{var s=t.pageType.toLowerCase();e.ribbonId=this.getRibbonId(r,s,i)}e.commandManagerId=this._commandManagerId+":"+r,e.key=e.key||this._ownProps.controlId+"-"+r+"-commandbar",e.mainMenuLength=e.mainMenuLength||3,e.contextToken=e.contextToken||t.contextToken,e.customControlType=this._ownProps&&this._ownProps.manifest&&this._ownProps.manifest.ConstructorName?this._ownProps.manifest.ConstructorName:null},e.prototype.createCommandBar=function(e){return this._commandManagerIds.push(e.commandManagerId),this._createCommandManagerUXComponent(e)},e.prototype.createHiddenCommandManager=function(e,t){var n,o=e.split(":")[2];return this._memoizedProps[e]?n=this._memoizedProps[e]:(n={},this._memoizedProps[e]=n,n.isHidden=!0,n.ribbonId=t,n.metaDataLoadedPromise=this._commandManagerPromises[o],this.populateCommandManagerProps(n,this._ownProps,o)),this.createCommandBar(n)},e.getWrapperByCommandManagerId=function(t){return e._commandingWrapperMap[t]},e.prototype.getCommandManagerId=function(){return this._commandManagerId},e.prototype.linkParameterMethod=function(e){e.retrieveRecordCommand=this.retrieveRecordCommandForDatasetWrapper.bind(this,e.records,e.getTargetEntityType())},e.prototype.unmount=function(){delete e._commandingWrapperMap[this._commandManagerId]},e._commandingWrapperMap={},e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return p});var o,r=n(15),i=n(6),s=n(9),a=n(5),l=n(4),c=(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),u=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return c(t,e),t.prototype.getElementName=function(){return"button"},t.prototype.getElementProps=function(){var e={type:"button"};return e[s.a]=this.props.accessKey,this.props.disabled&&(e[s.C]=!0),e},t.prototype.getElementClassName=function(){var t=e.prototype.getElementClassName.call(this);return this.props&&this.props.className&&(t+=" "+this.props.className),t},t.prototype.getFlexClassName=function(e){return Object(r.b)(e?e.display:null)},t.prototype.getElementStyle=function(){if(this.props.style)return Object.assign({},Object(r.a)(this.props.style))},t.displayName="Button",t}(i.a),p=a.connect(l.a)(u)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){for(var o=0,r=e.length;o<r;++o)n=t(n,e[o]);return n},e.exports=t.default},function(e,t){"function"==typeof Object.create?e.exports=function(e,t){e.super_=t,e.prototype=Object.create(t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}})}:e.exports=function(e,t){e.super_=t;var n=function(){};n.prototype=t.prototype,e.prototype=new n,e.prototype.constructor=e}},function(e,t,n){"use strict";var o;n.d(t,"a",function(){return o}),function(e){e[e.Flyout=1]="Flyout",e[e.Popup=2]="Popup"}(o||(o={}))},function(e,t,n){"use strict";n.d(t,"a",function(){return c});var o,r=n(6),i=n(2),s=n(7),a=(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),l=s.a+".Primitive.FontIcon",c=function(e){function t(t){var n=e.call(this,t)||this;if(t&&void 0===t.type){var o=Error("FontIcon type property cannot be null");throw i.default.Reporting.reportFailure(l,o),o}return n}return a(t,e),t.prototype.getElementName=function(){return"span"},t.prototype.getElementClassName=function(){var e=this.props.styles?" "+this.props.styles:"";return this.getSymbolClassName(this.props.type)+e},t.displayName="FontIcon",t}(r.a)},function(e,t){var n,o,r=e.exports={};function i(){throw new Error("setTimeout has not been defined")}function s(){throw new Error("clearTimeout has not been defined")}function a(e){if(n===setTimeout)return setTimeout(e,0);if((n===i||!n)&&setTimeout)return n=setTimeout,setTimeout(e,0);try{return n(e,0)}catch(t){try{return n.call(null,e,0)}catch(t){return n.call(this,e,0)}}}!function(){try{n="function"==typeof setTimeout?setTimeout:i}catch(e){n=i}try{o="function"==typeof clearTimeout?clearTimeout:s}catch(e){o=s}}();var l,c=[],u=!1,p=-1;function d(){u&&l&&(u=!1,l.length?c=l.concat(c):p=-1,c.length&&h())}function h(){if(!u){var e=a(d);u=!0;for(var t=c.length;t;){for(l=c,c=[];++p<t;)l&&l[p].run();p=-1,t=c.length}l=null,u=!1,function(e){if(o===clearTimeout)return clearTimeout(e);if((o===s||!o)&&clearTimeout)return o=clearTimeout,clearTimeout(e);try{o(e)}catch(t){try{return o.call(null,e)}catch(t){return o.call(this,e)}}}(e)}}function f(e,t){this.fun=e,this.array=t}function m(){}r.nextTick=function(e){var t=new Array(arguments.length-1);if(arguments.length>1)for(var n=1;n<arguments.length;n++)t[n-1]=arguments[n];c.push(new f(e,t)),1!==c.length||u||a(h)},f.prototype.run=function(){this.fun.apply(null,this.array)},r.title="browser",r.browser=!0,r.env={},r.argv=[],r.version="",r.versions={},r.on=m,r.addListener=m,r.once=m,r.off=m,r.removeListener=m,r.removeAllListeners=m,r.emit=m,r.prependListener=m,r.prependOnceListener=m,r.listeners=function(e){return[]},r.binding=function(e){throw new Error("process.binding is not supported")},r.cwd=function(){return"/"},r.chdir=function(e){throw new Error("process.chdir is not supported")},r.umask=function(){return 0}},function(e,t,n){(function(e){function n(e){return Object.prototype.toString.call(e)}t.isArray=function(e){return Array.isArray?Array.isArray(e):"[object Array]"===n(e)},t.isBoolean=function(e){return"boolean"==typeof e},t.isNull=function(e){return null===e},t.isNullOrUndefined=function(e){return null==e},t.isNumber=function(e){return"number"==typeof e},t.isString=function(e){return"string"==typeof e},t.isSymbol=function(e){return"symbol"==typeof e},t.isUndefined=function(e){return void 0===e},t.isRegExp=function(e){return"[object RegExp]"===n(e)},t.isObject=function(e){return"object"==typeof e&&null!==e},t.isDate=function(e){return"[object Date]"===n(e)},t.isError=function(e){return"[object Error]"===n(e)||e instanceof Error},t.isFunction=function(e){return"function"==typeof e},t.isPrimitive=function(e){return null===e||"boolean"==typeof e||"number"==typeof e||"string"==typeof e||"symbol"==typeof e||void 0===e},t.isBuffer=e.isBuffer}).call(this,n(75).Buffer)},function(e,t){e.exports=function(e){var t=typeof e;return null!=e&&("object"==t||"function"==t)}},function(e,t){e.exports=function(e){return null!=e&&"object"==typeof e}},function(e,t,n){"use strict";n.d(t,"b",function(){return r}),n.d(t,"a",function(){return m});var o,r,i=n(0),s=n(10),a=n(8),l=n(25),c=n(29),u=n(37),p=(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),d=function(){return(d=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)};function h(e,t){return{display:e?t.display?t.display:"flex":"none"}}!function(e){e[e.Root=1]="Root",e[e.Nested=2]="Nested"}(r||(r={}));var f={position:"absolute",top:0,left:0,width:Math.max(document.documentElement.clientWidth,window.innerWidth||0),height:Math.max(document.documentElement.clientHeight,window.innerHeight||0),backgroundColor:"rgba(0, 0, 0, 0.3)"},m=function(e){function t(t){var n=e.call(this,t)||this;return n._rootElement=null,n._popupElement=null,n._stopPropagation=function(e){e.stopPropagation()},n._forceClosePopup=function(e){n._stopPropagation(e),n.props.closeOnOutsideClick&&(n.setState({forceClose:!0}),n.props.onPopupForcedClosed&&n.props.onPopupForcedClosed())},n.state={forceClose:!1},n._rootElement=document.getElementById(t.rootPopupId),n}return p(t,e),t.prototype._getId=function(){return this.props.rootPopupId+"_"+(this.props.id||"innerPopup")},t.prototype._getCurrentPopupToOpen=function(e,t){var n="";!e&&t&&(n=t.split(".")[0]);return n},t.prototype._getNextPopupToOpen=function(e,t){var n="";if(!e&&t){var o=t.split(".");o.splice(0,1),n=o.join(".")}return n},t.prototype._getChildrenProps=function(){return{type:r.Nested,parent:this._popupElement,popupToOpen:this._getNextPopupToOpen(this.state.forceClose,this.props.popupToOpen),rootPopupId:this.props.rootPopupId}},t.prototype._getChildrenWithProps=function(e){var n=this;return e?e.map?e.map(function(e){return e.type===t?i.cloneElement(e,n._getChildrenProps()):e}):e===t?i.cloneElement(e,this._getChildrenProps()):e:null},t.prototype._isVisible=function(){return this._getCurrentPopupToOpen(this.state.forceClose,this.props.popupToOpen)===this.props.name},t.prototype._applyRootNodeStyle=function(){Object.assign(this._rootElement.style,this.props.rootStyle),this._toggleRootElementVisibility()},t.prototype._toggleRootElementVisibility=function(){this.props.isDialogPopup||(this._rootElement.getAttribute(l.a)?"none"===this._rootElement.style.display&&(this._rootElement.style.display="flex"):this._rootElement.style.display="none")},t.prototype._getStaticContent=function(){var e=null;return this.props.content&&(e=i.createElement(a.a,{ref:"staticContent"})),e},t.prototype._registerPopup=function(e,t){var n=e.name,o=e.popupToOpen,r=t.forceClose,i=this._rootElement.getAttribute(l.a),s=(i=i||"").indexOf(n);r||n!==this._getCurrentPopupToOpen(r,o)?~s&&this._rootElement.setAttribute(l.a,i.replace("."+n,"")):~s||this._rootElement.setAttribute(l.a,i.concat("."+n))},t.prototype._subscribeFlyoutPopupManager=function(){var e=this;this._managerSubscriber={type:u.a.Popup,onPointerDown:function(t){t.target===document.getElementById(e._getId())&&e._forceClosePopup(t)},getComponent:function(){return e._popupElement}},c.a.getInstance().addSubscribers(this._managerSubscriber)},t.prototype.componentWillMount=function(){this.props.isDialogPopup||this._registerPopup(this.props,this.state)},t.prototype.componentDidMount=function(){var e=this;this._popupElement=s.findDOMNode(this.refs.popup),this.forceUpdate(function(){var t=e.refs.staticContent;t&&s.findDOMNode(t).appendChild(e.props.content)}),this._subscribeFlyoutPopupManager()},t.prototype.componentWillReceiveProps=function(){this.setState({forceClose:!1})},t.prototype.componentWillUpdate=function(e,t){this._registerPopup(e,t);var n=this.refs.staticContent;if(n){for(var o=s.findDOMNode(n);o.firstChild;)o.removeChild(o.firstChild);o.appendChild(e.content)}},t.prototype.componentWillUnmount=function(){c.a.getInstance().removeSubscribers(this._managerSubscriber)},t.prototype.render=function(){var e,t,n,o,r,s,l=this.props.isDialogPopup?this.props.style:Object.assign({},this.props.style,(n=this.props.shadowStyle,o=this.props.parent,r=Object.assign({},n),(s=o&&o.getBoundingClientRect())&&(r.top=parseInt(r.top,10)-s.top+"px",r.left=parseInt(r.left,10)-s.left+"px"),r),h(this._isVisible(),this.props.shadowStyle)),u=Object.assign({},this.props.popupStyle,this.props.isDialogPopup?{}:h(this._isVisible(),this.props.popupStyle));this._applyRootNodeStyle();var p=((e={})[c.a.pointerDownEvent]=this._forceClosePopup,e),f=((t={})[c.a.pointerDownEvent]=this._stopPropagation,t);return i.createElement(a.a,d({id:this._getId(),style:l},p),i.createElement(a.a,d({style:u},f,{ref:"popup"}),this._getStaticContent(),this._getChildrenWithProps(this.props.children)))},t}(i.Component);m.defaultProps={shadowStyle:f,isDialogPopup:!1,type:r.Root,closeOnOutsideClick:!1}},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var o=n(1),r=n(12),i=function(){function e(){}return e.registerToLearningPath=function(e,t,n){e&&t&&n&&e.setAttribute(t,n)},e.getLearningPathControlId=function(t){if(!t.configuration)return null;var n=t.configuration.CustomControlId+"|"+t.controlId;switch(t.personalizationConfiguration&&(n+="|"+t.personalizationConfiguration.entityTypeName),Object(r.e)(t.configuration.CustomControlId)){case r.a.GridContainer:case r.a.ChartControl:case r.a.CalendarControl:n+=e._generateLpControlIdForccDataSetControl(t);break;case r.a.DashboardContainer:case r.a.QuickCreateForm:t.personalizationConfiguration&&t.personalizationConfiguration.formGuid&&(n+="|"+t.personalizationConfiguration.formGuid.guid);break;case r.a.WebresourceControl:n+=e._generateLpControlIdForWebresource(t);break;case r.a.FieldSectionContainer:case r.a.TimelineContainer:case r.a.DummyControl:}return n},e._generateLpControlIdForWebresource=function(e){var t="",n=e.configuration.Parameters;for(var r in n){var i=n[r];if(i.Type===o.ManifestType.WebResourceHtmlControl)t+="|"+i.ControlId}return t},e._generateLpControlIdForccDataSetControl=function(e){var t="",n=e.configuration.Parameters;for(var r in n){var i=n[r];if(i.Type===o.ManifestType.Grid){var s=i;s.ViewId&&(t+="|"+s.ViewId),s.VisualizationId&&(t+="|"+s.VisualizationId),s.EntityName&&(t+="|"+s.EntityName),s.RelationshipName&&(t+="|"+s.RelationshipName)}}return t},e.LEARNING_PATH_ATTRIBUTE="data-lp-id",e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var o={ERROR_LOADING_CONTROL:"Error loading control",VALIDATION_FAILED_EMAIL:"Value is not a valid email",VALIDATION_FAILED_BOOL:"Value is not a valid boolean",VALIDATION_FAILED_DATE:"Value is not a valid Date object",VALIDATION_FAILED_NUM:"Value is not a valid number",VALIDATION_FAILED_INT:"Number is not a valid integer",VALIDATION_FAILED_RANGE:"Value is not within the defined range for this property. Range is {0} to {1}",SELECT_TO_ENTER_DATA:"Select to enter data."},r=o;function i(e){return r[e]}},function(e,t,n){"use strict";n.d(t,"c",function(){return o}),n.d(t,"b",function(){return r}),n.d(t,"a",function(){return i}),n.d(t,"d",function(){return s});var o="layout",r="fullscreen_open",i="fullscreen_close",s="parameters"},function(e,t,n){(function(){var t,o,r,i,s,a={}.hasOwnProperty;s=n(26),i=s.isObject,r=s.isFunction,o=n(16),t=n(102),e.exports=function(e){function n(e,t,o){if(n.__super__.constructor.call(this,e),null==t)throw new Error("Missing element name");this.name=this.stringify.eleName(t),this.attributes={},null!=o&&this.attribute(o),e.isDocument&&(this.isRoot=!0,this.documentObject=e,e.rootObject=this)}return function(e,t){for(var n in t)a.call(t,n)&&(e[n]=t[n]);function o(){this.constructor=e}o.prototype=t.prototype,e.prototype=new o,e.__super__=t.prototype}(n,o),n.prototype.clone=function(){var e,t,n,o;for(t in(n=Object.create(this)).isRoot&&(n.documentObject=null),n.attributes={},o=this.attributes)a.call(o,t)&&(e=o[t],n.attributes[t]=e.clone());return n.children=[],this.children.forEach(function(e){var t;return(t=e.clone()).parent=n,n.children.push(t)}),n},n.prototype.attribute=function(e,n){var o,s;if(null!=e&&(e=e.valueOf()),i(e))for(o in e)a.call(e,o)&&(s=e[o],this.attribute(o,s));else r(n)&&(n=n.apply()),this.options.skipNullAttributes&&null==n||(this.attributes[e]=new t(this,e,n));return this},n.prototype.removeAttribute=function(e){var t,n,o;if(null==e)throw new Error("Missing attribute name");if(e=e.valueOf(),Array.isArray(e))for(n=0,o=e.length;n<o;n++)t=e[n],delete this.attributes[t];else delete this.attributes[e];return this},n.prototype.toString=function(e){return this.options.writer.set(e).element(this)},n.prototype.att=function(e,t){return this.attribute(e,t)},n.prototype.a=function(e,t){return this.attribute(e,t)},n}()}).call(this)},function(e,t,n){(function(){var t,o={}.hasOwnProperty;t=n(16),e.exports=function(e){function n(e,t){if(n.__super__.constructor.call(this,e),null==t)throw new Error("Missing CDATA text");this.text=this.stringify.cdata(t)}return function(e,t){for(var n in t)o.call(t,n)&&(e[n]=t[n]);function r(){this.constructor=e}r.prototype=t.prototype,e.prototype=new r,e.__super__=t.prototype}(n,t),n.prototype.clone=function(){return Object.create(this)},n.prototype.toString=function(e){return this.options.writer.set(e).cdata(this)},n}()}).call(this)},function(e,t,n){(function(){var t,o={}.hasOwnProperty;t=n(16),e.exports=function(e){function n(e,t){if(n.__super__.constructor.call(this,e),null==t)throw new Error("Missing comment text");this.text=this.stringify.comment(t)}return function(e,t){for(var n in t)o.call(t,n)&&(e[n]=t[n]);function r(){this.constructor=e}r.prototype=t.prototype,e.prototype=new r,e.__super__=t.prototype}(n,t),n.prototype.clone=function(){return Object.create(this)},n.prototype.toString=function(e){return this.options.writer.set(e).comment(this)},n}()}).call(this)},function(e,t,n){(function(){var t,o,r={}.hasOwnProperty;o=n(26).isObject,t=n(16),e.exports=function(e){function n(e,t,r,i){var s;n.__super__.constructor.call(this,e),o(t)&&(t=(s=t).version,r=s.encoding,i=s.standalone),t||(t="1.0"),this.version=this.stringify.xmlVersion(t),null!=r&&(this.encoding=this.stringify.xmlEncoding(r)),null!=i&&(this.standalone=this.stringify.xmlStandalone(i))}return function(e,t){for(var n in t)r.call(t,n)&&(e[n]=t[n]);function o(){this.constructor=e}o.prototype=t.prototype,e.prototype=new o,e.__super__=t.prototype}(n,t),n.prototype.toString=function(e){return this.options.writer.set(e).declaration(this)},n}()}).call(this)},function(e,t,n){(function(){var t,o,r,i,s,a,l={}.hasOwnProperty;a=n(26).isObject,s=n(16),t=n(52),r=n(53),o=n(54),i=n(55),e.exports=function(e){function n(e,t,o){var r,i;n.__super__.constructor.call(this,e),this.documentObject=e,a(t)&&(t=(r=t).pubID,o=r.sysID),null==o&&(o=(i=[t,o])[0],t=i[1]),null!=t&&(this.pubID=this.stringify.dtdPubID(t)),null!=o&&(this.sysID=this.stringify.dtdSysID(o))}return function(e,t){for(var n in t)l.call(t,n)&&(e[n]=t[n]);function o(){this.constructor=e}o.prototype=t.prototype,e.prototype=new o,e.__super__=t.prototype}(n,s),n.prototype.element=function(e,t){var n;return n=new o(this,e,t),this.children.push(n),this},n.prototype.attList=function(e,n,o,r,i){var s;return s=new t(this,e,n,o,r,i),this.children.push(s),this},n.prototype.entity=function(e,t){var n;return n=new r(this,!1,e,t),this.children.push(n),this},n.prototype.pEntity=function(e,t){var n;return n=new r(this,!0,e,t),this.children.push(n),this},n.prototype.notation=function(e,t){var n;return n=new i(this,e,t),this.children.push(n),this},n.prototype.toString=function(e){return this.options.writer.set(e).docType(this)},n.prototype.ele=function(e,t){return this.element(e,t)},n.prototype.att=function(e,t,n,o,r){return this.attList(e,t,n,o,r)},n.prototype.ent=function(e,t){return this.entity(e,t)},n.prototype.pent=function(e,t){return this.pEntity(e,t)},n.prototype.not=function(e,t){return this.notation(e,t)},n.prototype.up=function(){return this.root()||this.documentObject},n}()}).call(this)},function(e,t,n){(function(){var t,o={}.hasOwnProperty;t=n(16),e.exports=function(e){function n(e,t,o,r,i,s){if(n.__super__.constructor.call(this,e),null==t)throw new Error("Missing DTD element name");if(null==o)throw new Error("Missing DTD attribute name");if(!r)throw new Error("Missing DTD attribute type");if(!i)throw new Error("Missing DTD attribute default");if(0!==i.indexOf("#")&&(i="#"+i),!i.match(/^(#REQUIRED|#IMPLIED|#FIXED|#DEFAULT)$/))throw new Error("Invalid default value type; expected: #REQUIRED, #IMPLIED, #FIXED or #DEFAULT");if(s&&!i.match(/^(#FIXED|#DEFAULT)$/))throw new Error("Default value only applies to #FIXED or #DEFAULT");this.elementName=this.stringify.eleName(t),this.attributeName=this.stringify.attName(o),this.attributeType=this.stringify.dtdAttType(r),this.defaultValue=this.stringify.dtdAttDefault(s),this.defaultValueType=i}return function(e,t){for(var n in t)o.call(t,n)&&(e[n]=t[n]);function r(){this.constructor=e}r.prototype=t.prototype,e.prototype=new r,e.__super__=t.prototype}(n,t),n.prototype.toString=function(e){return this.options.writer.set(e).dtdAttList(this)},n}()}).call(this)},function(e,t,n){(function(){var t,o,r={}.hasOwnProperty;o=n(26).isObject,t=n(16),e.exports=function(e){function n(e,t,r,i){if(n.__super__.constructor.call(this,e),null==r)throw new Error("Missing entity name");if(null==i)throw new Error("Missing entity value");if(this.pe=!!t,this.name=this.stringify.eleName(r),o(i)){if(!i.pubID&&!i.sysID)throw new Error("Public and/or system identifiers are required for an external entity");if(i.pubID&&!i.sysID)throw new Error("System identifier is required for a public external entity");if(null!=i.pubID&&(this.pubID=this.stringify.dtdPubID(i.pubID)),null!=i.sysID&&(this.sysID=this.stringify.dtdSysID(i.sysID)),null!=i.nData&&(this.nData=this.stringify.dtdNData(i.nData)),this.pe&&this.nData)throw new Error("Notation declaration is not allowed in a parameter entity")}else this.value=this.stringify.dtdEntityValue(i)}return function(e,t){for(var n in t)r.call(t,n)&&(e[n]=t[n]);function o(){this.constructor=e}o.prototype=t.prototype,e.prototype=new o,e.__super__=t.prototype}(n,t),n.prototype.toString=function(e){return this.options.writer.set(e).dtdEntity(this)},n}()}).call(this)},function(e,t,n){(function(){var t,o={}.hasOwnProperty;t=n(16),e.exports=function(e){function n(e,t,o){if(n.__super__.constructor.call(this,e),null==t)throw new Error("Missing DTD element name");o||(o="(#PCDATA)"),Array.isArray(o)&&(o="("+o.join(",")+")"),this.name=this.stringify.eleName(t),this.value=this.stringify.dtdElementValue(o)}return function(e,t){for(var n in t)o.call(t,n)&&(e[n]=t[n]);function r(){this.constructor=e}r.prototype=t.prototype,e.prototype=new r,e.__super__=t.prototype}(n,t),n.prototype.toString=function(e){return this.options.writer.set(e).dtdElement(this)},n}()}).call(this)},function(e,t,n){(function(){var t,o={}.hasOwnProperty;t=n(16),e.exports=function(e){function n(e,t,o){if(n.__super__.constructor.call(this,e),null==t)throw new Error("Missing notation name");if(!o.pubID&&!o.sysID)throw new Error("Public or system identifiers are required for an external entity");this.name=this.stringify.eleName(t),null!=o.pubID&&(this.pubID=this.stringify.dtdPubID(o.pubID)),null!=o.sysID&&(this.sysID=this.stringify.dtdSysID(o.sysID))}return function(e,t){for(var n in t)o.call(t,n)&&(e[n]=t[n]);function r(){this.constructor=e}r.prototype=t.prototype,e.prototype=new r,e.__super__=t.prototype}(n,t),n.prototype.toString=function(e){return this.options.writer.set(e).dtdNotation(this)},n}()}).call(this)},function(e,t,n){(function(){var t,o={}.hasOwnProperty;t=n(16),e.exports=function(e){function n(e,t){if(n.__super__.constructor.call(this,e),null==t)throw new Error("Missing raw text");this.value=this.stringify.raw(t)}return function(e,t){for(var n in t)o.call(t,n)&&(e[n]=t[n]);function r(){this.constructor=e}r.prototype=t.prototype,e.prototype=new r,e.__super__=t.prototype}(n,t),n.prototype.clone=function(){return Object.create(this)},n.prototype.toString=function(e){return this.options.writer.set(e).raw(this)},n}()}).call(this)},function(e,t,n){(function(){var t,o={}.hasOwnProperty;t=n(16),e.exports=function(e){function n(e,t){if(n.__super__.constructor.call(this,e),null==t)throw new Error("Missing element text");this.value=this.stringify.eleText(t)}return function(e,t){for(var n in t)o.call(t,n)&&(e[n]=t[n]);function r(){this.constructor=e}r.prototype=t.prototype,e.prototype=new r,e.__super__=t.prototype}(n,t),n.prototype.clone=function(){return Object.create(this)},n.prototype.toString=function(e){return this.options.writer.set(e).text(this)},n}()}).call(this)},function(e,t,n){(function(){var t,o={}.hasOwnProperty;t=n(16),e.exports=function(e){function n(e,t,o){if(n.__super__.constructor.call(this,e),null==t)throw new Error("Missing instruction target");this.target=this.stringify.insTarget(t),o&&(this.value=this.stringify.insValue(o))}return function(e,t){for(var n in t)o.call(t,n)&&(e[n]=t[n]);function r(){this.constructor=e}r.prototype=t.prototype,e.prototype=new r,e.__super__=t.prototype}(n,t),n.prototype.clone=function(){return Object.create(this)},n.prototype.toString=function(e){return this.options.writer.set(e).processingInstruction(this)},n}()}).call(this)},function(e,t,n){"use strict";var o,r="object"==typeof Reflect?Reflect:null,i=r&&"function"==typeof r.apply?r.apply:function(e,t,n){return Function.prototype.apply.call(e,t,n)};o=r&&"function"==typeof r.ownKeys?r.ownKeys:Object.getOwnPropertySymbols?function(e){return Object.getOwnPropertyNames(e).concat(Object.getOwnPropertySymbols(e))}:function(e){return Object.getOwnPropertyNames(e)};var s=Number.isNaN||function(e){return e!=e};function a(){a.init.call(this)}e.exports=a,a.EventEmitter=a,a.prototype._events=void 0,a.prototype._eventsCount=0,a.prototype._maxListeners=void 0;var l=10;function c(e){return void 0===e._maxListeners?a.defaultMaxListeners:e._maxListeners}function u(e,t,n,o){var r,i,s,a;if("function"!=typeof n)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof n);if(void 0===(i=e._events)?(i=e._events=Object.create(null),e._eventsCount=0):(void 0!==i.newListener&&(e.emit("newListener",t,n.listener?n.listener:n),i=e._events),s=i[t]),void 0===s)s=i[t]=n,++e._eventsCount;else if("function"==typeof s?s=i[t]=o?[n,s]:[s,n]:o?s.unshift(n):s.push(n),(r=c(e))>0&&s.length>r&&!s.warned){s.warned=!0;var l=new Error("Possible EventEmitter memory leak detected. "+s.length+" "+String(t)+" listeners added. Use emitter.setMaxListeners() to increase limit");l.name="MaxListenersExceededWarning",l.emitter=e,l.type=t,l.count=s.length,a=l,console&&console.warn&&console.warn(a)}return e}function p(e,t,n){var o={fired:!1,wrapFn:void 0,target:e,type:t,listener:n},r=function(){for(var e=[],t=0;t<arguments.length;t++)e.push(arguments[t]);this.fired||(this.target.removeListener(this.type,this.wrapFn),this.fired=!0,i(this.listener,this.target,e))}.bind(o);return r.listener=n,o.wrapFn=r,r}function d(e,t,n){var o=e._events;if(void 0===o)return[];var r=o[t];return void 0===r?[]:"function"==typeof r?n?[r.listener||r]:[r]:n?function(e){for(var t=new Array(e.length),n=0;n<t.length;++n)t[n]=e[n].listener||e[n];return t}(r):f(r,r.length)}function h(e){var t=this._events;if(void 0!==t){var n=t[e];if("function"==typeof n)return 1;if(void 0!==n)return n.length}return 0}function f(e,t){for(var n=new Array(t),o=0;o<t;++o)n[o]=e[o];return n}Object.defineProperty(a,"defaultMaxListeners",{enumerable:!0,get:function(){return l},set:function(e){if("number"!=typeof e||e<0||s(e))throw new RangeError('The value of "defaultMaxListeners" is out of range. It must be a non-negative number. Received '+e+".");l=e}}),a.init=function(){void 0!==this._events&&this._events!==Object.getPrototypeOf(this)._events||(this._events=Object.create(null),this._eventsCount=0),this._maxListeners=this._maxListeners||void 0},a.prototype.setMaxListeners=function(e){if("number"!=typeof e||e<0||s(e))throw new RangeError('The value of "n" is out of range. It must be a non-negative number. Received '+e+".");return this._maxListeners=e,this},a.prototype.getMaxListeners=function(){return c(this)},a.prototype.emit=function(e){for(var t=[],n=1;n<arguments.length;n++)t.push(arguments[n]);var o="error"===e,r=this._events;if(void 0!==r)o=o&&void 0===r.error;else if(!o)return!1;if(o){var s;if(t.length>0&&(s=t[0]),s instanceof Error)throw s;var a=new Error("Unhandled error."+(s?" ("+s.message+")":""));throw a.context=s,a}var l=r[e];if(void 0===l)return!1;if("function"==typeof l)i(l,this,t);else{var c=l.length,u=f(l,c);for(n=0;n<c;++n)i(u[n],this,t)}return!0},a.prototype.addListener=function(e,t){return u(this,e,t,!1)},a.prototype.on=a.prototype.addListener,a.prototype.prependListener=function(e,t){return u(this,e,t,!0)},a.prototype.once=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.on(e,p(this,e,t)),this},a.prototype.prependOnceListener=function(e,t){if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);return this.prependListener(e,p(this,e,t)),this},a.prototype.removeListener=function(e,t){var n,o,r,i,s;if("function"!=typeof t)throw new TypeError('The "listener" argument must be of type Function. Received type '+typeof t);if(void 0===(o=this._events))return this;if(void 0===(n=o[e]))return this;if(n===t||n.listener===t)0==--this._eventsCount?this._events=Object.create(null):(delete o[e],o.removeListener&&this.emit("removeListener",e,n.listener||t));else if("function"!=typeof n){for(r=-1,i=n.length-1;i>=0;i--)if(n[i]===t||n[i].listener===t){s=n[i].listener,r=i;break}if(r<0)return this;0===r?n.shift():function(e,t){for(;t+1<e.length;t++)e[t]=e[t+1];e.pop()}(n,r),1===n.length&&(o[e]=n[0]),void 0!==o.removeListener&&this.emit("removeListener",e,s||t)}return this},a.prototype.off=a.prototype.removeListener,a.prototype.removeAllListeners=function(e){var t,n,o;if(void 0===(n=this._events))return this;if(void 0===n.removeListener)return 0===arguments.length?(this._events=Object.create(null),this._eventsCount=0):void 0!==n[e]&&(0==--this._eventsCount?this._events=Object.create(null):delete n[e]),this;if(0===arguments.length){var r,i=Object.keys(n);for(o=0;o<i.length;++o)"removeListener"!==(r=i[o])&&this.removeAllListeners(r);return this.removeAllListeners("removeListener"),this._events=Object.create(null),this._eventsCount=0,this}if("function"==typeof(t=n[e]))this.removeListener(e,t);else if(void 0!==t)for(o=t.length-1;o>=0;o--)this.removeListener(e,t[o]);return this},a.prototype.listeners=function(e){return d(this,e,!0)},a.prototype.rawListeners=function(e){return d(this,e,!1)},a.listenerCount=function(e,t){return"function"==typeof e.listenerCount?e.listenerCount(t):h.call(e,t)},a.prototype.listenerCount=h,a.prototype.eventNames=function(){return this._eventsCount>0?o(this._events):[]}},function(e,t,n){"use strict";(function(t){!t.version||0===t.version.indexOf("v0.")||0===t.version.indexOf("v1.")&&0!==t.version.indexOf("v1.8.")?e.exports={nextTick:function(e,n,o,r){if("function"!=typeof e)throw new TypeError('"callback" argument must be a function');var i,s,a=arguments.length;switch(a){case 0:case 1:return t.nextTick(e);case 2:return t.nextTick(function(){e.call(null,n)});case 3:return t.nextTick(function(){e.call(null,n,o)});case 4:return t.nextTick(function(){e.call(null,n,o,r)});default:for(i=new Array(a-1),s=0;s<i.length;)i[s++]=arguments[s];return t.nextTick(function(){e.apply(null,i)})}}}:e.exports=t}).call(this,n(39))},function(e,t,n){var o=n(75),r=o.Buffer;function i(e,t){for(var n in e)t[n]=e[n]}function s(e,t,n){return r(e,t,n)}r.from&&r.alloc&&r.allocUnsafe&&r.allocUnsafeSlow?e.exports=o:(i(o,t),t.Buffer=s),i(r,s),s.from=function(e,t,n){if("number"==typeof e)throw new TypeError("Argument must not be a number");return r(e,t,n)},s.alloc=function(e,t,n){if("number"!=typeof e)throw new TypeError("Argument must be a number");var o=r(e);return void 0!==t?"string"==typeof n?o.fill(t,n):o.fill(t):o.fill(0),o},s.allocUnsafe=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return r(e)},s.allocUnsafeSlow=function(e){if("number"!=typeof e)throw new TypeError("Argument must be a number");return o.SlowBuffer(e)}},function(e,t,n){"use strict";var o,r;Object.defineProperty(t,"__esModule",{value:!0}),t.DefaultEntity={EntityLogicalName:"account",EntityDisplayName:"Account",ViewId:"account_view",Title:"All Accounts",ColumnsOnView:[{LogicalName:"name",DisplayName:"Account Name",DataType:"SingleLine.Text",IsPrimary:!0},{LogicalName:"telephone1",DisplayName:"Main Phone",DataType:"SingleLine.Phone"},{LogicalName:"address1_city",DisplayName:"Address 1: City",DataType:"SingleLine.Text"}]},t.DefaultColumns=(o=t.DefaultEntity,r={},o.ColumnsOnView.forEach(function(e){r[e.LogicalName]={Required:!0,DefaultValue:void 0,Usage:1,Hidden:!1,Static:!0,Type:e.DataType,TypeGroup:void 0,EnumValues:[],IsPrimary:!!e.IsPrimary}}),r)},function(e,t,n){var o=n(222),r=n(223),i=n(224),s=n(225),a=n(226);function l(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var o=e[t];this.set(o[0],o[1])}}l.prototype.clear=o,l.prototype.delete=r,l.prototype.get=i,l.prototype.has=s,l.prototype.set=a,e.exports=l},function(e,t,n){var o=n(114);e.exports=function(e,t){for(var n=e.length;n--;)if(o(e[n][0],t))return n;return-1}},function(e,t,n){var o=n(81),r=n(233),i=n(234),s="[object Null]",a="[object Undefined]",l=o?o.toStringTag:void 0;e.exports=function(e){return null==e?void 0===e?a:s:l&&l in Object(e)?r(e):i(e)}},function(e,t,n){var o=n(32)(Object,"create");e.exports=o},function(e,t,n){var o=n(247);e.exports=function(e,t){var n=e.__data__;return o(t)?n["string"==typeof t?"string":"hash"]:n.map}},function(e,t,n){var o=n(118),r=n(119);e.exports=function(e,t,n,i){var s=!n;n||(n={});for(var a=-1,l=t.length;++a<l;){var c=t[a],u=i?i(n[c],e[c],c,n,e):void 0;void 0===u&&(u=e[c]),s?r(n,c,u):o(n,c,u)}return n}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(101),r=n(187).parseString,i=n(111),s=n(20),a=n(23);function l(e,t){return new Promise(function(n,o){t(e).then(function(t){r(t,function(t,r){t?o(s.translateA(a.strings.error_parse_resource_string.key,[e])+": "+t.message):(r&&r.root&&r.root.data&&r.root.data.forEach(function(e){i.ResourceStrings[e.$.name]=e.value[0]}),n())})})})}function c(e){return new Promise(function(t,n){var o=new XMLHttpRequest;o.open("GET",e,!0),o.onreadystatechange=function(){o.readyState===XMLHttpRequest.DONE&&(200===o.status?t(o.responseText):n(s.translateA(a.strings.error_http_get_resource.key,[e,o.status])+": "+o.statusText))},o.send()})}t.LoadManifest=function(e){var t={};return new Promise(function(n,o){e("ControlManifest.xml").then(function(e){r(e,function(e,r){if(e||!r)o(s.translate(a.strings.error_parsing_control_manifest.key));else{var i=r.manifest.control[0];t.manifest={control:i},t.manifest.control.resources=i.resources[0],n(t)}})},function(e){o(e)})})},t.ProcessResourcesInOrder=function(e,t){var n=Promise.resolve();return e&&e.length>0&&e.sort(function(e,t){return e.LoadOrder-t.LoadOrder}).forEach(function(e){n=n.then(function(){return t(e.Name,document)})}),n},t.loadResourceFile=function(e,t){return new Promise(function(n,r){var i=o.extname(e),u=function(){console.log(s.translateA(a.strings.resource_file_loaded.key,[e])),n()},p=function(t){var n=s.translateA(a.strings.error_resource_load.key,[e])+(t?": "+t:"");console.warn(n),r(n)};switch(i){case".js":var d=t.createElement("script");d.src=e,d.type="text/javascript",d.onload=u,d.onerror=p,t.getElementsByTagName("head")[0].appendChild(d);break;case".css":var h=t.createElement("link");h.rel="stylesheet",h.type="text/css",h.href=e,h.media="all",h.onload=u,h.onerror=p,t.getElementsByTagName("head")[0].appendChild(h);break;case".png":case".jpg":case".jpeg":var f=t.createElement("img");f.src=e,f.alt="Control's image resource",f.onload=u,f.onerror=p,t.getElementsByTagName("head")[0].appendChild(f);break;case".resx":l(e,c).then(u,function(e){p(e)});break;default:console.warn(s.translateA(a.strings.error_resource_type_not_supported.key,[e,i])),n()}})},t.loadResourceStrings=l,t.getResourceInvoker=c},function(e,t,n){"use strict";n.r(t);var o=function(){function e(){}return e._getValueFromDictionary=function(e,t){return e[t]},e._toFormattedString=function(e,t,n){if(!t||0===t.length||"i"===t)return n&&n.name.length>0?this.toLocaleString():this.toString();function o(e,t,n){for(var o=e.length;o<t;o++)e=n?"0"+e:e+"0";return e}function r(e,t,n,r,i){var s=n[0],a=1,l=Math.pow(10,t),c=Math.round(e*l)/l;isFinite(c)||(c=e);var u,p=(e=c).toString(),d="",h=p.split(/e/i);p=h[0],u=h.length>1?parseInt(h[1],10):0,h=p.split("."),p=h[0],d=h.length>1?h[1]:"",u>0?(p+=(d=o(d,u,!1)).slice(0,u),d=d.substr(u)):u<0&&(d=(p=o(p,(u=-u)+1,!0)).slice(-u,p.length)+d,p=p.slice(0,-u)),d=t>0?i+(d=d.length>t?d.slice(0,t):o(d,t,!1)):"";for(var f=p.length-1,m="";f>=0;){if(0===s||s>f)return m.length>0?p.slice(0,f+1)+r+m+d:p.slice(0,f+1)+d;m=m.length>0?p.slice(f-s+1,f+1)+r+m:p.slice(f-s+1,f+1),f-=s,a<n.length&&(s=n[a],a++)}return p.slice(0,f+1)+r+m+d}var i=n.numberFormat,s=Math.abs(e).toString();t||(t="D");var a,l=-1;switch(t.length>1&&(l=parseInt(t.slice(1),10)),t.charAt(0)){case"d":case"D":a="n",-1!==l&&(s=o(""+s,l,!0)),e<0&&(s=(-s).toString());break;case"c":case"C":a=e<0?["($n)","-$n","$-n","$n-","(n$)","-n$","n-$","n$-","-n $","-$ n","n $-","$ n-","$ -n","n- $","($ n)","(n $)"][this._getValueFromDictionary(i,"CurrencyNegativePattern")]:["$n","n$","$ n","n $"][this._getValueFromDictionary(i,"CurrencyPositivePattern")],-1===l&&(l=this._getValueFromDictionary(i,"CurrencyDecimalDigits")),s=r(Math.abs(e),l,this._getValueFromDictionary(i,"CurrencyGroupSizes"),this._getValueFromDictionary(i,"CurrencyGroupSeparator"),this._getValueFromDictionary(i,"CurrencyDecimalSeparator"));break;case"n":case"N":a=e<0?["(n)","-n","- n","n-","n -"][this._getValueFromDictionary(i,"NumberNegativePattern")]:"n",-1===l&&(l=this._getValueFromDictionary(i,"NumberDecimalDigits")),s=r(Math.abs(e),l,this._getValueFromDictionary(i,"NumberGroupSizes"),this._getValueFromDictionary(i,"NumberGroupSeparator"),this._getValueFromDictionary(i,"NumberDecimalSeparator"));break;case"p":case"P":a=e<0?["-n %","-n%","-%n"][this._getValueFromDictionary(i,"PercentNegativePattern")]:["n %","n%","%n"][this._getValueFromDictionary(i,"PercentPositivePattern")],-1===l&&(l=this._getValueFromDictionary(i,"PercentDecimalDigits")),s=r(100*Math.abs(e),l,this._getValueFromDictionary(i,"PercentGroupSizes"),this._getValueFromDictionary(i,"PercentGroupSeparator"),this._getValueFromDictionary(i,"PercentDecimalSeparator"));break;default:throw Error("Res.formatBadFormatSpecifier")}for(var c=/n|\$|-|%/g,u="";;){var p=c.lastIndex,d=c.exec(a);if(u+=a.slice(p,d?d.index:a.length),!d)break;switch(d[0]){case"n":u+=s;break;case"$":u+=this._getValueFromDictionary(i,"CurrencySymbol");break;case"-":/[1-9]/.test(s)&&(u+=this._getValueFromDictionary(i,"NegativeSign"));break;case"%":u+=this._getValueFromDictionary(i,"PercentSymbol");break;default:throw Error("Invalid number format pattern")}}return u},e.localeFormat=function(e,t,n){return this._toFormattedString(e,t,n)},e}(),r=String.fromCharCode(41);function i(e,t,n){return o.localeFormat(e,"N"+(null!=n?n:function(e){return a(e,"NumberDecimalDigits")}(t)),t)}function s(e,t,n){var o=Math.abs(e);return String.format(function(e){switch(e){case 1:return"-{0}";case 2:return"-"+r+"{0}";case 3:return"{0}-";case 4:return"{0}"+r+"-";default:return"({0})"}}(a(t,"NumberNegativePattern")),i(o,t,n))}function a(e,t){return e.numberFormat[t]}function l(e,t,n){var r=n;if(null==r){var i=function(e){return a(e,"CurrencyDecimalDigits")}(t);null==r&&(r=i)}return o.localeFormat(e,"C"+r,t)}function c(e){return p(e,"ShortDatePattern","DateSeparator","/")}function u(e){return p(e,"ShortTimePattern","TimeSeparator",":")}function p(e,t,n,o){return e.dateTimeFormat[t].toString().replace(new RegExp(o,"g"),e.dateTimeFormat[n].toString())}var d=function(){function e(e){this._text="",e&&(this._text=e.toString())}return e.prototype.append=function(e){this._text+=e},e.prototype.toString=function(){return this._text},e}(),h=function(){function e(){}return e._getValueFromDictionary=function(e,t){return e[t]},e._appendPreOrPostMatch=function(e,t){for(var n=0,o=!1,r=0,i=e.length;r<i;r++){var s=e.charAt(r);switch(s){case"'":o?t.append("'"):n++,o=!1;break;case"\\":o&&t.append("\\"),o=!o;break;default:t.append(s),o=!1}}return n},e._expandFormat=function(t,n){n||(n="F");var o=n.length;if(1===o)switch(n){case"d":return e._getValueFromDictionary(t,"ShortDatePattern");case"D":return e._getValueFromDictionary(t,"LongDatePattern");case"t":return e._getValueFromDictionary(t,"ShortTimePattern");case"T":return e._getValueFromDictionary(t,"LongTimePattern");case"f":return e._getValueFromDictionary(t,"LongDatePattern")+" "+e._getValueFromDictionary(t,"ShortTimePattern");case"F":return e._getValueFromDictionary(t,"FullDateTimePattern");case"M":case"m":return e._getValueFromDictionary(t,"MonthDayPattern");case"s":return e._getValueFromDictionary(t,"SortableDateTimePattern");case"Y":case"y":return e._getValueFromDictionary(t,"YearMonthPattern");default:throw Error("Res.formatInvalidString")}else 2===o&&"%"===n.charAt(0)&&(n=n.charAt(1));return n},e._getEra=function(e,t){if(!t)return 0;for(var n,o=e.getTime(),r=0;r<4;r+=4)if(null===(n=t[r+2])||o>=n)return r;return 0},e._getEraYear=function(t,n,o,r){var i=t.getFullYear();return!r&&e._getValueFromDictionary(n,"eras")&&(i-=e._getValueFromDictionary(n,"eras")[o+3]),i},e._getTokenRegExp=function(){return/\/|dddd|ddd|dd|d|MMMM|MMM|MM|M|yyyy|yy|y|hh|h|HH|H|mm|m|ss|s|tt|t|fff|ff|f|zzz|zz|z|gg|g/g},e._toFormattedString=function(t,n,o){var r=o.dateTimeFormat,i=e._getValueFromDictionary(r,"Calendar").convert;if(!n||!n.length||"i"===n){if(o&&o.name.length){if(i)return e._toFormattedString(t,e._getValueFromDictionary(r,"FullDateTimePattern"),o);var s=new Date(t.getTime()),a=e._getEra(t,e._getValueFromDictionary(r,"eras"));return s.setFullYear(e._getEraYear(t,r,a)),s.toLocaleString()}return t.toString()}var l=e._getValueFromDictionary(r,"eras"),c="s"===n;n=e._expandFormat(r,n);var u,p,h,f=new d;function m(e){return e<10?"0"+e:e.toString()}function y(e){return e<10?"00"+e:e<100?"0"+e:e.toString()}var b=/([^d]|^)(d|dd)([^d]|$)/g;function g(){return p||h?p:(p=b.test(n),h=!0,p)}var _,v,C=0,I=e._getTokenRegExp();function P(e,t){if(_)return _[t];switch(t){case 0:return e.getFullYear();case 1:return e.getMonth();case 2:return e.getDate()}}for(!c&&i&&(_=i.fromGregorian(t));;){var E=I.lastIndex,S=I.exec(n),D=n.slice(E,S?S.index:n.length);if(C+=e._appendPreOrPostMatch(D,f),!S)break;if(C%2!=1)switch(S[0]){case"dddd":f.append(e._getValueFromDictionary(r,"DayNames")[t.getDay()]);break;case"ddd":f.append(e._getValueFromDictionary(r,"AbbreviatedDayNames")[t.getDay()]);break;case"dd":p=!0,f.append(m(P(t,2)));break;case"d":p=!0,f.append(P(t,2).toString());break;case"MMMM":f.append(e._getValueFromDictionary(r,"MonthGenitiveNames")&&g()?e._getValueFromDictionary(r,"MonthGenitiveNames")[P(t,1)]:e._getValueFromDictionary(r,"MonthNames")[P(t,1)]);break;case"MMM":f.append(e._getValueFromDictionary(r,"AbbreviatedMonthGenitiveNames")&&g()?e._getValueFromDictionary(r,"AbbreviatedMonthGenitiveNames")[P(t,1)]:e._getValueFromDictionary(r,"AbbreviatedMonthNames")[P(t,1)]);break;case"MM":f.append(m(P(t,1)+1));break;case"M":f.append((P(t,1)+1).toString());break;case"yyyy":f.append((v=_?_[0]:e._getEraYear(t,r,e._getEra(t,l),c))<10?"000"+v:v<100?"00"+v:v<1e3?"0"+v:v.toString());break;case"yy":f.append(m((_?_[0]:e._getEraYear(t,r,e._getEra(t,l),c))%100));break;case"y":f.append(_?_[0].toString():(e._getEraYear(t,r,e._getEra(t,l),c)%100).toString());break;case"hh":0===(u=t.getHours()%12)&&(u=12),f.append(m(u));break;case"h":0===(u=t.getHours()%12)&&(u=12),f.append(u.toString());break;case"HH":f.append(m(t.getHours()));break;case"H":f.append(t.getHours().toString());break;case"mm":f.append(m(t.getMinutes()));break;case"m":f.append(t.getMinutes().toString());break;case"ss":f.append(m(t.getSeconds()));break;case"s":f.append(t.getSeconds().toString());break;case"tt":f.append(t.getHours()<12?e._getValueFromDictionary(r,"AMDesignator"):e._getValueFromDictionary(r,"PMDesignator"));break;case"t":f.append((t.getHours()<12?e._getValueFromDictionary(r,"AMDesignator"):e._getValueFromDictionary(r,"PMDesignator")).charAt(0));break;case"f":f.append(y(t.getMilliseconds()).charAt(0));break;case"ff":f.append(y(t.getMilliseconds()).substr(0,2));break;case"fff":f.append(y(t.getMilliseconds()));break;case"z":u=t.getTimezoneOffset()/60,f.append((u<=0?"+":"-")+Math.floor(Math.abs(u)));break;case"zz":u=t.getTimezoneOffset()/60,f.append((u<=0?"+":"-")+m(Math.floor(Math.abs(u))));break;case"zzz":u=t.getTimezoneOffset()/60,f.append((u<=0?"+":"-")+m(Math.floor(Math.abs(u)))+":"+m(Math.abs(t.getTimezoneOffset()%60)));break;case"g":case"gg":e._getValueFromDictionary(r,"eras")&&f.append(e._getValueFromDictionary(r,"eras")[e._getEra(t,l)+1]);break;case"/":f.append(e._getValueFromDictionary(r,"DateSeparator"));break;default:throw Error("Invalid date format pattern")}else f.append(S[0])}return f.toString()},e._getParseRegExp=function(t,n){var o=this._expandFormat(t,n);o=o.replace(/([\^\$\.\*\+\?\|\[\]\(\)\{\}])/g,"\\\\$1");for(var r,i=new d("^"),s=[],a=0,l=0,c=this._getTokenRegExp();null!==(r=c.exec(o));){var u=o.slice(a,r.index);if(a=c.lastIndex,(l+=this._appendPreOrPostMatch(u,i))%2!=1){switch(r[0]){case"dddd":case"ddd":case"MMMM":case"MMM":case"gg":case"g":i.append("(\\D+)");break;case"tt":case"t":i.append("(\\D*)");break;case"yyyy":i.append("(\\d{4})");break;case"fff":i.append("(\\d{3})");break;case"ff":i.append("(\\d{2})");break;case"f":i.append("(\\d)");break;case"dd":case"d":case"MM":case"M":case"yy":case"y":case"HH":case"H":case"hh":case"h":case"mm":case"m":case"ss":case"s":i.append("(\\d\\d?)");break;case"zzz":i.append("([+-]?\\d\\d?:\\d{2})");break;case"zz":case"z":i.append("([+-]?\\d\\d?)");break;case"/":i.append("(\\"+e._getValueFromDictionary(t,"DateSeparator")+")");break;default:throw Error("Invalid date format pattern")}s.push(r[0])}else i.append(r[0])}return this._appendPreOrPostMatch(o.slice(a),i),i.append("$"),{regExp:i.toString().replace(/\s+/g,"\\s+"),groups:s}},e._toUpper=function(e){return e.split(" ").join(" ").toUpperCase()},e._toUpperArray=function(e){for(var t=[],n=0,o=e.length;n<o;n++)t[n]=this._toUpper(e[n]);return t},e._getIndex=function(e,t,n){var o=this._toUpper(e),r=t.indexOf(o);return-1===r&&(r=n.indexOf(o)),r},e._getMonthIndex=function(e,t){var n=this._toUpperArray(e.dateTimeFormat.MonthNames),o=this._toUpperArray(e.dateTimeFormat.MonthGenitiveNames);return this._getIndex(t,n,o)},e._getAbbrMonthIndex=function(t,n){var o=this._toUpperArray(e._getValueFromDictionary(t.dateTimeFormat,"AbbreviatedMonthNames")),r=this._toUpperArray(e._getValueFromDictionary(t.dateTimeFormat,"AbbreviatedMonthGenitiveNames"));return this._getIndex(n,o,r)},e._getDayIndex=function(t,n){return this._toUpperArray(e._getValueFromDictionary(t.dateTimeFormat,"DayNames")).indexOf(this._toUpper(n))},e._getAbbrDayIndex=function(t,n){return this._toUpperArray(e._getValueFromDictionary(t.dateTimeFormat,"AbbreviatedDayNames")).indexOf(this._toUpper(n))},e._expandYear=function(t,n){var o=new Date,r=this._getEra(o,e._getValueFromDictionary(t,"eras"));if(n<100){var i=this._getEraYear(o,t,r);(n+=i-i%100)>e._getValueFromDictionary(e._getValueFromDictionary(t,"Calendar"),"TwoDigitYearMax")&&(n-=100)}return n},e.localeFormat=function(t,n,o){return e._toFormattedString(t,n,o)},e.parse=function(t,n,o){t=t.trim();var r=o.dateTimeFormat,i=this._getParseRegExp(r,n),s=new RegExp(i.regExp).exec(t);if(null===s)return null;for(var a,l=i.groups,c=null,u=null,p=null,d=null,h=null,f=0,m=0,y=0,b=0,g=null,_=!1,v=0,C=l.length;v<C;v++){var I=s[v+1];if(I)switch(l[v]){case"dd":case"d":if((d=parseInt(I,10))<1||d>31)return null;break;case"MMMM":if((p=this._getMonthIndex(o,I))<0||p>11)return null;break;case"MMM":if((p=this._getAbbrMonthIndex(o,I))<0||p>11)return null;break;case"M":case"MM":if((p=parseInt(I,10)-1)<0||p>11)return null;break;case"y":case"yy":if((u=this._expandYear(r,parseInt(I,10)))<0||u>9999)return null;break;case"yyyy":if((u=parseInt(I,10))<0||u>9999)return null;break;case"h":case"hh":if(12===(f=parseInt(I,10))&&(f=0),f<0||f>11)return null;break;case"H":case"HH":if((f=parseInt(I,10))<0||f>23)return null;break;case"m":case"mm":if((m=parseInt(I,10))<0||m>59)return null;break;case"s":case"ss":if((y=parseInt(I,10))<0||y>59)return null;break;case"tt":case"t":var P=I.toUpperCase();if(!(_=P===e._getValueFromDictionary(r,"PMDesignator").toUpperCase())&&P!==e._getValueFromDictionary(r,"AMDesignator").toUpperCase())return null;break;case"f":if((b=100*parseInt(I,10))<0||b>999)return null;break;case"ff":if((b=10*parseInt(I,10))<0||b>999)return null;break;case"fff":if((b=parseInt(I,10))<0||b>999)return null;break;case"dddd":if((h=this._getDayIndex(o,I))<0||h>6)return null;break;case"ddd":if((h=this._getAbbrDayIndex(o,I))<0||h>6)return null;break;case"zzz":var E=I.split(/:/);if(2!==E.length)return null;if((a=parseInt(E[0],10))<-12||a>13)return null;var S=parseInt(E[1],10);if(S<0||S>59)return null;g=60*a+(I.startsWith("-")?-S:S);break;case"z":case"zz":if((a=parseInt(I,10))<-12||a>13)return null;g=60*a;break;case"g":case"gg":var D=I,w=e._getValueFromDictionary(r,"eras");if(!D||!w)return null;D=D.toLowerCase().trim();for(var O=0,T=Object.keys(w).length;O<T;O+=4)if(D===w[O+1].toLowerCase()){c=O;break}if(null===c)return null}}var F,M=new Date,x=e._getValueFromDictionary(r,"Calendar").convert;if(F=x?x.fromGregorian(M)[0]:M.getFullYear(),null===u?u=F:e._getValueFromDictionary(r,"eras")&&(u+=e._getValueFromDictionary(r,"eras")[(c||0)+3]),null===p&&(p=0),null===d&&(d=1),x){if(null===(M=x.toGregorian(u,p,d)))return null}else{if(M.setFullYear(u,p,d),M.getDate()!==d)return null;if(null!==h&&M.getDay()!==h)return null}if(_&&f<12&&(f+=12),M.setHours(f,m,y,b),null!==g){var A=M.getMinutes()-(g+M.getTimezoneOffset());M.setHours(M.getHours()+A/60,A%60)}return M},e}(),f=n(28);n.d(t,"SimpleFormatter",function(){return m});var m=function(){function e(){}return e.ParseDateFromString=function(e,t,n){var o=t;o&&(o=o.toLowerCase());var r=e.indexOf(" ");switch(t){case"date":case"dateonly":r>0&&(o="datetime");break;case"datetime":case"dateandtime":r<0&&(o="date")}var i=function(e,t){switch(t){case"datetime":case"dateandtime":return c(e)+" "+u(e);case"date":case"dateonly":default:return c(e)}}(n,o);return h.parse(e,i,n)},e.formatIntegerValue=function(t,n){return e.formatDecimalValue(t,n,0)},e.formatCurrencyValue=function(e,t,n,o){var r=l(e,t,o);return null!=n?r.replace(function(e){return a(e,"CurrencySymbol")}(t),n):r},e.formatShortDateValue=function(e,t){return h.localeFormat(e,"d",t)},e.formatLongDateValue=function(e,t){return h.localeFormat(e,"D",t)},e.formatDecimalValue=function(e,t,n){return e<0?s(e,t,n):i(e,t,n)},e.formatSortableDateValue=function(t){return e.formatSortableDateTimeValue(t).split("T")[0]},e.formatSortableDateTimeValue=function(e){return h.localeFormat(e,"s",f.CultureInfo.CurrentCulture)},e.formatShortDateTimeValue=function(e,t){var n=c(t),o=u(t);return h.localeFormat(e,n+" "+o,t)},e.formatDateLongAbbreviated=function(e,t){var n=function(e){return p(e,"LongDatePattern","DateSeparator","/")}(t);return n=(n=n.replace("MMMM","MMM")).replace("dddd","ddd"),h.localeFormat(e,n,t)},e.formatDateYearMonthValue=function(e,t){return h.localeFormat(e,"Y",t)},e.formatLanguageValue=function(e,t){return isNaN(e)||e<-1?void 0:null===e||t&&t[e]?t[e]:e.toString()},e}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t="";for(var n in e){var o=e[n];"string"!=typeof o&&"number"!=typeof o||(t&&(t+=";"),t+=(0,i.default)(n,o))}return t};var o,r=n(94),i=(o=r)&&o.__esModule?o:{default:o};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.RULE_TYPE=1,t.KEYFRAME_TYPE=2,t.FONT_TYPE=3,t.STATIC_TYPE=4,t.CLEAR_TYPE=5},function(e,t){(function(){t.defaults={.1:{explicitCharkey:!1,trim:!0,normalize:!0,normalizeTags:!1,attrkey:"@",charkey:"#",explicitArray:!1,ignoreAttrs:!1,mergeAttrs:!1,explicitRoot:!1,validator:null,xmlns:!1,explicitChildren:!1,childkey:"@@",charsAsChildren:!1,includeWhiteChars:!1,async:!1,strict:!0,attrNameProcessors:null,attrValueProcessors:null,tagNameProcessors:null,valueProcessors:null,emptyTag:""},.2:{explicitCharkey:!1,trim:!1,normalize:!1,normalizeTags:!1,attrkey:"$",charkey:"_",explicitArray:!0,ignoreAttrs:!1,mergeAttrs:!1,explicitRoot:!0,validator:null,xmlns:!1,explicitChildren:!1,preserveChildrenOrder:!1,childkey:"$$",charsAsChildren:!1,includeWhiteChars:!1,async:!1,strict:!0,attrNameProcessors:null,attrValueProcessors:null,tagNameProcessors:null,valueProcessors:null,rootName:"root",xmldec:{version:"1.0",encoding:"UTF-8",standalone:!0},doctype:null,renderOpts:{pretty:!0,indent:"  ",newline:"\n"},headless:!1,chunkSize:1e4,emptyTag:"",cdata:!1}}}).call(this)},function(e,t,n){(function(){var t,o,r,i,s,a,l,c,u,p,d,h,f,m={}.hasOwnProperty;l=n(50),c=n(51),t=n(48),o=n(49),u=n(47),d=n(56),h=n(57),p=n(58),r=n(52),i=n(54),s=n(53),a=n(55),f=n(104),e.exports=function(e){function n(e){n.__super__.constructor.call(this,e)}return function(e,t){for(var n in t)m.call(t,n)&&(e[n]=t[n]);function o(){this.constructor=e}o.prototype=t.prototype,e.prototype=new o,e.__super__=t.prototype}(n,f),n.prototype.document=function(e){var t,n,r,i,s;for(this.textispresent=!1,i="",n=0,r=(s=e.children).length;n<r;n++)t=s[n],i+=function(){switch(!1){case!(t instanceof l):return this.declaration(t);case!(t instanceof c):return this.docType(t);case!(t instanceof o):return this.comment(t);case!(t instanceof p):return this.processingInstruction(t);default:return this.element(t,0)}}.call(this);return this.pretty&&i.slice(-this.newline.length)===this.newline&&(i=i.slice(0,-this.newline.length)),i},n.prototype.attribute=function(e){return" "+e.name+'="'+e.value+'"'},n.prototype.cdata=function(e,t){return this.space(t)+"<![CDATA["+e.text+"]]>"+this.newline},n.prototype.comment=function(e,t){return this.space(t)+"\x3c!-- "+e.text+" --\x3e"+this.newline},n.prototype.declaration=function(e,t){var n;return n=this.space(t),n+='<?xml version="'+e.version+'"',null!=e.encoding&&(n+=' encoding="'+e.encoding+'"'),null!=e.standalone&&(n+=' standalone="'+e.standalone+'"'),n+=this.spacebeforeslash+"?>",n+=this.newline},n.prototype.docType=function(e,n){var l,c,u,d,h;if(n||(n=0),d=this.space(n),d+="<!DOCTYPE "+e.root().name,e.pubID&&e.sysID?d+=' PUBLIC "'+e.pubID+'" "'+e.sysID+'"':e.sysID&&(d+=' SYSTEM "'+e.sysID+'"'),e.children.length>0){for(d+=" [",d+=this.newline,c=0,u=(h=e.children).length;c<u;c++)l=h[c],d+=function(){switch(!1){case!(l instanceof r):return this.dtdAttList(l,n+1);case!(l instanceof i):return this.dtdElement(l,n+1);case!(l instanceof s):return this.dtdEntity(l,n+1);case!(l instanceof a):return this.dtdNotation(l,n+1);case!(l instanceof t):return this.cdata(l,n+1);case!(l instanceof o):return this.comment(l,n+1);case!(l instanceof p):return this.processingInstruction(l,n+1);default:throw new Error("Unknown DTD node type: "+l.constructor.name)}}.call(this);d+="]"}return d+=this.spacebeforeslash+">",d+=this.newline},n.prototype.element=function(e,n){var r,i,s,a,l,c,f,y,b,g,_,v,C;for(f in n||(n=0),C=!1,this.textispresent?(this.newline="",this.pretty=!1):(this.newline=this.newlinedefault,this.pretty=this.prettydefault),y="",y+=(v=this.space(n))+"<"+e.name,b=e.attributes)m.call(b,f)&&(r=b[f],y+=this.attribute(r));if(0===e.children.length||e.children.every(function(e){return""===e.value}))this.allowEmpty?y+="></"+e.name+">"+this.newline:y+=this.spacebeforeslash+"/>"+this.newline;else if(this.pretty&&1===e.children.length&&null!=e.children[0].value)y+=">",y+=e.children[0].value,y+="</"+e.name+">"+this.newline;else{if(this.dontprettytextnodes)for(s=0,l=(g=e.children).length;s<l;s++)if(null!=(i=g[s]).value){this.textispresent++,C=!0;break}for(this.textispresent&&(this.newline="",this.pretty=!1,v=this.space(n)),y+=">"+this.newline,a=0,c=(_=e.children).length;a<c;a++)i=_[a],y+=function(){switch(!1){case!(i instanceof t):return this.cdata(i,n+1);case!(i instanceof o):return this.comment(i,n+1);case!(i instanceof u):return this.element(i,n+1);case!(i instanceof d):return this.raw(i,n+1);case!(i instanceof h):return this.text(i,n+1);case!(i instanceof p):return this.processingInstruction(i,n+1);default:throw new Error("Unknown XML node type: "+i.constructor.name)}}.call(this);C&&this.textispresent--,this.textispresent||(this.newline=this.newlinedefault,this.pretty=this.prettydefault),y+=v+"</"+e.name+">"+this.newline}return y},n.prototype.processingInstruction=function(e,t){var n;return n=this.space(t)+"<?"+e.target,e.value&&(n+=" "+e.value),n+=this.spacebeforeslash+"?>"+this.newline},n.prototype.raw=function(e,t){return this.space(t)+e.value+this.newline},n.prototype.text=function(e,t){return this.space(t)+e.value+this.newline},n.prototype.dtdAttList=function(e,t){var n;return n=this.space(t)+"<!ATTLIST "+e.elementName+" "+e.attributeName+" "+e.attributeType,"#DEFAULT"!==e.defaultValueType&&(n+=" "+e.defaultValueType),e.defaultValue&&(n+=' "'+e.defaultValue+'"'),n+=this.spacebeforeslash+">"+this.newline},n.prototype.dtdElement=function(e,t){return this.space(t)+"<!ELEMENT "+e.name+" "+e.value+this.spacebeforeslash+">"+this.newline},n.prototype.dtdEntity=function(e,t){var n;return n=this.space(t)+"<!ENTITY",e.pe&&(n+=" %"),n+=" "+e.name,e.value?n+=' "'+e.value+'"':(e.pubID&&e.sysID?n+=' PUBLIC "'+e.pubID+'" "'+e.sysID+'"':e.sysID&&(n+=' SYSTEM "'+e.sysID+'"'),e.nData&&(n+=" NDATA "+e.nData)),n+=this.spacebeforeslash+">"+this.newline},n.prototype.dtdNotation=function(e,t){var n;return n=this.space(t)+"<!NOTATION "+e.name,e.pubID&&e.sysID?n+=' PUBLIC "'+e.pubID+'" "'+e.sysID+'"':e.pubID?n+=' PUBLIC "'+e.pubID+'"':e.sysID&&(n+=' SYSTEM "'+e.sysID+'"'),n+=this.spacebeforeslash+">"+this.newline},n.prototype.openNode=function(e,t){var n,o,r,i;if(t||(t=0),e instanceof u){for(o in r=this.space(t)+"<"+e.name,i=e.attributes)m.call(i,o)&&(n=i[o],r+=this.attribute(n));return r+=(e.children?">":"/>")+this.newline}return r=this.space(t)+"<!DOCTYPE "+e.rootNodeName,e.pubID&&e.sysID?r+=' PUBLIC "'+e.pubID+'" "'+e.sysID+'"':e.sysID&&(r+=' SYSTEM "'+e.sysID+'"'),r+=(e.children?" [":">")+this.newline},n.prototype.closeNode=function(e,t){switch(t||(t=0),!1){case!(e instanceof u):return this.space(t)+"</"+e.name+">"+this.newline;case!(e instanceof c):return this.space(t)+"]>"+this.newline}},n}()}).call(this)},function(e,t,n){"use strict";(function(e){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */
var o=n(195),r=n(196),i=n(197);function s(){return l.TYPED_ARRAY_SUPPORT?2147483647:1073741823}function a(e,t){if(s()<t)throw new RangeError("Invalid typed array length");return l.TYPED_ARRAY_SUPPORT?(e=new Uint8Array(t)).__proto__=l.prototype:(null===e&&(e=new l(t)),e.length=t),e}function l(e,t,n){if(!(l.TYPED_ARRAY_SUPPORT||this instanceof l))return new l(e,t,n);if("number"==typeof e){if("string"==typeof t)throw new Error("If encoding is specified then the first argument must be a string");return p(this,e)}return c(this,e,t,n)}function c(e,t,n,o){if("number"==typeof t)throw new TypeError('"value" argument must not be a number');return"undefined"!=typeof ArrayBuffer&&t instanceof ArrayBuffer?function(e,t,n,o){if(t.byteLength,n<0||t.byteLength<n)throw new RangeError("'offset' is out of bounds");if(t.byteLength<n+(o||0))throw new RangeError("'length' is out of bounds");t=void 0===n&&void 0===o?new Uint8Array(t):void 0===o?new Uint8Array(t,n):new Uint8Array(t,n,o);l.TYPED_ARRAY_SUPPORT?(e=t).__proto__=l.prototype:e=d(e,t);return e}(e,t,n,o):"string"==typeof t?function(e,t,n){"string"==typeof n&&""!==n||(n="utf8");if(!l.isEncoding(n))throw new TypeError('"encoding" must be a valid string encoding');var o=0|f(t,n),r=(e=a(e,o)).write(t,n);r!==o&&(e=e.slice(0,r));return e}(e,t,n):function(e,t){if(l.isBuffer(t)){var n=0|h(t.length);return 0===(e=a(e,n)).length?e:(t.copy(e,0,0,n),e)}if(t){if("undefined"!=typeof ArrayBuffer&&t.buffer instanceof ArrayBuffer||"length"in t)return"number"!=typeof t.length||(o=t.length)!=o?a(e,0):d(e,t);if("Buffer"===t.type&&i(t.data))return d(e,t.data)}var o;throw new TypeError("First argument must be a string, Buffer, ArrayBuffer, Array, or array-like object.")}(e,t)}function u(e){if("number"!=typeof e)throw new TypeError('"size" argument must be a number');if(e<0)throw new RangeError('"size" argument must not be negative')}function p(e,t){if(u(t),e=a(e,t<0?0:0|h(t)),!l.TYPED_ARRAY_SUPPORT)for(var n=0;n<t;++n)e[n]=0;return e}function d(e,t){var n=t.length<0?0:0|h(t.length);e=a(e,n);for(var o=0;o<n;o+=1)e[o]=255&t[o];return e}function h(e){if(e>=s())throw new RangeError("Attempt to allocate Buffer larger than maximum size: 0x"+s().toString(16)+" bytes");return 0|e}function f(e,t){if(l.isBuffer(e))return e.length;if("undefined"!=typeof ArrayBuffer&&"function"==typeof ArrayBuffer.isView&&(ArrayBuffer.isView(e)||e instanceof ArrayBuffer))return e.byteLength;"string"!=typeof e&&(e=""+e);var n=e.length;if(0===n)return 0;for(var o=!1;;)switch(t){case"ascii":case"latin1":case"binary":return n;case"utf8":case"utf-8":case void 0:return j(e).length;case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return 2*n;case"hex":return n>>>1;case"base64":return W(e).length;default:if(o)return j(e).length;t=(""+t).toLowerCase(),o=!0}}function m(e,t,n){var o=e[t];e[t]=e[n],e[n]=o}function y(e,t,n,o,r){if(0===e.length)return-1;if("string"==typeof n?(o=n,n=0):n>2147483647?n=2147483647:n<-2147483648&&(n=-2147483648),n=+n,isNaN(n)&&(n=r?0:e.length-1),n<0&&(n=e.length+n),n>=e.length){if(r)return-1;n=e.length-1}else if(n<0){if(!r)return-1;n=0}if("string"==typeof t&&(t=l.from(t,o)),l.isBuffer(t))return 0===t.length?-1:b(e,t,n,o,r);if("number"==typeof t)return t&=255,l.TYPED_ARRAY_SUPPORT&&"function"==typeof Uint8Array.prototype.indexOf?r?Uint8Array.prototype.indexOf.call(e,t,n):Uint8Array.prototype.lastIndexOf.call(e,t,n):b(e,[t],n,o,r);throw new TypeError("val must be string, number or Buffer")}function b(e,t,n,o,r){var i,s=1,a=e.length,l=t.length;if(void 0!==o&&("ucs2"===(o=String(o).toLowerCase())||"ucs-2"===o||"utf16le"===o||"utf-16le"===o)){if(e.length<2||t.length<2)return-1;s=2,a/=2,l/=2,n/=2}function c(e,t){return 1===s?e[t]:e.readUInt16BE(t*s)}if(r){var u=-1;for(i=n;i<a;i++)if(c(e,i)===c(t,-1===u?0:i-u)){if(-1===u&&(u=i),i-u+1===l)return u*s}else-1!==u&&(i-=i-u),u=-1}else for(n+l>a&&(n=a-l),i=n;i>=0;i--){for(var p=!0,d=0;d<l;d++)if(c(e,i+d)!==c(t,d)){p=!1;break}if(p)return i}return-1}function g(e,t,n,o){n=Number(n)||0;var r=e.length-n;o?(o=Number(o))>r&&(o=r):o=r;var i=t.length;if(i%2!=0)throw new TypeError("Invalid hex string");o>i/2&&(o=i/2);for(var s=0;s<o;++s){var a=parseInt(t.substr(2*s,2),16);if(isNaN(a))return s;e[n+s]=a}return s}function _(e,t,n,o){return V(j(t,e.length-n),e,n,o)}function v(e,t,n,o){return V(function(e){for(var t=[],n=0;n<e.length;++n)t.push(255&e.charCodeAt(n));return t}(t),e,n,o)}function C(e,t,n,o){return v(e,t,n,o)}function I(e,t,n,o){return V(W(t),e,n,o)}function P(e,t,n,o){return V(function(e,t){for(var n,o,r,i=[],s=0;s<e.length&&!((t-=2)<0);++s)n=e.charCodeAt(s),o=n>>8,r=n%256,i.push(r),i.push(o);return i}(t,e.length-n),e,n,o)}function E(e,t,n){return 0===t&&n===e.length?o.fromByteArray(e):o.fromByteArray(e.slice(t,n))}function S(e,t,n){n=Math.min(e.length,n);for(var o=[],r=t;r<n;){var i,s,a,l,c=e[r],u=null,p=c>239?4:c>223?3:c>191?2:1;if(r+p<=n)switch(p){case 1:c<128&&(u=c);break;case 2:128==(192&(i=e[r+1]))&&(l=(31&c)<<6|63&i)>127&&(u=l);break;case 3:i=e[r+1],s=e[r+2],128==(192&i)&&128==(192&s)&&(l=(15&c)<<12|(63&i)<<6|63&s)>2047&&(l<55296||l>57343)&&(u=l);break;case 4:i=e[r+1],s=e[r+2],a=e[r+3],128==(192&i)&&128==(192&s)&&128==(192&a)&&(l=(15&c)<<18|(63&i)<<12|(63&s)<<6|63&a)>65535&&l<1114112&&(u=l)}null===u?(u=65533,p=1):u>65535&&(u-=65536,o.push(u>>>10&1023|55296),u=56320|1023&u),o.push(u),r+=p}return function(e){var t=e.length;if(t<=D)return String.fromCharCode.apply(String,e);var n="",o=0;for(;o<t;)n+=String.fromCharCode.apply(String,e.slice(o,o+=D));return n}(o)}t.Buffer=l,t.SlowBuffer=function(e){+e!=e&&(e=0);return l.alloc(+e)},t.INSPECT_MAX_BYTES=50,l.TYPED_ARRAY_SUPPORT=void 0!==e.TYPED_ARRAY_SUPPORT?e.TYPED_ARRAY_SUPPORT:function(){try{var e=new Uint8Array(1);return e.__proto__={__proto__:Uint8Array.prototype,foo:function(){return 42}},42===e.foo()&&"function"==typeof e.subarray&&0===e.subarray(1,1).byteLength}catch(e){return!1}}(),t.kMaxLength=s(),l.poolSize=8192,l._augment=function(e){return e.__proto__=l.prototype,e},l.from=function(e,t,n){return c(null,e,t,n)},l.TYPED_ARRAY_SUPPORT&&(l.prototype.__proto__=Uint8Array.prototype,l.__proto__=Uint8Array,"undefined"!=typeof Symbol&&Symbol.species&&l[Symbol.species]===l&&Object.defineProperty(l,Symbol.species,{value:null,configurable:!0})),l.alloc=function(e,t,n){return function(e,t,n,o){return u(t),t<=0?a(e,t):void 0!==n?"string"==typeof o?a(e,t).fill(n,o):a(e,t).fill(n):a(e,t)}(null,e,t,n)},l.allocUnsafe=function(e){return p(null,e)},l.allocUnsafeSlow=function(e){return p(null,e)},l.isBuffer=function(e){return!(null==e||!e._isBuffer)},l.compare=function(e,t){if(!l.isBuffer(e)||!l.isBuffer(t))throw new TypeError("Arguments must be Buffers");if(e===t)return 0;for(var n=e.length,o=t.length,r=0,i=Math.min(n,o);r<i;++r)if(e[r]!==t[r]){n=e[r],o=t[r];break}return n<o?-1:o<n?1:0},l.isEncoding=function(e){switch(String(e).toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"latin1":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return!0;default:return!1}},l.concat=function(e,t){if(!i(e))throw new TypeError('"list" argument must be an Array of Buffers');if(0===e.length)return l.alloc(0);var n;if(void 0===t)for(t=0,n=0;n<e.length;++n)t+=e[n].length;var o=l.allocUnsafe(t),r=0;for(n=0;n<e.length;++n){var s=e[n];if(!l.isBuffer(s))throw new TypeError('"list" argument must be an Array of Buffers');s.copy(o,r),r+=s.length}return o},l.byteLength=f,l.prototype._isBuffer=!0,l.prototype.swap16=function(){var e=this.length;if(e%2!=0)throw new RangeError("Buffer size must be a multiple of 16-bits");for(var t=0;t<e;t+=2)m(this,t,t+1);return this},l.prototype.swap32=function(){var e=this.length;if(e%4!=0)throw new RangeError("Buffer size must be a multiple of 32-bits");for(var t=0;t<e;t+=4)m(this,t,t+3),m(this,t+1,t+2);return this},l.prototype.swap64=function(){var e=this.length;if(e%8!=0)throw new RangeError("Buffer size must be a multiple of 64-bits");for(var t=0;t<e;t+=8)m(this,t,t+7),m(this,t+1,t+6),m(this,t+2,t+5),m(this,t+3,t+4);return this},l.prototype.toString=function(){var e=0|this.length;return 0===e?"":0===arguments.length?S(this,0,e):function(e,t,n){var o=!1;if((void 0===t||t<0)&&(t=0),t>this.length)return"";if((void 0===n||n>this.length)&&(n=this.length),n<=0)return"";if((n>>>=0)<=(t>>>=0))return"";for(e||(e="utf8");;)switch(e){case"hex":return T(this,t,n);case"utf8":case"utf-8":return S(this,t,n);case"ascii":return w(this,t,n);case"latin1":case"binary":return O(this,t,n);case"base64":return E(this,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return F(this,t,n);default:if(o)throw new TypeError("Unknown encoding: "+e);e=(e+"").toLowerCase(),o=!0}}.apply(this,arguments)},l.prototype.equals=function(e){if(!l.isBuffer(e))throw new TypeError("Argument must be a Buffer");return this===e||0===l.compare(this,e)},l.prototype.inspect=function(){var e="",n=t.INSPECT_MAX_BYTES;return this.length>0&&(e=this.toString("hex",0,n).match(/.{2}/g).join(" "),this.length>n&&(e+=" ... ")),"<Buffer "+e+">"},l.prototype.compare=function(e,t,n,o,r){if(!l.isBuffer(e))throw new TypeError("Argument must be a Buffer");if(void 0===t&&(t=0),void 0===n&&(n=e?e.length:0),void 0===o&&(o=0),void 0===r&&(r=this.length),t<0||n>e.length||o<0||r>this.length)throw new RangeError("out of range index");if(o>=r&&t>=n)return 0;if(o>=r)return-1;if(t>=n)return 1;if(this===e)return 0;for(var i=(r>>>=0)-(o>>>=0),s=(n>>>=0)-(t>>>=0),a=Math.min(i,s),c=this.slice(o,r),u=e.slice(t,n),p=0;p<a;++p)if(c[p]!==u[p]){i=c[p],s=u[p];break}return i<s?-1:s<i?1:0},l.prototype.includes=function(e,t,n){return-1!==this.indexOf(e,t,n)},l.prototype.indexOf=function(e,t,n){return y(this,e,t,n,!0)},l.prototype.lastIndexOf=function(e,t,n){return y(this,e,t,n,!1)},l.prototype.write=function(e,t,n,o){if(void 0===t)o="utf8",n=this.length,t=0;else if(void 0===n&&"string"==typeof t)o=t,n=this.length,t=0;else{if(!isFinite(t))throw new Error("Buffer.write(string, encoding, offset[, length]) is no longer supported");t|=0,isFinite(n)?(n|=0,void 0===o&&(o="utf8")):(o=n,n=void 0)}var r=this.length-t;if((void 0===n||n>r)&&(n=r),e.length>0&&(n<0||t<0)||t>this.length)throw new RangeError("Attempt to write outside buffer bounds");o||(o="utf8");for(var i=!1;;)switch(o){case"hex":return g(this,e,t,n);case"utf8":case"utf-8":return _(this,e,t,n);case"ascii":return v(this,e,t,n);case"latin1":case"binary":return C(this,e,t,n);case"base64":return I(this,e,t,n);case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return P(this,e,t,n);default:if(i)throw new TypeError("Unknown encoding: "+o);o=(""+o).toLowerCase(),i=!0}},l.prototype.toJSON=function(){return{type:"Buffer",data:Array.prototype.slice.call(this._arr||this,0)}};var D=4096;function w(e,t,n){var o="";n=Math.min(e.length,n);for(var r=t;r<n;++r)o+=String.fromCharCode(127&e[r]);return o}function O(e,t,n){var o="";n=Math.min(e.length,n);for(var r=t;r<n;++r)o+=String.fromCharCode(e[r]);return o}function T(e,t,n){var o=e.length;(!t||t<0)&&(t=0),(!n||n<0||n>o)&&(n=o);for(var r="",i=t;i<n;++i)r+=U(e[i]);return r}function F(e,t,n){for(var o=e.slice(t,n),r="",i=0;i<o.length;i+=2)r+=String.fromCharCode(o[i]+256*o[i+1]);return r}function M(e,t,n){if(e%1!=0||e<0)throw new RangeError("offset is not uint");if(e+t>n)throw new RangeError("Trying to access beyond buffer length")}function x(e,t,n,o,r,i){if(!l.isBuffer(e))throw new TypeError('"buffer" argument must be a Buffer instance');if(t>r||t<i)throw new RangeError('"value" argument is out of bounds');if(n+o>e.length)throw new RangeError("Index out of range")}function A(e,t,n,o){t<0&&(t=65535+t+1);for(var r=0,i=Math.min(e.length-n,2);r<i;++r)e[n+r]=(t&255<<8*(o?r:1-r))>>>8*(o?r:1-r)}function k(e,t,n,o){t<0&&(t=4294967295+t+1);for(var r=0,i=Math.min(e.length-n,4);r<i;++r)e[n+r]=t>>>8*(o?r:3-r)&255}function R(e,t,n,o,r,i){if(n+o>e.length)throw new RangeError("Index out of range");if(n<0)throw new RangeError("Index out of range")}function L(e,t,n,o,i){return i||R(e,0,n,4),r.write(e,t,n,o,23,4),n+4}function N(e,t,n,o,i){return i||R(e,0,n,8),r.write(e,t,n,o,52,8),n+8}l.prototype.slice=function(e,t){var n,o=this.length;if((e=~~e)<0?(e+=o)<0&&(e=0):e>o&&(e=o),(t=void 0===t?o:~~t)<0?(t+=o)<0&&(t=0):t>o&&(t=o),t<e&&(t=e),l.TYPED_ARRAY_SUPPORT)(n=this.subarray(e,t)).__proto__=l.prototype;else{var r=t-e;n=new l(r,void 0);for(var i=0;i<r;++i)n[i]=this[i+e]}return n},l.prototype.readUIntLE=function(e,t,n){e|=0,t|=0,n||M(e,t,this.length);for(var o=this[e],r=1,i=0;++i<t&&(r*=256);)o+=this[e+i]*r;return o},l.prototype.readUIntBE=function(e,t,n){e|=0,t|=0,n||M(e,t,this.length);for(var o=this[e+--t],r=1;t>0&&(r*=256);)o+=this[e+--t]*r;return o},l.prototype.readUInt8=function(e,t){return t||M(e,1,this.length),this[e]},l.prototype.readUInt16LE=function(e,t){return t||M(e,2,this.length),this[e]|this[e+1]<<8},l.prototype.readUInt16BE=function(e,t){return t||M(e,2,this.length),this[e]<<8|this[e+1]},l.prototype.readUInt32LE=function(e,t){return t||M(e,4,this.length),(this[e]|this[e+1]<<8|this[e+2]<<16)+16777216*this[e+3]},l.prototype.readUInt32BE=function(e,t){return t||M(e,4,this.length),16777216*this[e]+(this[e+1]<<16|this[e+2]<<8|this[e+3])},l.prototype.readIntLE=function(e,t,n){e|=0,t|=0,n||M(e,t,this.length);for(var o=this[e],r=1,i=0;++i<t&&(r*=256);)o+=this[e+i]*r;return o>=(r*=128)&&(o-=Math.pow(2,8*t)),o},l.prototype.readIntBE=function(e,t,n){e|=0,t|=0,n||M(e,t,this.length);for(var o=t,r=1,i=this[e+--o];o>0&&(r*=256);)i+=this[e+--o]*r;return i>=(r*=128)&&(i-=Math.pow(2,8*t)),i},l.prototype.readInt8=function(e,t){return t||M(e,1,this.length),128&this[e]?-1*(255-this[e]+1):this[e]},l.prototype.readInt16LE=function(e,t){t||M(e,2,this.length);var n=this[e]|this[e+1]<<8;return 32768&n?4294901760|n:n},l.prototype.readInt16BE=function(e,t){t||M(e,2,this.length);var n=this[e+1]|this[e]<<8;return 32768&n?4294901760|n:n},l.prototype.readInt32LE=function(e,t){return t||M(e,4,this.length),this[e]|this[e+1]<<8|this[e+2]<<16|this[e+3]<<24},l.prototype.readInt32BE=function(e,t){return t||M(e,4,this.length),this[e]<<24|this[e+1]<<16|this[e+2]<<8|this[e+3]},l.prototype.readFloatLE=function(e,t){return t||M(e,4,this.length),r.read(this,e,!0,23,4)},l.prototype.readFloatBE=function(e,t){return t||M(e,4,this.length),r.read(this,e,!1,23,4)},l.prototype.readDoubleLE=function(e,t){return t||M(e,8,this.length),r.read(this,e,!0,52,8)},l.prototype.readDoubleBE=function(e,t){return t||M(e,8,this.length),r.read(this,e,!1,52,8)},l.prototype.writeUIntLE=function(e,t,n,o){(e=+e,t|=0,n|=0,o)||x(this,e,t,n,Math.pow(2,8*n)-1,0);var r=1,i=0;for(this[t]=255&e;++i<n&&(r*=256);)this[t+i]=e/r&255;return t+n},l.prototype.writeUIntBE=function(e,t,n,o){(e=+e,t|=0,n|=0,o)||x(this,e,t,n,Math.pow(2,8*n)-1,0);var r=n-1,i=1;for(this[t+r]=255&e;--r>=0&&(i*=256);)this[t+r]=e/i&255;return t+n},l.prototype.writeUInt8=function(e,t,n){return e=+e,t|=0,n||x(this,e,t,1,255,0),l.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),this[t]=255&e,t+1},l.prototype.writeUInt16LE=function(e,t,n){return e=+e,t|=0,n||x(this,e,t,2,65535,0),l.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):A(this,e,t,!0),t+2},l.prototype.writeUInt16BE=function(e,t,n){return e=+e,t|=0,n||x(this,e,t,2,65535,0),l.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):A(this,e,t,!1),t+2},l.prototype.writeUInt32LE=function(e,t,n){return e=+e,t|=0,n||x(this,e,t,4,4294967295,0),l.TYPED_ARRAY_SUPPORT?(this[t+3]=e>>>24,this[t+2]=e>>>16,this[t+1]=e>>>8,this[t]=255&e):k(this,e,t,!0),t+4},l.prototype.writeUInt32BE=function(e,t,n){return e=+e,t|=0,n||x(this,e,t,4,4294967295,0),l.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):k(this,e,t,!1),t+4},l.prototype.writeIntLE=function(e,t,n,o){if(e=+e,t|=0,!o){var r=Math.pow(2,8*n-1);x(this,e,t,n,r-1,-r)}var i=0,s=1,a=0;for(this[t]=255&e;++i<n&&(s*=256);)e<0&&0===a&&0!==this[t+i-1]&&(a=1),this[t+i]=(e/s>>0)-a&255;return t+n},l.prototype.writeIntBE=function(e,t,n,o){if(e=+e,t|=0,!o){var r=Math.pow(2,8*n-1);x(this,e,t,n,r-1,-r)}var i=n-1,s=1,a=0;for(this[t+i]=255&e;--i>=0&&(s*=256);)e<0&&0===a&&0!==this[t+i+1]&&(a=1),this[t+i]=(e/s>>0)-a&255;return t+n},l.prototype.writeInt8=function(e,t,n){return e=+e,t|=0,n||x(this,e,t,1,127,-128),l.TYPED_ARRAY_SUPPORT||(e=Math.floor(e)),e<0&&(e=255+e+1),this[t]=255&e,t+1},l.prototype.writeInt16LE=function(e,t,n){return e=+e,t|=0,n||x(this,e,t,2,32767,-32768),l.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8):A(this,e,t,!0),t+2},l.prototype.writeInt16BE=function(e,t,n){return e=+e,t|=0,n||x(this,e,t,2,32767,-32768),l.TYPED_ARRAY_SUPPORT?(this[t]=e>>>8,this[t+1]=255&e):A(this,e,t,!1),t+2},l.prototype.writeInt32LE=function(e,t,n){return e=+e,t|=0,n||x(this,e,t,4,2147483647,-2147483648),l.TYPED_ARRAY_SUPPORT?(this[t]=255&e,this[t+1]=e>>>8,this[t+2]=e>>>16,this[t+3]=e>>>24):k(this,e,t,!0),t+4},l.prototype.writeInt32BE=function(e,t,n){return e=+e,t|=0,n||x(this,e,t,4,2147483647,-2147483648),e<0&&(e=4294967295+e+1),l.TYPED_ARRAY_SUPPORT?(this[t]=e>>>24,this[t+1]=e>>>16,this[t+2]=e>>>8,this[t+3]=255&e):k(this,e,t,!1),t+4},l.prototype.writeFloatLE=function(e,t,n){return L(this,e,t,!0,n)},l.prototype.writeFloatBE=function(e,t,n){return L(this,e,t,!1,n)},l.prototype.writeDoubleLE=function(e,t,n){return N(this,e,t,!0,n)},l.prototype.writeDoubleBE=function(e,t,n){return N(this,e,t,!1,n)},l.prototype.copy=function(e,t,n,o){if(n||(n=0),o||0===o||(o=this.length),t>=e.length&&(t=e.length),t||(t=0),o>0&&o<n&&(o=n),o===n)return 0;if(0===e.length||0===this.length)return 0;if(t<0)throw new RangeError("targetStart out of bounds");if(n<0||n>=this.length)throw new RangeError("sourceStart out of bounds");if(o<0)throw new RangeError("sourceEnd out of bounds");o>this.length&&(o=this.length),e.length-t<o-n&&(o=e.length-t+n);var r,i=o-n;if(this===e&&n<t&&t<o)for(r=i-1;r>=0;--r)e[r+t]=this[r+n];else if(i<1e3||!l.TYPED_ARRAY_SUPPORT)for(r=0;r<i;++r)e[r+t]=this[r+n];else Uint8Array.prototype.set.call(e,this.subarray(n,n+i),t);return i},l.prototype.fill=function(e,t,n,o){if("string"==typeof e){if("string"==typeof t?(o=t,t=0,n=this.length):"string"==typeof n&&(o=n,n=this.length),1===e.length){var r=e.charCodeAt(0);r<256&&(e=r)}if(void 0!==o&&"string"!=typeof o)throw new TypeError("encoding must be a string");if("string"==typeof o&&!l.isEncoding(o))throw new TypeError("Unknown encoding: "+o)}else"number"==typeof e&&(e&=255);if(t<0||this.length<t||this.length<n)throw new RangeError("Out of range index");if(n<=t)return this;var i;if(t>>>=0,n=void 0===n?this.length:n>>>0,e||(e=0),"number"==typeof e)for(i=t;i<n;++i)this[i]=e;else{var s=l.isBuffer(e)?e:j(new l(e,o).toString()),a=s.length;for(i=0;i<n-t;++i)this[i+t]=s[i%a]}return this};var B=/[^+\/0-9A-Za-z-_]/g;function U(e){return e<16?"0"+e.toString(16):e.toString(16)}function j(e,t){var n;t=t||1/0;for(var o=e.length,r=null,i=[],s=0;s<o;++s){if((n=e.charCodeAt(s))>55295&&n<57344){if(!r){if(n>56319){(t-=3)>-1&&i.push(239,191,189);continue}if(s+1===o){(t-=3)>-1&&i.push(239,191,189);continue}r=n;continue}if(n<56320){(t-=3)>-1&&i.push(239,191,189),r=n;continue}n=65536+(r-55296<<10|n-56320)}else r&&(t-=3)>-1&&i.push(239,191,189);if(r=null,n<128){if((t-=1)<0)break;i.push(n)}else if(n<2048){if((t-=2)<0)break;i.push(n>>6|192,63&n|128)}else if(n<65536){if((t-=3)<0)break;i.push(n>>12|224,n>>6&63|128,63&n|128)}else{if(!(n<1114112))throw new Error("Invalid code point");if((t-=4)<0)break;i.push(n>>18|240,n>>12&63|128,n>>6&63|128,63&n|128)}}return i}function W(e){return o.toByteArray(function(e){if((e=function(e){return e.trim?e.trim():e.replace(/^\s+|\s+$/g,"")}(e).replace(B,"")).length<2)return"";for(;e.length%4!=0;)e+="=";return e}(e))}function V(e,t,n,o){for(var r=0;r<o&&!(r+n>=t.length||r>=e.length);++r)t[r+n]=e[r];return r}}).call(this,n(30))},function(e,t,n){(t=e.exports=n(105)).Stream=t,t.Readable=t,t.Writable=n(77),t.Duplex=n(31),t.Transform=n(109),t.PassThrough=n(205)},function(e,t,n){"use strict";(function(t,o,r){var i=n(60);function s(e){var t=this;this.next=null,this.entry=null,this.finish=function(){!function(e,t,n){var o=e.entry;e.entry=null;for(;o;){var r=o.callback;t.pendingcb--,r(n),o=o.next}t.corkedRequestsFree?t.corkedRequestsFree.next=e:t.corkedRequestsFree=e}(t,e)}}e.exports=g;var a,l=!t.browser&&["v0.10","v0.9."].indexOf(t.version.slice(0,5))>-1?o:i.nextTick;g.WritableState=b;var c=n(40);c.inherits=n(36);var u={deprecate:n(204)},p=n(106),d=n(61).Buffer,h=r.Uint8Array||function(){};var f,m=n(107);function y(){}function b(e,t){a=a||n(31),e=e||{};var o=t instanceof a;this.objectMode=!!e.objectMode,o&&(this.objectMode=this.objectMode||!!e.writableObjectMode);var r=e.highWaterMark,c=e.writableHighWaterMark,u=this.objectMode?16:16384;this.highWaterMark=r||0===r?r:o&&(c||0===c)?c:u,this.highWaterMark=Math.floor(this.highWaterMark),this.finalCalled=!1,this.needDrain=!1,this.ending=!1,this.ended=!1,this.finished=!1,this.destroyed=!1;var p=!1===e.decodeStrings;this.decodeStrings=!p,this.defaultEncoding=e.defaultEncoding||"utf8",this.length=0,this.writing=!1,this.corked=0,this.sync=!0,this.bufferProcessing=!1,this.onwrite=function(e){!function(e,t){var n=e._writableState,o=n.sync,r=n.writecb;if(function(e){e.writing=!1,e.writecb=null,e.length-=e.writelen,e.writelen=0}(n),t)!function(e,t,n,o,r){--t.pendingcb,n?(i.nextTick(r,o),i.nextTick(E,e,t),e._writableState.errorEmitted=!0,e.emit("error",o)):(r(o),e._writableState.errorEmitted=!0,e.emit("error",o),E(e,t))}(e,n,o,t,r);else{var s=I(n);s||n.corked||n.bufferProcessing||!n.bufferedRequest||C(e,n),o?l(v,e,n,s,r):v(e,n,s,r)}}(t,e)},this.writecb=null,this.writelen=0,this.bufferedRequest=null,this.lastBufferedRequest=null,this.pendingcb=0,this.prefinished=!1,this.errorEmitted=!1,this.bufferedRequestCount=0,this.corkedRequestsFree=new s(this)}function g(e){if(a=a||n(31),!(f.call(g,this)||this instanceof a))return new g(e);this._writableState=new b(e,this),this.writable=!0,e&&("function"==typeof e.write&&(this._write=e.write),"function"==typeof e.writev&&(this._writev=e.writev),"function"==typeof e.destroy&&(this._destroy=e.destroy),"function"==typeof e.final&&(this._final=e.final)),p.call(this)}function _(e,t,n,o,r,i,s){t.writelen=o,t.writecb=s,t.writing=!0,t.sync=!0,n?e._writev(r,t.onwrite):e._write(r,i,t.onwrite),t.sync=!1}function v(e,t,n,o){n||function(e,t){0===t.length&&t.needDrain&&(t.needDrain=!1,e.emit("drain"))}(e,t),t.pendingcb--,o(),E(e,t)}function C(e,t){t.bufferProcessing=!0;var n=t.bufferedRequest;if(e._writev&&n&&n.next){var o=t.bufferedRequestCount,r=new Array(o),i=t.corkedRequestsFree;i.entry=n;for(var a=0,l=!0;n;)r[a]=n,n.isBuf||(l=!1),n=n.next,a+=1;r.allBuffers=l,_(e,t,!0,t.length,r,"",i.finish),t.pendingcb++,t.lastBufferedRequest=null,i.next?(t.corkedRequestsFree=i.next,i.next=null):t.corkedRequestsFree=new s(t),t.bufferedRequestCount=0}else{for(;n;){var c=n.chunk,u=n.encoding,p=n.callback;if(_(e,t,!1,t.objectMode?1:c.length,c,u,p),n=n.next,t.bufferedRequestCount--,t.writing)break}null===n&&(t.lastBufferedRequest=null)}t.bufferedRequest=n,t.bufferProcessing=!1}function I(e){return e.ending&&0===e.length&&null===e.bufferedRequest&&!e.finished&&!e.writing}function P(e,t){e._final(function(n){t.pendingcb--,n&&e.emit("error",n),t.prefinished=!0,e.emit("prefinish"),E(e,t)})}function E(e,t){var n=I(t);return n&&(!function(e,t){t.prefinished||t.finalCalled||("function"==typeof e._final?(t.pendingcb++,t.finalCalled=!0,i.nextTick(P,e,t)):(t.prefinished=!0,e.emit("prefinish")))}(e,t),0===t.pendingcb&&(t.finished=!0,e.emit("finish"))),n}c.inherits(g,p),b.prototype.getBuffer=function(){for(var e=this.bufferedRequest,t=[];e;)t.push(e),e=e.next;return t},function(){try{Object.defineProperty(b.prototype,"buffer",{get:u.deprecate(function(){return this.getBuffer()},"_writableState.buffer is deprecated. Use _writableState.getBuffer instead.","DEP0003")})}catch(e){}}(),"function"==typeof Symbol&&Symbol.hasInstance&&"function"==typeof Function.prototype[Symbol.hasInstance]?(f=Function.prototype[Symbol.hasInstance],Object.defineProperty(g,Symbol.hasInstance,{value:function(e){return!!f.call(this,e)||this===g&&(e&&e._writableState instanceof b)}})):f=function(e){return e instanceof this},g.prototype.pipe=function(){this.emit("error",new Error("Cannot pipe, not readable"))},g.prototype.write=function(e,t,n){var o,r=this._writableState,s=!1,a=!r.objectMode&&(o=e,d.isBuffer(o)||o instanceof h);return a&&!d.isBuffer(e)&&(e=function(e){return d.from(e)}(e)),"function"==typeof t&&(n=t,t=null),a?t="buffer":t||(t=r.defaultEncoding),"function"!=typeof n&&(n=y),r.ended?function(e,t){var n=new Error("write after end");e.emit("error",n),i.nextTick(t,n)}(this,n):(a||function(e,t,n,o){var r=!0,s=!1;return null===n?s=new TypeError("May not write null values to stream"):"string"==typeof n||void 0===n||t.objectMode||(s=new TypeError("Invalid non-string/buffer chunk")),s&&(e.emit("error",s),i.nextTick(o,s),r=!1),r}(this,r,e,n))&&(r.pendingcb++,s=function(e,t,n,o,r,i){if(!n){var s=function(e,t,n){e.objectMode||!1===e.decodeStrings||"string"!=typeof t||(t=d.from(t,n));return t}(t,o,r);o!==s&&(n=!0,r="buffer",o=s)}var a=t.objectMode?1:o.length;t.length+=a;var l=t.length<t.highWaterMark;l||(t.needDrain=!0);if(t.writing||t.corked){var c=t.lastBufferedRequest;t.lastBufferedRequest={chunk:o,encoding:r,isBuf:n,callback:i,next:null},c?c.next=t.lastBufferedRequest:t.bufferedRequest=t.lastBufferedRequest,t.bufferedRequestCount+=1}else _(e,t,!1,a,o,r,i);return l}(this,r,a,e,t,n)),s},g.prototype.cork=function(){this._writableState.corked++},g.prototype.uncork=function(){var e=this._writableState;e.corked&&(e.corked--,e.writing||e.corked||e.finished||e.bufferProcessing||!e.bufferedRequest||C(this,e))},g.prototype.setDefaultEncoding=function(e){if("string"==typeof e&&(e=e.toLowerCase()),!(["hex","utf8","utf-8","ascii","binary","base64","ucs2","ucs-2","utf16le","utf-16le","raw"].indexOf((e+"").toLowerCase())>-1))throw new TypeError("Unknown encoding: "+e);return this._writableState.defaultEncoding=e,this},Object.defineProperty(g.prototype,"writableHighWaterMark",{enumerable:!1,get:function(){return this._writableState.highWaterMark}}),g.prototype._write=function(e,t,n){n(new Error("_write() is not implemented"))},g.prototype._writev=null,g.prototype.end=function(e,t,n){var o=this._writableState;"function"==typeof e?(n=e,e=null,t=null):"function"==typeof t&&(n=t,t=null),null!=e&&this.write(e,t),o.corked&&(o.corked=1,this.uncork()),o.ending||o.finished||function(e,t,n){t.ending=!0,E(e,t),n&&(t.finished?i.nextTick(n):e.once("finish",n));t.ended=!0,e.writable=!1}(this,o,n)},Object.defineProperty(g.prototype,"destroyed",{get:function(){return void 0!==this._writableState&&this._writableState.destroyed},set:function(e){this._writableState&&(this._writableState.destroyed=e)}}),g.prototype.destroy=m.destroy,g.prototype._undestroy=m.undestroy,g.prototype._destroy=function(e,t){this.end(),t(e)}}).call(this,n(39),n(108).setImmediate,n(30))},function(e,t,n){"use strict";var o=n(61).Buffer,r=o.isEncoding||function(e){switch((e=""+e)&&e.toLowerCase()){case"hex":case"utf8":case"utf-8":case"ascii":case"binary":case"base64":case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":case"raw":return!0;default:return!1}};function i(e){var t;switch(this.encoding=function(e){var t=function(e){if(!e)return"utf8";for(var t;;)switch(e){case"utf8":case"utf-8":return"utf8";case"ucs2":case"ucs-2":case"utf16le":case"utf-16le":return"utf16le";case"latin1":case"binary":return"latin1";case"base64":case"ascii":case"hex":return e;default:if(t)return;e=(""+e).toLowerCase(),t=!0}}(e);if("string"!=typeof t&&(o.isEncoding===r||!r(e)))throw new Error("Unknown encoding: "+e);return t||e}(e),this.encoding){case"utf16le":this.text=l,this.end=c,t=4;break;case"utf8":this.fillLast=a,t=4;break;case"base64":this.text=u,this.end=p,t=3;break;default:return this.write=d,void(this.end=h)}this.lastNeed=0,this.lastTotal=0,this.lastChar=o.allocUnsafe(t)}function s(e){return e<=127?0:e>>5==6?2:e>>4==14?3:e>>3==30?4:e>>6==2?-1:-2}function a(e){var t=this.lastTotal-this.lastNeed,n=function(e,t,n){if(128!=(192&t[0]))return e.lastNeed=0,"�";if(e.lastNeed>1&&t.length>1){if(128!=(192&t[1]))return e.lastNeed=1,"�";if(e.lastNeed>2&&t.length>2&&128!=(192&t[2]))return e.lastNeed=2,"�"}}(this,e);return void 0!==n?n:this.lastNeed<=e.length?(e.copy(this.lastChar,t,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal)):(e.copy(this.lastChar,t,0,e.length),void(this.lastNeed-=e.length))}function l(e,t){if((e.length-t)%2==0){var n=e.toString("utf16le",t);if(n){var o=n.charCodeAt(n.length-1);if(o>=55296&&o<=56319)return this.lastNeed=2,this.lastTotal=4,this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1],n.slice(0,-1)}return n}return this.lastNeed=1,this.lastTotal=2,this.lastChar[0]=e[e.length-1],e.toString("utf16le",t,e.length-1)}function c(e){var t=e&&e.length?this.write(e):"";if(this.lastNeed){var n=this.lastTotal-this.lastNeed;return t+this.lastChar.toString("utf16le",0,n)}return t}function u(e,t){var n=(e.length-t)%3;return 0===n?e.toString("base64",t):(this.lastNeed=3-n,this.lastTotal=3,1===n?this.lastChar[0]=e[e.length-1]:(this.lastChar[0]=e[e.length-2],this.lastChar[1]=e[e.length-1]),e.toString("base64",t,e.length-n))}function p(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+this.lastChar.toString("base64",0,3-this.lastNeed):t}function d(e){return e.toString(this.encoding)}function h(e){return e&&e.length?this.write(e):""}t.StringDecoder=i,i.prototype.write=function(e){if(0===e.length)return"";var t,n;if(this.lastNeed){if(void 0===(t=this.fillLast(e)))return"";n=this.lastNeed,this.lastNeed=0}else n=0;return n<e.length?t?t+this.text(e,n):this.text(e,n):t||""},i.prototype.end=function(e){var t=e&&e.length?this.write(e):"";return this.lastNeed?t+"�":t},i.prototype.text=function(e,t){var n=function(e,t,n){var o=t.length-1;if(o<n)return 0;var r=s(t[o]);if(r>=0)return r>0&&(e.lastNeed=r-1),r;if(--o<n||-2===r)return 0;if((r=s(t[o]))>=0)return r>0&&(e.lastNeed=r-2),r;if(--o<n||-2===r)return 0;if((r=s(t[o]))>=0)return r>0&&(2===r?r=0:e.lastNeed=r-3),r;return 0}(this,e,t);if(!this.lastNeed)return e.toString("utf8",t);this.lastTotal=n;var o=e.length-(n-this.lastNeed);return e.copy(this.lastChar,0,o),e.toString("utf8",t,o)},i.prototype.fillLast=function(e){if(this.lastNeed<=e.length)return e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,this.lastNeed),this.lastChar.toString(this.encoding,0,this.lastTotal);e.copy(this.lastChar,this.lastTotal-this.lastNeed,0,e.length),this.lastNeed-=e.length}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(1),r=n(70),i=n(28),s=new i.CultureInfo(i.CultureInfo.CurrentCulture.name,i.CultureInfo.CurrentCulture.numberFormat,i.CultureInfo.CurrentCulture.dateTimeFormat);t.ParseRaw=function(e,t){var n;if(!e)return e;switch(t){case o.ManifestType.Decimal:case o.ManifestType.FP:case o.ManifestType.Currency:n=isNaN(parseFloat(e))?void 0:parseFloat(e);break;case o.ManifestType.OptionSet:case o.ManifestType.WholeNone:n=isNaN(parseInt(e,10))?void 0:parseInt(e,10);break;case o.ManifestType.DateAndTimeDateAndTime:case o.ManifestType.DateAndTimeDateOnly:n=new Date(e),isNaN(n)&&(n=void 0);break;case o.ManifestType.TwoOptions:n="true"===e;break;default:n=e}return n},t.GenerateFormatted=function(e,t){if(!e)return e;switch(t){case o.ManifestType.WholeNone:case o.ManifestType.OptionSet:return r.SimpleFormatter.formatIntegerValue(e,s);case o.ManifestType.FP:case o.ManifestType.Decimal:return r.SimpleFormatter.formatDecimalValue(e,s);case o.ManifestType.Currency:return r.SimpleFormatter.formatCurrencyValue(e,s);case o.ManifestType.DateAndTimeDateAndTime:return r.SimpleFormatter.formatShortDateTimeValue(e,s);case o.ManifestType.DateAndTimeDateOnly:return r.SimpleFormatter.formatShortDateTimeValue(e,s).split(" ")[0];default:return e}},t.ReformatInputValue=function(e,t){var n,r;if(!e)return e;switch(t){case o.ManifestType.WholeNone:r=parseInt(e,10),isNaN(r)||(n=r.toString());break;case o.ManifestType.Decimal:case o.ManifestType.FP:r=parseFloat(e),isNaN(r)||(n=r.toString());break;case o.ManifestType.Currency:r=parseFloat(e),isNaN(r)||(n=r.toFixed(2));break;case o.ManifestType.DateAndTimeDateAndTime:case o.ManifestType.DateAndTimeDateOnly:var i=Date.parse(e);isNaN(i)||(n=e.indexOf("T")<0?e+"T00:00":e.split("T")[0]);break;default:n=e}return n}},function(e,t,n){var o=n(32)(n(22),"Map");e.exports=o},function(e,t,n){var o=n(22).Symbol;e.exports=o},function(e,t,n){var o=n(120),r=n(261),i=n(124);e.exports=function(e){return i(e)?o(e):r(e)}},function(e,t){var n=Array.isArray;e.exports=n},function(e,t){e.exports=function(e){return e.webpackPolyfill||(e.deprecate=function(){},e.paths=[],e.children||(e.children=[]),Object.defineProperty(e,"loaded",{enumerable:!0,get:function(){return e.l}}),Object.defineProperty(e,"id",{enumerable:!0,get:function(){return e.i}}),e.webpackPolyfill=1),e}},function(e,t){e.exports=function(e){return function(t){return e(t)}}},function(e,t,n){(function(e){var o=n(116),r=t&&!t.nodeType&&t,i=r&&"object"==typeof e&&e&&!e.nodeType&&e,s=i&&i.exports===r&&o.process,a=function(){try{var e=i&&i.require&&i.require("util").types;return e||s&&s.binding&&s.binding("util")}catch(e){}}();e.exports=a}).call(this,n(84)(e))},function(e,t){var n=Object.prototype;e.exports=function(e){var t=e&&e.constructor;return e===("function"==typeof t&&t.prototype||n)}},function(e,t,n){var o=n(269),r=n(126),i=Object.prototype.propertyIsEnumerable,s=Object.getOwnPropertySymbols,a=s?function(e){return null==e?[]:(e=Object(e),o(s(e),function(t){return i.call(e,t)}))}:r;e.exports=a},function(e,t,n){var o=n(273),r=n(80),i=n(274),s=n(275),a=n(276),l=n(65),c=n(117),u=c(o),p=c(r),d=c(i),h=c(s),f=c(a),m=l;(o&&"[object DataView]"!=m(new o(new ArrayBuffer(1)))||r&&"[object Map]"!=m(new r)||i&&"[object Promise]"!=m(i.resolve())||s&&"[object Set]"!=m(new s)||a&&"[object WeakMap]"!=m(new a))&&(m=function(e){var t=l(e),n="[object Object]"==t?e.constructor:void 0,o=n?c(n):"";if(o)switch(o){case u:return"[object DataView]";case p:return"[object Map]";case d:return"[object Promise]";case h:return"[object Set]";case f:return"[object WeakMap]"}return t}),e.exports=m},function(e,t,n){var o=n(279);e.exports=function(e){var t=new e.constructor(e.byteLength);return new o(t).set(new o(e)),t}},function(module,__webpack_exports__,__webpack_require__){"use strict";__webpack_require__.d(__webpack_exports__,"a",function(){return CustomControlHostRoot});var react__WEBPACK_IMPORTED_MODULE_0__=__webpack_require__(0),react__WEBPACK_IMPORTED_MODULE_0___default=__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_0__),react_dom__WEBPACK_IMPORTED_MODULE_1__=__webpack_require__(10),react_dom__WEBPACK_IMPORTED_MODULE_1___default=__webpack_require__.n(react_dom__WEBPACK_IMPORTED_MODULE_1__),prop_types__WEBPACK_IMPORTED_MODULE_2__=__webpack_require__(18),prop_types__WEBPACK_IMPORTED_MODULE_2___default=__webpack_require__.n(prop_types__WEBPACK_IMPORTED_MODULE_2__),_Utilities_PopupService__WEBPACK_IMPORTED_MODULE_3__=__webpack_require__(134),_Models_PropertyBag__WEBPACK_IMPORTED_MODULE_4__=__webpack_require__(140),_Utilities_CCFPerformanceTracker__WEBPACK_IMPORTED_MODULE_5__=__webpack_require__(14),_VirtualComponentTranslator__WEBPACK_IMPORTED_MODULE_6__=__webpack_require__(93),_CommonComponents_Primitive_View__WEBPACK_IMPORTED_MODULE_7__=__webpack_require__(8),_Utilities_ManifestType__WEBPACK_IMPORTED_MODULE_8__=__webpack_require__(1),_Utilities_LearningPathHelper__WEBPACK_IMPORTED_MODULE_9__=__webpack_require__(44),_Models_CustomControlUtilityPointers__WEBPACK_IMPORTED_MODULE_10__=__webpack_require__(3),_CommonComponents_Common_MeasuringHandler_MeasuringHandler__WEBPACK_IMPORTED_MODULE_11__=__webpack_require__(17),_Utilities_TelemetryClient__WEBPACK_IMPORTED_MODULE_12__=__webpack_require__(135),_Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__=__webpack_require__(7),_Utilities_XrmProxy__WEBPACK_IMPORTED_MODULE_14__=__webpack_require__(2),_Models_CommandingWrapper__WEBPACK_IMPORTED_MODULE_15__=__webpack_require__(33),_Utilities_CustomControlHelper__WEBPACK_IMPORTED_MODULE_16__=__webpack_require__(11),_Helpers_CustomControlMemoizationHelper__WEBPACK_IMPORTED_MODULE_17__=__webpack_require__(136),_Helpers_Animation_CustomControlAnimationHelper__WEBPACK_IMPORTED_MODULE_18__=__webpack_require__(141),_Helpers_CustomControlErrorData__WEBPACK_IMPORTED_MODULE_19__=__webpack_require__(137),_Helpers_CustomControlSeeMoreHelper__WEBPACK_IMPORTED_MODULE_20__=__webpack_require__(138),_Models_CustomControlEntityReference__WEBPACK_IMPORTED_MODULE_21__=__webpack_require__(92),_Models_UpdatedPropertyConstants__WEBPACK_IMPORTED_MODULE_22__=__webpack_require__(46),_Utilities_DefaultControlMapper__WEBPACK_IMPORTED_MODULE_23__=__webpack_require__(12),_Helpers_CustomControlLocHelper__WEBPACK_IMPORTED_MODULE_24__=__webpack_require__(45),_Models_PropertyDependencyManager__WEBPACK_IMPORTED_MODULE_25__=__webpack_require__(139),__extends=(extendStatics=function(e,t){return(extendStatics=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}extendStatics(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),extendStatics,CALENDAR_CONTROL_ID="MscrmControls.Calendar.CalendarControl",GRID_CONTROL_ID="MscrmControls.Grid.GridControl",READONLY_GRID_CONTROL_ID="MscrmControls.Grid.ReadOnlyGrid",CUSTOM_CONTROL_INIT="CustomControlHostRoot.init",CUSTOM_CONTROL_UPDATE_VIEW="CustomControlHostRoot.updateView",CUSTOM_CONTROL_UPDATE_OUTPUTS="CustomControlHostRoot.updateOutputs",CUSTOM_CONTROL_DID_MOUNT="CustomControlHostRoot.componentDidMount",CUSTOM_CONTROL_DID_UPDATE="CustomControlHostRoot.componentDidUpdate",CUSTOM_CONTROL_RENDER="CustomControlHostRoot.render",CustomControlHostRoot=function(_super){function CustomControlHostRoot(e){var t=_super.call(this,e)||this;return t._internalStatus=0,t._outputChangedDebouncer=-1,t._manifestRequestedOnce=!1,t._dynamicDataRequestedOnce=!1,t._trackingDimensions=!1,t._subscriber=null,t._latestOutputs=null,t._ignoreSelfUpdates=!1,t._currentlyRendering=!1,t._skipControlUpdate=!1,t._internalState={},t._internalPendingUnsentUpdates=!1,t._outputChangedInternalInProgress=!1,t._updateInternalTracker=[],t._descendantInSeeMore=!1,t._constantHostData=null,t.state={_status:1},_Utilities_TelemetryClient__WEBPACK_IMPORTED_MODULE_12__.a.setProps(e),t._updateInternalTracker=t._updateInternalTracker.concat(e.updatedProperties),t._parentId=Object(_Utilities_CustomControlHelper__WEBPACK_IMPORTED_MODULE_16__.i)(e),t._memoHelper=new _Helpers_CustomControlMemoizationHelper__WEBPACK_IMPORTED_MODULE_17__.a,t._seeMoreHelper=new _Helpers_CustomControlSeeMoreHelper__WEBPACK_IMPORTED_MODULE_20__.a,t._errorData=new _Helpers_CustomControlErrorData__WEBPACK_IMPORTED_MODULE_19__.a,t._customControlName=t.props.manifest?t.props.manifest.ConstructorName:t.props.configuration.CustomControlId,t._componentName=_Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.a+"."+t._customControlName,t}return __extends(CustomControlHostRoot,_super),CustomControlHostRoot.prototype._setGlobalCommandManagerPromise=function(e){this._globalCommandManagerPromise=e},CustomControlHostRoot.prototype._getGlobalCommandManagerPromise=function(){return this._globalCommandManagerPromise},CustomControlHostRoot.prototype._getPopupService=function(){return this._popupService||(this._popupService=new _Utilities_PopupService__WEBPACK_IMPORTED_MODULE_3__.a(this)),this._popupService},CustomControlHostRoot.prototype._initializeData=function(){var e=this;this._internalStatus=1,this._propertyBag=this._createPropertyBag();var t=[],n=this._loadResources();n&&t.push(n),this._ensureParameterDynamicDataInitialization(this.props),this.props.manifest.ConstructorName!==CALENDAR_CONTROL_ID&&this.props.manifest.ConstructorName!==GRID_CONTROL_ID&&this.props.manifest.ConstructorName!==READONLY_GRID_CONTROL_ID||(this._updateTrackResize(!0),this.props.parentDefinedControlProps&&this.props.parentDefinedControlProps.toggleDimensionListener||!this._trackingDimensions||t.push(new Promise(function(t){e._resolveWidth=t}))),this.props.actions.setXrmObject&&this._setXrmObject();var o=function(){_Utilities_CCFPerformanceTracker__WEBPACK_IMPORTED_MODULE_5__.a.scheduleControlUpdate(function(){5!==e._internalStatus&&(e._internalStatus=2,e._initializeControl())})};0===t.length?o():Promise.all(t).then(o,function(){_Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(e.props,new Error("initialize data failed"),"_initializeData",e._parentId),e._onControlLoadedError(),e._setErrorData("initialize data failed for control: "+e.props.manifest.CustomControlId),e.setState({_status:0})})},CustomControlHostRoot.prototype._isVirtual=function(){return!this.props.manifest||this.props.manifest.IsVirtual},CustomControlHostRoot.prototype._seeMoreCallback=function(e){var t=this._isVirtual();this._skipControlUpdate=e?t:!t,this._forceUpdate()},CustomControlHostRoot.prototype._descendantSeeMoreUpdate=function(e){this._descendantInSeeMore=e,this._skipControlUpdate=!0,this._forceUpdate()},CustomControlHostRoot.prototype._getDomIdDivStyleProperties=function(e){var t={width:"100%",maxWidth:this.props.parentDefinedControlProps&&!_Models_CustomControlUtilityPointers__WEBPACK_IMPORTED_MODULE_10__.c(this.props.parentDefinedControlProps.width)&&this.props.parentDefinedControlProps.width>0?this.props.parentDefinedControlProps.width+"px":null,maxHeight:this.props.parentDefinedControlProps&&!_Models_CustomControlUtilityPointers__WEBPACK_IMPORTED_MODULE_10__.c(this.props.parentDefinedControlProps.height)&&this.props.parentDefinedControlProps.height>0?this.props.parentDefinedControlProps.height+"px":null};return e&&!e.Visible&&(t.display="none"),t},CustomControlHostRoot.prototype._createPropertyBag=function(){var e=this,t={getPopupService:this._getPopupService.bind(this),forceUpdate:function(t){_Utilities_CCFPerformanceTracker__WEBPACK_IMPORTED_MODULE_5__.a.scheduleControlUpdate(e._forceUpdate.bind(e,t))},bindDOMElement:this._bindDOMElement.bind(this),unbindDOMComponent:this._unbindDOMComponent.bind(this),updateComponent:this._updateChildComponent.bind(this),setGlobalCommandManagerPromise:this._setGlobalCommandManagerPromise.bind(this),getGlobalCommandManagerPromise:this._getGlobalCommandManagerPromise.bind(this),xrmProxy:_Utilities_XrmProxy__WEBPACK_IMPORTED_MODULE_14__.default};return new _Models_PropertyBag__WEBPACK_IMPORTED_MODULE_4__.a(this.props,t)},CustomControlHostRoot.prototype._updateSelfUpdateIgnore=function(e){this._ignoreSelfUpdates=e},CustomControlHostRoot.prototype._updateTrackResize=function(e){this._trackingDimensions!==e&&(this._trackingDimensions=e,this.props.parentDefinedControlProps&&this.props.parentDefinedControlProps.toggleDimensionListener?this.props.parentDefinedControlProps.toggleDimensionListener(this._trackingDimensions):this._trackingDimensions?(null===this._subscriber&&(this._subscriber={getComponent:this._getComponent.bind(this),onMeasure:this._updateDimensions.bind(this)}),_CommonComponents_Common_MeasuringHandler_MeasuringHandler__WEBPACK_IMPORTED_MODULE_11__.a.getInstance().addMeasuringSubscribers(this._subscriber),_CommonComponents_Common_MeasuringHandler_MeasuringHandler__WEBPACK_IMPORTED_MODULE_11__.a.getInstance().scheduleMeasuringUpdate()):(this._subscriber&&_CommonComponents_Common_MeasuringHandler_MeasuringHandler__WEBPACK_IMPORTED_MODULE_11__.a.getInstance().removeMeasuringSubscribers(this._subscriber),this._forceUpdate()))},CustomControlHostRoot.prototype._loadManifest=function(){var e=this;return this.props.manifest||this._manifestRequestedOnce?Promise.resolve(null):this.props.actions.loadManifest?(this._manifestRequestedOnce=!0,new Promise(function(t,n){e.props.actions.loadManifest(e.props.configuration.CustomControlId,e.props.configuration.Name).then(t,n)}).then(function(){return null})):(_Utilities_XrmProxy__WEBPACK_IMPORTED_MODULE_14__.default.Diagnostics.traceWarning(this._componentName+"._loadManifest","Manifest not found for control with id "+this.props.controlId),Promise.reject("Manifest not found for control with id "+this.props.controlId))},CustomControlHostRoot.prototype._loadResources=function(){return this.props.actions.loadResources(this.props.manifest)},CustomControlHostRoot.prototype._setXrmObject=function(){return this.props.actions.setXrmObject(_Utilities_XrmProxy__WEBPACK_IMPORTED_MODULE_14__.default)},CustomControlHostRoot.prototype._bindDOMElement=function(e,t){try{var n=_VirtualComponentTranslator__WEBPACK_IMPORTED_MODULE_6__.a.renderVirtualComponent(e,this.props,this._generateHostData(),this._memoHelper,!1);null==this._childElements&&(this._childElements={}),this._childElements[e.getComponentId()]=t,this.props.actions.renderReactSubtree(this,n,t)}catch(e){throw _Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(this.props,e,"_bindDOMElement",this._parentId),e}},CustomControlHostRoot.prototype._updateChildComponent=function(){},CustomControlHostRoot.prototype._forceUpdate=function(e){if(!this._currentlyRendering){var t=this.props.propBagData.utilsData.scheduleRender;t?t(this.forceUpdate.bind(this,e)):this.forceUpdate(e)}},CustomControlHostRoot.prototype._unbindDOMComponent=function(e){var t=!1;if(null!=this._childElements){var n=this._childElements[e];null!=n&&(t=react_dom__WEBPACK_IMPORTED_MODULE_1__.unmountComponentAtNode(n))&&(this.props.actions.clearNestedChild(e),delete this._childElements[e])}return t},CustomControlHostRoot.prototype._clearAllDOMComponents=function(){var e=!0;for(var t in this._childElements)e=e&&this._unbindDOMComponent(t);return e},CustomControlHostRoot.prototype._ensureParameterDynamicDataInitialization=function(e){if(!this._dynamicDataRequestedOnce){if(this._dynamicDataRequestedOnce=!0,Object(_Utilities_CustomControlHelper__WEBPACK_IMPORTED_MODULE_16__.k)(this.props.manifest)){var t=this.props.controlId;this.props.actions.createXrmGrid(this.props.contextToken,this.props.id,this.props.configuration.Parameters,t)||_Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(this.props,new Error("Error creating the Xrm grid object"),CUSTOM_CONTROL_INIT,this._parentId)}for(var n in e.dynamicData.parameters){var o=e.dynamicData.parameters[n];if(o&&o.getParameterManifestType){var r=o.getParameterManifestType();this._commandingWrapper||r!==_Utilities_ManifestType__WEBPACK_IMPORTED_MODULE_8__.ManifestType.Grid&&r!==_Utilities_ManifestType__WEBPACK_IMPORTED_MODULE_8__.ManifestType.TimelineWall||(this._commandingWrapper=new _Models_CommandingWrapper__WEBPACK_IMPORTED_MODULE_15__.a(e))}if(o&&o.ensureDataInitialization){var i=o;(r=i.getParameterManifestType())===_Utilities_ManifestType__WEBPACK_IMPORTED_MODULE_8__.ManifestType.Grid?(this._commandingWrapper.addDataSetWrapper(i),i.ensureDataInitialization({retrieveAction:e.actions.retrieveGridData,retrieveViewAction:e.actions.retrieveView,retrieveViewSelectorAction:e.actions.retrieveViewSelector,refreshDataSetParameter:e.actions.refreshDataSetParameter,retrieveLookupMetadataAction:e.actions.retrieveLookupMetadataAction,retrieveDataSetLookupCellParameter:e.actions.retrieveDataSetLookupCellParameter,executeAddOnLoad:e.actions.executeAddOnLoad,updateFieldValue:e.actions.updateFieldValue,saveEmbeddedEntity:e.actions.saveEmbeddedEntity,executeNotifyHandlersThatEventOccurred:e.actions.executeNotifyHandlersThatEventOccurred,addSessionTab:e.actions.addSessionTab,closeSessionTab:e.actions.closeSessionTab,updateSessionTab:e.actions.updateSessionTab,closeAllSessionTabs:e.actions.closeAllSessionTabs,dismissMessage:e.actions.dismissMessage,markActiveTab:e.actions.markActiveTab,initializeReferencePanelControl:e.actions.initializeReferencePanelControl,cleanReferencePanelState:e.actions.cleanReferencePanelState,openDatasetItem:null,retrieveEntityData:e.actions.retrieveEntityData,retrieveForm:e.actions.retrieveForm,retrieveRecordForForm:e.actions.retrieveRecordDataForForm,forceUpdate:this._forceUpdate.bind(this),updateControlMemoizedDataSet:e.actions.updateControlMemoizedDataSet,loadWebResource:e.actions.loadWebResource})):r===_Utilities_ManifestType__WEBPACK_IMPORTED_MODULE_8__.ManifestType.QuickForm&&i.ensureDataInitialization({retrieveAction:e.actions.retrieveGridData,retrieveViewAction:e.actions.retrieveView,retrieveViewSelectorAction:e.actions.retrieveViewSelector,refreshDataSetParameter:e.actions.refreshDataSetParameter,retrieveLookupMetadataAction:e.actions.retrieveLookupMetadataAction,retrieveDataSetLookupCellParameter:e.actions.retrieveDataSetLookupCellParameter,executeAddOnLoad:e.actions.executeAddOnLoad,updateFieldValue:e.actions.updateFieldValue,saveEmbeddedEntity:e.actions.saveEmbeddedEntity,executeNotifyHandlersThatEventOccurred:e.actions.executeNotifyHandlersThatEventOccurred,addSessionTab:e.actions.addSessionTab,closeSessionTab:e.actions.closeSessionTab,updateSessionTab:e.actions.updateSessionTab,closeAllSessionTabs:e.actions.closeAllSessionTabs,dismissMessage:e.actions.dismissMessage,markActiveTab:e.actions.markActiveTab,initializeReferencePanelControl:e.actions.initializeReferencePanelControl,cleanReferencePanelState:e.actions.cleanReferencePanelState,openDatasetItem:null,retrieveEntityData:e.actions.retrieveEntityData,retrieveForm:e.actions.retrieveForm,retrieveRecordForForm:e.actions.retrieveRecordDataForForm,forceUpdate:this._forceUpdate.bind(this),updateControlMemoizedDataSet:e.actions.updateControlMemoizedDataSet,loadWebResource:e.actions.loadWebResource})}if(o&&o.ensureLookupMetaDataInitialization){if(!(this.props.descriptor.Parameters&&this.props.descriptor.Parameters.delayMetadataInitialization))o.ensureLookupMetaDataInitialization({retrieveLookupMetadataAction:e.actions.retrieveLookupMetadataAction,refreshDataSetParameter:e.actions.refreshDataSetParameter})}if(o&&o.ensureTimelinewallCommandsInitialization)(r=o.getParameterManifestType())===_Utilities_ManifestType__WEBPACK_IMPORTED_MODULE_8__.ManifestType.TimelineWall&&o.ensureTimelinewallCommandsInitialization(e);o&&o.setControlReRender&&o.setControlReRender(this._forceUpdate.bind(this))}}},CustomControlHostRoot.prototype._initializeControl=function(){if(this._ensureParameterDynamicDataInitialization(this.props),this.props.dynamicData.dataReady&&3!==this._internalStatus&&this.props.propBagData.resourcesData.stringsLoaded){var generatedPropertyBag;this._internalStatus=3;try{var stop_1=_Utilities_CCFPerformanceTracker__WEBPACK_IMPORTED_MODULE_5__.a.startLifecycleStopwatch("constructor",this.props.controlId,this.props.manifest.CustomControlId);this._controlInstance=eval("new "+this.props.manifest.ConstructorName+"()"),stop_1(),generatedPropertyBag=this._propertyBag.generateBag(this.props,this._generateHostDataForPropertyBag());var virtualcontrol=this._isVirtual();try{if(Object(_Utilities_CustomControlHelper__WEBPACK_IMPORTED_MODULE_16__.l)(this.props.configuration)){var recordInfo=Object(_Utilities_CustomControlHelper__WEBPACK_IMPORTED_MODULE_16__.j)(this.props),entityTypeName=recordInfo.entityTypeName,recordId=recordInfo.recordId;recordId||(recordId=this.props.propBagData.modeData?this.props.propBagData.modeData.entityId:null),recordId&&!this.props.actions.createXrmForm(this.props.contextToken,this.props.id,entityTypeName,recordId)&&_Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(this.props,new Error("Error creating the Xrm form object"),CUSTOM_CONTROL_INIT,this._parentId)}}catch(e){throw _Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(this.props,new Error("Error creating the Xrm form object"),CUSTOM_CONTROL_INIT,this._parentId,"The first inner catch block"),e}if(this._shouldHandleDependencyUpdate()&&(this._propertyDependencyManager=new _Models_PropertyDependencyManager__WEBPACK_IMPORTED_MODULE_25__.a(this.props),this._getOutputSchemaAction=this._controlInstance.getOutputSchema.bind(this._controlInstance),this._propertyDependencyManager.handleDependencyUpdate(this.props,this._getOutputSchemaAction,generatedPropertyBag)),virtualcontrol){this._executeAnyOnLoadEventsWhenNeeded();var bindOutput=this._onOutputChanged.bind(this),propPersonalizationState=this.props.personalizationState;try{var initStop=_Utilities_CCFPerformanceTracker__WEBPACK_IMPORTED_MODULE_5__.a.startLifecycleStopwatch("init",this.props.controlId,this.props.manifest.CustomControlId);this._controlInstance.init(generatedPropertyBag,bindOutput,propPersonalizationState),initStop()}catch(e){throw _Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(this.props,e,CUSTOM_CONTROL_INIT,this._parentId,"The second inner catch block"),e}}else{this._executeAnyOnLoadEventsWhenNeeded();var element=this._rootElement;if(!element)return;element.setAttribute("data-id",this.props.controlId+"_container");var bindOutput=this._onOutputChanged.bind(this),propPersonalizationState=this.props.personalizationState;try{var initStop=_Utilities_CCFPerformanceTracker__WEBPACK_IMPORTED_MODULE_5__.a.startLifecycleStopwatch("init",this.props.controlId,this.props.manifest.CustomControlId);this._controlInstance.init(generatedPropertyBag,bindOutput,propPersonalizationState,element),initStop()}catch(e){throw _Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(this.props,e,CUSTOM_CONTROL_INIT,this._parentId,"The thrid inner catch block"),e}}var accessibilityData=this._propertyBag.getAccessibilityData();if(accessibilityData&&accessibilityData.keyboardShortcuts&&accessibilityData.keyboardShortcuts.length>0){var props={id:this.props.controlId,keyboardShortcuts:accessibilityData.keyboardShortcuts};this._accessibilityComponent=this.props.actions.createAccessibilityComponent(props)}else this._accessibilityComponent=null;this._internalStatus=4,virtualcontrol?this.forceUpdate():this._updateControl()}catch(e){_Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(this.props,e,CUSTOM_CONTROL_INIT,this._parentId,"The outer catch block"),this._onControlLoadedError(e);var message="Error occured during initialization of control: "+this.props.manifest.CustomControlId+";Message: "+e.message;this._setErrorData(message,e.stack),this.setState({_status:0})}}},CustomControlHostRoot.prototype._updateControl=function(){if(this._skipControlUpdate)this._skipControlUpdate=!1;else if(!this._isVirtual()){var e=_Utilities_CCFPerformanceTracker__WEBPACK_IMPORTED_MODULE_5__.a.trackWork(this._componentName+".updateControl"),t=void 0;try{var n=this._controlInstance;t=this._propertyBag.generateBag(this.props,this._generateHostDataForPropertyBag()),this._executeAnyOnLoadEventsWhenNeeded(),this._currentlyRendering=!0;try{if(void 0===this.props.shouldRender||this.props.shouldRender){this._shouldHandleDependencyUpdate()&&this._propertyDependencyManager.handleDependencyUpdate(this.props,this._getOutputSchemaAction,t);var o=_Utilities_CCFPerformanceTracker__WEBPACK_IMPORTED_MODULE_5__.a.startLifecycleStopwatch("updateView",this.props.controlId,this.props.manifest.CustomControlId);n.updateView(t),o()}}catch(e){_Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(this.props,e,CUSTOM_CONTROL_UPDATE_VIEW,this._parentId,"instance.updateView failure")}this._currentlyRendering=!1}catch(e){_Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(this.props,e,CUSTOM_CONTROL_INIT,this._parentId,"Probably failed to generageBag","ControlFramework")}e()}},CustomControlHostRoot.prototype._executeAnyOnLoadEventsWhenNeeded=function(){if(this.props.dynamicData&&this.props.dynamicData.parameters)for(var e in this.props.dynamicData.parameters)if(this.props.dynamicData.parameters[e]&&this.props.dynamicData.parameters[e]){var t=this.props.dynamicData.parameters[e],n=t;n&&n.getParameterManifestType&&n.getUpdateFlag&&n.getParameterManifestType()===_Utilities_ManifestType__WEBPACK_IMPORTED_MODULE_8__.ManifestType.Grid&&n.getUpdateFlag()&&this.props.actions.executeAddOnLoad(t,this.props.contextToken)}},CustomControlHostRoot.prototype._disposeControl=function(){try{this._clearAllDOMComponents();try{this._internalWorkPromiseResolve&&!this._outputChangedInternalInProgress&&this._onOutputChangedInternal();var e=_Utilities_CCFPerformanceTracker__WEBPACK_IMPORTED_MODULE_5__.a.startLifecycleStopwatch("destroy",this.props.controlId,this.props.manifest.CustomControlId);this._controlInstance.destroy(),e()}catch(e){_Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(this.props,e,"_disposeControl",this._parentId,"Custom control failed to destroy")}}catch(e){_Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(this.props,e,"_disposeControl",this._parentId,"Probably failed to clearAllDOMComponents","ControlFramework")}},CustomControlHostRoot.prototype._onControlLoadedError=function(e){void 0===e&&(e=null),this.props.parentDefinedControlProps&&this.props.parentDefinedControlProps.onControlLoadedError&&this.props.parentDefinedControlProps.onControlLoadedError(e)},CustomControlHostRoot.prototype._onOutputChanged=function(e){var t=this;if(void 0===e&&(e=!1),-1===this._outputChangedDebouncer||e||window.clearTimeout(this._outputChangedDebouncer),5!==this._internalStatus)if(!this._internalPendingUnsentUpdates||e){var n=this._onOutputChangedInternal.bind(this);this.props.actions.registerOngoingWork&&!this._internalWorkPromiseResolve&&this.props.actions.registerOngoingWork(new Promise(function(e){t._internalWorkPromiseResolve=e}),e?n:null,this.props.id),e?this._internalPendingUnsentUpdates=!0:this._outputChangedDebouncer=window.setTimeout(n,100)}else this._onOutputChangedInternal();else _Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportUsage(this.props,"NotifyOutputChanged was called by a destroyed control")},CustomControlHostRoot.prototype._onOutputChangedInternal=function(){var e,t,n=this;this._outputChangedDebouncer=-1,this._outputChangedInternalInProgress=!0;try{if(5!==this._internalStatus){var o=_Utilities_CCFPerformanceTracker__WEBPACK_IMPORTED_MODULE_5__.a.startLifecycleStopwatch("getOutputs",this.props.controlId,this.props.manifest.CustomControlId),r=this._controlInstance.getOutputs();o(),this._latestOutputs=r;var i={},s=function(e){if(!(t=a.props.manifest.Properties.Properties[e])&&a.props.manifest.Properties.Properties instanceof Array&&(t=a.props.manifest.Properties.Properties.find(function(t){return t.Name===e})),t){var n=a.props.configuration.Parameters[e],o=a.props.dynamicData.parameters[e],s=void 0;s=o.getLatestData?o.getLatestData():o;var l={value:r[e],type:t.Usage,paramType:s.type};if(0===t.Usage&&n&&3===n.Usage){var c=n;s.type===_Utilities_ManifestType__WEBPACK_IMPORTED_MODULE_8__.ManifestType.LookupSimple||s.type===_Utilities_ManifestType__WEBPACK_IMPORTED_MODULE_8__.ManifestType.LookupCustomer||s.type===_Utilities_ManifestType__WEBPACK_IMPORTED_MODULE_8__.ManifestType.LookupOwner||s.type===_Utilities_ManifestType__WEBPACK_IMPORTED_MODULE_8__.ManifestType.LookupPartyList||s.type===_Utilities_ManifestType__WEBPACK_IMPORTED_MODULE_8__.ManifestType.LookupRegarding?c.Callback(a._convertValueToSdkFormat(l)):c.Callback(r[e])}else 0!==t.Usage&&2!==t.Usage||(s.attributes&&s.attributes.LogicalName&&(l.fieldName=s.attributes.LogicalName),s.type!==_Utilities_ManifestType__WEBPACK_IMPORTED_MODULE_8__.ManifestType.LookupSimple&&s.type!==_Utilities_ManifestType__WEBPACK_IMPORTED_MODULE_8__.ManifestType.LookupCustomer&&s.type!==_Utilities_ManifestType__WEBPACK_IMPORTED_MODULE_8__.ManifestType.LookupOwner&&s.type!==_Utilities_ManifestType__WEBPACK_IMPORTED_MODULE_8__.ManifestType.LookupPartyList&&s.type!==_Utilities_ManifestType__WEBPACK_IMPORTED_MODULE_8__.ManifestType.LookupRegarding||(l.value=a._convertValueToSdkFormat(l)),i[e]=l)}},a=this;for(var l in r)s(l);var c=this.props.formInfo?this.props.formInfo.EntityName:null,u=this.props.formInfo?this.props.formInfo.RecordId:null,p=this.props.parentDefinedControlProps&&this.props.parentDefinedControlProps.closestParentWithContext;e=this.props.actions.updateOutputs(this.props.id,c,u,this.props.controlId,p,i,this.props.contextToken)}}catch(e){_Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(this.props,e,CUSTOM_CONTROL_UPDATE_OUTPUTS,this._parentId,"The outer catch block")}finally{this._outputChangedInternalInProgress=!1,this._internalWorkPromiseResolve&&(e?e.then(function(){n._internalWorkPromiseResolve(!0),n._internalWorkPromiseResolve=null,n._internalPendingUnsentUpdates=!1},function(){n._internalWorkPromiseResolve(!0),n._internalWorkPromiseResolve=null,n._internalPendingUnsentUpdates=!1}):(this._internalWorkPromiseResolve(!0),this._internalWorkPromiseResolve=null,this._internalPendingUnsentUpdates=!1))}},CustomControlHostRoot.prototype._convertValueToSdkFormat=function(e){var t=[];if(_Models_CustomControlUtilityPointers__WEBPACK_IMPORTED_MODULE_10__.c(e)||_Models_CustomControlUtilityPointers__WEBPACK_IMPORTED_MODULE_10__.c(e.value))return t;if(Array.isArray(e.value))for(var n=0,o=e.value;n<o.length;n++){var r=o[n];t.push(new _Models_CustomControlEntityReference__WEBPACK_IMPORTED_MODULE_21__.a(r.entityName||r.entityType,r.id,r.name))}else t.push(new _Models_CustomControlEntityReference__WEBPACK_IMPORTED_MODULE_21__.a(e.value.entityName||e.value.entityType,e.value.id,e.value.name));return t},CustomControlHostRoot.prototype._getAllocatedHeight=function(){return this._seeMoreHelper.shouldGivePoppedOutDimensions(this._isVirtual())?this._seeMoreHelper.getSeeMorePopupInfo().endHeightInner:this.props.parentDefinedControlProps&&!_Models_CustomControlUtilityPointers__WEBPACK_IMPORTED_MODULE_10__.c(this.props.parentDefinedControlProps.height)?this.props.parentDefinedControlProps.height:_Models_CustomControlUtilityPointers__WEBPACK_IMPORTED_MODULE_10__.c(this._internalState._latestHeight)?-1:this._internalState._latestHeight},CustomControlHostRoot.prototype._getAllocatedWidth=function(){return this._seeMoreHelper.shouldGivePoppedOutDimensions(this._isVirtual())?this._seeMoreHelper.getSeeMorePopupInfo().endWidthInner:this.props.parentDefinedControlProps&&!_Models_CustomControlUtilityPointers__WEBPACK_IMPORTED_MODULE_10__.c(this.props.parentDefinedControlProps.width)?this.props.parentDefinedControlProps.width:_Models_CustomControlUtilityPointers__WEBPACK_IMPORTED_MODULE_10__.c(this._internalState._latestWidth)?-1:this._internalState._latestWidth},CustomControlHostRoot.prototype._generateHostDataForPropertyBag=function(){var e=this._generateHostData();return e.updatedProperties!==this._updateInternalTracker&&(e.updatedProperties=this._updateInternalTracker,this._updateInternalTracker.length>0&&(this._updateInternalTracker=[])),e},CustomControlHostRoot.prototype._seeMorePopup=function(e,t){switch(void 0===t&&(t=!1),this._seeMoreHelper.getSeeMorePopupStatus()){case-1:if(!e)return;this._updateInternalTracker.push(_Models_UpdatedPropertyConstants__WEBPACK_IMPORTED_MODULE_22__.b);break;case 2:if(e)return;this._updateInternalTracker.push(_Models_UpdatedPropertyConstants__WEBPACK_IMPORTED_MODULE_22__.a)}this.props.parentDefinedControlProps&&this.props.parentDefinedControlProps.alertParentInSeeMore&&this.props.parentDefinedControlProps.alertParentInSeeMore(e);var n=this.props.propBagData&&this.props.propBagData.clientData?this.props.propBagData.clientData.isRTL:null;this._seeMoreHelper.seeMorePopup(this._getComponent(),this._seeMoreCallback.bind(this),e,t,n)},CustomControlHostRoot.prototype._generateHostData=function(){return this._constantHostData||(this._constantHostData={allocatedHeight:-1,allocatedWidth:-1,trackResize:this._updateTrackResize.bind(this),updateFullscreen:this._seeMorePopup.bind(this),ignoreUpdates:this._updateSelfUpdateIgnore.bind(this),updatedProperties:[],isInSeeMoreMode:!1,isInTopMostSeeMore:!1,updateDescendantSeeMore:this._descendantSeeMoreUpdate.bind(this)}),this._constantHostData.isInSeeMoreMode=-1!==this._seeMoreHelper.getSeeMorePopupStatus()||this.props.parentDefinedControlProps&&this.props.parentDefinedControlProps.parentInSeeMoreMode,this._constantHostData.isInTopMostSeeMore=this._constantHostData.isInSeeMoreMode&&!this._descendantInSeeMore,this._trackingDimensions?Object.assign({},this._constantHostData,{allocatedHeight:this._getAllocatedHeight(),allocatedWidth:this._getAllocatedWidth()}):this._constantHostData},CustomControlHostRoot.prototype._getComponent=function(){return this._rootElement?this._rootElement:react_dom__WEBPACK_IMPORTED_MODULE_1__.findDOMNode(this)},CustomControlHostRoot.prototype._updateDimensions=function(e){this._trackingDimensions&&e!==this._internalState._latestWidth&&(this._internalState=Object.assign(this._internalState,{_latestWidth:e}),this._updateInternalTracker.push(_Models_UpdatedPropertyConstants__WEBPACK_IMPORTED_MODULE_22__.c),this._resolveWidth&&(this._resolveWidth(),this._resolveWidth=null),this._forceUpdate())},CustomControlHostRoot.prototype.componentWillUnmount=function(){try{var e=_Utilities_CCFPerformanceTracker__WEBPACK_IMPORTED_MODULE_5__.a.createPerformanceEvent("CustomControlHostRoot.componentWillUnmount",this.props.logLevel).startStopwatch({controlId:this.props.controlId,manifestControlName:this.props.manifest&&this.props.manifest.CustomControlId,parentId:this._parentId,level:2..toString()});this._commandingWrapper&&this._commandingWrapper.unmount(),4===this._internalStatus&&this._disposeControl(),this._subscriber&&_CommonComponents_Common_MeasuringHandler_MeasuringHandler__WEBPACK_IMPORTED_MODULE_11__.a.getInstance().removeMeasuringSubscribers(this._subscriber),this._memoHelper&&this._memoHelper.destroy(),this._seeMoreHelper&&this._seeMoreHelper.destroy(),this._internalStatus=5,e()}catch(e){throw _Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(this.props,e,"componentWillUnmount",this._parentId,null,"ControlFramework"),e}},CustomControlHostRoot.prototype.componentDidMount=function(){var e=this;try{var t=_Utilities_CCFPerformanceTracker__WEBPACK_IMPORTED_MODULE_5__.a.createPerformanceEvent("CustomControlHostRoot.componentDidMount",this.props.logLevel).startStopwatch({controlId:this.props.controlId,manifestControlName:this.props.manifest&&this.props.manifest.CustomControlId,parentId:this._parentId,level:2..toString()});if(this.props.stateToPropsMappingError||this._manifestRetrieveFailed||0===this.state._status){if(0!==this.state._status){var n=new Error("Error while mapping state to props during ComponentDidMount for control: "+this.props.controlId+(this.props.stateToPropsMappingErrorMessage?". Error message:"+this.props.stateToPropsMappingErrorMessage:"."));_Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(this.props,n,CUSTOM_CONTROL_DID_MOUNT,this._parentId),this._onControlLoadedError(),this._setErrorData("Error while mapping state to props during ComponentDidMount for control: "+this.props.controlId),this.setState({_status:0})}return}if(!this.props.manifest)return void(this._manifestRequestedOnce||this._loadManifest().catch(function(t){if(_Utilities_DefaultControlMapper__WEBPACK_IMPORTED_MODULE_23__.d.hasOwnProperty(e.props.configuration.CustomControlId))return e._manifestRequestedOnce=!1,void Object(_Utilities_DefaultControlMapper__WEBPACK_IMPORTED_MODULE_23__.i)(e.props.configuration.CustomControlId,_Utilities_DefaultControlMapper__WEBPACK_IMPORTED_MODULE_23__.d[e.props.configuration.CustomControlId]);e._onControlLoadedError(t),e._manifestRetrieveFailed=!0,_Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(e.props,t,CUSTOM_CONTROL_DID_MOUNT,e._parentId,"Error while retrieving manifest during ComponentDidMount for control:"+e.props.controlId),e._setErrorData("Error while retrieving manifest during ComponentDidMount for control: "+e.props.controlId),e.setState({_status:0})}));switch(this._internalStatus){case 0:this._initializeData();break;case 2:this._initializeControl();break;case 4:this._updateControl()}t()}catch(e){throw _Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(this.props,e,"componentDidMount",this._parentId,null,"ControlFramework"),e}},CustomControlHostRoot.prototype.componentWillReceiveProps=function(e){this._updateInternalTracker=this._updateInternalTracker.concat(e.updatedProperties)},CustomControlHostRoot.prototype.componentDidUpdate=function(){var e=this;try{if(this.props.stateToPropsMappingError||this._manifestRetrieveFailed||0===this.state._status)return void(0!==this.state._status&&(_Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(this.props,new Error("Error while mapping state to props during ComponentDidUpdate for control: "+this.props.controlId),CUSTOM_CONTROL_DID_UPDATE,this._parentId),this._setErrorData("Error while mapping state to props during ComponentDidUpdate for control: "+this.props.controlId),this._onControlLoadedError(),this.setState({_status:0})));if(-1!==this._seeMoreHelper.getSeeMorePopupStatus()&&this._seeMoreHelper.checkOnPopupStatus(this._isVirtual(),this._memoHelper.getIsCompositing(),this._getComponent()),!this.props.manifest)return void(this._manifestRequestedOnce||this._loadManifest().catch(function(t){_Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(e.props,t,CUSTOM_CONTROL_DID_UPDATE,e._parentId),e._setErrorData("Error while retrieving manifest during ComponentDidUpdate for control: "+e.props.controlId),e._manifestRetrieveFailed=!0,e._onControlLoadedError(t),e.setState({_status:0})}));switch(this._internalStatus){case 0:this._initializeData();break;case 2:this._initializeControl();break;case 4:this._updateControl()}this._registerToLearningPath()}catch(e){throw _Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(this.props,e,"componentDidUpdate",this._parentId,null,"ControlFramework"),e}},CustomControlHostRoot.prototype._registerToLearningPath=function(){if(4===this._internalStatus&&this._propertyBag){var e=this._propertyBag.getLearningPathBag();_Utilities_LearningPathHelper__WEBPACK_IMPORTED_MODULE_9__.a.registerToLearningPath(this._getComponent(),e.DOMAttributeName,e.baseControlId)}},CustomControlHostRoot.prototype.shouldComponentUpdate=function(e){try{if(!this._ignoreSelfUpdates||!this._latestOutputs||!e.dynamicData.updated)return!0;if(e.updatedProperties)for(var t=0,n=e.updatedProperties;t<n.length;t++){var o=n[t];if(o!==_Models_UpdatedPropertyConstants__WEBPACK_IMPORTED_MODULE_22__.d&&!e.dynamicData.parameters.hasOwnProperty(o))return!0}for(var r in e.dynamicData.parameters)if(e.dynamicData.parameters[r]&&e.dynamicData.parameters[r].hasOwnProperty("raw"))if(this._latestOutputs&&this._latestOutputs.hasOwnProperty(r)){var i=e.dynamicData.parameters[r].raw;if(!_Models_CustomControlUtilityPointers__WEBPACK_IMPORTED_MODULE_10__.c(i)&&i.equals?!i.equals(this._latestOutputs[r]):i!==this._latestOutputs[r])return!0}else if(this.props.dynamicData.parameters&&this.props.dynamicData.parameters[r]&&this.props.dynamicData.parameters[r]!==e.dynamicData.parameters[r])return!0;return!1}catch(e){throw _Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(this.props,e,"shouldComponentUpdate",this._parentId,null,"ControlFramework"),e}},CustomControlHostRoot.prototype._renderMainControlComponent=function(){var e;try{if(4===this._internalStatus&&this._isVirtual()){if(this._skipControlUpdate)return this._skipControlUpdate=!1,this._currentlyRendering=!1,this._memoHelper.getRoot();var t=void 0,n=void 0,o=this._controlInstance;if(this._executeAnyOnLoadEventsWhenNeeded(),e=this._propertyBag.generateBag(this.props,this._generateHostDataForPropertyBag()),void 0===this.props.shouldRender||this.props.shouldRender){try{this._shouldHandleDependencyUpdate()&&this._propertyDependencyManager.handleDependencyUpdate(this.props,this._getOutputSchemaAction,e);var r=_Utilities_CCFPerformanceTracker__WEBPACK_IMPORTED_MODULE_5__.a.startLifecycleStopwatch("updateView",this.props.controlId,this.props.manifest.CustomControlId);t=o.updateView(e),r(),this._currentlyRendering=!1}catch(e){return _Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(this.props,e,"_renderMainControlComponent",this._parentId),this._setErrorData("Custom Control with Id: "+this.props.manifest.CustomControlId+" failed to render; Message: "+e.message,e.stack),this._getErrorElement()}try{n=_VirtualComponentTranslator__WEBPACK_IMPORTED_MODULE_6__.a.renderVirtualComponent(t,this.props,this._generateHostData(),this._memoHelper),this._memoHelper.setRoot(n)}catch(e){return _Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(this.props,e,"_renderMainControlComponent",this._parentId,null,"ControlFramework"),this._setErrorData("Custom Control with Id: "+this.props.manifest.CustomControlId+" failed to renderVirtualComponent; Message: "+e.message,e.stack),this._getErrorElement()}return n}if(this._memoHelper.getRoot())return n=this._memoHelper.getRoot()}this._currentlyRendering=!1;return this._renderGenericDiv({width:"100%"})}catch(e){throw _Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(this.props,e,"_renderMainControlComponent",this._parentId,null,"ControlFramework"),e}},CustomControlHostRoot.prototype.renderShadow=function(e,t){return t=t||{display:"none"},react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{key:"shadow",id:e?e+"shadow":null,style:t})},CustomControlHostRoot.prototype._getErrorElement=function(){var e=this.props.controlId+"_container_error";return react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{className:"customControl inError","data-id":e},react__WEBPACK_IMPORTED_MODULE_0__.createElement("a",{href:"#",onClick:this._handleErrorLinkClick.bind(this)},Object(_Helpers_CustomControlLocHelper__WEBPACK_IMPORTED_MODULE_24__.a)("ERROR_LOADING_CONTROL")))},CustomControlHostRoot.prototype._setErrorData=function(e,t){(e||t)&&(this._errorData.errorMessage=e,this._errorData.errorDetails=t)},CustomControlHostRoot.prototype._shouldHandleDependencyUpdate=function(){return this._controlInstance&&this._controlInstance.getOutputSchema&&this.props.authoringMode},CustomControlHostRoot.prototype.renderWrappedMainElement=function(e,t){var n=t||(this.props.parentDefinedControlProps&&this.props.parentDefinedControlProps.containerStyleOverrides?Object.assign(this._getDomIdDivStyleProperties(this.props.descriptor),this.props.parentDefinedControlProps.containerStyleOverrides.allContainers,this.props.parentDefinedControlProps.containerStyleOverrides.primaryInnerContainer):this._getDomIdDivStyleProperties(this.props.descriptor)),o=this._isVirtual(),r=this._memoHelper.getIsCompositing(),i=this._renderCommandingComponent(),s=null===this.props.propBagData?null:this.props.propBagData.clientData.isRTL;return this.props.globalCommandManagerInitialized&&this._globalCommandManagerPromise.resolve(),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_CommonComponents_Primitive_View__WEBPACK_IMPORTED_MODULE_7__.a,{key:"mainControlContainer",id:e,style:n},i,this._accessibilityComponent,this._seeMoreHelper.renderCloseButton(this._seeMorePopup.bind(this,!1),o,r,s),this._seeMoreHelper.renderSpacer(o,r),this._renderMainControlComponent())},CustomControlHostRoot.prototype.renderContainerWithResizePads=function(e,t,n){var o=t||(this.props.parentDefinedControlProps&&this.props.parentDefinedControlProps.containerStyleOverrides?Object.assign({width:"100%"},this.props.parentDefinedControlProps.containerStyleOverrides.allContainers,this.props.parentDefinedControlProps.containerStyleOverrides.outerContainer):{width:"100%"}),r=this._seeMoreHelper&&-1!==this._seeMoreHelper.getSeeMorePopupStatus(),i=r?"dialog":null,s=!!r||null;return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_CommonComponents_Primitive_View__WEBPACK_IMPORTED_MODULE_7__.a,{key:"mainControlOuterContainer",id:n+"_outer"+Math.floor(10*Math.random()+1),style:o,accessibilityModal:s,role:i},e)},CustomControlHostRoot.prototype._renderGenericDiv=function(e){var t=this,n="customControl "+(this.props.manifest?this.props.manifest.ConstructorName.replace("."," "):"");return this.props.manifest&&this.props.manifest.ConstructorName&&(n=n+" "+this.props.manifest.ConstructorName),react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",{key:"MainContainerElement",className:n,style:e,ref:function(e){t._rootElement=e}},this._getPopupService().renderPopups())},CustomControlHostRoot.prototype._renderCommandingComponent=function(){if(this.props.internalCommandManagerIds&&this.props.internalCommandManagerIds.length&&this._commandingWrapper){for(var e=[],t=0;t<this.props.internalCommandManagerIds.length;t++){var n=this.props.internalCommandManagerIds[t].commandManagerId,o=this.props.internalCommandManagerIds[t].ribbonId;e.push(this._commandingWrapper.createHiddenCommandManager(n,o))}return e}return null},CustomControlHostRoot.prototype._handleErrorLinkClick=function(e){e.preventDefault();var t={message:this._errorData.errorMessage,details:this._errorData.errorDetails};_Utilities_XrmProxy__WEBPACK_IMPORTED_MODULE_14__.default.openErrorDialog(t)},CustomControlHostRoot.prototype.render=function(){this._currentlyRendering=!0;var e="";if(this.props.descriptor&&(e=this.props.descriptor.DomId?this.props.descriptor.DomId:""),0===this.state._status)return this._currentlyRendering=!1,_Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportUsage(this.props,"Failure"),_Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportEventFailure(this.props,new Error("Error loading control"),CUSTOM_CONTROL_RENDER,this._parentId,null),this._getErrorElement();if(5===this._internalStatus)return this._currentlyRendering=!1,react__WEBPACK_IMPORTED_MODULE_0__.createElement("div",null);var t=this.props.parentDefinedControlProps&&this.props.parentDefinedControlProps.containerStyleOverrides?Object.assign({width:"100%"},this.props.parentDefinedControlProps.containerStyleOverrides.allContainers,this.props.parentDefinedControlProps.containerStyleOverrides.rootContainer):{width:"100%"};if(4!==this._internalStatus){if(this._isVirtual())return null;this._currentlyRendering=!1;var n=this.renderWrappedMainElement(e,null),o=this.renderContainerWithResizePads(n,null,e),r=this.renderShadow(e,null);return react__WEBPACK_IMPORTED_MODULE_0__.createElement(_CommonComponents_Primitive_View__WEBPACK_IMPORTED_MODULE_7__.a,{key:"root",style:t},r,o)}var i={shadowStyle:null,innerStyle:null,outerStyle:null},s=this._seeMoreHelper.getSeeMorePopupStatus(),a=this._seeMoreHelper.getSeeMorePopupInfo();-1!==s&&(i=_Helpers_Animation_CustomControlAnimationHelper__WEBPACK_IMPORTED_MODULE_18__.a.getCustomControlFancyPopoutStyles(this.context.renderer,s,a),4!==s&&(t={height:a.startHeight,width:a.startWidth}));var l=this.renderWrappedMainElement(e,i.innerStyle);if(this._isVirtual()&&!this._memoHelper.getIsCompositing()&&(-1===s||4===s))return _Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportUsage(this.props,"Success"),l;var c=this.renderContainerWithResizePads(l,i.outerStyle,e),u=this.renderShadow(e,i.shadowStyle);return _Utilities_TelemetryManager__WEBPACK_IMPORTED_MODULE_13__.b.reportUsage(this.props,"Success"),react__WEBPACK_IMPORTED_MODULE_0__.createElement(_CommonComponents_Primitive_View__WEBPACK_IMPORTED_MODULE_7__.a,{key:"root",style:t},u,c)},CustomControlHostRoot.displayName="CustomControlHost",CustomControlHostRoot}(react__WEBPACK_IMPORTED_MODULE_0__.Component);CustomControlHostRoot.contextTypes={renderer:prop_types__WEBPACK_IMPORTED_MODULE_2__.object}},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var o=function(){function e(e,t,n){this._etn=e,this._id=t||"",this._name=n,Object.freeze(this)}return Object.defineProperty(e.prototype,"entityName",{get:function(){return this._etn},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"entityType",{get:function(){return this._etn},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"logicalName",{get:function(){return this._etn},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"LogicalName",{get:function(){return this._etn},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"id",{get:function(){return this._id},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"Id",{get:function(){return this._Id},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"name",{get:function(){return this._name},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"Name",{get:function(){return this._name},enumerable:!0,configurable:!0}),e.toString=function(e){return e.entityName+":"+e.id},e.equals=function(e,t){return!e&&!t||!(!e||!t)&&(e.entityName===t.entityName&&e.id===t.id&&e.name===t.name)},e.EMPTY=new e(""),e}()},function(e,t,n){"use strict";var o,r,i=n(0),s=n(3),a=n(1);!function(e){e[e.Root=1]="Root",e[e.Nested=2]="Nested"}(o||(o={})),function(e){e[e.None=0]="None",e[e.Slate=1]="Slate",e[e.Phone=2]="Phone",e[e.Desktop=3]="Desktop",e[e.MailApp=4]="MailApp"}(r||(r={}));var l,c=["CRMICON","ENTITYICON","BOOLEAN","BUTTON","COMBOBOX","CONTAINER","HYPERLINK","IMG","FILEINPUT","FLYOUT","LABEL","LIST","LISTITEM","LIVEPERSONACARDHOVERTARGET","MICROSOFTICON","POPUP","SCROLLCONTAINER","TABLE","TABLEBODY","TABLECAPTION","TABLECELL","TABLEFOOTER","TABLEHEADER","TABLEHEADERCELL","TABLEROW","TEXTINPUT","IFRAME","COMMANDBAR","OPTION","SELECT","ENTITYIMAGE","PROGRESSINDICATOR","RADIO","HORIZONTALSCROLL","VIEWSELECTORCONTROL","TEXT","PRESENCEINDICATOR","PLACEHOLDER"],u=n(11),p=n(34),d=n(10),h=n(5),f=n(13);!function(e){e[e.Backspace=8]="Backspace",e[e.Tab=9]="Tab",e[e.Enter=13]="Enter",e[e.Shift=16]="Shift",e[e.Ctrl=17]="Ctrl",e[e.Alt=18]="Alt",e[e.PauseBreak=19]="PauseBreak",e[e.Capslock=20]="Capslock",e[e.Escape=27]="Escape",e[e.Space=32]="Space",e[e.PageUp=33]="PageUp",e[e.PageDown=34]="PageDown",e[e.End=35]="End",e[e.Home=36]="Home",e[e.LeftArrow=37]="LeftArrow",e[e.UpArrow=38]="UpArrow",e[e.RightArrow=39]="RightArrow",e[e.DownArrow=40]="DownArrow",e[e.Insert=45]="Insert",e[e.Delete=46]="Delete",e[e.Num0=48]="Num0",e[e.Num1=49]="Num1",e[e.Num2=50]="Num2",e[e.Num3=51]="Num3",e[e.Num4=52]="Num4",e[e.Num5=53]="Num5",e[e.Num6=54]="Num6",e[e.Num7=55]="Num7",e[e.Num8=56]="Num8",e[e.Num9=57]="Num9",e[e.A=65]="A",e[e.B=66]="B",e[e.C=67]="C",e[e.D=68]="D",e[e.E=69]="E",e[e.F=70]="F",e[e.G=71]="G",e[e.H=72]="H",e[e.I=73]="I",e[e.J=74]="J",e[e.K=75]="K",e[e.L=76]="L",e[e.M=77]="M",e[e.N=78]="N",e[e.O=79]="O",e[e.P=80]="P",e[e.Q=81]="Q",e[e.R=82]="R",e[e.S=83]="S",e[e.T=84]="T",e[e.U=85]="U",e[e.V=86]="V",e[e.W=87]="W",e[e.X=88]="X",e[e.Y=89]="Y",e[e.Z=90]="Z",e[e.LeftWindowKey=91]="LeftWindowKey",e[e.RightWindowKey=92]="RightWindowKey",e[e.SelectKey=93]="SelectKey",e[e.NumPad0=96]="NumPad0",e[e.NumPad1=97]="NumPad1",e[e.NumPad2=98]="NumPad2",e[e.NumPad3=99]="NumPad3",e[e.NumPad4=100]="NumPad4",e[e.NumPad5=101]="NumPad5",e[e.NumPad6=102]="NumPad6",e[e.NumPad7=103]="NumPad7",e[e.NumPad8=104]="NumPad8",e[e.NumPad9=105]="NumPad9",e[e.Multiply=106]="Multiply",e[e.Add=107]="Add",e[e.Subtract=109]="Subtract",e[e.DecimalPoint=110]="DecimalPoint",e[e.Divide=111]="Divide",e[e.F1=112]="F1",e[e.F2=113]="F2",e[e.F3=114]="F3",e[e.F4=115]="F4",e[e.F5=116]="F5",e[e.F6=117]="F6",e[e.F7=118]="F7",e[e.F8=119]="F8",e[e.F9=120]="F9",e[e.F10=121]="F10",e[e.F11=122]="F11",e[e.F12=123]="F12",e[e.NumLock=144]="NumLock",e[e.ScrollLock=145]="ScrollLock",e[e.SemiColon=186]="SemiColon",e[e.EqualSign=187]="EqualSign",e[e.Comma=188]="Comma",e[e.Dash=189]="Dash",e[e.Period=190]="Period",e[e.ForwardSlash=191]="ForwardSlash",e[e.GraveAccent=192]="GraveAccent",e[e.OpenBracket=219]="OpenBracket",e[e.BackSlash=220]="BackSlash",e[e.CloseBraket=221]="CloseBraket",e[e.SingleQuote=222]="SingleQuote"}(l||(l={}));var m,y=n(6),b=n(4);!function(e){e[e.left=0]="left",e[e.right=1]="right",e[e.up=2]="up",e[e.down=3]="down",e[e.leftup=4]="leftup",e[e.rightup=5]="rightup",e[e.upleft=6]="upleft",e[e.downleft=7]="downleft"}(m||(m={}));var g=m,_=n(7),v=n(2),C="topBar-mobile";function I(){return{width:document.body.offsetWidth,height:document.body.offsetHeight}}function P(){var e=document.getElementById(C),t=E(),n=I();return{left:document.body.scrollLeft,top:document.body.scrollTop,right:t.width-n.width-document.body.scrollLeft,bottom:e?e.offsetHeight:t.height-n.height-document.body.scrollTop}}function E(){return{width:document.body.scrollWidth,height:document.body.scrollHeight}}function S(e){return{width:e.offsetWidth-e.clientWidth+e.scrollWidth,height:e.offsetHeight-e.clientHeight+e.scrollHeight}}function D(e,t,n,o){void 0===n&&(n=I()),void 0===o&&(o=P());var r={},i=t.maxWidth&&t.width&&t.maxWidth>0&&t.maxWidth<t.width?t.maxWidth:t.width?t.width:0,s=t.maxHeight&&t.height&&t.maxHeight>0&&t.maxHeight<t.height?t.maxHeight:t.height?t.height:0;return"number"==typeof e.left?(r.width=Math.max(o.left-e.left,0),r.width+=Math.max(e.left+i-n.width-o.left,0)):"number"==typeof e.right&&(r.width=Math.max(o.right-e.right,0),r.width+=Math.max(e.right+i-n.width-o.right,0)),"number"==typeof e.top?(r.height=Math.max(o.top-e.top,0),r.height+=Math.max(e.top+s-n.height-o.top,0)):"number"==typeof e.bottom&&(r.height=Math.max(o.bottom-e.bottom,0),r.height+=Math.max(e.bottom+s-n.height-o.bottom,0)),r}function w(e){switch(e){case g.down:return[g.down,g.downleft,g.up,g.upleft,g.right,g.rightup,g.left,g.leftup];case g.downleft:return[g.downleft,g.down,g.upleft,g.up,g.right,g.rightup,g.left,g.leftup];case g.right:return[g.right,g.rightup,g.left,g.leftup,g.down,g.downleft,g.up,g.upleft];case g.rightup:return[g.rightup,g.right,g.leftup,g.left,g.down,g.downleft,g.up,g.upleft];case g.up:return[g.up,g.upleft,g.down,g.downleft,g.right,g.rightup,g.left,g.leftup];case g.upleft:return[g.upleft,g.up,g.downleft,g.down,g.right,g.rightup,g.left,g.leftup];case g.left:return[g.left,g.leftup,g.right,g.rightup,g.down,g.downleft,g.up,g.upleft];case g.leftup:return[g.leftup,g.left,g.rightup,g.right,g.down,g.downleft,g.up,g.upleft];default:var t="";try{t=JSON.stringify(e)}catch(e){t="Unable to parse initial direction"}var n=new Error("Unexpected initial direction: "+t);throw v.default.Reporting.reportFailure(_.a+".Primitive.Flyout",n),n}}function O(e,t,n){var o=function(e,t){void 0===t&&(t=document.body);var n=t.getBoundingClientRect(),o=e.getBoundingClientRect();return{top:o.top-n.top,left:o.left-n.left}}(n,document.body),r=n.getBoundingClientRect(),i=I(),s={top:o.top,left:o.left,width:r.width,height:r.height,right:o.left+r.width,bottom:o.top+r.height},a=s.top,l=s.right,c=null,u=null;function p(){return e.maxWidth&&e.maxWidth<e.width?e.maxWidth:e.width}function d(){return e.maxHeight&&e.maxHeight<e.height?e.maxHeight:e.height}switch(t){case g.rightup:e&&e.height?a=s.bottom-d():(a=void 0,u=i.height-s.bottom);break;case g.up:e&&e.height?a=s.top-d():(u=i.height-s.top,a=void 0),l=s.left;break;case g.upleft:e&&e.height?a=s.top-d():(u=i.height-s.top,a=void 0),e&&e.width?l=s.right-p():(l=void 0,c=i.width-s.right);break;case g.down:a=s.bottom,l=s.left;break;case g.downleft:a=s.bottom,e&&e.width?l=s.right-p():(l=void 0,c=i.width-s.right);break;case g.left:a=s.top,e&&e.width?l=s.left-p():c=i.width-s.left;break;case g.leftup:e&&e.height?a=s.bottom-d():(a=void 0,u=i.height-s.bottom),e&&e.width?l=s.left-p():c=i.width-s.left}return{left:l,top:a,right:c,bottom:u}}function T(e){var t=window.getComputedStyle(e);return e&&t&&("auto"===t.overflow||"scroll"===t.overflow||"auto"===t.overflowX||"scroll"===t.overflowX||"auto"===t.overflowY||"scroll"===t.overflowY)}var F,M=n(8),x=n(17),A=function(){function e(){this._parentFlyoutNameToChildRootNameMap={}}return e.getInstance=function(){return e._instance||(e._instance=new e),e._instance},e.prototype.mountChildFlyout=function(e,t){this._parentFlyoutNameToChildRootNameMap.hasOwnProperty(e)||(this._parentFlyoutNameToChildRootNameMap[e]=[]),this._parentFlyoutNameToChildRootNameMap[e].push(t)},e.prototype.unmountChildFlyout=function(e,t){if(this._parentFlyoutNameToChildRootNameMap.hasOwnProperty(e)){var n=this._parentFlyoutNameToChildRootNameMap[e],o=n.indexOf(t);return o>-1&&(n.splice(o,1),n.length<1&&delete this._parentFlyoutNameToChildRootNameMap[e]),!1}return!1},e.prototype.getChildRoots=function(e){return this._parentFlyoutNameToChildRootNameMap.hasOwnProperty(e)?this._parentFlyoutNameToChildRootNameMap[e]:[]},e}(),k=n(19),R=n(29),L=n(37),N=(F=function(e,t){return(F=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}F(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),B=function(e){function t(t){var n=e.call(this,t)||this;return n.state={portals:[]},n}return N(t,e),t.prototype.bindDOMElement=function(e,t,n,o){this.setState(function(o){var r=o.portals.slice(),i={newChildComponent:e,DOMNode:t,id:n},s=o.portals.findIndex(function(e){return e.id===n});return s>-1?r[s]=i:r.push(i),{portals:r}},o)},t.prototype.unbindDOMComponent=function(e){this.setState(function(t){return{portals:t.portals.filter(function(t){return t.id!==e})}})},t.prototype.render=function(){var e=this;return this.state.portals.map(function(t){return e.props.renderReactSubtree(t.newChildComponent,t.DOMNode)}).slice()},t}(i.Component),U=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),j=function(){return(j=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},W=_.a+".Primitive.Flyout",V=function(e){function t(t){var n=e.call(this,t)||this;return n._wasInnerFocusRequested=!1,n._seeMorePopupCount=null,n._resizeHandler=n.debouncingFlyoutEvent(function(){n._flyoutElement&&n._flyoutElement.offsetHeight>0&&n.updateDom()}),n._scrollHandler=n.debouncingFlyoutEvent(function(){for(var e in n._isOutOfRange=!1,n._scrollableAncestors)if(t=n._flyoutElement,o=n._scrollableAncestors[e],t.getBoundingClientRect().top<o.getBoundingClientRect().top||t.getBoundingClientRect().bottom>o.getBoundingClientRect().bottom){n._isOutOfRange=!0;break}var t,o;n.updateDom()},100),n.debouncingFlyoutEvent=n.debouncingFlyoutEvent.bind(n),n.handleMeasuring=n.handleMeasuring.bind(n),n.setFlyoutRef=n.setFlyoutRef.bind(n),n.handlePointerDown=n.handlePointerDown.bind(n),n.handleOnScroll=n.props.enableTrackOnScroll?n.handleOnScroll.bind(n):null,n.handleWindowBlur=n.handleWindowBlur.bind(n),n._isClickInsideFlyout=n._isClickInsideFlyout.bind(n),n._portal=i.createRef(),n}return U(t,e),Object.defineProperty(t.prototype,"flyoutElement",{get:function(){return this._flyoutElement},enumerable:!0,configurable:!0}),t.prototype.getFlyoutRootId=function(){return this.props.isPortalToElement&&this.props.portalContainerId?this.props.portalContainerId:t.generateFlyoutId(this.props.parentCustomControlId,this.props.groupId)},t.prototype.componentDidMount=function(){var e=this;this.props.hasDynamicContent&&(this._measuringSubscriber={onMeasure:this.handleMeasuring,getComponent:function(){return e._flyoutElement}},x.a.getInstance().addMeasuringSubscribers(this._measuringSubscriber)),this.updateDom(),this._subscribeFlyoutPopupManager()},t.generateFlyoutId=function(e,t){return(e?e+"|":"")+(t?"__flyoutRootNode_"+t:"__flyoutRootNode")},t.prototype.componentDidUpdate=function(){this.updateDom()},t.prototype.componentWillUnmount=function(){this.removeFromDom(),this.resetFocus(),this.props.hasDynamicContent&&x.a.getInstance().removeMeasuringSubscribers(this._measuringSubscriber),R.a.getInstance().removeSubscribers(this._managerSubscriber)},t.prototype._getRelativeElement=function(){var e=document.getElementById(this.props.relativeToElementId);return e&&this.props.relativeToElementIdSelector&&(e=this.props.relativeToElementIdSelector(e)),e},t.prototype.calculatePosition=function(){var e,t={position:"absolute",visibility:this._isOutOfRange?"hidden":"visible",overflowX:this.props.disableHorizontalScroll?"hidden":"auto",overflowY:this.props.disableVerticalScroll?"hidden":"auto"},n=Object.assign({},this.props.size);if(this.getIsAbsolute())e=this.props.position;else{if(!this.getIsRelative()){var o=new Error("Cannot recognize positioning approach");throw v.default.Reporting.reportFailure(W,o),o}var r=this._getRelativeElement();if(!r)return t.visibility="hidden",t;this._updateActualSize();var i=this.props.children;if(i&&i.props&&i.props.style){var s=new RegExp("^(\\d+)\\s*px$"),a=i.props.style,l=void 0;!n.maxHeight&&a.maxHeight&&(l=s.exec(a.maxHeight))&&(n.maxHeight=parseInt(l[1],10)),!n.maxWidth&&a.maxWidth&&(l=s.exec(a.maxWidth))&&(n.maxWidth=parseInt(l[1],10))}var c={width:n.width||this._actualSize&&this._actualSize.width,maxWidth:n.maxWidth||this._actualSize&&this._actualSize.maxWidth,height:n.height||this._actualSize&&this._actualSize.height,maxHeight:n.maxHeight||this._actualSize&&this._actualSize.maxHeight},u=null===this.props.flyoutDirection||void 0===this.props.flyoutDirection?g.right:this.props.flyoutDirection,p=null;if(null!==this._lastDirection&&void 0!==this._lastDirection&&(p=u,u=this._lastDirection),this.props.enforceDirection)e=O(c,u,r),this._lastDirection=u;else{var d=function(e,t,n,o){if(e){var r=void 0;null!==o&&o!==t?((r=w(o)).splice(r.indexOf(t),1),r.unshift(t)):r=w(t);for(var i=t,s=void 0,a=void 0,l=0,c=r;l<c.length;l++){var u=c[l],p=O(e,u,n),d=D(p,e);if(0===d.height&&0===d.width){a=p,i=u,s=d;break}if(s){var h=s.width+s.height;d.width+d.height<h&&(a=p,i=u,s=d)}else a=p,i=u,s=d}return{Position:a,Direction:i}}return{Position:O(e,t,n),Direction:t}}(c,u,r,p);e=d.Position,this._lastDirection=d.Direction}e.left=e.left>=0?e.left:0}if(this._actualSize){var h=D(e,this._actualSize),f=P();h.width&&!n.width&&(e.left<f.left&&(e.left=f.left),e.right<f.right&&(e.right=f.right)),!h.height||n.height||e.bottom||0===e.bottom||(e.top<f.top&&(e.top=f.top),e.bottom<f.bottom&&(e.bottom=f.bottom))}var m=function(e,t,n){void 0===t&&(t=I()),void 0===n&&(n=P());var o={};return"number"==typeof e.left?o.maxWidth=t.width+n.left-e.left:"number"==typeof e.right&&(o.maxWidth=t.width+n.right-e.right),"number"!=typeof e.top&&"number"!=typeof e.bottom||(o.maxHeight=t.height+n.top-e.top),o}(e),y=m;return n.maxHeight&&n.maxHeight<m.maxHeight&&(y.maxHeight=n.maxHeight),n.maxWidth&&n.maxWidth<m.maxWidth&&(y.maxWidth=n.maxWidth),Object.assign(t,e,y),n.height&&(t.height=n.height),n.width&&(t.width=n.width),t},t.prototype._updateActualSize=function(){if(this._actualSize){var e=S(this._flyoutElement);0!==e.width&&0!==e.height&&(this._actualSize.width===e.width&&this._actualSize.height===e.height||(this._actualSize=S(this._flyoutElement)))}},t.prototype.ensureRootNode=function(){this.rootNode||(this.rootNode=document.getElementById(this.getFlyoutRootId()),this.rootNode||(this.rootNode=document.createElement("div"),this.rootNode.id=this.getFlyoutRootId(),this.rootNode.setAttribute("data-id",this.rootNode.id),this.rootNode.setAttribute("flyoutRoot",this.props.isPortalToElement&&this.props.portalContainerId?"":"__flyoutRootNode"),document.body.appendChild(this.rootNode)))},t.prototype.debouncingFlyoutEvent=function(e,t){void 0===t&&(t=200);var n=0;return function(){n||(n=window.setTimeout(function(){e(),n=0},t))}},t.prototype.handleMeasuring=function(e,t){this._actualSize.width===e&&this._actualSize.height===t||(this._actualSize.width=e,this._actualSize.height=t,this.updateDom())},t.prototype.getIsRelative=function(){return"relative"===this.props.positionType||!this.props.positionType&&this.props.relativeToElementId},t.prototype.getIsAbsolute=function(){return"absolute"===this.props.positionType||!this.props.positionType&&this.props.position},t.prototype.setFlyoutRef=function(e){this._flyoutElement=d.findDOMNode(e)},t.prototype.updateDom=function(){var e=this;if(this.props.testhooks&&this.props.testhooks,this.props.children){null===this._seeMorePopupCount&&(this._seeMorePopupCount=k.a.getInstance().getPopupCount());var t=this._seeMorePopupCount>0;this.ensureRootNode(),this.parentFlyoutNode||(this.parentFlyoutNode=document.createElement("div"),this.rootNode.appendChild(this.parentFlyoutNode));var n=Object.assign({},this.props.flyoutStyle,this.calculatePosition(),{boxSizing:"border-box"},this.props.rootZIndex||t?{zIndex:1}:{},(window.navigator.userAgent.match("MSIE")||window.navigator.userAgent.match("Trident"))&&void 0===this._flyoutElement?{left:0}:{}),o=!this._actualSize;if(o){var r=E();Object.assign(n,{bottom:null,right:null,maxWidth:r.width,maxHeight:r.height,visibility:"hidden"})}var s=i.createElement(M.a,j({id:this.props.id,style:n,ref:this.setFlyoutRef,onClick:function(e){return e.stopPropagation()}},this.props),this.props.children);this._portal.current.bindDOMElement(s,this.parentFlyoutNode,"flyout",function(){if(e.focusInnerElement(o),e._actualSize=S(e._flyoutElement),!e._isFlyoutShown&&(window.addEventListener("blur",e.handleWindowBlur),window.addEventListener("resize",e._resizeHandler),e.getIsRelative())){e._scrollableAncestors=function(e,t){var n=[];for(e=e&&e.parentElement;e&&e!==t;)T(e)&&n.push(e),e=e.parentElement;return n}(e._getRelativeElement(),document.body);for(var t=0,n=e._scrollableAncestors;t<n.length;t++){n[t].addEventListener("scroll",e._scrollHandler)}}e._isFlyoutShown=!0,o&&e.updateDom()})}else this.removeFromDom(),this.resetFocus()},t.prototype.focusInnerElement=function(e){!e&&this.props.focusCallback&&this.props.focusElementId&&!this._wasInnerFocusRequested&&(this.props.focusCallback(this.props.focusElementId),this._wasInnerFocusRequested=!0)},t.prototype.removeFromDom=function(){if(this.parentFlyoutNode&&(this._portal.current.unbindDOMComponent("flyout"),this.rootNode.removeChild(this.parentFlyoutNode),this.parentFlyoutNode=void 0,0===this.rootNode.childElementCount&&(document.body.removeChild(this.rootNode),this.rootNode=void 0)),this._isFlyoutShown&&(window.removeEventListener("blur",this.handleWindowBlur),this.getIsRelative()&&(window.removeEventListener("resize",this._resizeHandler),this._scrollableAncestors)))for(var e=0,t=this._scrollableAncestors;e<t.length;e++){t[e].removeEventListener("scroll",this._scrollHandler)}this._isFlyoutShown=!1},t.prototype.resetFocus=function(){this.props.focusElementId&&this.props.relativeToElementId&&this.props.focusCallback&&this.props.focusCallback(this.props.relativeToElementId)},t.prototype._isClickInsideFlyout=function(e){if(this._flyoutElement&&this._flyoutElement.contains(e.target)||document.querySelector(".ms-Layer"))return!0;for(var t=A.getInstance().getChildRoots(this.getFlyoutRootId()),n=0;n<t.length;n++){var o=document.getElementById(t[n]);if(o&&o.contains(e.target))return!0}return!1},t.prototype.handleOnScroll=function(e){this.ensureRootNode(),!this._isClickInsideFlyout(e)&&this.props.dismissOnScroll&&this.props.onOutsideClick&&this.props.onOutsideClick(e)},t.prototype.handlePointerDown=function(e){this.ensureRootNode(),!this._isClickInsideFlyout(e)&&this.props.onOutsideClick&&this.props.onOutsideClick(e)},t.prototype.handleWindowBlur=function(e){if(this.ensureRootNode(),this.props.onOutsideClick&&!this.props.keepOpenOnWindowBlur){var t=document.activeElement;if(t&&"IFRAME"===t.tagName.toUpperCase()){var n=Object.create(e,{target:{value:t}});if(this._isClickInsideFlyout(n))return}var o=Object.create(e,{target:{value:this.rootNode}});this.props.onOutsideClick(o)}},t.prototype.render=function(){return i.createElement(B,{key:"portal",ref:this._portal,renderReactSubtree:d.createPortal})},t.prototype._subscribeFlyoutPopupManager=function(){var e=this;this._managerSubscriber={type:L.a.Flyout,isClickInsideSubscriber:this._isClickInsideFlyout,onPointerDown:this.handlePointerDown,onScroll:this.props.enableTrackOnScroll?this.handleOnScroll:null,getComponent:function(){return e._flyoutElement}},R.a.getInstance().addSubscribers(this._managerSubscriber)},t.displayName="Flyout",t}(i.Component),H=h.connect(b.a)(V),K=n(15),z=n(9),G=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Y=function(e){function t(t){var n=e.call(this,t)||this;return n._refCallbackTrigger=n._refCallbackTrigger.bind(n),n}return G(t,e),t.prototype.getElementName=function(){return"ul"},t.prototype.getFlexClassName=function(e){return Object(K.b)(e?e.display:null)},t.prototype.getElementProps=function(){var e={};return!0===this.props.announceAccessibilityNotification&&(e[z.p]=this.props.notificationType||"polite"),Object.assign(e,{ref:this.props.refCallback?this._refCallbackTrigger:null})},t.prototype._refCallbackTrigger=function(e){this.props.refCallback(e)},t.prototype.getElementStyle=function(){if(this.props.style)return Object.assign({},Object(K.a)(this.props.style))},t.displayName="List",t}(y.a),q=h.connect(b.a)(Y),$=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),X=function(e){function t(t){return e.call(this,t)||this}return $(t,e),t.prototype._handleSelected=function(e){this.props.onSelected&&this.props.onSelected(e)},t.prototype.componentWillReceiveProps=function(e){e.isSelected&&e.isSelected!==this.props.isSelected&&this._handleSelected(this)},t.prototype.getElementName=function(){return"li"},t.prototype.getElementProps=function(){var e;return(e={})[z.x]=this.props.isSelected,e["data-text"]=this.props.dataText,e["data-value"]=this.props.dataValue,e["data-expanded"]=this.props.dataExpanded,e},t.displayName="ListItem",t}(y.a);function Q(e){return e&&e.style?e.isSelected&&e.selectedStyle?Object.assign({},Object.assign({},e.style,e.selectedStyle),Object(b.b)(e)):Object.assign(e.style,Object(b.b)(e)):{}}var Z=h.connect(function(e){return function(t){return t.renderRule(Q,e)}})(X),J=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),ee=_.a+".Primitive.ScrollView",te=function(e){function t(t){var n=e.call(this,t)||this;return n._setInnerViewRef=n._setInnerViewRef.bind(n),n._onScrollHandler=n._onScrollHandler.bind(n),n._onClickHandler=n._onClickHandler.bind(n),n._ua=window.navigator.userAgent,n}return J(t,e),t.prototype.componentDidUpdate=function(e){if(this.props.scrollToId!==e.scrollToId&&this.props.scrollToId&&this._scrollViewRef){var t=document.getElementById(this.props.scrollToId),n=d.findDOMNode(this);this._scrollToContent(n,t)}},t.prototype.componentDidMount=function(){if(this.props.scrollToId&&this._scrollViewRef){var e=document.getElementById(this.props.scrollToId),t=d.findDOMNode(this);this._scrollToContent(t,e)}},t.prototype._scrollToContentHorizontalLTR=function(e,t){if(e.scrollLeft+e.offsetWidth>t.offsetLeft+t.offsetWidth)e.scrollLeft=t.offsetLeft+t.offsetWidth-e.offsetWidth;else if(e.scrollLeft<t.offsetLeft){var n=t.offsetLeft;e.scrollLeft=n,e.scrollLeft!==n&&this._isMobileSafari()&&(e.scrollLeft=e.scrollLeft-1)}},t.prototype._scrollToContentHorizontalRTLIEorEdge=function(e,t){var n=e.offsetWidth-t.offsetLeft;e.scrollLeft<n-t.offsetWidth?e.scrollLeft=n-t.offsetWidth:e.scrollLeft+e.offsetWidth>n+t.offsetWidth&&(e.scrollLeft=n-e.offsetWidth)},t.prototype._scrollToContent=function(e,t){e&&t&&(this.props.horizontal?this.props.isRTL&&this._isIEorEdge()?this._scrollToContentHorizontalRTLIEorEdge(e,t):this._scrollToContentHorizontalLTR(e,t):e.scrollTop+e.clientHeight<t.offsetTop+t.clientHeight?e.scrollTop=t.offsetTop+t.clientHeight-e.clientHeight:t.offsetTop<e.scrollTop&&(e.scrollTop=t.offsetTop))},t.prototype._isIEorEdge=function(){return this.isIE||this.isEdge},t.prototype._isMobileSafari=function(){var e=!!this._ua.match(/iPad/i)||!!this._ua.match(/iPod/i)||!!this._ua.match(/iPhone/i),t=!!this._ua.match(/WebKit/i);return e&&t&&!this._ua.match(/CriOS/i)},t.prototype._onClickHandler=function(e){void 0!==this.props.onClick&&this.props.onClick(e)},t.prototype._onScrollHandler=function(e){if(void 0!==this.props.onScroll&&this.props.onScroll(e),void 0!==this.props.onScrollToBottom){var t=d.findDOMNode(this);t.scrollTop+t.offsetHeight>=t.scrollHeight&&this.props.onScrollToBottom()}},t.prototype.getElementName=function(){return this.props.semanticTag?this.props.semanticTag:"div"},t.prototype.getElementProps=function(){return{onClick:this._onClickHandler,onScroll:this._onScrollHandler,ref:this.props.scrollToId||this.props.refCallback?this._setInnerViewRef:null}},t.prototype.scrollToChild=function(e){if(!e){var t=new Error("child must be specified");throw v.default.Reporting.reportFailure(ee,t),t}var n=d.findDOMNode(this),o=d.findDOMNode(e);this._scrollToContent(n,o)},t.prototype._setInnerViewRef=function(e){this.props.refCallback&&this.props.refCallback(this),this._scrollViewRef=e},t.prototype.getFlexClassName=function(e){return Object(K.b)(e?e.display:null)},t.prototype.getElementClassName=function(){var n=e.prototype.getElementClassName.call(this);return this.props&&this.props.className&&(n+=" "+this.props.className),this.props.style&&t.isElementScrollable(this.props.style)&&(n+=k.a.getInstance().getDisableScrollStyle()&&!this.props.isWithinATopMostSeeMore?" webkitScrollAuto":" webkitScroll"),n},t.displayName="ScrollView",t}(y.a);function ne(e){if(e&&e.style){var t=e.horizontal?Object.assign({},e.style,{overflowX:"scroll",flexDirection:"row"}):Object.assign({},e.style,{overflowY:"scroll",flexDirection:"column"}),n=e.contentContainerStyle?Object.assign({},e.style,e.contentContainerStyle):e.style,o=Object.assign({},t,n);return Object.assign(e.style,o,Object(b.b)(e),Object(K.a)(o))}return{}}var oe=h.connect(function(e){return function(t){return t.renderRule(ne,e)}})(te),re=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();function ie(e){switch(e){case"normal":return"normal";case"bold":return"bold";default:return Number(e)}}var se=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return re(t,e),t.prototype.getElementName=function(){return this.props.semanticTag||"span"},t.prototype.getElementClassName=function(){var e=this.props.styles?this.props.styles:"";return this.props.className?e+" "+this.props.className:e},t.prototype.getElementProps=function(){var e={};switch(this.props.role){case"alert":e[z.p]=this.props.notificationType||"polite"}return e},t.displayName="Text",t}(y.a);function ae(e){return e&&e.style?e.style.fontWeight?Object.assign({},{fontWeight:"string"==typeof e.style.fontWeight?ie(e.style.fontWeight):e.style.fontWeight},Object(b.b)(e)):Object.assign(e.style,Object(b.b)(e)):{}}var le,ce,ue=h.connect(function(e){return function(t){return t.renderRule(ae,e)}})(se),pe=n(45),de=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();!function(e){e[e.default=0]="default",e[e.emailAddress=1]="emailAddress",e[e.numeric=2]="numeric",e[e.phonePad=3]="phonePad",e[e.asciiCapable=4]="asciiCapable",e[e.numbersAndPunctuation=5]="numbersAndPunctuation",e[e.url=6]="url",e[e.numberPad=7]="numberPad",e[e.namePhonePad=8]="namePhonePad",e[e.decimalPad=9]="decimalPad",e[e.twitter=10]="twitter",e[e.webSearch=11]="webSearch"}(le||(le={})),function(e){e[e.start=0]="start",e[e.update=1]="update",e[e.end=2]="end"}(ce||(ce={}));var he=function(e){function t(t){var n=e.call(this,t)||this;return n._compositionEvents=[],n._refCallbackTrigger=n._refCallbackTrigger.bind(n),n._onKeyPress=n._onKeyPress.bind(n),n._onChange=n._onChange.bind(n),n._onInput=n._onInput.bind(n),n.handleFocus=n.handleFocus.bind(n),n.handleBlur=n.handleBlur.bind(n),n.handlePointerDown=n.handlePointerDown.bind(n),n.handlePointerUp=n.handlePointerUp.bind(n),n.handleKeyDown=n.handleKeyDown.bind(n),n._refElementCallback=n._refElementCallback.bind(n),n.handleKeyUp=n.handleKeyUp.bind(n),n._onCompositionStart=n._onCompositionStart.bind(n),n._onCompositionUpdate=n._onCompositionUpdate.bind(n),n._onCompositionEnd=n._onCompositionEnd.bind(n),n.state={value:t.value},n}return de(t,e),t.prototype.componentWillReceiveProps=function(e){e&&e.value!==this.state.value&&this.setState({value:e.value}),this._dateInput&&(this._dateInput.defaultValue="")},t.prototype._selectValue=function(){if(!this.props.type||"text"===this.props.type.toLowerCase()||"search"===this.props.type.toLowerCase()||"url"===this.props.type.toLowerCase()||"tel"===this.props.type.toLowerCase()||"password"===this.props.type.toLowerCase()){var e=(this.props.multiline,d.findDOMNode(this));e.selectionStart=0,e.selectionEnd=e.value.length}},t.prototype._onChange=function(e){this.isIE||this._handleOnChange(e)},t.prototype._onInput=function(e){if(this.isIE){var t=(this.props.multiline,e.target.value);if(this.state.value===t&&0===this._compositionEvents.length)return;this._compositionEvents=[],this._handleOnChange(e)}},t.prototype._onCompositionStart=function(){this._compositionEvents.push(ce.start)},t.prototype._onCompositionUpdate=function(e){var t=(this.props.multiline,e.target.value);this.state.value!==t&&this.setState({value:t}),this._compositionEvents.push(ce.update)},t.prototype._onCompositionEnd=function(){this._compositionEvents.push(ce.end)},t.prototype._handleOnChange=function(e){var t=(this.props.multiline,e.target.value);this.setState({value:t}),this.props.onChange&&this.props.onChange(e),this.props.onChangeText&&this.props.onChangeText(t)},t.prototype._onKeyPress=function(e){this.props.onKeyPress&&this.props.onKeyPress(e)},t.prototype.handleFocus=function(e){var t=this,n=function(){t.props.selectValueOnFocus&&t.state&&t.state.value&&t._selectValue(),t.props.onFocus&&t.props.onFocus(e)};if(window.navigator.userAgent.match(/Edge\/(13|14)/))return window.setTimeout(n,10);n()},t.prototype.handleBlur=function(e){this.props.onBlur&&this.props.onBlur(e)},t.prototype.handlePointerDown=function(e){this.props.onPointerDown&&this.props.onPointerDown(e)},t.prototype.handlePointerUp=function(e){this.props.onPointerUp&&this.props.onPointerUp(e)},t.prototype.handleKeyDown=function(e){this.props.onKeyDown&&this.props.onKeyDown(e)},t.prototype.handleKeyUp=function(e){this.props.onKeyUp&&this.props.onKeyUp(e)},t.prototype.getElementName=function(){return this.props.multiline?"textarea":"input"},t.prototype.getElementProps=function(){var e,n=((e={value:this.state.value||"",title:this.props.title||("---"===this.state.value?Object(pe.a)("SELECT_TO_ENTER_DATA"):this.state.value)||Object(pe.a)("SELECT_TO_ENTER_DATA"),onChange:this._onChange,onInput:this._onInput,onCompositionStart:this._onCompositionStart,onCompositionUpdate:this._onCompositionUpdate,onCompositionEnd:this._onCompositionEnd,placeholder:this.props.placeholder,maxLength:this.props.maxLength,onKeyPress:this._onKeyPress,autoComplete:"off"})[z.u]=this.props.disabled||this.props.readOnly?!0===this.props.readOnly:null,e[z.r]=this.props.multiline?!0===this.props.multiline:null,e[z.d]=this.props.autoComplete,e);if(this.props.readOnly&&(n.readOnly=!0),this.props.disabled&&(n.disabled=!0),this.props.multiline)this.props.rows&&(n.rows=Math.max(this.props.rows,t._MIN_TEXTAREA_ROWS));else if(this.props.type)n.type=this.props.type;else switch(this.props.keyboardType){case le.numeric:n.type="number";break;case le.emailAddress:n.type="email";break;default:n.type="text"}return Object.assign(n,{ref:this.props.refCallback?this._refCallbackTrigger:"datetime-local"===this.props.type||"datetime"===this.props.type?this._refElementCallback:null})},t.prototype._refElementCallback=function(){this._dateInput=d.findDOMNode(this)},t.prototype._refCallbackTrigger=function(e){this.props.refCallback(e)},t.displayName="TextInput",t._MIN_TEXTAREA_ROWS=2,t}(y.a);function fe(e){var t={"::-ms-clear":{display:"none"}};return e&&e.style?(e.isRTL&&Object.assign(t,{direction:"rtl",unicodeBidi:"bidi-override"}),Object.assign(e.style,t,Object(b.b)(e))):{}}var me,ye=h.connect(function(e){return function(t){return t.renderRule(fe,e)}})(he),be=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),ge=function(){return(ge=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},_e=function(e){function t(n){var o=e.call(this,n)||this;o._wasInnerFocusRequested=!1,o.clickedOutside=!1,o.keyboardScrolling=!1,o.setFocusToItem=function(e){if((!o.props.freeTextMode||!o.state.hasFocus)&&e&&null!==e){var t=document.getElementById(e);t&&null!==t&&t.focus()}},o.keyboardNavigation=function(e){if(-1!==t.supportedKeys.indexOf(e.keyCode)){switch(e.keyCode){case l.UpArrow:o._handleMove(-1);break;case l.DownArrow:o._handleMove(1);break;case l.PageUp:o._handleMove(-1*o.getPageSize());break;case l.PageDown:o._handleMove(1*o.getPageSize());break;case l.Enter:o.handleEnterKey(e);break;case l.Space:o.props.freeTextMode||o.handleEnterKey(e);break;case l.Escape:o.setIsExpanded(!1);break;case l.Tab:o.handleTabKey(e)}e.preventDefault(),e.stopPropagation()}},o._handleMove=o._handleMove.bind(o),o._handleButtonClick=o._handleButtonClick.bind(o),o._handleTextInputChange=o._handleTextInputChange.bind(o),o._saveTextInputRef=o._saveTextInputRef.bind(o),o.saveContainerRef=o.saveContainerRef.bind(o),o.saveItemRef=o.saveItemRef.bind(o),o.saveTextRef=o.saveTextRef.bind(o),o.handleValueChange=o.handleValueChange.bind(o),o.handleItemSelected=o.handleItemSelected.bind(o),o.handleItemPointerDown=o.handleItemPointerDown.bind(o),o.handleItemHover=o.handleItemHover.bind(o),o.handleTextPointerDown=o.handleTextPointerDown.bind(o),o.handleBlur=o.handleBlur.bind(o),o.handleEnterKey=o.handleEnterKey.bind(o),o.handleKeyDown=o.handleKeyDown.bind(o),o.handleKeyboardExpandRequest=o.handleKeyboardExpandRequest.bind(o),o.handleFlyoutOutsideClick=o.handleFlyoutOutsideClick.bind(o),o.handleInnerControlFocus=o.handleInnerControlFocus.bind(o),o.handleInnerControlBlur=o.handleInnerControlBlur.bind(o),o.handleRelativeToElementSelector=o.handleRelativeToElementSelector.bind(o);var r=o.getVisibleOptions(),i=o._getInitialStateOption(n);return o.keyboardScrolling=!1,o._internalIdAppendix=n.hideInternalId?void 0:Object(f.b)(),o.selectedIndex=r.indexOf(i),o.state={option:i,isExpanded:!1,freeTextValue:n&&n.freeTextMode?n.value||n.defaultValue:i&&i.text,isAutoCompleting:!1},o}return be(t,e),Object.defineProperty(t.prototype,"focusableControlId",{get:function(){return this.getInternalId()+"_text"+(this.props.freeTextMode?"Input":"")},enumerable:!0,configurable:!0}),t.prototype.getInternalId=function(e,t){return void 0===e&&(e=this.props.id),void 0===t&&(t=this._internalIdAppendix),e+(t?"_"+t:"")},t.prototype.getListId=function(e,t){return void 0===e&&(e=this.props.id),void 0===t&&(t=this._internalIdAppendix),this.getInternalId(e,t)+"_list"},Object.defineProperty(t.prototype,"getEmptyListId",{get:function(){return this.getListId()+"_empty"},enumerable:!0,configurable:!0}),t.prototype.getListItemId=function(e){return this.getListId()+(e?e.id||e.value:"")},t.prototype.getFlyoutId=function(e,t){return void 0===e&&(e=this.props.id),void 0===t&&(t=this._internalIdAppendix),this.getInternalId(e,t)+"_flyout"},t.prototype.getButtonId=function(e,t){return void 0===e&&(e=this.props.id),void 0===t&&(t=this._internalIdAppendix),this.getInternalId(e,t)+"_button"},t.prototype.onFlyoutScroll=function(){},t.prototype.getActiveDescendantId=function(){if(~this.selectedIndex){var e=this.getVisibleOptions()[this.selectedIndex];if(e)return this.getListItemId(e)}return""},t.prototype.getPageSize=function(){return this.props.pageSize||t.DEFAULT_PAGE_SIZE},t.prototype._getInitialStateOption=function(e){var t=e.defaultValue?this.getOptionByValue(e.options,e.defaultValue):this.getOptionByValue(e.options,e.value);return!t&&e.options&&e.options.length>0&&!e.freeTextMode&&(t=e.options[0]),t},t.prototype.getOptionByValue=function(e,t){if(e){var n=e.filter(function(e){return e.value===t});if(n.length>0)return n[0]}},t.prototype.componentWillReceiveProps=function(e){if(e&&!e.defaultValue&&e.value!==this.props.value){var t=void 0;if(e.freeTextMode)t={freeTextValue:this.state.hasFocus&&this.state.freeTextValue||e.value,freeTextOptionDisplayValue:this.state.hasFocus&&this.state.freeTextValue||e.value};else{var n=this.getOptionByValue(e.options,e.value);this.selectedIndex=e.options&&e.options.indexOf(n),t={option:n,freeTextValue:n&&n.text,freeTextOptionDisplayValue:n&&n.text}}this.setState(t)}if(e&&e.defaultValue&&(!this.state.option||!this.state.option.value)&&e.options!==this.props.options&&!e.freeTextMode){n=this.getOptionByValue(e.options,e.defaultValue);this.selectedIndex=e.options&&e.options.indexOf(n);t={option:n,freeTextValue:n&&n.text};this.setState(t)}},t.prototype._getIfValueChanged=function(e){return this.props.freeTextMode?e!==this.state.freeTextValue:e!==this.getSelectedOptionValue()},t.prototype.getElementProps=function(){return{name:this.props.name}},t.prototype.getElementChildren=function(){},t.prototype.setIsExpanded=function(e){e?(this._updateContainerWidth(),this._wasInnerFocusRequested=!1):this._wasInnerFocusRequested||(this.setFocusToItem(this.focusableControlId),this._wasInnerFocusRequested=!0),this.state.isExpanded||(this.keyboardScrolling=!1),this.setState({isExpanded:e})},t.prototype._toggleIsExpanded=function(){this.setIsExpanded(!this.state.isExpanded)},t.prototype.setFocus=function(){if(this.props.freeTextMode){if(this._textInput){var e=d.findDOMNode(this._textInput);e&&e.focus()}}else if(this._text){var t=d.findDOMNode(this._text);t&&t.focus()}},t.prototype._resetSelectedIndex=function(){if(this.props.defaultValue){var e=this.getSelectedOptionValue(),t=this.getOptionByValue(this.props.options,e);this.selectedIndex=this.getVisibleOptions().indexOf(t)}else{var n=this.props.value||this.props.options[0].value,o=this.props.freeTextMode&&this.state.freeTextValue||n;t=this.getOptionByValue(this.props.options,o);this.selectedIndex=this.getVisibleOptions().indexOf(t)}},t.prototype.setCurrentItemByValue=function(e,t){void 0===t&&(t=!0);var n=this.getOptionByValue(this.props.options,e),o={freeTextOptionDisplayValue:n&&n.text};n&&this.props.onOptionSelected&&this.props.onOptionSelected(n),this.selectedIndex=this.getVisibleOptions().indexOf(n),this.setState(o),t&&(this.handleValueChange(n&&n.value),this.setState({freeTextValue:n&&n.text,option:n}))},t.prototype._setCurrentItemByVisibleIndex=function(e,t){void 0===t&&(t=!0);var n=this.getVisibleOptions();~e&&e<n.length&&this.setCurrentItemByValue(n[e].value,t)},t.prototype.handleKeyDown=function(e){if(-1!==t.supportedKeys.indexOf(e.keyCode))switch(e.keyCode){case l.UpArrow:e.altKey?this.setIsExpanded(!1):this.handleArrowUp(-1);break;case l.DownArrow:e.altKey?this.handleKeyboardExpandRequest():this.handleArrowDown(e,1);break;case l.Enter:this.handleEnterKey(e);break;case l.Space:this.props.freeTextMode||this.handleEnterKey(e);break;case l.Escape:this.setIsExpanded(!1);break;case l.Tab:this.handleTabKey(e)}},t.prototype.getVisibleOptions=function(e,t){return void 0===e&&(e=this.state),void 0===t&&(t=this.props.options),t&&e&&e.isAutoCompleting&&e.freeTextValue&&(t=t.filter(function(t){return t.text&&t.text.toLocaleUpperCase().startsWith(e.freeTextValue.toLocaleUpperCase())})),t},t.prototype._searchOptions=function(e){return this.props.options.filter(function(t){return t.text&&t.text===e})},t.prototype.saveContainerRef=function(e){this._container=e,this._updateContainerWidth()},t.prototype.saveItemRef=function(e){e&&e.props&&e.props.isSelected&&(this.selectedListItem=e)},t.prototype._saveTextInputRef=function(e){this._textInput=e},t.prototype.saveTextRef=function(e){this._text=e},t.prototype._updateContainerWidth=function(){var e=this._container&&d.findDOMNode(this._container);this._containerWidth=e&&e.offsetWidth},t.prototype.handleValueChange=function(e){this.props.onChange&&this.props.onChange(e)},t.prototype.handleItemSelected=function(e){this.selectedListItem=e},t.prototype.handleItemPointerDown=function(e){if(0===e.button){var t=e.currentTarget.dataset.value;this.setCurrentItemByValue(t),this.setState({isAutoCompleting:!1,isExpanded:!1})}},t.prototype.handleItemHover=function(e){var t=e.currentTarget.dataset.value,n=this.getOptionByValue(this.props.options,t||"");this.selectedIndex=this.getVisibleOptions().indexOf(n)},t.prototype._handleTextInputChange=function(e){var t={freeTextValue:e,freeTextOptionDisplayValue:null,isAutoCompleting:!0,option:null};if(this._resetSelectedIndex(),e||""===e){var n=this._searchOptions(e);t.option=n.length?n[0]:void 0}t.isExpanded=!!this.getVisibleOptions(t).length,this._getIfValueChanged(e)&&(this.setState(t),this.props.suppressFreeTextChangeCallback||this.handleValueChange(t.freeTextValue)),this._resetSelectedListItem()},t.prototype.handleTextPointerDown=function(e){0===e.button&&(this.props.freeTextMode&&this.setFocus(),this._toggleIsExpanded())},t.prototype._handleButtonClick=function(e){0===e.button&&(this._resetSelectedIndex(),this.setState({isAutoCompleting:!1}),this.state.isExpanded&&(this.setFocusToItem(this.getButtonId()),this._wasInnerFocusRequested=!0),this._toggleIsExpanded())},t.prototype.handleArrowUp=function(e){this._handleMove(e)},t.prototype.handleArrowDown=function(e,t){this._handleMove(t)},t.prototype._handleMove=function(e){this.keyboardScrolling=!0;var t=this.getVisibleOptions();var n,o,r=(n=this.selectedIndex+e,o=t.length,(n%o+o)%o);this._setCurrentItemByVisibleIndex(r,!!this.props.freeTextMode),this.setFocusToItem(this.getListItemId(t[r]))},t.prototype.selectItem=function(e){!this.props.freeTextMode&&this.setFocusToItem(e)},t.prototype.handleBlur=function(e){this.clickedOutside&&(this.clickedOutside=!1,this.setIsExpanded(!1),this.props.freeTextMode&&this.setFocus(),this.props.onBlur&&this.props.onBlur(e))},t.prototype.handleEnterKey=function(e){if(!this.state.isExpanded)return this.handleKeyboardExpandRequest(),e.stopPropagation(),void e.preventDefault();if(this.selectedIndex>-1){var t=this.getVisibleOptions();this.setState({isAutoCompleting:!1,isExpanded:!1,option:t[this.selectedIndex],freeTextValue:this.props.freeTextMode?t[this.selectedIndex].text:null,freeTextOptionDisplayValue:this.props.freeTextMode?t[this.selectedIndex].text:null}),this.setFocus(),this.handleValueChange(t[this.selectedIndex].value)}},t.prototype.handleTabKey=function(e){this.state.isExpanded&&(e.stopPropagation(),e.preventDefault())},t.prototype.handleKeyboardExpandRequest=function(){this.state.isExpanded?this.setState({isAutoCompleting:!1}):(this._resetSelectedIndex(),this.setIsExpanded(!0))},t.prototype.handleFlyoutOutsideClick=function(e){e.target.id!==this.getButtonId()&&this.setIsExpanded(!1),this.setFocus(),this.clickedOutside=!0},t.prototype.handleInnerControlFocus=function(){if(this.setState({hasFocus:!0}),this.isIE){var e=document.getElementById(this.focusableControlId);if(!e||null===e)return;e.setAttribute("style","border: 1px dotted;")}},t.prototype.handleInnerControlBlur=function(){if(this._resetSelectedIndex(),this.setState({hasFocus:!1}),this.isIE){var e=document.getElementById(this.focusableControlId);if(!e||null===e)return;e.setAttribute("style","null")}},t.prototype._resetSelectedListItem=function(){this.selectedListItem=void 0,this.props.onOptionSelected&&this.props.onOptionSelected(null)},t.prototype.handleRelativeToElementSelector=function(e){return e.parentElement},t.prototype.renderOptionsList=function(e){var n=this;if(e&&e.length){var o=this.props.selectedItemStyle||t.getSelectedItemStyle(),r=e.map(function(e,r){var s=n.getListItemId(e);return i.createElement(Z,{key:r,id:s,tabIndex:0,role:"option",dataText:e.text,dataValue:e.value,onSelected:n.handleItemSelected,isSelected:n.selectedIndex===r,style:t.getListItemStyle(),selectedStyle:o,ref:n.saveItemRef,onClick:n.handleItemPointerDown},e.text||" ")}),s=this.getPageSize(),a=this.getListId()+"_scrollView",l=s<r.length,c={height:l?2.35*s+"em":void 0,overflowY:l?"scroll":"hidden",overflowX:"hidden",flex:"1 1 auto",flexDirection:"column"},u={width:"100%",listStyleType:"none"},p=e[this.selectedIndex],d=this.keyboardScrolling||p?this.getListItemId(p):this.selectedListItem&&this.selectedListItem.props.id?this.selectedListItem.props.id:void 0;return i.createElement(q,{id:this.getListId(),key:this.getListId(),role:"listbox",style:u,tabIndex:0,onKeyDown:this.keyboardNavigation},i.createElement(oe,{id:a,scrollToId:d,horizontal:!1,role:"presentation",onScroll:this.onFlyoutScroll,style:c},r))}},t.prototype.renderFlyout=function(e){void 0===e&&(e="rtl"===document.body.dir);var n=void 0,o=void 0;if(this.props.testhooks)for(var r in o=Object.assign({},this.props.testhooks))o[r]+="-flyout";if(!this.props.readOnly&&this.state.isExpanded){var s=this.renderOptionsList(this.getVisibleOptions()),a=this.getActiveDescendantId();if(s){var l={borderWidth:"0.1em",borderStyle:"solid",borderColor:"#666666",backgroundColor:"white",width:this.calculateWidth(),boxShadow:t.SHADOWS.Shadow01};n=i.createElement(H,{id:this.getFlyoutId(),key:this.getFlyoutId(),focusElementId:a,testhooks:o,focusCallback:this.setFocusToItem,flyoutDirection:e?g.down:g.downleft,flyoutStyle:l,positionType:"relative",relativeToElementId:this.props.relativeToElementId?this.props.relativeToElementId:this.getButtonId(),relativeToElementIdSelector:this.handleRelativeToElementSelector,onOutsideClick:this.handleFlyoutOutsideClick,parentCustomControlId:this.props.parentCustomControlId,parentFlyoutRoot:this.props.parentFlyoutRoot,rootZIndex:this.props.rootZIndex,enableTrackOnScroll:!0,dismissOnScroll:!this.props.keepFlyoutOpenOnScroll},s)}}return n},t.prototype._renderTextInput=function(e,t){var n=this.props.textInputStyle?this.props.textInputStyle:{borderWidth:0,flex:"1 1 auto",backgroundColor:"transparent",padding:"0.5em 0.5em",width:"100%",fontSize:"1rem",fontWeight:this.state.hasFocus?"normal":"600",":hover":{fontWeight:"normal"}};return i.createElement(ye,{id:e,key:e,testhooks:t,readOnly:this.props.readOnly,accessibilityHasPopup:!0,accessibilityExpanded:this.state.isExpanded,accessibilityRequired:this.props.accessibilityRequired,describedByElementId:this.props.describedByElementId,role:"combobox",ref:this._saveTextInputRef,onFocus:this.handleInnerControlFocus,onBlur:this.handleInnerControlBlur,onKeyDown:this.handleKeyDown,onChangeText:this._handleTextInputChange,value:this.props.freeTextMode?this.state.freeTextOptionDisplayValue||this.state.freeTextValue:this.state.option&&this.state.option.text,accessibilityLabel:this.props.accessibilityLabel?this.props.accessibilityLabel:this.props.placeholder,activeDescendantId:this.state.isExpanded?this.getActiveDescendantId():null,ownsElementId:this.state.isExpanded?this.getListId():null,controlsElementId:this.state.isExpanded?this.getListId():null,style:n,placeholder:this.props.placeholder})},t.prototype.getTextOnlyStyle=function(){return this.props.textStyle?this.props.textStyle:{borderWidth:0,flex:"1 1 auto",outline:"none",cursor:"default"}},t.prototype._getEmptyList=function(){return this.state.isExpanded?null:i.createElement("div",{role:"listbox",id:this.getEmptyListId,style:{display:"none"}}," ")},t.prototype.getTextOnlyInnerComponent=function(e){return i.createElement(ue,{id:e},this.getSelectedOptionText())},t.prototype.renderTextOnly=function(e,t){var n=this.getTextOnlyStyle(),o=this.state.isExpanded?{ownsElementId:this.getListId(),controlsElementId:this.getListId(),activeDescendantId:this.getActiveDescendantId()}:{ownsElementId:this.getEmptyListId,controlsElementId:this.getEmptyListId},r=e+"-value";return i.createElement(ue,ge({id:e,key:e,testhooks:t,accessibilityHasPopup:!0,accessibilityExpanded:this.state.isExpanded,accessibilityRequired:this.props.accessibilityRequired,accessibilityLabel:this.props.accessibilityLabel?this.props.accessibilityLabel:this.getSelectedOptionText(),title:this.props.title,describedByElementId:this.props.describedByElementId?this.props.describedByElementId:r,ref:this.saveTextRef,role:"button",onFocus:this.handleInnerControlFocus,onBlur:this.handleInnerControlBlur,onKeyDown:this.handleKeyDown,onPointerDown:this.handleTextPointerDown,tabIndex:this.props.readOnly?-1:0,semanticTag:this.props.useHeader?"h1":null,style:n},o),this.getTextOnlyInnerComponent(r),this._getEmptyList())},t.prototype.getSelectedOptionText=function(){return this.state.option&&this.state.option.text||" "},t.prototype.getSelectedOptionValue=function(){return this.state.option&&this.state.option.value},t.prototype._renderDropDownButton=function(){var e={backgroundColor:"transparent",borderColor:"transparent",borderStyle:"solid",borderWidth:"0 0 0 0.1em",flexDirection:"row",padding:"0 0.75em",justifyContent:"center",":hover":{borderColor:t.COLORS.Grey5}},n={width:"0.6em",height:"0.6em",marginTop:"-0.4em",borderColor:t.COLORS.Grey7,borderWidth:"0em",borderRightWidth:"0.1em",borderBottomWidth:"0.1em",borderStyle:"solid",transform:"rotate(45deg)",content:"",display:this.props.hideArrow?"none":"flex",alignSelf:"center"};return i.createElement(M.a,{id:this.getButtonId(),key:"dropButton",role:"button",accessibilityLabel:this.props.accessibilityLabel,accessibilityExpanded:this.state.isExpanded,accessibilityHasPopup:!0,tabIndex:-1,style:e,onKeyDown:this.handleKeyDown,onClick:this._handleButtonClick},i.createElement("div",{style:n}))},t.prototype.render=function(){var e=this.getElementPropsInternal();Object.assign(e.style,{backgroundColor:"white",display:"flex",flex:"1 1 auto",borderWidth:"0.1em",borderStyle:"solid",borderColor:"#666666"},this.props.style),this.props.testhooks&&(e.testhooks=this.props.testhooks);var t=void 0;if(this.props.testhooks)for(var n in t=Object.assign({},this.props.testhooks))t[n]+="-text";return i.createElement(M.a,ge({},e,{ref:this.saveContainerRef}),i.createElement(M.a,{style:{display:"flex",flex:"1 1 auto"},id:this.getInternalId()+"_wrapper"},this.props.freeTextMode?this._renderTextInput(this.focusableControlId,t):this.renderTextOnly(this.focusableControlId,t),!this.props.readOnly&&this._renderDropDownButton(),!this.props.readOnly&&this.renderFlyout()))},t.prototype.calculateWidth=function(){var e="50px";return this.props.style&&this.props.style.width&&"100%"!==this.props.style.width?e=this.props.style.width.toString():this._containerWidth&&(e=this._containerWidth.toString()),-1===e.indexOf("px")&&-1===e.indexOf("%")&&(e+="px"),e},t.getListItemStyle=function(){return{flex:"0 1 auto",cursor:"pointer",padding:"0.5em 0.5em",":hover":{backgroundColor:t.COLORS.Grey1,color:t.COLORS.Grey7}}},t.getSelectedItemStyle=function(){return{backgroundColor:t.COLORS.Grey3,color:"black"}},t.supportedKeys=[l.Alt,l.UpArrow,l.DownArrow,l.Enter,l.PageDown,l.PageUp,l.Escape,l.Tab,l.Space],t.displayName="ComboBox",t.DEFAULT_PAGE_SIZE=7,t.COLORS={Grey1:"#efefef",Grey2:"#e2e2e2",Grey3:"#d8d8d8",Grey5:"#666666",Grey7:"#333333"},t.SHADOWS={Shadow01:"0px 2px 4px 0px rgba(0, 0, 0, 0.5);"},t}(y.a),ve=h.connect(b.a)(_e),Ce=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Ie=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Ce(t,e),t.prototype.getElementName=function(){return"a"},t.prototype.getElementProps=function(){return{href:this.props.href||"#",target:this.props.target}},t}(y.a),Pe=h.connect(b.a)(Ie),Ee=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Se=function(e){function t(t){var n=e.call(this,t)||this;return n._onLoad=n._onLoad.bind(n),n}return Ee(t,e),t.prototype._onLoad=function(){this.props.onLoad&&this.props.onLoad()},t.prototype.getElementName=function(){return"img"},t.prototype.getElementProps=function(){return{src:this.props.source,onLoad:this._onLoad,alt:this.props.altText?this.props.altText:"",title:this.props.title?this.props.title:this.props.altText?this.props.altText:""}},t.displayName="Image",t}(y.a),De=h.connect(b.a)(Se),we=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Oe=function(e){function t(t){var n=e.call(this,t)||this;return n._iframeElement=null,n._origin=null,n._onLoad=n._onLoad.bind(n),n._origin=n._normalizeUrl(t.src),n}return we(t,e),t.prototype._normalizeUrl=function(e){var t=document.createElement("a");return t.href=e,t.protocol+"//"+t.host},t.prototype._onLoad=function(){this.props.onLoad&&this.props.onLoad(),this.props.onReadyStateComplete&&this.props.onReadyStateComplete()},t.prototype.getElementName=function(){return"iframe"},t.prototype.getElementProps=function(){var e={src:this.props.src,title:this.props.title,onLoad:this._onLoad};return this.props.security&&(e.security=this.props.security,e.sandbox=""),this.props.scrolling&&(e.scrolling=this.props.scrolling),this.props.allow&&(e.allow=this.props.allow),e.ref=this._registerIframeElement.bind(this),e},t.prototype.componentWillReceiveProps=function(){this._resetEventHandlers()},t.prototype._resetEventHandlers=function(){window.removeEventListener("message",this._receiveMessageHandler,!1),this._receiveMessageHandler=null,this.props.registerSendMessageHandler&&this.props.registerSendMessageHandler(void 0)},t.prototype._registerIframeElement=function(e){this._iframeElement=e,this._iframeElement?(this._receiveMessageHandler=this._receiveMessage.bind(this),window.addEventListener("message",this._receiveMessageHandler,!1),this.props.registerSendMessageHandler&&this.props.registerSendMessageHandler(this._sendMessage.bind(this))):this._resetEventHandlers()},t.prototype.componentWillUnmount=function(){this._resetEventHandlers()},t.prototype._receiveMessage=function(e){this._iframeElement&&e.source===this._iframeElement.contentWindow&&this._normalizeUrl(e.origin)===this._origin&&this.props.onMessage&&this.props.onMessage(e)},t.prototype._sendMessage=function(e){this._iframeElement&&this._iframeElement.contentWindow.postMessage(e,this._origin)},t.displayName="IFrame",t}(y.a),Te=h.connect(b.a)(Oe),Fe=n(38);!function(e){e[e.Entity=0]="Entity",e[e.List=1]="List",e[e.Account=2]="Account",e[e.Opportunity=3]="Opportunity",e[e.Sharepointdocument=4]="Sharepointdocument",e[e.Dashboard=5]="Dashboard",e[e.WORKSPACE=6]="WORKSPACE",e[e.Lead=7]="Lead",e[e.Contact=8]="Contact",e[e.Activitypointer=9]="Activitypointer",e[e.Drafts=10]="Drafts",e[e.Systemuser=11]="Systemuser",e[e.Letter=12]="Letter",e[e.Salesorder=13]="Salesorder",e[e.Competitor=14]="Competitor",e[e.Task=15]="Task",e[e.Fax=16]="Fax",e[e.Email=17]="Email",e[e.Phonecall=18]="Phonecall",e[e.Contract=19]="Contract",e[e.Quote=20]="Quote",e[e.Incident=21]="Incident",e[e.Campaign=22]="Campaign",e[e.Appointment=23]="Appointment",e[e.Invoice=24]="Invoice",e[e.Knowledgearticle=25]="Knowledgearticle",e[e.Product=26]="Product",e[e.Opportunityproduct=27]="Opportunityproduct",e[e.Queueitem=28]="Queueitem",e[e.Socialprofile=29]="Socialprofile",e[e.ChevronRight=30]="ChevronRight",e[e.Globe=31]="Globe",e[e.Ticker=32]="Ticker",e[e.Duration=33]="Duration",e[e.Timezone=34]="Timezone",e[e.Language=35]="Language",e[e.MultipleUsers=36]="MultipleUsers",e[e.Regarding=37]="Regarding",e[e.Checklist=38]="Checklist",e[e.TwoOptions=39]="TwoOptions",e[e.Currency=40]="Currency",e[e.DateTime=41]="DateTime",e[e.OfficeIcon=42]="OfficeIcon",e[e.OfficeIconWordFileSharedWithMe=43]="OfficeIconWordFileSharedWithMe",e[e.OfficeIconWordFileCheckedOut=44]="OfficeIconWordFileCheckedOut",e[e.OfficeIconExcelFile=45]="OfficeIconExcelFile",e[e.OfficeIconExcelFileSharedWithMe=46]="OfficeIconExcelFileSharedWithMe",e[e.OfficeIconExcelFileCheckedOut=47]="OfficeIconExcelFileCheckedOut",e[e.OfficeIconPowerPointFile=48]="OfficeIconPowerPointFile",e[e.OfficeIconPowerPointFileSharedWithMe=49]="OfficeIconPowerPointFileSharedWithMe",e[e.OfficeIconPowerPointFileCheckedOut=50]="OfficeIconPowerPointFileCheckedOut",e[e.OfficeIconOneNoteFile=51]="OfficeIconOneNoteFile",e[e.OfficeIconOneNoteFileSharedWithMe=52]="OfficeIconOneNoteFileSharedWithMe",e[e.OfficeIconOneNoteFileCheckedOut=53]="OfficeIconOneNoteFileCheckedOut",e[e.OfficeIconAccessFile=54]="OfficeIconAccessFile",e[e.OfficeIconAccessFileSharedWithMe=55]="OfficeIconAccessFileSharedWithMe",e[e.OfficeIconAccessFileCheckedOut=56]="OfficeIconAccessFileCheckedOut",e[e.OfficeIconProjectFile=57]="OfficeIconProjectFile",e[e.OfficeIconProjectFileSharedWithMe=58]="OfficeIconProjectFileSharedWithMe",e[e.OfficeIconProjectFileCheckedOut=59]="OfficeIconProjectFileCheckedOut",e[e.OfficeIconVisioFile=60]="OfficeIconVisioFile",e[e.OfficeIconVisioFileSharedWithMe=61]="OfficeIconVisioFileSharedWithMe",e[e.OfficeIconVisioFileCheckedOut=62]="OfficeIconVisioFileCheckedOut",e[e.OfficeIconHelpFile=63]="OfficeIconHelpFile",e[e.OfficeIconHelpFileSharedWithMe=64]="OfficeIconHelpFileSharedWithMe",e[e.OfficeIconHelpFileCheckedOut=65]="OfficeIconHelpFileCheckedOut",e[e.OfficeIconZipFile=66]="OfficeIconZipFile",e[e.OfficeIconZipFileSharedWithMe=67]="OfficeIconZipFileSharedWithMe",e[e.OfficeIconZipFileCheckedOut=68]="OfficeIconZipFileCheckedOut",e[e.OfficeIconSetupFile=69]="OfficeIconSetupFile",e[e.OfficeIconSetupFileSharedWithMe=70]="OfficeIconSetupFileSharedWithMe",e[e.OfficeIconSetupFileCheckedOut=71]="OfficeIconSetupFileCheckedOut",e[e.OfficeIconVideoFile=72]="OfficeIconVideoFile",e[e.OfficeIconVideoFileSharedWithMe=73]="OfficeIconVideoFileSharedWithMe",e[e.OfficeIconVideoFileCheckedOut=74]="OfficeIconVideoFileCheckedOut",e[e.OfficeIconImageFile=75]="OfficeIconImageFile",e[e.OfficeIconImageFileSharedWithMe=76]="OfficeIconImageFileSharedWithMe",e[e.OfficeIconImageFileCheckedOut=77]="OfficeIconImageFileCheckedOut",e[e.OfficeIconAudioFile=78]="OfficeIconAudioFile",e[e.OfficeIconAudioFileSharedWithMe=79]="OfficeIconAudioFileSharedWithMe",e[e.OfficeIconAudioFileCheckedOut=80]="OfficeIconAudioFileCheckedOut",e[e.OfficeIconExecutableFile=81]="OfficeIconExecutableFile",e[e.OfficeIconExecutableFileSharedWithMe=82]="OfficeIconExecutableFileSharedWithMe",e[e.OfficeIconExecutableFileCheckedOut=83]="OfficeIconExecutableFileCheckedOut",e[e.OfficeIconPdfFile=84]="OfficeIconPdfFile",e[e.OfficeIconPdfFileSharedWithMe=85]="OfficeIconPdfFileSharedWithMe",e[e.OfficeIconPdfFileCheckedOut=86]="OfficeIconPdfFileCheckedOut",e[e.OfficeIconWebFile=87]="OfficeIconWebFile",e[e.OfficeIconWebFileSharedWithMe=88]="OfficeIconWebFileSharedWithMe",e[e.OfficeIconWebFileCheckedOut=89]="OfficeIconWebFileCheckedOut",e[e.OfficeIconTextFile=90]="OfficeIconTextFile",e[e.OfficeIconTextFileSharedWithMe=91]="OfficeIconTextFileSharedWithMe",e[e.OfficeIconTextFileCheckedOut=92]="OfficeIconTextFileCheckedOut",e[e.OfficeIconFolder=93]="OfficeIconFolder",e[e.OfficeIconFolderSharedWithMe=94]="OfficeIconFolderSharedWithMe",e[e.OfficeIconFolderCheckedOut=95]="OfficeIconFolderCheckedOut",e[e.OfficeIconGenericFile=96]="OfficeIconGenericFile",e[e.OfficeIconGenericFileSharedWithMe=97]="OfficeIconGenericFileSharedWithMe",e[e.OfficeIconGenericFileCheckedOut=98]="OfficeIconGenericFileCheckedOut",e[e.Timer=99]="Timer",e[e.ScanBarcodeButton=100]="ScanBarcodeButton",e[e.Goal=101]="Goal",e[e.Metric=102]="Metric",e[e.Report=103]="Report",e[e.SalesLiterature=104]="SalesLiterature",e[e.Connection=105]="Connection",e[e.CustomerAddress=106]="CustomerAddress",e[e.Position=107]="Position",e[e.TransactionCurrency=108]="TransactionCurrency",e[e.Team=109]="Team",e[e.Service=110]="Service",e[e.ServiceAppointment=111]="ServiceAppointment",e[e.Equipment=112]="Equipment",e[e.PriceLevel=113]="PriceLevel",e[e.GoalRollUpQuery=114]="GoalRollUpQuery",e[e.UoMSchedule=115]="UoMSchedule",e[e.DiscountType=116]="DiscountType",e[e.Territory=117]="Territory"}(me||(me={}));var Me={Entity:"crmSymbolFont entity-symbol Entity",List:"crmSymbolFont entity-symbol List",Account:"crmSymbolFont entity-symbol Account",ScanBarcodeButton:"crmSymbolFont entity-symbol ScanBarcodeButton",Opportunity:"crmSymbolFont entity-symbol Opportunity",Sharepointdocument:"crmSymbolFont entity-symbol Sharepointdocument",Dashboard:"crmSymbolFont entity-symbol Dashboard",WORKSPACE:"crmSymbolFont entity-symbol WORKSPACE",Lead:"crmSymbolFont entity-symbol Lead",Contact:"crmSymbolFont entity-symbol Contact",Activitypointer:"crmSymbolFont entity-symbol Activitypointer",Drafts:"crmSymbolFont entity-symbol Drafts",Systemuser:"crmSymbolFont entity-symbol Systemuser",Letter:"crmSymbolFont entity-symbol Letter",Salesorder:"crmSymbolFont entity-symbol Salesorder",Competitor:"crmSymbolFont entity-symbol Competitor",Task:"crmSymbolFont entity-symbol Task",Fax:"crmSymbolFont entity-symbol Fax",Email:"crmSymbolFont entity-symbol Email",Phonecall:"crmSymbolFont entity-symbol Phonecall",Contract:"crmSymbolFont entity-symbol Contract",Quote:"crmSymbolFont entity-symbol Quote",Incident:"crmSymbolFont entity-symbol Incident",Campaign:"crmSymbolFont entity-symbol Campaign",Appointment:"crmSymbolFont entity-symbol Appointment",Invoice:"crmSymbolFont entity-symbol Invoice",Knowledgearticle:"crmSymbolFont entity-symbol Knowledgearticle",Product:"crmSymbolFont entity-symbol Product",Opportunityproduct:"crmSymbolFont entity-symbol Opportunityproduct",Queueitem:"crmSymbolFont entity-symbol Queueitem",Socialprofile:"crmSymbolFont entity-symbol Socialprofile",ChevronRight:"crmSymbolFont entity-symbol ChevronRight",Globe:"crmSymbolFont entity-symbol Globe",Ticker:"crmSymbolFont entity-symbol Ticker",Duration:"crmSymbolFont entity-symbol Duration",Timezone:"crmSymbolFont entity-symbol Timezone",Language:"crmSymbolFont entity-symbol Language",MultipleUsers:"crmSymbolFont entity-symbol MultipleUsers",Regarding:"crmSymbolFont entity-symbol Regarding",Checklist:"crmSymbolFont entity-symbol Checklist",TwoOptions:"crmSymbolFont entity-symbol TwoOptions",Currency:"crmSymbolFont entity-symbol Currency",DateTime:"crmSymbolFont entity-symbol DateTime",OfficeIcon:"crmSymbolFont entity-symbol OfficeIcon",OfficeIconWordFileSharedWithMe:"crmSymbolFont entity-symbol OfficeIconWordFileSharedWithMe",OfficeIconWordFileCheckedOut:"crmSymbolFont entity-symbol OfficeIconWordFileCheckedOut",OfficeIconExcelFile:"crmSymbolFont entity-symbol OfficeIconExcelFile",OfficeIconExcelFileSharedWithMe:"crmSymbolFont entity-symbol OfficeIconExcelFileSharedWithMe",OfficeIconExcelFileCheckedOut:"crmSymbolFont entity-symbol OfficeIconExcelFileCheckedOut",OfficeIconPowerPointFile:"crmSymbolFont entity-symbol OfficeIconPowerPointFile",OfficeIconPowerPointFileSharedWithMe:"crmSymbolFont entity-symbol OfficeIconPowerPointFileSharedWithMe",OfficeIconPowerPointFileCheckedOut:"crmSymbolFont entity-symbol OfficeIconPowerPointFileCheckedOut",OfficeIconOneNoteFile:"crmSymbolFont entity-symbol OfficeIconOneNoteFile",OfficeIconOneNoteFileSharedWithMe:"crmSymbolFont entity-symbol OfficeIconOneNoteFileSharedWithMe",OfficeIconOneNoteFileCheckedOut:"crmSymbolFont entity-symbol OfficeIconOneNoteFileCheckedOut",OfficeIconAccessFile:"crmSymbolFont entity-symbol OfficeIconAccessFile",OfficeIconAccessFileSharedWithMe:"crmSymbolFont entity-symbol OfficeIconAccessFileSharedWithMe",OfficeIconAccessFileCheckedOut:"crmSymbolFont entity-symbol OfficeIconAccessFileCheckedOut",OfficeIconProjectFile:"crmSymbolFont entity-symbol OfficeIconProjectFile",OfficeIconProjectFileSharedWithMe:"crmSymbolFont entity-symbol OfficeIconProjectFileSharedWithMe",OfficeIconProjectFileCheckedOut:"crmSymbolFont entity-symbol OfficeIconProjectFileCheckedOut",OfficeIconVisioFile:"crmSymbolFont entity-symbol OfficeIconVisioFile",OfficeIconVisioFileSharedWithMe:"crmSymbolFont entity-symbol OfficeIconVisioFileSharedWithMe",OfficeIconVisioFileCheckedOut:"crmSymbolFont entity-symbol OfficeIconVisioFileCheckedOut",OfficeIconHelpFile:"crmSymbolFont entity-symbol OfficeIconHelpFile",OfficeIconHelpFileSharedWithMe:"crmSymbolFont entity-symbol OfficeIconHelpFileSharedWithMe",OfficeIconHelpFileCheckedOut:"crmSymbolFont entity-symbol OfficeIconHelpFileCheckedOut",OfficeIconZipFile:"crmSymbolFont entity-symbol OfficeIconZipFile",OfficeIconZipFileSharedWithMe:"crmSymbolFont entity-symbol OfficeIconZipFileSharedWithMe",OfficeIconZipFileCheckedOut:"crmSymbolFont entity-symbol OfficeIconZipFileCheckedOut",OfficeIconSetupFile:"crmSymbolFont entity-symbol OfficeIconSetupFile",OfficeIconSetupFileSharedWithMe:"crmSymbolFont entity-symbol OfficeIconSetupFileSharedWithMe",OfficeIconSetupFileCheckedOut:"crmSymbolFont entity-symbol OfficeIconSetupFileCheckedOut",OfficeIconVideoFile:"crmSymbolFont entity-symbol OfficeIconVideoFile",OfficeIconVideoFileSharedWithMe:"crmSymbolFont entity-symbol OfficeIconVideoFileSharedWithMe",OfficeIconVideoFileCheckedOut:"crmSymbolFont entity-symbol OfficeIconVideoFileCheckedOut",OfficeIconImageFile:"crmSymbolFont entity-symbol OfficeIconImageFile",OfficeIconImageFileSharedWithMe:"crmSymbolFont entity-symbol OfficeIconImageFileSharedWithMe",OfficeIconImageFileCheckedOut:"crmSymbolFont entity-symbol OfficeIconImageFileCheckedOut",OfficeIconAudioFile:"crmSymbolFont entity-symbol OfficeIconAudioFile",OfficeIconAudioFileSharedWithMe:"crmSymbolFont entity-symbol OfficeIconAudioFileSharedWithMe",OfficeIconAudioFileCheckedOut:"crmSymbolFont entity-symbol OfficeIconAudioFileCheckedOut",OfficeIconExecutableFile:"crmSymbolFont entity-symbol OfficeIconExecutableFile",OfficeIconExecutableFileSharedWithMe:"crmSymbolFont entity-symbol OfficeIconExecutableFileSharedWithMe",OfficeIconExecutableFileCheckedOut:"crmSymbolFont entity-symbol OfficeIconExecutableFileCheckedOut",OfficeIconPdfFile:"crmSymbolFont entity-symbol OfficeIconPdfFile",OfficeIconPdfFileSharedWithMe:"crmSymbolFont entity-symbol OfficeIconPdfFileSharedWithMe",OfficeIconPdfFileCheckedOut:"crmSymbolFont entity-symbol OfficeIconPdfFileCheckedOut",OfficeIconWebFile:"crmSymbolFont entity-symbol OfficeIconWebFile",OfficeIconWebFileSharedWithMe:"crmSymbolFont entity-symbol OfficeIconWebFileSharedWithMe",OfficeIconWebFileCheckedOut:"crmSymbolFont entity-symbol OfficeIconWebFileCheckedOut",OfficeIconTextFile:"crmSymbolFont entity-symbol OfficeIconTextFile",OfficeIconTextFileSharedWithMe:"crmSymbolFont entity-symbol OfficeIconTextFileSharedWithMe",OfficeIconTextFileCheckedOut:"crmSymbolFont entity-symbol OfficeIconTextFileCheckedOut",OfficeIconFolder:"crmSymbolFont entity-symbol OfficeIconFolder",OfficeIconFolderSharedWithMe:"crmSymbolFont entity-symbol OfficeIconFolderSharedWithMe",OfficeIconFolderCheckedOut:"crmSymbolFont entity-symbol OfficeIconFolderCheckedOut",OfficeIconGenericFile:"crmSymbolFont entity-symbol OfficeIconGenericFile",OfficeIconGenericFileSharedWithMe:"crmSymbolFont entity-symbol OfficeIconGenericFileSharedWithMe",OfficeIconGenericFileCheckedOut:"crmSymbolFont entity-symbol OfficeIconGenericFileCheckedOut",Timer:"crmSymbolFont entity-symbol Timer",Goal:"crmSymbolFont entity-symbol Goal",Metric:"crmSymbolFont entity-symbol Metric",Report:"crmSymbolFont entity-symbol Report",SalesLiterature:"crmSymbolFont entity-symbol SalesLiterature",Connection:"crmSymbolFont entity-symbol Connection",CustomerAddress:"crmSymbolFont entity-symbol CustomerAddress",Position:"crmSymbolFont entity-symbol Position",TransactionCurrency:"crmSymbolFont entity-symbol TransactionCurrency",Team:"crmSymbolFont entity-symbol Team",Service:"crmSymbolFont entity-symbol Service",ServiceAppointment:"crmSymbolFont entity-symbol ServiceAppointment",Equipment:"crmSymbolFont entity-symbol Equipment",PriceLevel:"crmSymbolFont entity-symbol PriceLevel",GoalRollUpQuery:"crmSymbolFont entity-symbol GoalRollUpQuery",UoMSchedule:"crmSymbolFont entity-symbol UoMSchedule",DiscountType:"crmSymbolFont entity-symbol DiscountType",Territory:"crmSymbolFont entity-symbol Territory"};var xe=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Ae=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return xe(t,e),t.prototype.getSymbolClassName=function(e){return function(e){return Me[me[e]]}(e)},t}(Fe.a),ke=h.connect(b.a)(Ae),Re={account:"crmSymbolFont entity-symbol Account",activitypointer:"crmSymbolFont entity-symbol Activitypointer",appointment:"crmSymbolFont entity-symbol Appointment",article:"symbolFont Article-symbol",businessunit:"crmSymbolFont entity-symbol BusinessUnit",campaign:"crmSymbolFont entity-symbol Campaign",campaignresolution:"symbolFont CampaignResolution-symbol",case:"symbolFont Case-symbol",caseresolution:"symbolFont CaseResolution-symbol",chat:"symbolFont Chat-symbol",competitor:"crmSymbolFont entity-symbol Competitor",connection:"crmSymbolFont entity-symbol Connection",contact:"crmSymbolFont entity-symbol Contact",contract:"crmSymbolFont entity-symbol Contract",createquote:"symbolFont CreateQuote-symbol",customactivity:"symbolFont CustomActivity-symbol",customeraddress:"crmSymbolFont entity-symbol CustomerAddress",dashboard:"crmSymbolFont entity-symbol Dashboard",distributionList:"symbolFont DistributionList-symbol",documenttemplates:"symbolFont DocumentTemplates-symbol",email:"crmSymbolFont entity-symbol Email",externalUser:"symbolFont GuestUser-symbol",fax:"crmSymbolFont entity-symbol Fax",goal:"crmSymbolFont entity-symbol Goal",guestUser:"symbolFont GuestUser-symbol",incident:"crmSymbolFont entity-symbol Incident",invoice:"crmSymbolFont entity-symbol Invoice",knowledgearticle:"crmSymbolFont entity-symbol Knowledgearticle",lead:"crmSymbolFont entity-symbol Lead",letter:"crmSymbolFont entity-symbol Letter",mail:"symbolFont Mail-symbol",membersicon:"symbolFont MembersIcon-symbol",metric:"crmSymbolFont entity-symbol Metric",opportunity:"crmSymbolFont entity-symbol Opportunity",opportunityproduct:"crmSymbolFont entity-symbol Opportunityproduct",phone:"symbolFont Phone-symbol",phonecall:"crmSymbolFont entity-symbol Phonecall",position:"crmSymbolFont entity-symbol Position",product:"crmSymbolFont entity-symbol Product",queueicon:"symbolFont QueueIcon-symbol",queueitem:"crmSymbolFont entity-symbol Queueitem",queueitemroute:"symbolFont QueueItemRoute-symbol",quote:"crmSymbolFont entity-symbol Quote",report:"crmSymbolFont entity-symbol Report",resolvecase:"symbolFont ResolveCase-symbol",salesliterature:"crmSymbolFont entity-symbol SalesLiterature",salesorder:"crmSymbolFont entity-symbol Salesorder",serviceactivity:"symbolFont ServiceActivity-symbol",sharepointdocument:"crmSymbolFont entity-symbol Sharepointdocument",socialprofile:"crmSymbolFont entity-symbol Socialprofile",systemuser:"crmSymbolFont entity-symbol Systemuser",task:"crmSymbolFont entity-symbol Task",team:"crmSymbolFont entity-symbol Team",transactioncurrency:"crmSymbolFont entity-symbol TransactionCurrency",user:"symbolFont GuestUser-symbol",wordtemplates:"symbolFont WordTemplates-symbol",msdyusd_task:"crmSymbolFont entity-symbol msdyusd_task-symbol",msdyusd_configuration:"crmSymbolFont entity-symbol msdyusd_configuration-symbol",msdyusd_customizationfiles:"crmSymbolFont entity-symbol msdyusd_customizationfiles-symbol",msdyusd_entitysearch:"crmSymbolFont entity-symbol msdyusd_entitysearch-symbol",msdyusd_uiievent:"crmSymbolFont entity-symbol msdyusd_uiievent-symbol",msdyusd_form:"crmSymbolFont entity-symbol msdyusd_form-symbol",uii_option:"crmSymbolFont entity-symbol uii_option-symbol",uii_hostedapplication:"crmSymbolFont entity-symbol uii_hostedapplication-symbol",msdyusd_scriptlet:"crmSymbolFont entity-symbol msdyusd_scriptlet-symbol",msdyusd_toolbarstrip:"crmSymbolFont entity-symbol msdyusd_toolbarstrip-symbol",msdyusd_usersettings:"crmSymbolFont entity-symbol msdyusd_usersettings-symbol",msdyusd_agentscriptaction:"crmSymbolFont entity-symbol msdyusd_agentscriptaction-symbol",msdyusd_auditanddiagnosticssetting:"crmSymbolFont entity-symbol msdyusd_auditanddiagnosticssetting-symbol",msdyusd_sessioninformation:"crmSymbolFont entity-symbol msdyusd_sessioninformation-symbol",msdyusd_windowroute:"crmSymbolFont entity-symbol msdyusd_windowroute-symbol",customentity:"symbolFont CustomEntity-symbol",default:"symbolFont CustomEntity-symbol",unresolvedaddress:"symbolFont InformationIcon-symbol",recurringappointmentmaster:"symbolFont NewRecurringAppointment-symbol",service:"crmSymbolFont entity-symbol Service",serviceappointment:"crmSymbolFont entity-symbol ServiceAppointment",equipment:"crmSymbolFont entity-symbol Equipment",pricelevel:"crmSymbolFont entity-symbol PriceLevel",goalrollupquery:"crmSymbolFont entity-symbol GoalRollUpQuery",uomschedule:"crmSymbolFont entity-symbol UoMSchedule",discounttype:"crmSymbolFont entity-symbol DiscountType",territory:"crmSymbolFont entity-symbol Territory"};var Le,Ne=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Be=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Ne(t,e),t.prototype.getSymbolClassName=function(e){return function(e){return Re[e]?Re[e]:Re.default}(e)},t}(Fe.a),Ue=h.connect(b.a)(Be),je=n(21),We=n(25),Ve=n(43),He=n(18),Ke=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();!function(e){e.NotInitialized="NotInitialized",e.Initializing="Initializing",e.Initialized="Initialized",e.Failed="Failed"}(Le||(Le={}));var ze=function(e){function t(t,n){var o=e.call(this,t,n)||this;return o.state={identifiers:null,hasDataLoaded:!1},o._isLivePersonCardLibAvailable=o._isLivePersonCardLibAvailable.bind(o),o._onKeyDownOpenCard=o._onKeyDownOpenCard.bind(o),o}return Ke(t,e),t.prototype.getElementProps=function(){return{accessibilityLabel:this.props.accessibilityLabel,displayName:this.props.displayName,emailAddress:this.props.emailAddress,entityReference:this.props.entityReference,personaType:this.props.personaType,recordId:this.props.recordId,registerOpenCardCallback:this.props.registerOpenCardCallback}},t.prototype.componentDidMount=function(){this.props.registerOpenCardCallback&&this.props.registerOpenCardCallback(this._onKeyDownOpenCard),this.props.registerHasLivePersonaCardLoadedCallback&&this.props.registerHasLivePersonaCardLoadedCallback(this._isLivePersonCardLibAvailable)},t.prototype.componentDidUpdate=function(e){e.recordId!==this.props.recordId&&(this.setState({identifiers:null,hasDataLoaded:!1}),this._getRecordData())},t.prototype.render=function(){var e=this.getElementChildren();if(this._isLivePersonCardLibAvailable()&&this.state.hasDataLoaded){var t=window.LivePersonaCardHoverTargetV2;if(t)return i.createElement(t,{cardParameters:this._makeLivePersonaCardParameters(!1),tabIndex:"-1"},i.createElement("span",{id:this.props.id}," ",e," "))}else this._isLivePersonCardLibAvailable()&&!this.state.hasDataLoaded&&this._getRecordData();return e},t.prototype._makeLivePersonaCardParameters=function(e){var t=this,n=this.state.identifiers||{},o=this._getHostAppId(),r=e?"Card opened from keyboard shortcut":"Card opened by hovering";return{personaInfo:{identifiers:{HostAppPersonaId:o,Smtp:n.smtp,AadObjectId:n.aadObjectId,PersonaType:this.props.personaType},displayName:this.props.displayName},behavior:{onCardOpen:function(){return t._reportCardUsage(r)},onCardClose:function(){return t._reportCardUsage("Card Closed")},disableClick:!0},ariaLabel:this.props.accessibilityLabel?this.props.accessibilityLabel:void 0}},t.prototype._onKeyDownOpenCard=function(){if(this._isLivePersonCardLibAvailable()&&this.state.hasDataLoaded&&window.LPC&&window.LPC.openCard&&this.props.onKeyDownContainerId){var e=document.getElementById(this.props.onKeyDownContainerId);if(e){var t=this._makeLivePersonaCardParameters(!0);window.LPC.openCard(e,t)}}},t.prototype._getHostAppId=function(){return this.props.entityReference.LogicalName+":"+this.props.recordId},t.prototype._getRecordData=function(){var e=this;if(!this.state.hasDataLoaded){var t=this.props.entityReference.LogicalName;v.default.retrieveRecord(t,this.props.recordId,this._getQueryOptions(t)).then(function(n){var o=e._getLpcIdentifiers(n,t);o&&e.setState({identifiers:o,hasDataLoaded:!0})}).catch(function(){v.default.Diagnostics.traceError("LivePersonaHoverTarget","Failed to fetch record data.")})}},t.prototype._getQueryOptions=function(e){switch(e){case"contact":return"?$select=emailaddress1";case"systemuser":return"?$select=internalemailaddress,azureactivedirectoryobjectid"}return""},t.prototype._getLpcIdentifiers=function(e,t){switch(t){case"contact":return{smtp:e.emailaddress1};case"systemuser":return{smtp:e.internalemailaddress,aadObjectId:e.azureactivedirectoryobjectid}}return null},t.prototype._isLivePersonCardLibAvailable=function(){var e=this.context&&null!=this.context.context?this.context.context.lpcInitializationState:void 0;return!!e&&e===Le.Initialized},t.prototype._reportCardUsage=function(e){var t={eventName:"uci_controlframework_usage",eventParameters:[{name:"EventContext",value:e},{name:"ControlName",value:"LivePersonaHoverTarget"}]};v.default.Reporting.reportEvent(t)},t.displayName="LivePersonaCardHoverTarget",t}(y.a);ze.contextTypes={context:He.object};var Ge=h.connect(b.a)(ze),Ye=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),qe=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Ye(t,e),t.prototype.getElementName=function(){return"label"},t.prototype.getElementProps=function(){var e={htmlFor:this.props.forElementId};return e.for=this.props.forElementId,e},t.displayName="Label",t}(y.a),$e=h.connect(b.a)(qe),Xe=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Qe=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Xe(t,e),t.prototype.getElementName=function(){return"option"},t.prototype.getElementProps=function(){var e={value:this.props.value?this.props.value.Value.toString():"-1"};return this.props.disabled&&(e.disabled=!0),this.props.selected&&(e[t._DATA_SELECTED]=!0),e},t.prototype.getElementChildren=function(){return this.props.value&&this.props.value.Label||""},t._DATA_SELECTED="data-selected",t}(y.a),Ze=h.connect(b.a)(Qe),Je=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),et=function(e){function t(t){var n=e.call(this,t)||this;return n._onChangeHandler=n._onChangeHandler.bind(n),n._uuid=Object(f.b)(),n.state={value:t.value},n}return Je(t,e),t.prototype.componentWillReceiveProps=function(e){e&&!t._optionsEqual(this.state.value,e.value,this._isMultiple())&&this.setState({value:e.value})},t.prototype._uniqueId=function(e,t){return void 0===e&&(e=this.props.id),void 0===t&&(t=this._uuid),e+"_"+t},t.prototype._isMultiple=function(){return!!this.props.multiple},t.prototype._optionId=function(e){return""+this._uniqueId()+e.Value},t._optionsEqual=function(e,t,n){if(void 0===n&&(n=!1),!e||!t)return!1;if(Object(s.c)(e.Value)&&Object(s.c)(t.Value))return e.Label===t.Label;if(n){var o=e,r=t;return o.length===r.length&&o.every(function(e,t){return e===r[t]})}return e.Value===t.Value},t.prototype._onChangeHandler=function(e){for(var t=Array.from(e.target.options).filter(function(e){return e.selected}),n=[],o=function(e){var o=t[e].value;if(!Object(s.c)(o)){var i=r.props.options.filter(function(e){return(Object(s.c)(e.Value)?"":e.Value.toString())===o});i&&i.length&&n.push(i[0])}},r=this,i=0;i<t.length;i++)o(i);if(n.length>0){var a=this._isMultiple()?{value:n}:{value:n[0]};this.setState(a),this.props.onChange&&this.props.onChange(a.value)}},t.prototype.getElementName=function(){return"select"},t.prototype.getElementProps=function(){var e={value:this.props.multiple?this.state.value?this.state.value.map(function(e){return e.Value.toString()}):["-1"]:this.state.value?this.state.value.Value.toString():"-1",onChange:this._onChangeHandler};return e.describedByElementId=this.props.describedByElementId?null:this.props.describedByElementId,this.props.disabled&&(e.disabled=!0),this.props.multiple&&(e.multiple=!0),e},t.prototype.getElementChildren=function(){var t=this;return this.props.options&&this.props.options.length?this.props.options.map(function(e){var n=t._optionId(e),o=!1;if(t.props.multiple){for(var r=0;r<t.props.value.length;r++)if(t.props.value[r]===e){o=!0;break}}else o=t.props.value===e;return i.createElement(Ze,{id:n,key:n,value:e,selected:o,style:t.props.style.optionStyle})}):e.prototype.getElementChildren.call(this)},t}(y.a);function tt(e){var t={};return Object.assign(t,e),e&&e.style?(e.style.selectStyle&&e.style.selectStyle.appearance&&(t.style.selectStyle.appearance=e.style.selectStyle.appearance,t.style.selectStyle.WebkitAppearance=e.style.selectStyle.appearance,t.style.selectStyle.MozAppearance=e.style.selectStyle.appearance,t.style.selectStyle.MsAppearance=e.style.selectStyle.appearance),Object.assign(e.style,t.style.selectStyle,Object(b.b)(e))):{}}var nt,ot,rt=h.connect(function(e){return function(t){return t.renderRule(tt,e)}})(et),it=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),st=function(e){function t(t){var n=e.call(this,t)||this;return n._onCheckboxChange=n._onCheckboxChange.bind(n),n}return it(t,e),t.prototype._onCheckboxChange=function(e){var t=e.target.checked;this.props.onChange(t)},t.prototype.getElementName=function(){return"input"},t.prototype.getElementProps=function(){var e,t=((e={tabIndex:this.props.tabIndex?this.props.tabIndex:0,disabled:this.props.disabled,key:this.props.key,id:this.props.id?this.props.id:this.props.key,onChange:this._onCheckboxChange,role:this.props.accessibilityRole?this.props.accessibilityRole:"checkbox",type:"checkbox",name:this.props.name?this.props.name:null})[z.e]=this.props.checked,e.checked=this.props.checked,e);return t.testhooks=this.props.testhooks,t},t.displayName="Checkbox",t}(y.a),at=h.connect(b.a)(st),lt=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),ct=function(){return(ct=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},ut=function(e){function t(t){var n=e.call(this,t)||this;return n._optionSetChange=n._optionSetChange.bind(n),n._onCheckboxChange=n._onCheckboxChange.bind(n),n.onClick=n.onClick.bind(n),n.state={checked:n.props.value||!1},n}return lt(t,e),t.prototype.componentWillReceiveProps=function(e){null!==e.value&&void 0!==e.value&&e.value!==this.state.checked&&this.setState({checked:e.value})},t.prototype._onCheckboxChange=function(e){if(this.state.checked!==e&&(this.setState({checked:e}),this.props.onValueChange&&this.props.onValueChange(e)),this.props.onOptionSetValueChange&&this.props.options){var t=this.props.options[Number(e)];this.props.onOptionSetValueChange(t)}},t.prototype._optionSetChange=function(e){e&&this.props.onOptionSetValueChange&&this.props.onOptionSetValueChange(e)},t.prototype.onClick=function(){if(this.props.onOptionSetValueChange&&this.props.options){var e=this.props.options[Number(!this.props.value)];this.props.onOptionSetValueChange(e)}},t.prototype.getCheckboxComponent=function(){var e={tabIndex:0,disabled:this.props.disabled,id:this.props.id||null,key:this.props.id||null,onChange:this._onCheckboxChange,testhooks:this.props.testhooks,name:this.props.name?this.props.name:null,accessibilityRole:this.props.displayAs&&this.props.displayAs!==t._CHECKBOX_DISPLAY_TAG?"switch":"",accessibilityLabel:this.props.accessibilityLabel,describedByElementId:this.props.describedByElementId?null:this.props.describedByElementId,style:this.props.style,checked:this.props.displayAs?this.props.value:this.state.checked,accessibilityChecked:this.props.displayAs?this.props.value:this.state.checked,title:this.props.title?this.props.title:null};return i.createElement(at,ct({},e))},t.prototype.getSelectComponent=function(){var e=this.props.options[Number(this.props.value)],t={style:this.props.style||{},options:this.props.options,value:e,onChange:this._optionSetChange,testhooks:this.props.testhooks,disabled:this.props.disabled,key:this.props.absoluteId,name:this.props.id,id:this.props.id,accessibilityLabel:this.props.accessibilityLabel,title:this.props.title,onFocus:this.props.disabled?null:this.props.onFocus,onBlur:this.props.disabled?null:this.props.onBlur,describedByElementId:this.props.describedByElementId?null:this.props.describedByElementId};return i.createElement(rt,ct({},t))},t.prototype.getLabelComponent=function(){var e={};Object.assign(e,this.props);var n=this.props.displayValue;return this.props.displayAs===t._CHECKBOX_DISPLAY_TAG?(e.forElementId=this.props.id||null,n=this.props.defaultValue):e.onClick=this.onClick,this.props.testhooks&&(e.testhooks=this.props.testhooks),e.style={overflow:"hidden",whiteSpace:"nowrap",textOverflow:"ellipsis"},this.props.displayValue?i.createElement($e,ct({},e),n):null},t.prototype.render=function(){if(!this.props.options&&this.props.displayAs)return i.createElement($e,null);if(this.props.displayAs===t._SELECT_DISPLAY_TAG)return this.getSelectComponent();if(this.props.displayAs===t._RADIO_DISPLAY_TAG)return this.getLabelComponent();return i.createElement(M.a,ct({},{style:{display:"flex",alignItems:"center",width:"100%"}},{testhooks:this.props.testhooks}),this.getCheckboxComponent(),this.getLabelComponent())},t.displayName="Switch",t._CHECKBOX_DISPLAY_TAG="checkbox",t._SELECT_DISPLAY_TAG="picklist",t._RADIO_DISPLAY_TAG="radio",t}(y.a),pt=h.connect(b.a)(ut),dt=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),ht=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return dt(t,e),t.prototype.getElementName=function(){return"input"},t.prototype.getElementProps=function(){var e=this,t={type:"file",onKeyPress:function(t){(e.isEdge||e.isIE)&&"Enter"===t.key&&t.target.click()}};return this.props.accept&&this.props.accept.length&&(t.accept=this.props.accept.join(",")),this.props.fileSelected&&(t.onChange=function(t){var n=t.target;if(n&&n.files&&n.files.length>0)if(n.files.length>1&&e.props.multipleFilesSelected)n.type="",n.type="file",e.props.multipleFilesSelected();else{var o=n.files[0],r=new FileReader;r.readAsDataURL(o),r.onload=function(){var t=e._parseFileReaderResult(o,r.result);e.props.fileSelected(t)},r.onerror=function(){e.props.onReaderError&&e.props.onReaderError("Error reading file: "+o.name+"\n"+r.error)}}else e.props.fileUnselected&&e.props.fileUnselected()}),t},t.prototype._parseFileReaderResult=function(e,t){var n=null,o=null;if(t){var r=t.indexOf(",");r>-1&&(n=t.substring(r+1));var i=t.indexOf(";");i>-1&&r>-1&&(o=t.substring(i+1,r))}return{content:n,mimeType:e.type,encoding:o,name:e.name,size:e.size}},t.displayName="FileInput",t}(y.a),ft=h.connect(b.a)(ht),mt=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}();!function(e){e[e.Default=0]="Default",e[e.Small=1]="Small",e[e.Medium=2]="Medium",e[e.Large=3]="Large"}(nt||(nt={})),function(e){e[e.None=0]="None",e[e.Lookup=1]="Lookup",e[e.Grid=2]="Grid"}(ot||(ot={}));var yt=function(e){function t(){var t=null!==e&&e.apply(this,arguments)||this;return t._renderPresence=!1,t}return mt(t,e),t.prototype._addPresenceInformation=function(){var e=this.props.displaySize?this.props.displaySize:nt.Default,t=this.props.presenceTarget?this.props.presenceTarget:ot.None;this._presenceInstance=new this._skypeChannelContext.SkypeChannelClient.Presence(this._presenceId,this.props.sipUrl,this.props.entityReference,e,this.props.parentControlId,this.props.accessibilityLabel,t),this._presenceInstance.buildPresence()},t.prototype.componentDidMount=function(){this._renderPresence&&this._addPresenceInformation()},t.prototype.componentWillUnmount=function(){this._presenceInstance&&(this._presenceInstance.close(),this._presenceInstance=null)},t.prototype._isSkypeChannelAvailable=function(){return this._skypeChannelContext=this.context&&null!=this.context.context?this.context.context.SkypeChannel:void 0,void 0!==this._skypeChannelContext},t.prototype._isPropsAvailable=function(){return!!this.props.sipUrl||this.props.entityReference&&this._skypeChannelContext.SkypeChannelClient.PresenceInformation&&this._skypeChannelContext.SkypeChannelClient.PresenceInformation.isPresenceEnabledEntity(this.props.entityReference.entityName)},t.prototype.render=function(){return this._presenceId=this.props.id?this.props.id:this.props.parentControlId+"_presence",this._renderPresence=this._isSkypeChannelAvailable()&&this._isPropsAvailable(),this._renderPresence?i.createElement(M.a,{id:this._presenceId,style:this.props.style}):null},t.displayName="PresenceIndicator",t}(i.Component);function bt(e){return new Promise(function(t,n){var o=new XMLHttpRequest;o.onreadystatechange=function(){if(o.readyState===XMLHttpRequest.DONE){var e=o.responseText;/<svg[\s\S]*>/i.test(e)?t(function(e){return(new DOMParser).parseFromString(e,"text/xml").getElementsByTagName("svg")[0]}(e)):n(new Error("Provided file isn't a valid SVG"))}},o.open("GET",e,!0),o.send()})}yt.contextTypes={context:He.object};var gt,_t=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),vt=function(e){function t(t){var n=e.call(this,t)||this;return n.state={},n}return _t(t,e),t.prototype.componentDidMount=function(){this.props.source&&this._inlineSvgImage(this.props.source)},t.prototype._inlineSvgImage=function(e){var t,n=this;(t=e,bt(t).then(function(e){var t,n,o=null;return e&&(function(e){for(var t=e.getElementsByTagName("script"),n=t.length-1;n>=0;n--)t[n].parentNode.removeChild(t[n])}(e),(o=function(e){for(var t={},n=0;n<e.attributes.length;n++){var o=e.attributes[n].name,r=e.attributes[n].value;"style"===o&&(r=i(r)),t[o]=r}return t;function i(e){if(!e)return null;for(var t=e.split(";"),n={},o=0,r=t;o<r.length;o++){var i=r[o],s=i.split(":"),a=s[0].trim().replace(/-\S/g,function(e){return e[1].toUpperCase()}),l=s[1].trim();n[a]=l}return n}}(e)).dangerouslySetInnerHTML={__html:(t=e,n=new XMLSerializer,Array.prototype.reduce.call(t.childNodes,function(e,t){return e+n.serializeToString(t)},""))},o=Object.freeze(o)),o})).then(function(e){e?n.setState({parsedSvgProps:e}):n.props.onParsingError&&n.props.onParsingError("File content is empty")},function(e){n.props.onParsingError&&n.props.onParsingError(e.message)})},t.prototype._shouldRenderImg=function(){return this.props.source&&this.props.fallbackToImage&&!this.state.parsedSvgProps},t.prototype.getElementName=function(){return"svg"},t.prototype.getElementProps=function(){return Object.assign({},this.state.parsedSvgProps,this.props)},t.prototype.render=function(){if(this._shouldRenderImg()){var e=void 0;return this.props.source&&(e=this.props.source.replace(/\\/g,"/")),i.createElement(De,{source:e,style:this.props.style,altText:this.props.altText,title:this.props.title})}return i.createElement(this.getElementName(),this.getElementPropsInternal(),this.getElementChildren())},t.displayName="Svg",t}(y.a),Ct=h.connect(b.a)(vt),It=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Pt=function(){return(Pt=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)};!function(e){e[e.CustomImage=0]="CustomImage",e[e.Initials=1]="Initials",e[e.CustomEntityIcon=2]="CustomEntityIcon",e[e.DefaultEntityIcon=3]="DefaultEntityIcon"}(gt||(gt={}));var Et=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return It(t,e),t.getMode=function(e){return e.hasPrimaryImageField&&e.imageSrc?gt.CustomImage:e.hasPrimaryImageField&&e.entityPrimaryField?gt.Initials:e.customEntityIcon?gt.CustomEntityIcon:e.entityReference&&e.entityReference.entityName?gt.DefaultEntityIcon:void 0},Object.defineProperty(t.prototype,"_isCustomImageMode",{get:function(){return t.getMode(this.props)===gt.CustomImage},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"_isInitialsMode",{get:function(){return t.getMode(this.props)===gt.Initials},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"_isCustomEntityIconMode",{get:function(){return t.getMode(this.props)===gt.CustomEntityIcon},enumerable:!0,configurable:!0}),Object.defineProperty(t.prototype,"_isDefaultEntityIconMode",{get:function(){return t.getMode(this.props)===gt.DefaultEntityIcon},enumerable:!0,configurable:!0}),Object.defineProperty(t,"_isBrowserIE",{get:function(){return!!window.navigator.userAgent.match("MSIE")||!!window.navigator.userAgent.match("Trident")},enumerable:!0,configurable:!0}),t._getInitials=function(e){var t="";if(e){for(var n=e.split(" "),o=0;o<n.length&&t.length<2;o++)if(n[o].length>0){var r=n[o].charCodeAt(0);if(!(r>=97&&r<=122||r>=65&&r<=90)){t+=n[o].charAt(0);break}t+=n[o].charAt(0)}if(t.length<=1){t="";for(var i=0;i<e.length&&t.length<2;i++){var s=e.charCodeAt(i);if(!(s>=97&&s<=122||s>=65&&s<=90)){t+=e.charAt(i);break}t+=e.charAt(i)}}}return t},t.prototype._renderHealthCircle=function(e){var n=this,o=t._unitRegex.exec(this.props.style.width+"")[1],r=parseFloat(this.props.style.width+""),s=360*this.props.entityHealthScore/100,a={width:r+o,height:r+o,position:"relative",display:"block"},l={clip:"rect(0, "+(r+o)+", "+(r+o)+", "+(r/2+o)+")",height:"100%",width:"100%",left:"0",position:"absolute",top:"0"},c={clip:"rect(0, "+(r/2+o)+", "+(r+o)+", 0)",transform:"rotate("+s+"deg)",height:"100%",width:"100%",border:"4px solid transparent",borderRadius:"50%",left:"0",position:"absolute",top:"0",borderColor:"transparent",boxSizing:"border-box"};t._healthRanges.forEach(function(e){n.props.entityHealthScore>=e.min&&n.props.entityHealthScore<=e.max&&(c.borderColor=e.color)});var u=Object.assign({},c),p=Object.assign({display:"none"},c);return s>180&&(l.clip="rect(auto, auto, auto, auto)",u.transform="rotate(180deg)",p.display="block"),i.createElement(M.a,{style:a},e,i.createElement(M.a,{style:l},i.createElement(M.a,{style:u}),i.createElement(M.a,{style:p})))},t.prototype.getElementName=function(){return"span"},t.prototype.getElementProps=function(){return{alt:this.props.alt?this.props.alt:""}},t.prototype.getElementChildren=function(){return this._isInitialsMode?t._getInitials(this.props.entityPrimaryField):this._isDefaultEntityIconMode?i.createElement(Ue,{type:this.props.entityReference.entityName,style:this.props.iconStyle}):void 0},t.prototype._renderEntityImageWithPresence=function(e){var t="id_"+Object(f.b)(),n=i.createElement(yt,{key:t+"_presence",id:t+"_presence",parentControlId:t,style:{right:"0px",bottom:"0px",position:"absolute"},entityReference:this.props.entityReference,sipUrl:this.props.sipUrl,displaySize:this.props.presenceIndicatorSize,accessibilityLabel:this.props.entityPrimaryField});return i.createElement(M.a,{id:t,style:{position:"relative"}},e,n)},t.prototype.render=function(){var e;if(this._isCustomImageMode||this._isCustomEntityIconMode)if(t._isBrowserIE){var n={source:this._isCustomImageMode?this.props.imageSrc:this.props.customEntityIcon,style:this.props.style,fallbackToImage:!0,altText:this.props.alt,title:this.props.title};e=i.createElement(Ct,Pt({},n))}else{var o={source:this._isCustomImageMode?this.props.imageSrc:this.props.customEntityIcon,style:this.props.style,altText:this.props.alt,title:this.props.title};e=i.createElement(De,Pt({},o))}else{var r=this.getElementPropsInternal(),s=Object.assign({},r,{role:r.role||"img","aria-label":this.props.alt||""});e=i.createElement(this.getElementName(),s,this.getElementChildren())}return this.props.wrapperStyle&&(e=i.createElement(M.a,{style:this.props.wrapperStyle},e)),this.props.entityHealthScore&&(e=this._renderHealthCircle(e)),(this.props.entityReference||this.props.sipUrl)&&(e=this._renderEntityImageWithPresence(e)),e},t.displayName="EntityImage",t._unitRegex=/[0-9]*\.?[0-9]+(px|%|em|rem)?/i,t._healthRanges=[{min:1,max:39,color:"#FF0000"},{min:40,max:59,color:"#FFBB00"},{min:60,max:100,color:"#00EE00"}],t.backgroundColors=["#005C62","#358717","#725A0D","#A42B1A","#652F4E","#6A1E7A","#315FA2"],t}(y.a);function St(e){if(e&&e.style){if(!e.style.backgroundColor&&(Et.getMode(e)===gt.Initials||Et.getMode(e)===gt.DefaultEntityIcon)){var t=Et.backgroundColors[0];if(e.entityPrimaryField){for(var n=0,o=e.entityPrimaryField.length-1;o>=0;o--){var r=e.entityPrimaryField.charCodeAt(o),i=o%8;n^=(r<<i)+(r>>8-i)}t=Et.backgroundColors[n%Et.backgroundColors.length]}return Object.assign({backgroundColor:t},Object(b.b)(e))}return Object.assign(e.style,Object(b.b)(e))}return{}}var Dt,wt=h.connect(function(e){return function(t){return t.renderRule(St,e)}})(Et),Ot=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Tt=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Ot(t,e),t.prototype.shouldComponentUpdate=function(e){return this.props.active!==e.active||this.props.progressType!==e.progressType},t.prototype.getElementName=function(){return"div"},t.prototype.getFlexClassName=function(e){var t,n="";return e?(t=Object.assign(Object(K.a)(e)),this.props.progressType&&"bar"!==this.props.progressType?"ring"===this.props.progressType&&(n+="indeterminateProgressRing"):n+="indeterminateProgressBar",!0!==this.props.active&&!0!==this.props.animating&&(n+=" hideProgressBar"),n+=" "+Object(K.b)(t?t.display:null)):null},t.prototype.getElementChildren=function(){return this.isIE?i.createElement("div",null,"......"):"ring"===this.props.progressType?i.createElement("div",null,i.createElement("div",{className:"progressDot"}),i.createElement("div",{className:"progressDot"}),i.createElement("div",{className:"progressDot"}),i.createElement("div",{className:"progressDot"}),i.createElement("div",{className:"progressDot"})):void 0},t.displayName="ProgressIndicator",t}(y.a),Ft=h.connect(b.a)(Tt),Mt=n(24),xt=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),At=function(e){function t(t){var n=e.call(this,t)||this;return n._SCROLL_THRESHOLD=1,n._FULL_BROWSER_TRANSLATE_DURATION=500,n._TABLET_TRANSLATE_DURATION=500,n._MOBILE_BROWSER_TRANSLATE_DURATION=500,n._recalculateState=n._recalculateState.bind(n),n._onNextClick=n._onNextClick.bind(n),n._onPrevClick=n._onPrevClick.bind(n),n._onNextKeyDown=n._onNextKeyDown.bind(n),n._onPrevKeyDown=n._onPrevKeyDown.bind(n),n._saveScrollViewRefCallback=n._saveScrollViewRefCallback.bind(n),n.state={prevArrowDisabled:!0,nextArrowDisabled:!0},n._userAgent=window.navigator.userAgent,n}return xt(t,e),t.prototype.getElementProps=function(){var e=this.props.arrowButtonStyle||{},t=this.props.scrollViewStyle||{};return Object.assign({},this.props,{startChildIndex:this.props.startChildIndex||0,arrowWidth:this.props.arrowWidth||e.width||20,arrowButtonStyle:e,scrollViewStyle:t})},t.prototype.componentDidMount=function(){var e=this.getElementPropsInternal();0!==e.startChildIndex&&this._scrollToChildByIndex(e.startChildIndex),this._currentChildIndex=e.startChildIndex},t.prototype.componentDidUpdate=function(){if(!this.getElementPropsInternal().style.height){var e=this._getScrollableContainer();if(e){var t=e.scrollHeight+"px";e.parentElement.style.height=t,e.parentElement.style.minHeight=t}}this._recalculateState()},t.prototype._saveScrollViewRefCallback=function(e){this._scrollView=e},t.prototype._onPrevKeyDown=function(e){this.props.onPrevArrowKeyDown&&this.props.onPrevArrowKeyDown(e,this._currentChildIndex)},t.prototype._onNextKeyDown=function(e){this.props.onNextArrowKeyDown&&this.props.onNextArrowKeyDown(e,this._currentChildIndex)},t.prototype._onPrevClick=function(e){this._slideByArrow(!1),e.stopPropagation(),this.props.onPrevArrowClick&&this.props.onPrevArrowClick(e,this._currentChildIndex)},t.prototype._onNextClick=function(e){this._slideByArrow(!0),e.stopPropagation(),this.props.onNextArrowClick&&this.props.onNextArrowClick(e,this._currentChildIndex)},t.prototype._slideByArrow=function(e){var t=this._getChildIndexToScroll(e);this._scrollToChildByIndex(t)},t.prototype._getScrollLeft=function(e){if(this.props.isRTL){if(this._isBrowserIEorEdge()||this._isBrowserFirefox())return Math.abs(e.scrollLeft);if(this._isBrowserChromeOrAndroid()||this._isBrowserSafari())return e.scrollWidth-e.clientWidth-e.scrollLeft}return e.scrollLeft},t.prototype._getPrevIcon=function(){var e=this.props.prevArrowIconType;return this.props.isRTL&&56===e&&(e=13),this._renderArrowIcon(e,"<")},t.prototype._getNextIcon=function(){var e=this.props.nextArrowIconType;return this.props.isRTL&&13===e&&(e=56),this._renderArrowIcon(e,">")},t.prototype._getCurrentChildIndex=function(e,t){var n=this._getScrollableContainer(),o=n.children,r=0,i=e;if(t&&!this.props.isRTL||!t&&this.props.isRTL){if(this._getTotalWidthIncludingMargins(o[i])>=n.clientWidth)return this._boundIndex(++i,o);for(;i<o.length;i++)if((r+=this._getTotalWidthIncludingMargins(o[i]))>=n.clientWidth)return this._boundIndex(i,o)}else{if(this._getTotalWidthIncludingMargins(o[i])>=n.clientWidth)return this._boundIndex(--i,o);for(;i>=0;i--)if((r+=this._getTotalWidthIncludingMargins(o[i]))>=n.clientWidth)return this._boundIndex(i,o)}return this._boundIndex(i,o)},t.prototype._boundIndex=function(e,t){return e=Math.min(e,t.length-1),e=Math.max(e,0)},t.prototype._getChildIndexToScroll=function(e){return this._currentChildIndex=this._getCurrentChildIndex(this._currentChildIndex,e),this._currentChildIndex},t.prototype._recalculateState=function(){var e,t,n=this._getScrollableContainer(),o=this._getScrollLeft(n),r=n.scrollWidth-n.offsetWidth;this.props.isRTL?(t=o<=0+this._SCROLL_THRESHOLD,e=this._isBrowserIEorEdge()||this._isBrowserFirefox()||this._isBrowserSafari()?Math.abs(o)+n.offsetWidth+this._SCROLL_THRESHOLD>=n.scrollWidth:o+this._SCROLL_THRESHOLD>=r):(e=o<=0+this._SCROLL_THRESHOLD,t=o+n.offsetWidth+this._SCROLL_THRESHOLD>=n.scrollWidth-1),e===this.state.prevArrowDisabled&&t===this.state.nextArrowDisabled||this.setState({prevArrowDisabled:e,nextArrowDisabled:t})},t.prototype._getChildByIndex=function(e){e=e&&e>0?e:0;var t=this._getScrollableContainer().children;return t?t[e]:null},t.prototype._scrollToChildByIndex=function(e){var t=this._getChildByIndex(e);t&&this._scrollToChild(t)},t.prototype._scrollToChild=function(e){if(!e)throw new Error("child must be specified");this._scrollToContent(this._getScrollableContainer(),e)},t.prototype._scrollToWithTransition=function(e,t){var n=e.scrollLeft,o=t-n,r=this._determineDuration();this._scrollTransition(e,0,n,10,o,r)},t.prototype._scrollTransition=function(e,t,n,o,r,i){var s=this,a=function(){t+=o,e.scrollLeft=s._scrollEase(t,n,r,i),t<i&&setTimeout(a,o)};a()},t.prototype._scrollEase=function(e,t,n,o){return(e/=o/2)<1?n*Math.pow(e,2)/2+t:(e--,-1*n*(Math.pow(e,2)-2*e-1)/2+t)},t.prototype._getScrollableContainer=function(){return d.findDOMNode(this._scrollView)},t.prototype._renderPrevArrowButton=function(){var e=this.getElementPropsInternal(),t=Object.assign({position:"absolute",left:"0px",top:"0px",width:e.arrowWidth+"px",boxSizing:"border-box",alignItems:"center"},this.props.arrowButtonStyle),n=this.props.id+"_scrollPrevArrow";return i.createElement(p.a,{id:n,key:n,accessibilityHidden:this.state.prevArrowDisabled,accessibilityLabel:this.props.isRTL?"Scroll right the content":"Scroll left the content",accessibilityHasPopup:!0,tabIndex:-1,disabled:this.state.prevArrowDisabled,style:t,onFocus:this.props.onFocus,onClick:this._onPrevClick,onKeyDown:this._onPrevKeyDown},this.props.isRTL?this._getNextIcon():this._getPrevIcon())},t.prototype._renderNextArrowButton=function(){var e=this.getElementPropsInternal(),t=Object.assign({position:"absolute",right:"0px",top:"0px",width:e.arrowWidth+"px",boxSizing:"border-box",alignItems:"center"},this.props.arrowButtonStyle),n=this.props.id+"_scrollNextArrow";return i.createElement(p.a,{id:n,key:n,accessibilityHidden:this.state.nextArrowDisabled,accessibilityLabel:this.props.isRTL?"Scroll left the content":"Scroll right the content",accessibilityHasPopup:!0,tabIndex:-1,disabled:this.state.nextArrowDisabled,style:t,onFocus:this.props.onFocus,onClick:this._onNextClick,onKeyDown:this._onNextKeyDown},this.props.isRTL?this._getPrevIcon():this._getNextIcon())},t.prototype._renderArrowIcon=function(e,t){if(e){var n="scroll"+Mt.a[e]+"Icon";return i.createElement(je.a,{key:n,type:e})}return t},t.prototype._isBrowserIEorEdge=function(){return this.isEdge||this.isIE},t.prototype._isBrowserFirefox=function(){return!!this._userAgent.match("Firefox")},t.prototype._isBrowserChromeOrAndroid=function(){return!!this._userAgent.match("Chrome")||!!this._userAgent.match("Android")||!!this._userAgent.match("AppleWebKit")},t.prototype._isBrowserSafari=function(){return!!this._userAgent.match("Safari")},t.prototype._scrollToContent=function(e,t){e&&t&&this._scrollToContentHorizontal(e,t)},t.prototype._scrollToContentHorizontal=function(e,t){for(var n,o=e.scrollWidth-e.offsetWidth,r=e.children,i=this._getChildIndex(t),s=0,a=0;a<i;a++)s+=this._getTotalWidthIncludingMargins(r[a]);this.props.isRTL?(s+=parseInt(this._getCalculatedStyle(t).marginRight,10),n=this._isBrowserIEorEdge()?s:o-s):n=s+=parseInt(this._getCalculatedStyle(t).marginLeft,10),this._scrollToWithTransition(e,n)},t.prototype._getCalculatedStyle=function(e){return e.currentStyle||window.getComputedStyle(e)},t.prototype._getTotalWidthIncludingMargins=function(e){var t=this._getCalculatedStyle(e),n=parseInt(t.width,10);return isNaN(n)&&(n=e.offsetWidth),n+(t.marginLeft.indexOf("px")<0?parseInt(getComputedStyle(e).marginLeft,10):parseInt(t.marginLeft,10))+(t.marginRight.indexOf("px")<0?parseInt(getComputedStyle(e).marginRight,10):parseInt(t.marginRight,10))},t.prototype._getChildIndex=function(e){for(var t=0;null!=(e=e&&e.previousSibling);)t++;return t},t.prototype._determineDuration=function(){return this._getScrollableContainer().clientWidth<=550?this._MOBILE_BROWSER_TRANSLATE_DURATION:this._getScrollableContainer().clientWidth<=1200?this._TABLET_TRANSLATE_DURATION:this._FULL_BROWSER_TRANSLATE_DURATION},t.prototype.render=function(){var e=this.getElementPropsInternal();Object.assign(e.style,{display:"block",position:"relative",paddingLeft:e.arrowWidth+"px",paddingRight:e.arrowWidth+"px",overflow:"hidden"},this.props.style);var t=Object.assign({},this.props.scrollViewStyle,{position:"relative"});return i.createElement(M.a,{style:e.style,isRequestedMeasuring:!0,onMeasuring:this._recalculateState,accessibilityLabel:this.props.accessibilityLabel},this.props.isRTL?this._renderNextArrowButton():this._renderPrevArrowButton(),i.createElement(oe,{semanticTag:this.props.semanticTag,key:"HorizontalScrollContent",refCallback:this._saveScrollViewRefCallback,horizontal:!0,style:t,accessibilityLabel:this.props.accessibilityLabel,onScroll:this._recalculateState,role:this.props.role,isRTL:this.props.isRTL},this.props.children),this.props.isRTL?this._renderPrevArrowButton():this._renderNextArrowButton())},t.displayName="HorizontalScroll",t}(y.a),kt=h.connect(b.a)(At),Rt=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Lt=function(){return(Lt=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)};!function(e){e[e.Crm=0]="Crm",e[e.Microsoft=1]="Microsoft"}(Dt||(Dt={}));var Nt=function(e){function t(t){var n=e.call(this,t)||this;return n.handleItemSelected=n.handleItemSelected.bind(n),n.handleItemIconPointerDown=n.handleItemIconPointerDown.bind(n),n.handleSpaceKey=n.handleSpaceKey.bind(n),n.handleRelativeToElementSelector=n.handleRelativeToElementSelector.bind(n),n._getOptionTestHooks=n._getOptionTestHooks.bind(n),n}return Rt(t,e),t.prototype.handleItemSelected=function(e){this.selectedListItem=e},t.prototype.handleItemIconPointerDown=function(e){var t=e.currentTarget;this._handleIconClick(t)},t.prototype.handleSpaceKey=function(e){var t=e.currentTarget;this._handleIconClick(t)},t.prototype.handleArrowUp=function(t){this.state.isExpanded&&e.prototype.handleArrowUp.call(this,t)},t.prototype.handleArrowDown=function(t,n){this.state.isExpanded?e.prototype.handleArrowDown.call(this,t,n):e.prototype.handleEnterKey.call(this,t)},t.prototype.handleRelativeToElementSelector=function(e){return e},t.prototype.calculateWidth=function(){return this.props.style&&this.props.style.width?this.props.style.width:"20em"},t.prototype._handleIconClick=function(e){if(e&&e.parentElement&&e.parentElement.parentElement&&"li"===e.parentElement.parentElement.localName){var t=e.parentElement.parentElement.dataset.value;if(this.props.onItemIconPointerDown&&t){var n=this.getOptionByValue(this.props.options,t);n&&this.props.onItemIconPointerDown(n)}}},t.prototype._renderListItem=function(e){var t=e.iconStyle?e.iconStyle:{width:16,height:16,margin:2},n=!e.imageSource&&e.iconType?e.iconCategory===Dt.Crm?i.createElement(ke,{type:e.iconType,style:t}):i.createElement(je.a,{type:e.iconType,style:t}):null,o=30===e.iconType?"Pin ":31===e.iconType?"Unpin ":null,r=null==o?o:o+e.text,s=e.imageSource?i.createElement(M.a,null,i.createElement(De,{source:e.imageSource,style:t,altText:e.altText||""})):e.iconType?i.createElement(M.a,{title:e.iconTitle,accessibilityLabel:r,role:30===e.iconType||31===e.iconType?"button":"presentation",onKeyDown:30===e.iconType||31===e.iconType?this.handleSpaceKey:null,onPointerDown:this.handleItemIconPointerDown},n):null;return i.createElement(M.a,{style:{display:"flex"}},s,i.createElement(ue,{role:"presentation",style:{marginLeft:"10px",textOverflow:"ellipsis",whiteSpace:"nowrap",overflow:"hidden"}},e.text||" "))},t.prototype._renderOptions=function(e,n){var o=this,r=this.props.options,s=this.props.selectedItemStyle||t.getSelectedItemStyle();return r.filter(function(t){return t.categoryId===e}).map(function(e,r){var a=o.getListItemId(e),l=o._getOptionTestHooks(r),c=r+(n=n||0);return i.createElement(Z,{key:c,id:a,tabIndex:-1,role:"option",title:e.text,accessibilityLabel:e.text,dataText:e.text,dataValue:e.value,onSelected:o.handleItemSelected,isSelected:o.selectedIndex===c,style:t.getListItemStyle(),selectedStyle:s,ref:o.saveItemRef,onClick:o.handleItemPointerDown,testhooks:l},o._renderListItem(e))})},t.prototype._getOptionTestHooks=function(e){if(!this.props.testhooks)return null;var t=Object.assign({},this.props.testhooks);for(var n in t)t[n]+="-item-"+e;return t},t.prototype._renderCategories=function(){var e=this,t=this.props.categories,n=[];if(t){var o=0;t.map(function(t,r){var s=e._renderOptions(t.id,o);n.push(i.createElement(M.a,{key:r,style:{display:"block"}},t.name,s)),o+=s.length})}else n.push(i.createElement(M.a,null,this._renderOptions()));return n},t.prototype.renderOptionsList=function(){var e=this.props.options;if(e){var t=this._renderCategories(),n=this.getPageSize(),o=this.getListId()+"_scrollView",r=n<e.length,s={height:r?2.35*n+"em":void 0,overflowY:r?"scroll":"hidden",overflowX:"hidden",flex:"1 1 auto",display:"block"},a={width:"100%",listStyleType:"none"},l=void 0;if(~this.selectedIndex){var c=e[this.selectedIndex];l=this.getListItemId(c)}return i.createElement(q,{role:"listbox",id:this.getListId(),title:"Select a view.",accessibilityLabel:"Select a view.",tabIndex:-1,style:a,onKeyDown:this.keyboardNavigation},i.createElement(oe,{id:o,accessibilityLabel:this.isIE?"Expanded list":null,style:s,role:"presentation",scrollToId:l,horizontal:!1},t))}return null},t.prototype.getTextOnlyStyle=function(){var e=this.props.textStyle?this.props.textStyle:{borderWidth:0,flex:"0 1 auto",outline:"none",cursor:"pointer",padding:"0.5em 0.75em"};return Object.assign({},e,{maxWidth:"100%",display:"flex"})},t.prototype.getTextOnlyInnerComponent=function(e){return i.createElement(M.a,{style:{display:"flex",maxWidth:"100%"}},i.createElement(ue,{style:{display:"inline-block",overflow:"hidden",textOverflow:"ellipsis"},id:e,accessibilityHidden:!0},this.getSelectedOptionText()),this._renderCaretButton())},t.prototype.handleValueChange=function(e){if(this.props.onChange){this.props.onChange(e);var t=this;setTimeout(function(){t.selectItem(t.getInternalId()+"_text")},500)}},t.prototype._renderCaretButton=function(){var e=this.props.caretStyle?Object.assign({},this.props.caretStyle):{paddingLeft:"5px",color:"black",backgroundColor:"transparent"},t=this.props.hoveredStyle||{":hover":{backgroundColor:"#EFEFEF"}};Object.assign(e,t,{cursor:"pointer"}),this.state.isExpanded&&(e.backgroundColor="#EFEFEF");var n=this.props.caretType&&Mt.a[this.props.caretType]?this.props.caretType:Mt.a.DropdownArrow;return i.createElement(ue,{id:this.getButtonId(),style:e,accessibilityHidden:!0},i.createElement(je.a,{type:n,role:"presentation"}))},t.prototype.renderFlyout=function(e){void 0===e&&(e="rtl"===document.body.dir);var t=void 0,n=void 0;if(this.props.testhooks)for(var o in n=Object.assign({},this.props.testhooks))n[o]+="-flyout";if(!this.props.readOnly&&this.state.isExpanded){var r=this.renderOptionsList(),s=this.getActiveDescendantId();if(r){var a={borderWidth:"0.1em",borderStyle:"solid",borderColor:"#666666",backgroundColor:"white",width:this.calculateWidth(),boxShadow:_e.SHADOWS.Shadow01};t=i.createElement(H,{id:this.getFlyoutId(),key:this.getFlyoutId(),focusElementId:s,testhooks:n,focusCallback:this.setFocusToItem,flyoutDirection:e?g.down:g.downleft,flyoutStyle:a,positionType:"relative",relativeToElementId:this.props.relativeToElementId?this.props.relativeToElementId:this.getButtonId(),relativeToElementIdSelector:this.handleRelativeToElementSelector,onOutsideClick:this.handleFlyoutOutsideClick,parentCustomControlId:this.props.parentCustomControlId,parentFlyoutRoot:this.props.parentFlyoutRoot,rootZIndex:this.props.rootZIndex,enableTrackOnScroll:!0,dismissOnScroll:!this.props.keepFlyoutOpenOnScroll},r)}}return t},t.prototype.handleFlyoutOutsideClick=function(e){var t=this.props.id,n=document.getElementById(t);n&&n.contains(event.target)&&n.childNodes[0]!==event.target||(e.target.id!==this.getButtonId()&&this.setIsExpanded(!1),this.setFocus(),this.clickedOutside=!0)},t.prototype.render=function(){var e=Object.assign({},this.getElementPropsInternal(),{title:""});return Object.assign(e.style,{backgroundColor:"transparent",display:"flex",flex:"0 1 auto",width:"100%"},this.props.viewSelectorStyle),i.createElement(M.a,Lt({},e,{ref:this.saveContainerRef}),i.createElement(M.a,{style:e.style,id:this.getInternalId()},this.renderTextOnly(this.focusableControlId,this.props.testhooks),!this.props.readOnly&&this.renderFlyout(this.props.isRTL)))},t.displayName="ViewSelectorControl",t}(_e);function Bt(e){return Object.assign({float:"left",fontSize:"16px",color:"#666666"},e.textStyle)}function Ut(e){return Object.assign({width:"100%",height:"100%",textAlign:"center",minHeight:"7.5em",display:"flex",alignItems:"center",justifyContent:"center",flexDirection:"column",backgroundColor:"#ffffff",flex:"1 1 auto"},e.containerStyle)}function jt(e){return Object.assign({},{color:"#666666",fontFamily:"Dyn CRM Symbol, Segoe MDL2 Assets",fontSize:"2.5em",paddingBottom:"10px"},e.iconStyle)}function Wt(e){return i.createElement(M.a,{style:Ut(e),title:e.text},i.createElement(je.a,{type:e.icon,style:jt(e),accessibilityHidden:e.accessibilityHidden}),i.createElement(ue,{style:Bt(e)},e.text))}var Vt=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Ht=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Vt(t,e),t.prototype.getElementName=function(){return"table"},t.displayName="Table",t}(y.a),Kt=h.connect(b.a)(Ht),zt=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Gt=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return zt(t,e),t.prototype.getElementName=function(){return"tbody"},t.displayName="TableBody",t}(y.a),Yt=h.connect(b.a)(Gt),qt=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),$t=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return qt(t,e),t.prototype.getElementName=function(){return"caption"},t.displayName="TableCaption",t}(y.a),Xt=h.connect(b.a)($t),Qt=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),Zt=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return Qt(t,e),t.prototype.getElementName=function(){return"td"},t.prototype.getElementProps=function(){var e={};return this.props.colSpan&&(e.colSpan=this.props.colSpan),this.props.rowSpan&&(e.rowSpan=this.props.rowSpan),this.props.scope&&(e.scope=this.props.scope),e},t.displayName="TableCell",t}(y.a),Jt=h.connect(b.a)(Zt),en=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),tn=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return en(t,e),t.prototype.getElementName=function(){return"tfoot"},t.displayName="TableFooter",t}(y.a),nn=h.connect(b.a)(tn),on=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),rn=function(e){function t(){return null!==e&&e.apply(this,arguments)||this}return on(t,e),t.prototype.getElementName=function(){return"thead"},t.displayName="TableHeader",t}(y.a),sn=h.connect(b.a)(rn),an=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),ln=function(e){function t(t){var n=e.call(this,t)||this;return n._onClickWrapper=n._onClickWrapper.bind(n),n}return an(t,e),t.prototype._onClickWrapper=function(e){this.props.onClick&&this.props.onClick(e)},t.prototype.getElementName=function(){return"th"},t.prototype.getElementProps=function(){return Object.assign({},this.props,{children:null,onClick:this._onClickWrapper})},t.displayName="TableHeaderCell",t}(y.a),cn=h.connect(b.a)(ln),un=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),pn=function(e){function t(t){var n=e.call(this,t)||this;return n._onClickWrapper=n._onClickWrapper.bind(n),n}return un(t,e),t.prototype._onClickWrapper=function(e){this.props.onClick&&this.props.onClick(e)},t.prototype.getElementName=function(){return"tr"},t.prototype.getElementProps=function(){return Object.assign({},this.props,{children:null,onClick:this._onClickWrapper})},t.displayName="TableRow",t}(y.a),dn=h.connect(b.a)(pn),hn=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),fn=function(e){function t(t){var n=e.call(this,t)||this;return n._onChangeHandler=n._onChangeHandler.bind(n),n}return hn(t,e),t.prototype.getElementName=function(){return"input"},t.prototype._onChangeHandler=function(e){e.target.checked&&this.props.onChange&&this.props.onChange(this.props.value)},t.prototype.getElementProps=function(){var e={id:this.props.id,key:this.props.id,checked:this.props.checked,name:this.props.name,role:"radio",type:"radio",onChange:this._onChangeHandler};return this.props.disabled&&(e.disabled=!0),this.props.checked&&(e[t._DATA_CHECKED]=!0),this.props.value&&(e.value=this.props.value.Label),e},t.displayName="InputOption",t._DATA_CHECKED="data-checked",t}(y.a),mn=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),yn=function(){return(yn=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},bn=function(e){function t(t){var n=e.call(this,t)||this;return n._onChangeHandler=n._onChangeHandler.bind(n),n._uuid=Object(f.b)(),n.state={value:t.value},n}return mn(t,e),t.prototype.componentWillReceiveProps=function(e){e&&!t._optionsEqual(this.state.value,e.value)&&this.setState({value:e.value})},t.prototype._uniqueId=function(e,t){return void 0===e&&(e=this.props.id),void 0===t&&(t=this._uuid),e+"_"+t},t.prototype._optionId=function(e){return this._uniqueId()+"_"+e.Value},t._optionsEqual=function(e,t){return!(!e||!t)&&(Object(s.c)(e.Value)&&Object(s.c)(t.Value)?e.Label===t.Label:e.Value===t.Value)},t.prototype._getInputOptionProps=function(e,t){var n=e.Value===this.state.value.Value,o={id:t,key:t,value:e,name:this.props.name,checked:n,onChange:this._onChangeHandler,disabled:this.props.disabled};return this.props.style&&(o.style=this.props.style.inputOptionStyle||null),o},t.prototype._getLabelOptionProps=function(e){var t={forElementId:e};return this.props.style&&(t.style=this.props.style.inputOptionLabelStyle||null),t},t.prototype._getViewStyles=function(){var e={};return this.props.style&&(e.style=this.props.style.style||null),e},t.prototype._onChangeHandler=function(e){e&&(this.setState({value:e}),this.props.onChange&&this.props.onChange(e))},t.prototype._getOptionList=function(){var e=this;return this.props.options&&this.props.options.length&&this.props.value?this.props.options.map(function(t){var n=e._optionId(t),o=e._getInputOptionProps(t,n),r=e._getLabelOptionProps(n),s=e._getViewStyles();return i.createElement(M.a,yn({key:Object(f.b)()},s),i.createElement(fn,yn({},o)),i.createElement($e,yn({},r),t.Label))}):null},t.prototype.render=function(){return i.createElement(M.a,{style:this.props.style.style},this._getOptionList())},t}(y.a),gn=h.connect(b.a)(bn),_n=n(33),vn=n(27),Cn=function(){var e=function(t,n){return(e=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(t,n)};return function(t,n){function o(){this.constructor=t}e(t,n),t.prototype=null===n?Object.create(n):(o.prototype=n.prototype,new o)}}(),In=function(){return(In=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},Pn=function(e){function t(t){var n=e.call(this,t)||this;return n._toggleCollapseState=n._toggleCollapseState.bind(n),n.saveItemRef=n.saveItemRef.bind(n),n._firstRender=!0,n._totalLineHeight=0,n.state={collapsed:!0},n._backgroundCanvas=document.createElement("canvas"),n._areLinesTruncated=!1,n}return Cn(t,e),t.prototype.componentDidMount=function(){!this.props.isFieldLabel&&this._firstRender&&this._textRef&&this.props.truncatedlines&&this.forceUpdate()},t.prototype._toggleCollapseState=function(){this.props.noExpandable||this.setState({collapsed:!this.state.collapsed})},t.prototype.saveItemRef=function(e){this._textRef=e},t.prototype._calculateLineHeight=function(){if(this._textRef&&this.state.collapsed){var e=d.findDOMNode(this._textRef);if(e){var t=window.getComputedStyle(e);this._firstRender&&(this._originalHeight=parseInt(t.height,10),this._firstRender=!1);var n=0;if(n=this.props.lineHeight?this.props.lineHeight:parseInt(t.lineHeight,10),isNaN(n)){var o=e.cloneNode();o.innerHTML="<br>",e.appendChild(o);var r=o.offsetHeight;o.innerHTML="<br><br>";var i=o.offsetHeight;e.removeChild(o),n=i-r}if(this._areLinesTruncated=this._originalHeight>n*this.props.truncatedlines,!this._areLinesTruncated)return this._originalHeight+"px";if(0!==n){var s=n*this.props.truncatedlines;this._totalLineHeight=s}return this._totalLineHeight+"px"}}},t.prototype.render=function(){var e=Object.assign(this._getTextStyle(),this.props.flexibleTextStyle),t=Object.assign({display:"flex",flexDirection:"Column",width:"100%"},this.props.flexibleTextContainerStyle);return i.createElement(M.a,{style:t},i.createElement(ue,In({},this.props,{onClick:this._toggleCollapseState,style:e,ref:this.props.isFieldLabel?null:this.saveItemRef,id:this.props.id,className:this._returnExpandableClassName()}),this.props.children))},t.prototype._calculateHeight=function(){var e=0;if(this.props.isFieldLabel){var t=this._backgroundCanvas.getContext("2d");t.font=this.props.flexibleTextStyle&&this.props.flexibleTextStyle.fontSize&&this.props.flexibleTextStyle.fontFamily?this.props.flexibleTextStyle.fontSize+" "+this.props.flexibleTextStyle.fontFamily:"14px Segoe UI";var n=t.measureText(this.props.children.props.children).width/144;n>this.props.truncatedlines&&(n=this.props.truncatedlines,this._areLinesTruncated=!0),e=this.props.lineHeight&&this._areLinesTruncated?this.props.lineHeight*n:null}return e},t.prototype._getTextStyle=function(){return this.state.collapsed?1===this.props.truncatedlines?{whiteSpace:"nowrap",overflow:"hidden",textOverflow:"ellipsis",direction:this.props.isRTL?"rtl":"ltr"}:{overflow:"hidden",position:"relative",height:this.props.isFieldLabel?this._calculateHeight():this._calculateLineHeight(),display:"inline-block",textAlign:"justify",":after":this._areLinesTruncated?{background:this.props.maskingColor?this.props.maskingColor:"#F8F7F6"}:"",paddingLeft:this.props.isRTL?"0.75rem":void 0,paddingRight:this.props.isRTL?void 0:"0.75rem"}:{}},t.prototype._returnExpandableClassName=function(){return this._areLinesTruncated?this.props.isRTL?"block-with-text-noexpansion-rtl":"block-with-text-noexpansion":""},t}(y.a),En=n(12);n.d(t,"a",function(){return wn});var Sn=function(){return(Sn=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},Dn="function"==typeof Symbol&&Symbol.for("react.element")||60103,wn=function(){function e(){}return e.renderVirtualComponent=function(t,n,o,r,i){if(void 0===i&&(i=!0),i&&r.startRenderFunction(),!t)return i&&r.stopRenderFunction(),null;var s=e.generateReactComponent(t,null,"root",n,o,r,null,e.generateReactChildren(e._getComponentKey(t,null,"root"),t.getChildren(),n,o,r,e._generateFlyoutParentId(n,t)));return i&&r.stopRenderFunction(),s},e.generateJSXElement=function(t,n,o,r,s,a){if(null==n)return i.createElement(M.a,null,'"UNKNOWN COMPONENT"');var l=n?Object(u.e)(r,n.id,n.absoluteId):"",c=e._updateDataIdInTesthooks(r,n),d=n[vn.a.LearningPathAttributeName];switch(d&&(c[vn.a.LearningPathAttributeSuffix]=d),t.toUpperCase()){case"CRMICON":var h=n;return{$$typeof:Dn,type:ke,props:{id:l,testhooks:c,type:h.type,style:h.style,hidden:h.hidden,accessibilityHasPopup:h.accessibilityHasPopup,accessibilityExpanded:h.accessibilityExpanded,accessibilityLabel:h.accessibilityLabel,accessibilityHidden:h.accessibilityHidden,labelledByElementId:h.labelledByElementId,describedByElementId:h.describedByElementId,controlsElementId:h.controlsElementId,ownsElementId:h.ownsElementId,role:h.role,tabIndex:h.tabIndex,onClick:h.onClick,onFocus:h.onFocus,onBlur:h.onBlur,onPointerDown:h.onPointerDown,onPointerUp:h.onPointerUp,onKeyDown:h.onKeyDown,onKeyUp:h.onKeyUp,title:h.title},key:h.key,ref:null,_owner:null};case"ENTITYICON":var m=n;return{$$typeof:Dn,type:Ue,props:{id:l,testhooks:c,type:m.type,style:m.style,hidden:m.hidden,accessibilityHasPopup:m.accessibilityHasPopup,accessibilityExpanded:m.accessibilityExpanded,accessibilityLabel:m.accessibilityLabel,accessibilityHidden:m.accessibilityHidden,labelledByElementId:m.labelledByElementId,describedByElementId:m.describedByElementId,controlsElementId:m.controlsElementId,ownsElementId:m.ownsElementId,role:m.role,tabIndex:m.tabIndex,onClick:m.onClick,onFocus:m.onFocus,onBlur:m.onBlur,onPointerDown:m.onPointerDown,onPointerUp:m.onPointerUp,onKeyDown:m.onKeyDown,onKeyUp:m.onKeyUp,title:m.title},key:m.key,ref:null,_owner:null};case"MICROSOFTICON":var y=n;return{$$typeof:Dn,type:je.a,props:{id:l,testhooks:c,type:y.type,style:y.style,hidden:y.hidden,accessibilityHasPopup:y.accessibilityHasPopup,accessibilityExpanded:y.accessibilityExpanded,accessibilityLabel:y.accessibilityLabel,accessibilityHidden:y.accessibilityHidden,labelledByElementId:y.labelledByElementId,describedByElementId:y.describedByElementId,controlsElementId:y.controlsElementId,ownsElementId:y.ownsElementId,role:y.role,tabIndex:y.tabIndex,onClick:y.onClick,onFocus:y.onFocus,onBlur:y.onBlur,onPointerDown:y.onPointerDown,onPointerUp:y.onPointerUp,onKeyDown:y.onKeyDown,onKeyUp:y.onKeyUp,title:y.title},key:y.key,ref:null,_owner:null};case"BOOLEAN":var b=n;return{$$typeof:Dn,type:pt,props:{children:o,style:b.style,name:b.name,disabled:b.disabled,value:b.value,id:l,testhooks:c,hidden:b.hidden,accessibilityHasPopup:b.accessibilityHasPopup,accessibilityExpanded:b.accessibilityExpanded,accessibilityLabel:b.accessibilityLabel,accessibilityLive:b.accessibilityLive,accessibilityHidden:b.accessibilityHidden,accessibilityChecked:b.accessibilityChecked,labelledByElementId:b.labelledByElementId,describedByElementId:b.describedByElementId,controlsElementId:b.controlsElementId,ownsElementId:b.ownsElementId,role:b.role,tabIndex:b.tabIndex,onValueChange:b.onValueChange,onClick:b.onClick,onFocus:b.onFocus,onBlur:b.onBlur,title:b.title,displayAs:b.displayAs,displayValue:b.displayValue,defaultValue:b.defaultValue,options:b.options,onOptionSetValueChange:b.onOptionSetValueChange},key:b.key,ref:null,_owner:null};case"BUTTON":var g=n;return{$$typeof:Dn,type:p.a,props:{children:o,testhooks:c,style:g.style,ownsElementId:g.ownsElementId,accessKey:g.accessKey,accessibilityLabel:g.accessibilityLabel,id:l,disabled:g.disabled,hidden:g.hidden,accessibilityDisabled:g.accessibilityDisabled,accessibilityHasPopup:g.accessibilityHasPopup,accessibilityExpanded:g.accessibilityExpanded,accessibilityHidden:g.accessibilityHidden,activeDescendantId:g.activeDescendantId,labelledByElementId:g.labelledByElementId,describedByElementId:g.describedByElementId,controlsElementId:g.controlsElementId,isSelected:g.isSelected,role:g.role,tabIndex:g.tabIndex,onClick:g.onClick,onPointerDown:g.onPointerDown,onFocus:g.onFocus,onBlur:g.onBlur,onKeyUp:g.onKeyUp,onKeyDown:g.onKeyDown,title:g.title,className:g.className},key:g.key,ref:null,_owner:null};case"COMBOBOX":var _=n;return{$$typeof:Dn,type:ve,props:{children:o,id:l,testhooks:c,name:_.name,options:_.options,value:_.value,placeholder:_.placeholder,pageSize:_.pageSize,freeTextMode:_.freeTextMode,defaultValue:_.defaultValue,disabled:_.disabled,readOnly:_.readOnly,onChange:_.onChange,onOptionSelected:_.onOptionSelected,onClick:_.onClick,onBlur:_.onBlur,onFocus:_.onFocus,onMouseEnter:_.onMouseEnter,onMouseLeave:_.onMouseLeave,style:_.style,hideArrow:_.hideArrow,accessibilityLabel:_.accessibilityLabel,accessibilityRequired:_.accessibilityRequired,labelledByElementId:_.labelledByElementId,describedByElementId:_.describedByElementId,createAccessibilityComponent:r.actions.createAccessibilityComponent,createKeyboardShortcut:r.actions.createKeyboardShortcut,title:_.title,parentCustomControlId:r.controlId,parentFlyoutRoot:r.parentDefinedControlProps?r.parentDefinedControlProps.parentFlyoutId:null,rootZIndex:s&&s.isInSeeMoreMode,textInputStyle:_.textInputStyle,textStyle:_.textStyle,hideInternalId:_.hideInternalId,relativeToElementId:_.relativeToElementId,ignoreFreeTextValueChange:_.suppressFreeTextChangeCallback},key:_.key,ref:null,_owner:null};case"CONTAINER":var v=n;return{$$typeof:Dn,type:M.a,props:{children:o,style:v.style,id:l,testhooks:c,role:v.role,semanticTag:v.semanticTag,accessKey:v.accessKey,forceMeasure:v.forceMeasure,onMeasuring:v.onMeasuring,isRequestedMeasuring:v.isRequestedMeasuring,isRTL:v.isRTL,hidden:v.hidden,accessibilityHasPopup:v.accessibilityHasPopup,accessibilityExpanded:v.accessibilityExpanded,accessibilityLabel:v.accessibilityLabel,accessibilityHidden:v.accessibilityHidden,accessibilityLive:v.accessibilityLive,accessibilityRelevant:v.accessibilityRelevant,accessibilityAtomic:v.accessibilityAtomic,accessibilityValueMin:v.accessibilityValueMin,accessibilityValueMax:v.accessibilityValueMax,accessibilityValueNow:v.accessibilityValueNow,accessibilityValueText:v.accessibilityValueText,accessibilityRequired:v.accessibilityRequired,accessibilityReadOnly:v.accessibilityReadOnly,accessibilityAriaOrientation:v.accessibilityAriaOrientation,labelledByElementId:v.labelledByElementId,describedByElementId:v.describedByElementId,controlsElementId:v.controlsElementId,ownsElementId:v.ownsElementId,isSelected:v.isSelected,tabIndex:v.tabIndex,onClick:v.onClick,onDoubleClick:v.onDoubleClick,onDrag:v.onDrag,onDragEnd:v.onDragEnd,onDragEnter:v.onDragEnter,onDragExit:v.onDragExit,onDragLeave:v.onDragLeave,onDragOver:v.onDragOver,onDragStart:v.onDragStart,onDrop:v.onDrop,onKeyUp:v.onKeyUp,onKeyDown:v.onKeyDown,onPointerUp:v.onPointerUp,onPointerMove:v.onPointerMove,onPointerDown:v.onPointerDown,onPointerEnter:v.onPointerEnter,onPointerLeave:v.onPointerLeave,onFocus:v.onFocus,onBlur:v.onBlur,title:v.title,isWithinATopMostSeeMore:s.isInTopMostSeeMore,className:v.className},key:v.key,ref:null,_owner:null};case"HYPERLINK":var C=n;return{$$typeof:Dn,type:Pe,props:{children:o,id:l,testhooks:c,style:C.style,href:C.href,target:C.target,hidden:C.hidden,accessibilityHasPopup:C.accessibilityHasPopup,accessibilityExpanded:C.accessibilityExpanded,accessibilityLabel:C.accessibilityLabel,accessibilityHidden:C.accessibilityHidden,labelledByElementId:C.labelledByElementId,describedByElementId:C.describedByElementId,controlsElementId:C.controlsElementId,ownsElementId:C.ownsElementId,role:C.role,tabIndex:C.tabIndex,onClick:C.onClick,onFocus:C.onFocus,onBlur:C.onBlur,onKeyDown:C.onKeyDown,onKeyUp:C.onKeyUp,title:C.title},key:C.key,ref:null,_owner:null};case"IMG":var I=n;return{$$typeof:Dn,type:De,props:{id:l,testhooks:c,style:I.style,altText:I.altText,source:I.source,hidden:I.hidden,accessibilityHasPopup:I.accessibilityHasPopup,accessibilityExpanded:I.accessibilityExpanded,accessibilityLabel:I.accessibilityLabel,accessibilityHidden:I.accessibilityHidden,labelledByElementId:I.labelledByElementId,describedByElementId:I.describedByElementId,controlsElementId:I.controlsElementId,ownsElementId:I.ownsElementId,role:I.role,tabIndex:I.tabIndex,onLoad:I.onLoad,onClick:I.onClick,onFocus:I.onFocus,onBlur:I.onBlur,title:I.title},key:I.key,ref:null,_owner:null};case"IFRAME":var P=n,E=r.descriptor.ClassId&&Object(f.a)(En.c,r.descriptor.ClassId.guid),S=r.actions.runOnReadyStateComplete&&E?function(){r.actions.runOnReadyStateComplete(r.contextToken,r.id,r.controlId)}:null;return i.createElement(Te,{id:P.id,testhooks:c,title:P.title,style:P.style,onLoad:P.onLoad,src:P.src,scrolling:P.scrolling,security:P.security,onMessage:P.onMessage,tabIndex:P.tabIndex,accessibilityLabel:P.accessibilityLabel,registerSendMessageHandler:P.registerSendMessageHandler,onReadyStateComplete:S,key:P.src});case"LABEL":var D=n;return{$$typeof:Dn,type:$e,props:{children:o,id:l,style:D.style,role:D.role,forElementId:D.forElementId,hidden:D.hidden,accessibilityHasPopup:D.accessibilityHasPopup,accessibilityExpanded:D.accessibilityExpanded,accessibilityLabel:D.accessibilityLabel,accessibilityHidden:D.accessibilityHidden,accessibilityLive:D.accessibilityLive,accessibilityRelevant:D.accessibilityRelevant,accessibilityAtomic:D.accessibilityAtomic,labelledByElementId:D.labelledByElementId,describedByElementId:D.describedByElementId,controlsElementId:D.controlsElementId,ownsElementId:D.ownsElementId,tabIndex:D.tabIndex,onClick:D.onClick,onFocus:D.onFocus,onKeyUp:D.onKeyUp,onKeyDown:D.onKeyDown,onBlur:D.onBlur,testhooks:c,title:D.title},key:D.key,ref:null,_owner:null};case"LIST":var w=n;return{$$typeof:Dn,type:q,props:{accessibilityExpanded:w.accessibilityExpanded,accessibilityHasPopup:w.accessibilityHasPopup,accessibilityLabel:w.accessibilityLabel,accessibilityHidden:w.accessibilityHidden,accessibilityDisabled:w.accessibilityDisabled,accessibilityReadOnly:w.accessibilityReadOnly,accessibilityRequired:w.accessibilityRequired,announceAccessibilityNotification:w.announceAccessibilityNotification,children:o,controlsElementId:w.controlsElementId,describedByElementId:w.describedByElementId,hidden:w.hidden,id:l,testhooks:c,labelledByElementId:w.labelledByElementId,notificationType:w.notificationType,onBlur:w.onBlur,onClick:w.onClick,onFocus:w.onFocus,onKeyUp:w.onKeyUp,onKeyDown:w.onKeyDown,ownsElementId:w.ownsElementId,refCallback:w.refCallback,role:w.role,style:w.style,tabIndex:w.tabIndex,title:w.title},key:w.key,ref:null,_owner:null};case"LISTITEM":var O=n;return{$$typeof:Dn,type:Z,props:{accessibilityExpanded:O.accessibilityExpanded,accessibilityHasPopup:O.accessibilityHasPopup,accessibilityLabel:O.accessibilityLabel,accessibilityHidden:O.accessibilityHidden,accessibilityDisabled:O.accessibilityDisabled,accessibilityReadOnly:O.accessibilityReadOnly,accessibilityLevel:O.accessibilityLevel,accessibilityCurrent:O.accessibilityCurrent,accessibilityRequired:O.accessibilityRequired,children:o,controlsElementId:O.controlsElementId,describedByElementId:O.describedByElementId,hidden:O.hidden,id:l,testhooks:c,labelledByElementId:O.labelledByElementId,onBlur:O.onBlur,onClick:O.onClick,onClickCapture:O.onClickCapture,onFocus:O.onFocus,onPointerOver:O.onPointerOver,onPointerOut:O.onPointerOut,onPointerDown:O.onPointerDown,onPointerMove:O.onPointerMove,onPointerUp:O.onPointerUp,onKeyUp:O.onKeyUp,onKeyDown:O.onKeyDown,ownsElementId:O.ownsElementId,role:O.role,style:O.style,tabIndex:O.tabIndex,isSelected:O.isSelected,title:O.title},key:O.key,ref:null,_owner:null};case"LIVEPERSONACARDHOVERTARGET":var T=n,F=Object(u.e)(r,T.onKeyDownContainerId);return{$$typeof:Dn,type:Ge,props:{accessibilityLabel:T.accessibilityLabel,children:o,displayName:T.displayName,emailAddress:T.emailAddress,entityReference:T.entityReference,id:T.id,onKeyDownContainerId:F,personaType:T.personaType,recordId:T.recordId,registerHasLivePersonaCardLoadedCallback:T.registerHasLivePersonaCardLoadedCallback,registerOpenCardCallback:T.registerOpenCardCallback,testhooks:c},key:T.key,ref:null,_owner:null};case"POPUP":var x=n,A=i.createElement(Ve.a,Sn({},x,{id:x.id,children:o}));return x.type===Ve.b.Root?i.createElement(We.b,{key:x.key,parentCustomControlId:r.controlId,id:x.name,openPopup:r.actions.openPopup,closePopup:r.actions.closePopup},A):A;case"FLYOUT":var k=n,R=Object(u.e)(r,k.relativeToElementId,n.absoluteId),L=Object(u.e)(r,k.focusElementId,n.absoluteId),N=r.portalFlyoutToDialogId?{isPortalToElement:!0,portalContainerId:r.portalFlyoutToDialogId}:{};return{$$typeof:Dn,type:H,props:{id:l,parentCustomControlId:r.controlId,groupId:k.groupId,onOutsideClick:k.onOutsideClick,children:o,flyoutStyle:k.flyoutStyle,position:k.position,positionType:k.positionType,flyoutDirection:k.flyoutDirection,relativeToElementId:R,size:k.size,focusElementId:L,focusCallback:function(e){return Object(u.g)(r,e,!0)},hasDynamicContent:k.hasDynamicContent,parentFlyoutRoot:r.parentDefinedControlProps?r.parentDefinedControlProps.parentFlyoutId:null,rootZIndex:s&&s.isInSeeMoreMode,isPortalToElement:N.isPortalToElement,portalContainerId:N.portalContainerId,role:k.role,accessibilityModal:k.accessibilityModal,keepOpenOnWindowBlur:k.keepOpenOnWindowBlur,disableHorizontalScroll:k.disableHorizontalScroll,disableVerticalScroll:k.disableVerticalScroll},key:k.key,ref:null,_owner:null};case"SCROLLCONTAINER":var B=n;return{$$typeof:Dn,type:oe,props:{children:o,style:B.style,id:l,testhooks:c,contentContainerStyle:B.contentContainerStyle,horizontal:B.horizontal,onScroll:B.onScroll,hidden:B.hidden,accessibilityHasPopup:B.accessibilityHasPopup,accessibilityExpanded:B.accessibilityExpanded,accessibilityLabel:B.accessibilityLabel,accessibilityHidden:B.accessibilityHidden,labelledByElementId:B.labelledByElementId,describedByElementId:B.describedByElementId,controlsElementId:B.controlsElementId,ownsElementId:B.ownsElementId,role:B.role,tabIndex:B.tabIndex,onScrollToBottom:B.onScrollToBottom,semanticTag:B.semanticTag,onKeyDown:B.onKeyDown,onClick:B.onClick,onFocus:B.onFocus,onBlur:B.onBlur,title:B.title,isRTL:r.propBagData.clientData.isRTL,isWithinATopMostSeeMore:s.isInTopMostSeeMore,className:B.className},key:B.key,ref:null,_owner:null};case"TABLE":var U=n;return{$$typeof:Dn,type:Kt,props:{children:o,id:l,testhooks:c,style:U.style,hidden:U.hidden,accessibilityHasPopup:U.accessibilityHasPopup,accessibilityExpanded:U.accessibilityExpanded,accessibilityLabel:U.accessibilityLabel,accessibilityHidden:U.accessibilityHidden,labelledByElementId:U.labelledByElementId,describedByElementId:U.describedByElementId,controlsElementId:U.controlsElementId,ownsElementId:U.ownsElementId,role:U.role,tabIndex:U.tabIndex,onClick:U.onClick,onFocus:U.onFocus,onBlur:U.onBlur,title:U.title},key:U.key,ref:null,_owner:null};case"TABLEBODY":var j=n;return{$$typeof:Dn,type:Yt,props:{children:o,key:j.key,id:l,testhooks:c,style:j.style,hidden:j.hidden,accessibilityHasPopup:j.accessibilityHasPopup,accessibilityExpanded:j.accessibilityExpanded,accessibilityLabel:j.accessibilityLabel,accessibilityHidden:j.accessibilityHidden,labelledByElementId:j.labelledByElementId,describedByElementId:j.describedByElementId,controlsElementId:j.controlsElementId,ownsElementId:j.ownsElementId,role:j.role,tabIndex:j.tabIndex,onClick:j.onClick,onFocus:j.onFocus,onBlur:j.onBlur,title:j.title},key:j.key,ref:null,_owner:null};case"TABLECAPTION":var W=n;return{$$typeof:Dn,type:Xt,props:{children:o,id:l,testhooks:c,style:W.style,hidden:W.hidden,accessibilityHasPopup:W.accessibilityHasPopup,accessibilityExpanded:W.accessibilityExpanded,accessibilityLabel:W.accessibilityLabel,accessibilityHidden:W.accessibilityHidden,labelledByElementId:W.labelledByElementId,describedByElementId:W.describedByElementId,controlsElementId:W.controlsElementId,ownsElementId:W.ownsElementId,role:W.role,tabIndex:W.tabIndex,onClick:W.onClick,onFocus:W.onFocus,onBlur:W.onBlur,title:W.title},key:W.key,ref:null,_owner:null};case"TABLECELL":var V=n;return{$$typeof:Dn,type:Jt,props:{children:o,id:l,colSpan:V.colSpan,testhooks:c,style:V.style,hidden:V.hidden,accessibilityHasPopup:V.accessibilityHasPopup,accessibilityExpanded:V.accessibilityExpanded,accessibilityLabel:V.accessibilityLabel,accessibilityHidden:V.accessibilityHidden,labelledByElementId:V.labelledByElementId,describedByElementId:V.describedByElementId,controlsElementId:V.controlsElementId,ownsElementId:V.ownsElementId,role:V.role,tabIndex:V.tabIndex,onClick:V.onClick,onFocus:V.onFocus,onBlur:V.onBlur,onKeyDown:V.onKeyDown,title:V.title,rowSpan:V.rowSpan,scope:V.scope},key:V.key,ref:null,_owner:null};case"TABLEFOOTER":var K=n;return{$$typeof:Dn,type:nn,props:{children:o,id:l,testhooks:c,style:K.style,hidden:K.hidden,accessibilityHasPopup:K.accessibilityHasPopup,accessibilityExpanded:K.accessibilityExpanded,accessibilityLabel:K.accessibilityLabel,accessibilityHidden:K.accessibilityHidden,labelledByElementId:K.labelledByElementId,describedByElementId:K.describedByElementId,controlsElementId:K.controlsElementId,ownsElementId:K.ownsElementId,role:K.role,tabIndex:K.tabIndex,onClick:K.onClick,onFocus:K.onFocus,onBlur:K.onBlur,title:K.title},key:K.key,ref:null,_owner:null};case"TABLEHEADER":var z=n;return{$$typeof:Dn,type:sn,props:{children:o,id:l,testhooks:c,style:z.style,hidden:z.hidden,accessibilityHasPopup:z.accessibilityHasPopup,accessibilityExpanded:z.accessibilityExpanded,accessibilityLabel:z.accessibilityLabel,accessibilityHidden:z.accessibilityHidden,labelledByElementId:z.labelledByElementId,describedByElementId:z.describedByElementId,controlsElementId:z.controlsElementId,ownsElementId:z.ownsElementId,role:z.role,tabIndex:z.tabIndex,onClick:z.onClick,onFocus:z.onFocus,onBlur:z.onBlur,title:z.title},key:z.key,ref:null,_owner:null};case"TABLEHEADERCELL":var G=n;return{$$typeof:Dn,type:cn,props:{children:o,id:l,testhooks:c,style:G.style,hidden:G.hidden,accessibilityHasPopup:G.accessibilityHasPopup,accessibilityExpanded:G.accessibilityExpanded,accessibilityLabel:G.accessibilityLabel,accessibilityHidden:G.accessibilityHidden,labelledByElementId:G.labelledByElementId,describedByElementId:G.describedByElementId,controlsElementId:G.controlsElementId,ownsElementId:G.ownsElementId,role:G.role,tabIndex:G.tabIndex,onClick:G.onClick,onFocus:G.onFocus,onBlur:G.onBlur,onKeyDown:G.onKeyDown,title:G.title,colSpan:G.colSpan,rowSpan:G.rowSpan,scope:G.scope},key:G.key,ref:null,_owner:null};case"TABLEROW":var Y=n;return{$$typeof:Dn,type:dn,props:{children:o,id:l,testhooks:c,style:Y.style,hidden:Y.hidden,accessibilityHasPopup:Y.accessibilityHasPopup,accessibilityExpanded:Y.accessibilityExpanded,accessibilityLabel:Y.accessibilityLabel,accessibilityHidden:Y.accessibilityHidden,labelledByElementId:Y.labelledByElementId,describedByElementId:Y.describedByElementId,controlsElementId:Y.controlsElementId,ownsElementId:Y.ownsElementId,role:Y.role,tabIndex:Y.tabIndex,onClick:Y.onClick,onFocus:Y.onFocus,onBlur:Y.onBlur,title:Y.title},key:Y.key,ref:null,_owner:null};case"FILEINPUT":var $=n;return i.createElement(ft,{style:$.style,fileSelected:$.fileSelected,fileUnselected:$.fileUnselected,accept:$.accept,id:l,onReaderError:$.onReaderError,multipleFilesSelected:$.multipleFilesSelected,testhooks:c,key:$.key,title:$.title,accessibilityLabel:$.accessibilityLabel,tabIndex:$.tabIndex});case"TEXTINPUT":var X=n;return{$$typeof:Dn,type:ye,props:{readOnly:X.readOnly,id:l,type:X.type,keyboardType:X.keyboardType,maxLength:X.maxLength,multiline:X.multiline,ownsElementId:X.ownsElementId,onClick:X.onClick,onBlur:X.onBlur,onChange:X.onChange,onChangeText:X.onChangeText,onFocus:X.onFocus,onKeyPress:X.onKeyPress,onKeyDown:X.onKeyDown,onKeyUp:X.onKeyUp,onPointerEnter:X.onPointerEnter,onPointerLeave:X.onPointerLeave,onScroll:X.onScroll,placeholder:X.placeholder,style:X.style,value:X.value,hidden:X.hidden,disabled:X.disabled,accessibilityDisabled:X.accessibilityDisabled,accessibilityHasPopup:X.accessibilityHasPopup,accessibilityExpanded:X.accessibilityExpanded,accessibilityLabel:X.accessibilityLabel,accessibilityLive:X.accessibilityLive,accessibilityHidden:X.accessibilityHidden,accessibilityRequired:X.accessibilityRequired,activeDescendantId:X.activeDescendantId,autoComplete:X.autoComplete,labelledByElementId:X.labelledByElementId,describedByElementId:X.describedByElementId,controlsElementId:X.controlsElementId,role:X.role,tabIndex:X.tabIndex,testhooks:c,refCallback:X.refCallback,rows:X.rows,selectValueOnFocus:X.selectValueOnFocus,title:X.title},key:X.key,ref:null,_owner:null};case"COMMANDBAR":var Q=n,J=r.id+":"+r.controlId,ee=_n.a.getWrapperByCommandManagerId(J);return ee||a(J,ee=new _n.a(r)),ee.populateCommandManagerProps(Q,r),Q.width=Q.width||1,Q.contextToken=r.contextToken,Q.rootZIndex=s&&s.isInSeeMoreMode,ee.createCommandBar(Q);case"OPTION":var te=n;return{$$typeof:Dn,type:Ze,props:{id:l,value:te.value,disabled:te.disabled,style:te.style,testhooks:c},key:te.key,ref:null,_owner:null};case"SELECT":var ne=n;return{$$typeof:Dn,type:rt,props:{id:l,value:ne.value,options:ne.options,style:ne.style,disabled:ne.disabled,tabIndex:ne.tabIndex,hidden:ne.hidden,accessibilityHasPopup:ne.accessibilityHasPopup,accessibilityExpanded:ne.accessibilityExpanded,accessibilityLabel:ne.accessibilityLabel,accessibilityRequired:ne.accessibilityRequired,labelledByElementId:ne.labelledByElementId,describedByElementId:ne.describedByElementId,controlsElementId:ne.controlsElementId,ownsElementId:ne.ownsElementId,testhooks:c,onBlur:ne.onBlur,onClick:ne.onClick,onFocus:ne.onFocus,onChange:ne.onChange,onPointerOver:ne.onPointerOver,onPointerOut:ne.onPointerOut,onPointerEnter:ne.onPointerEnter,onPointerLeave:ne.onPointerLeave,onPointerDown:ne.onPointerDown,onPointerUp:ne.onPointerUp,onKeyDown:ne.onKeyDown,onKeyUp:ne.onKeyUp,multiple:ne.multiple,readOnly:ne.readOnly,title:ne.title},key:ne.key,ref:null,_owner:null};case"ENTITYIMAGE":var re=n;return i.createElement(wt,{key:re.key,id:l,testhooks:c,style:re.style,hasPrimaryImageField:re.hasPrimaryImageField,imageSrc:re.imageSrc,alt:re.alt,entityPrimaryField:re.entityPrimaryField,hidden:re.hidden,accessibilityHasPopup:re.accessibilityHasPopup,accessibilityExpanded:re.accessibilityExpanded,accessibilityLabel:re.accessibilityLabel,accessibilityHidden:re.accessibilityHidden,labelledByElementId:re.labelledByElementId,describedByElementId:re.describedByElementId,controlsElementId:re.controlsElementId,ownsElementId:re.ownsElementId,role:re.role,tabIndex:re.tabIndex,onClick:re.onClick,onFocus:re.onFocus,onBlur:re.onBlur,title:re.title,sipUrl:re.sipUrl,presenceIndicatorSize:re.presenceIndicatorSize,entityReference:re.entityReference,entityHealthScore:re.entityHealthScore,iconStyle:re.iconStyle,customEntityIcon:re.customEntityIcon});case"PROGRESSINDICATOR":var ie=n;return i.createElement(Ft,{id:l,style:ie.style,hidden:ie.hidden,accessibilityHasPopup:ie.accessibilityHasPopup,accessibilityExpanded:ie.accessibilityExpanded,accessibilityLabel:ie.accessibilityLabel,accessibilityChecked:ie.accessibilityChecked,accessibilityReadOnly:ie.accessibilityReadOnly,accessibilityHidden:ie.accessibilityHidden,labelledByElementId:ie.labelledByElementId,describedByElementId:ie.describedByElementId,controlsElementId:ie.controlsElementId,ownsElementId:ie.ownsElementId,activeDescendantId:ie.activeDescendantId,role:ie.role,tabIndex:ie.tabIndex,onClick:ie.onClick,onFocus:ie.onFocus,onBlur:ie.onBlur,onPointerOver:ie.onPointerOver,onPointerOut:ie.onPointerOut,onPointerUp:ie.onPointerUp,onPointerDown:ie.onPointerDown,onPointerEnter:ie.onPointerEnter,onPointerLeave:ie.onPointerLeave,onPointerMove:ie.onPointerMove,onPointerCancel:ie.onPointerCancel,onKeyDown:ie.onKeyDown,onKeyUp:ie.onKeyUp,onMouseEnter:ie.onMouseEnter,onMouseLeave:ie.onMouseLeave,testhooks:c,title:ie.title,active:ie.active,progressType:ie.progressType,progress:ie.progress,progressDots:ie.progressDots,className:ie.className,animating:ie.animating,animationDelay:ie.animationDelay,isBrowserSafari:ie.isBrowserSafari});case"RADIO":var se=n;return i.createElement(gn,{id:l,value:se.value,options:se.options,style:se.style,disabled:se.disabled,tabIndex:se.tabIndex,hidden:se.hidden,accessibilityLabel:se.accessibilityLabel,accessibilityChecked:se.accessibilityChecked,labelledByElementId:se.labelledByElementId,describedByElementId:se.describedByElementId,controlsElementId:se.controlsElementId,ownsElementId:se.ownsElementId,testhooks:c,onBlur:se.onBlur,onClick:se.onClick,onFocus:se.onFocus,onChange:se.onChange,onPointerOver:se.onPointerOver,onPointerOut:se.onPointerOut,onPointerEnter:se.onPointerEnter,onPointerLeave:se.onPointerLeave,onPointerDown:se.onPointerDown,onPointerUp:se.onPointerUp,onKeyDown:se.onKeyDown,onKeyUp:se.onKeyUp});case"HORIZONTALSCROLL":var ae=n;return{$$typeof:Dn,type:kt,props:{isRTL:r.propBagData.clientData.isRTL,children:o,scrollViewStyle:ae.scrollViewStyle,style:ae.style,id:l,startChildIndex:ae.startChildIndex,arrowWidth:ae.arrowWidth,arrowButtonStyle:ae.arrowButtonStyle,prevArrowIconType:ae.prevArrowIconType,nextArrowIconType:ae.nextArrowIconType,onPrevArrowClick:ae.onPrevArrowClick,onNextArrowClick:ae.onNextArrowClick,onPrevArrowKeyDown:ae.onPrevArrowKeyDown,onNextArrowKeyDown:ae.onNextArrowKeyDown,testhooks:c,hidden:ae.hidden,accessibilityHasPopup:ae.accessibilityHasPopup,accessibilityExpanded:ae.accessibilityExpanded,accessibilityLabel:ae.accessibilityLabel,accessibilityHidden:ae.accessibilityHidden,labelledByElementId:ae.labelledByElementId,describedByElementId:ae.describedByElementId,controlsElementId:ae.controlsElementId,ownsElementId:ae.ownsElementId,role:ae.role,semanticTag:ae.semanticTag,tabIndex:ae.tabIndex,onClick:ae.onClick,onFocus:ae.onFocus,onBlur:ae.onBlur,title:ae.title},key:ae.key,ref:null,_owner:null};case"VIEWSELECTORCONTROL":var le=n;return i.createElement(Nt,{style:le.style,viewSelectorStyle:le.viewSelectorStyle,textStyle:le.textStyle,id:l,key:le.key,value:le.value,title:le.title,categories:le.categories,options:le.options,hoveredStyle:le.hoveredStyle,caretStyle:le.caretStyle,caretType:le.caretType,createAccessibilityComponent:r.actions.createAccessibilityComponent,createKeyboardShortcut:r.actions.createKeyboardShortcut,defaultValue:le.defaultValue,tabIndex:le.tabIndex,onChange:le.onChange,onClick:le.onClick,onKeyUp:le.onKeyUp,onKeyDown:le.onKeyDown,onPointerUp:le.onPointerUp,onPointerMove:le.onPointerMove,onPointerDown:le.onPointerDown,onPointerEnter:le.onPointerEnter,onPointerLeave:le.onPointerLeave,onFocus:le.onFocus,onBlur:le.onBlur,suppressFreeTextChangeCallback:le.suppressFreeTextChangeCallback,parentCustomControlId:r.controlId,rootZIndex:s&&s.isInSeeMoreMode,isRTL:r.propBagData.clientData&&r.propBagData.clientData.isRTL});case"TEXT":var ce=n,pe=n;return pe.truncatedlines?{$$typeof:Dn,type:Pn,props:{isRTL:null===pe.isRTL||void 0===pe.isRTL?r.propBagData.clientData.isRTL:pe.isRTL,children:o,id:l,style:pe.style,flexibleTextContainerStyle:pe.flexibleTextContainerStyle,flexibleTextStyle:pe.flexibleTextStyle,role:pe.role,hidden:pe.hidden,accessibilityHasPopup:pe.accessibilityHasPopup,accessibilityExpanded:pe.accessibilityExpanded,accessibilityLabel:pe.accessibilityLabel,accessibilityHidden:pe.accessibilityHidden,accessibilityLive:pe.accessibilityLive,accessibilityRelevant:pe.accessibilityRelevant,accessibilityAtomic:pe.accessibilityAtomic,labelledByElementId:pe.labelledByElementId,describedByElementId:pe.describedByElementId,controlsElementId:pe.controlsElementId,ownsElementId:pe.ownsElementId,tabIndex:pe.tabIndex,onClick:pe.onClick,onFocus:pe.onFocus,onKeyUp:pe.onKeyUp,onKeyDown:pe.onKeyDown,onBlur:pe.onBlur,testhooks:c,title:pe.title,semanticTag:pe.semanticTag,truncatedlines:pe.truncatedlines,maskingColor:pe.maskingColor,noExpandable:pe.noExpandable,isFieldLabel:pe.isFieldLabel,lineHeight:pe.lineHeight},key:pe.key,ref:null,_owner:null}:{$$typeof:Dn,type:ue,props:{children:o,id:l,style:ce.style,role:ce.role,hidden:ce.hidden,accessibilityHasPopup:ce.accessibilityHasPopup,accessibilityExpanded:ce.accessibilityExpanded,accessibilityLabel:ce.accessibilityLabel,accessibilityHidden:ce.accessibilityHidden,labelledByElementId:ce.labelledByElementId,describedByElementId:ce.describedByElementId,controlsElementId:ce.controlsElementId,ownsElementId:ce.ownsElementId,tabIndex:ce.tabIndex,onClick:ce.onClick,onFocus:ce.onFocus,onKeyUp:ce.onKeyUp,onKeyDown:ce.onKeyDown,onBlur:ce.onBlur,testhooks:c,title:ce.title,semanticTag:ce.semanticTag},key:ce.key,ref:null,_owner:null};case"PRESENCEINDICATOR":var de=n,he=Object(u.e)(r,de.parentControlId,n.absoluteId);return i.createElement(yt,{id:de.id,key:de.key,sipUrl:de.sipUrl,displaySize:de.displaySize,entityReference:de.entityReference,style:de.style,role:de.role,tabIndex:de.tabIndex,title:de.title,parentControlId:he,accessibilityLabel:de.accessibilityLabel,presenceTarget:de.presenceTarget});case"PLACEHOLDER":var fe=n;if(null==fe)break;return i.createElement(Wt,{id:fe.id,icon:fe.icon,iconStyle:fe.iconStyle,text:fe.text,textStyle:fe.textStyle,containerStyle:fe.containerStyle,accessibilityHidden:fe.accessibilityHidden})}return i.createElement(M.a,null,'"UNKNOWN COMPONENT"')},e._generateFlyoutParentId=function(e,t){if(e&&e.parentDefinedControlProps&&e.parentDefinedControlProps.parentFlyoutId)return e.parentDefinedControlProps.parentFlyoutId;if("FLYOUT"===t.getType().toUpperCase()){var n=t.getProperties();return V.generateFlyoutId(e.controlId,n.groupId)}return null},e.generateReactComponent=function(t,n,o,r,a,l,c,u){try{if(!t)return null;var p=null,d=e._getComponentKey(t,n,o),h=d?l.getVirtualComponentByKey(d):null;return h&&h===t?(p=l.getReactElementByKey(d),l.retainElement(d)):(e.isComplexComponent(t)?s.c(t.getComponentId())?p=i.createElement(M.a,null,'"UNKNOWN COMPONENT"'):(p=e.generateComplexControl(t,r,a,c),l.setIsCompositing(!0)):("IFRAME"===t.getType()&&l.setIsCompositing(!0),p=e.generateJSXElement(t.getType(),t.getProperties(),u,r,a,l.addCommandWrapper)),d&&l.addUpdatedEntry(d,p,t)),p}catch(e){throw e}},e._getComponentKey=function(t,n,o){return(n?n+"|":"")+(e.isComplexComponent(t)?t.getComponentId()||o:t.getProperties().hasOwnProperty("key")?t.getProperties().key:o)},e._updateDataIdInTesthooks=function(e,t){if(!t||!t.id)return{};if(t.testhooks){var n=Object(u.d)(e,t.testhooks.id||t.id),o=Object.assign({},t.testhooks);return o.id=n,o}return{id:Object(u.d)(e,t.id)}},e.generateComplexControl=function(t,n,o,r){var i=t.getComponentId(),l=t.getProperties(),c={toggleDimensionListener:o.trackResize},p=n.descriptor.Id,d=p+"."+i,h=n.descriptor.UniqueId+"."+i,f=Object(u.b)(n),m=l.controlstates,y=n.descriptor.ShowLabel,b=n.descriptor.Label,g=!1;s.c(m)?(c.height=o.allocatedHeight,c.width=o.allocatedWidth):(c.height=m.hasOwnProperty("height")?m.height:o.allocatedHeight,c.width=m.hasOwnProperty("width")?m.width:o.allocatedWidth,c.hasFocus=!s.c(m.hasFocus)&&m.hasFocus,c.containerStyleOverrides=m.containerStyleOverrides,g=!s.c(m.isControlDisabled)&&m.isControlDisabled,y=s.c(m.showLabel)?y:m.showLabel,b=s.c(m.label)?b:m.label),c.decorators=l.decorators;var _=[],v=l.childeventlisteners;if(!s.c(v)){for(var C=function(e){var t=e.eventname,n=_.findIndex(function(e){return e.eventname===t}),o=e.eventhandler;if(-1!==n)_[n].eventhandler.concat(o);else{var r={eventname:t,eventhandler:[o]};_.push(r)}},I=0,P=v;I<P.length;I++){C(P[I])}c.eventListeners=_}l.contextOverrides&&(c.propertyBagOverrides=l.contextOverrides);var E={};s.c(l.parameters)||(E=l.parameters);var S,D=null,w=null,O=null;n.configuration.CustomControlId===En.b?O=p:n.parentDefinedControlProps&&n.parentDefinedControlProps.parentFieldSectionItem&&(O=n.parentDefinedControlProps.parentFieldSectionItem),c.parentFieldSectionItem=O,c.parentInSeeMoreMode=o.isInSeeMoreMode,l.descriptor?(D=l.descriptor,d=i):D={Id:d,Label:b,Name:"",DomId:f,ShowLabel:y,Visible:n.descriptor.Visible,ClassId:null,Disabled:g,UniqueId:h,Parameters:n.descriptor&&n.descriptor.Parameters},D.parentFieldSectionItem||(D.parentFieldSectionItem=O),w=l.nestedFormProps?l.nestedFormProps:n.formInfo,S=n.children&&n.children.hasOwnProperty(i)?n.children[i]:l.configuration?l.configuration:{FormFactor:2,CustomControlId:t.getType().toString(),Name:n.manifest.CustomControlId+"."+d,Parameters:Object.assign({},E),Version:"0.0",ShouldOverrideControlVisible:!1,isDefaultConfig:!0},e._parseParameters(S.Parameters);var T=null;if(S.Parameters)for(var F in S.Parameters){var M=S.Parameters[F];switch(M.Type){case a.ManifestType.Grid:var x=M;if(x.SortingInput){var A=x.SortingInput;A.ControlLinked&&A.Value&&(A.Value=p+"."+A.Value)}if(x.FilteringInput){var k=x.FilteringInput;k.ControlLinked&&k.Value&&(k.Value=p+"."+k.Value)}if(x.PagingInput){var R=x.PagingInput;R.ControlLinked&&R.Value&&(R.Value=p+"."+R.Value)}x.DataSetUIOptions&&(T=x.DataSetUIOptions);break;default:var L=M;1===L.Usage&&L.ControlLinked&&!L.AbsoluteLinkAddress&&L.Value&&(S.Parameters[F]=Object.assign({},L,{Value:p+"."+L.Value}))}}return n.descriptor.HasContext?c.closestParentWithContext=p:n.parentDefinedControlProps&&n.parentDefinedControlProps.closestParentWithContext&&(c.closestParentWithContext=n.parentDefinedControlProps.closestParentWithContext),c.parentFlyoutId=r,n.actions.renderNestedCustomControl(d,{id:n.id,controlId:d,systemDefinedProperties:n.systemDefinedProperties,parentDefinedControlProps:c,configuration:S,descriptor:D,formInfo:w,rowSpan:n.rowSpan,themingData:l.themingData,contextString:l.contextString||this._buildContextString(n,w),parentContextToken:n.contextToken,externalCommandManagerId:n.externalCommandManagerId,externalCommandPromise:n.externalCommandPromise},{dataSetUIOptions:T})},e._parseParameters=function(t){for(var n in t)3===t[n].Usage&&(t[n].Attributes=Object.assign({},e._baseAttributes,t[n].Attributes))},e._isVirtualComponent=function(e){return!!(e&&"object"==typeof e&&"getType"in e)},e._generateReactChild=function(t,n,o,r,i,s,a){if(this._isVirtualComponent(o)){var l=o.getChildren(),c=o,u=a||e._generateFlyoutParentId(r,c);return this.generateReactComponent(c,t,n,r,i,s,u,null!==l?this.generateReactChildren(e._getComponentKey(c,t,n),l,r,i,s,u):null)}return o},e.generateReactChildren=function(e,t,n,o,r,i){if(null!==t){if(Array.isArray(t)){for(var s=[],a=0;a<t.length;a++)s.push(this._generateReactChild(e,"keylessChild"+a,t[a],n,o,r,i));return s}return this._generateReactChild(e,"keylessChild",t,n,o,r,i)}},e.isComplexComponent=function(e){if(!e)return!1;var t=e.getType();return!t||-1===c.indexOf(t.toUpperCase())},e._buildContextString=function(e,t){var n=!1,o=!1;for(var r in e.configuration.Parameters)e.configuration.Parameters[r].Type===a.ManifestType.QuickForm?o=!0:e.configuration.Parameters[r].Type===a.ManifestType.Grid&&(n=!0);var i=!e.formInfo!=!t;if(!i&&e.formInfo&&(i=e.formInfo.EntityName!==t.EntityName||e.formInfo.FormId!==t.FormId||e.formInfo.RecordId!==t.RecordId||e.formInfo.RibbonId!==t.RibbonId),i){if(o)return a.ManifestType.QuickForm+":"+e.controlId;if(n)return a.ManifestType.Grid}return"default"},e._baseAttributes={DisplayName:"",LogicalName:"",Type:"string",IsSecured:!1,RequiredLevel:0,MinValue:-1e11,MaxValue:1e11,ImeMode:0,MaxLength:100,EntityLogicalName:"",Precision:2,Format:"1",LanguageByCode:{},TimeZoneByCode:{},Behavior:0,Targets:[],Options:[{Label:"---",Value:1}],DefaultValue:1,lastUpdatedField:null,lastUpdatedValue:null,rollupStateField:null,rollupStateValue:0,calculatedFieldValid:!1,rollupValid:!1,SourceType:null,recalculate:function(){}},e}()},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return(0,i.default)(e)+":"+t};var o,r=n(147),i=(o=r)&&o.__esModule?o:{default:o};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){for(var o in e)n=t(n,e[o],o);return n},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t,n){if(e.length>0)return(0,i.default)(e,function(e,t){return e=t(e,n)},t);return t};var o,r=n(35),i=(o=r)&&o.__esModule?o:{default:o};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});t.default=function(){return!0},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return-1!==e.indexOf("data:")},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return(0,r.default)(t,function(t,n){return(0,o.default)(t,n(e))},{})}};var o=i(n(170)),r=i(n(35));function i(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(!(0,r.default)(t))throw new Error("You need to specify a valid element node (nodeType = 1) to render into.");t.setAttribute("data-fela-stylesheet","");var n=(0,o.default)(e,t);e.subscribe(n);var i=e.renderToString();t.textContent!==i&&(t.textContent=i)};var o=i(n(173)),r=(i(n(97)),i(n(174)));function i(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default},function(e,t,n){(function(e){function n(e,t){for(var n=0,o=e.length-1;o>=0;o--){var r=e[o];"."===r?e.splice(o,1):".."===r?(e.splice(o,1),n++):n&&(e.splice(o,1),n--)}if(t)for(;n--;n)e.unshift("..");return e}var o=/^(\/?|)([\s\S]*?)((?:\.{1,2}|[^\/]+?|)(\.[^.\/]*|))(?:[\/]*)$/,r=function(e){return o.exec(e).slice(1)};function i(e,t){if(e.filter)return e.filter(t);for(var n=[],o=0;o<e.length;o++)t(e[o],o,e)&&n.push(e[o]);return n}t.resolve=function(){for(var t="",o=!1,r=arguments.length-1;r>=-1&&!o;r--){var s=r>=0?arguments[r]:e.cwd();if("string"!=typeof s)throw new TypeError("Arguments to path.resolve must be strings");s&&(t=s+"/"+t,o="/"===s.charAt(0))}return(o?"/":"")+(t=n(i(t.split("/"),function(e){return!!e}),!o).join("/"))||"."},t.normalize=function(e){var o=t.isAbsolute(e),r="/"===s(e,-1);return(e=n(i(e.split("/"),function(e){return!!e}),!o).join("/"))||o||(e="."),e&&r&&(e+="/"),(o?"/":"")+e},t.isAbsolute=function(e){return"/"===e.charAt(0)},t.join=function(){var e=Array.prototype.slice.call(arguments,0);return t.normalize(i(e,function(e,t){if("string"!=typeof e)throw new TypeError("Arguments to path.join must be strings");return e}).join("/"))},t.relative=function(e,n){function o(e){for(var t=0;t<e.length&&""===e[t];t++);for(var n=e.length-1;n>=0&&""===e[n];n--);return t>n?[]:e.slice(t,n-t+1)}e=t.resolve(e).substr(1),n=t.resolve(n).substr(1);for(var r=o(e.split("/")),i=o(n.split("/")),s=Math.min(r.length,i.length),a=s,l=0;l<s;l++)if(r[l]!==i[l]){a=l;break}var c=[];for(l=a;l<r.length;l++)c.push("..");return(c=c.concat(i.slice(a))).join("/")},t.sep="/",t.delimiter=":",t.dirname=function(e){var t=r(e),n=t[0],o=t[1];return n||o?(o&&(o=o.substr(0,o.length-1)),n+o):"."},t.basename=function(e,t){var n=r(e)[2];return t&&n.substr(-1*t.length)===t&&(n=n.substr(0,n.length-t.length)),n},t.extname=function(e){return r(e)[3]};var s="b"==="ab".substr(-1)?function(e,t,n){return e.substr(t,n)}:function(e,t,n){return t<0&&(t=e.length+t),e.substr(t,n)}}).call(this,n(39))},function(e,t){(function(){e.exports=function(){function e(e,t,n){if(this.options=e.options,this.stringify=e.stringify,null==t)throw new Error("Missing attribute name of element "+e.name);if(null==n)throw new Error("Missing attribute value for attribute "+t+" of element "+e.name);this.name=this.stringify.attName(t),this.value=this.stringify.attValue(n)}return e.prototype.clone=function(){return Object.create(this)},e.prototype.toString=function(e){return this.options.writer.set(e).attribute(this)},e}()}).call(this)},function(e,t){(function(){var t=function(e,t){return function(){return e.apply(t,arguments)}},n={}.hasOwnProperty;e.exports=function(){function e(e){var o,r,i;for(o in this.assertLegalChar=t(this.assertLegalChar,this),e||(e={}),this.noDoubleEncoding=e.noDoubleEncoding,r=e.stringify||{})n.call(r,o)&&(i=r[o],this[o]=i)}return e.prototype.eleName=function(e){return e=""+e||"",this.assertLegalChar(e)},e.prototype.eleText=function(e){return e=""+e||"",this.assertLegalChar(this.elEscape(e))},e.prototype.cdata=function(e){return e=(e=""+e||"").replace("]]>","]]]]><![CDATA[>"),this.assertLegalChar(e)},e.prototype.comment=function(e){if((e=""+e||"").match(/--/))throw new Error("Comment text cannot contain double-hypen: "+e);return this.assertLegalChar(e)},e.prototype.raw=function(e){return""+e||""},e.prototype.attName=function(e){return""+e||""},e.prototype.attValue=function(e){return e=""+e||"",this.attEscape(e)},e.prototype.insTarget=function(e){return""+e||""},e.prototype.insValue=function(e){if((e=""+e||"").match(/\?>/))throw new Error("Invalid processing instruction value: "+e);return e},e.prototype.xmlVersion=function(e){if(!(e=""+e||"").match(/1\.[0-9]+/))throw new Error("Invalid version number: "+e);return e},e.prototype.xmlEncoding=function(e){if(!(e=""+e||"").match(/^[A-Za-z](?:[A-Za-z0-9._-])*$/))throw new Error("Invalid encoding: "+e);return e},e.prototype.xmlStandalone=function(e){return e?"yes":"no"},e.prototype.dtdPubID=function(e){return""+e||""},e.prototype.dtdSysID=function(e){return""+e||""},e.prototype.dtdElementValue=function(e){return""+e||""},e.prototype.dtdAttType=function(e){return""+e||""},e.prototype.dtdAttDefault=function(e){return null!=e?""+e||"":e},e.prototype.dtdEntityValue=function(e){return""+e||""},e.prototype.dtdNData=function(e){return""+e||""},e.prototype.convertAttKey="@",e.prototype.convertPIKey="?",e.prototype.convertTextKey="#text",e.prototype.convertCDataKey="#cdata",e.prototype.convertCommentKey="#comment",e.prototype.convertRawKey="#raw",e.prototype.assertLegalChar=function(e){var t;if(t=e.match(/[\0\uFFFE\uFFFF]|[\uD800-\uDBFF](?![\uDC00-\uDFFF])|(?:[^\uD800-\uDBFF]|^)[\uDC00-\uDFFF]/))throw new Error("Invalid character in string: "+e+" at index "+t.index);return e},e.prototype.elEscape=function(e){var t;return t=this.noDoubleEncoding?/(?!&\S+;)&/g:/&/g,e.replace(t,"&amp;").replace(/</g,"&lt;").replace(/>/g,"&gt;").replace(/\r/g,"&#xD;")},e.prototype.attEscape=function(e){var t;return t=this.noDoubleEncoding?/(?!&\S+;)&/g:/&/g,e.replace(t,"&amp;").replace(/</g,"&lt;").replace(/"/g,"&quot;").replace(/\t/g,"&#x9;").replace(/\n/g,"&#xA;").replace(/\r/g,"&#xD;")},e}()}).call(this)},function(e,t){(function(){var t={}.hasOwnProperty;e.exports=function(){function e(e){var n,o,r,i,s,a,l,c,u;for(n in e||(e={}),this.pretty=e.pretty||!1,this.allowEmpty=null!=(o=e.allowEmpty)&&o,this.pretty?(this.indent=null!=(r=e.indent)?r:"  ",this.newline=null!=(i=e.newline)?i:"\n",this.offset=null!=(s=e.offset)?s:0,this.dontprettytextnodes=null!=(a=e.dontprettytextnodes)?a:0):(this.indent="",this.newline="",this.offset=0,this.dontprettytextnodes=0),this.spacebeforeslash=null!=(l=e.spacebeforeslash)?l:"",!0===this.spacebeforeslash&&(this.spacebeforeslash=" "),this.newlinedefault=this.newline,this.prettydefault=this.pretty,c=e.writer||{})t.call(c,n)&&(u=c[n],this[n]=u)}return e.prototype.set=function(e){var n,o,r;for(n in e||(e={}),"pretty"in e&&(this.pretty=e.pretty),"allowEmpty"in e&&(this.allowEmpty=e.allowEmpty),this.pretty?(this.indent="indent"in e?e.indent:"  ",this.newline="newline"in e?e.newline:"\n",this.offset="offset"in e?e.offset:0,this.dontprettytextnodes="dontprettytextnodes"in e?e.dontprettytextnodes:0):(this.indent="",this.newline="",this.offset=0,this.dontprettytextnodes=0),this.spacebeforeslash="spacebeforeslash"in e?e.spacebeforeslash:"",!0===this.spacebeforeslash&&(this.spacebeforeslash=" "),this.newlinedefault=this.newline,this.prettydefault=this.pretty,o=e.writer||{})t.call(o,n)&&(r=o[n],this[n]=r);return this},e.prototype.space=function(e){var t;return this.pretty&&(t=(e||0)+this.offset+1)>0?new Array(t).join(this.indent):""},e}()}).call(this)},function(e,t,n){"use strict";(function(t,o){var r=n(60);e.exports=_;var i,s=n(199);_.ReadableState=g;n(59).EventEmitter;var a=function(e,t){return e.listeners(t).length},l=n(106),c=n(61).Buffer,u=t.Uint8Array||function(){};var p=n(40);p.inherits=n(36);var d=n(200),h=void 0;h=d&&d.debuglog?d.debuglog("stream"):function(){};var f,m=n(201),y=n(107);p.inherits(_,l);var b=["error","close","destroy","pause","resume"];function g(e,t){e=e||{};var o=t instanceof(i=i||n(31));this.objectMode=!!e.objectMode,o&&(this.objectMode=this.objectMode||!!e.readableObjectMode);var r=e.highWaterMark,s=e.readableHighWaterMark,a=this.objectMode?16:16384;this.highWaterMark=r||0===r?r:o&&(s||0===s)?s:a,this.highWaterMark=Math.floor(this.highWaterMark),this.buffer=new m,this.length=0,this.pipes=null,this.pipesCount=0,this.flowing=null,this.ended=!1,this.endEmitted=!1,this.reading=!1,this.sync=!0,this.needReadable=!1,this.emittedReadable=!1,this.readableListening=!1,this.resumeScheduled=!1,this.destroyed=!1,this.defaultEncoding=e.defaultEncoding||"utf8",this.awaitDrain=0,this.readingMore=!1,this.decoder=null,this.encoding=null,e.encoding&&(f||(f=n(78).StringDecoder),this.decoder=new f(e.encoding),this.encoding=e.encoding)}function _(e){if(i=i||n(31),!(this instanceof _))return new _(e);this._readableState=new g(e,this),this.readable=!0,e&&("function"==typeof e.read&&(this._read=e.read),"function"==typeof e.destroy&&(this._destroy=e.destroy)),l.call(this)}function v(e,t,n,o,r){var i,s=e._readableState;null===t?(s.reading=!1,function(e,t){if(t.ended)return;if(t.decoder){var n=t.decoder.end();n&&n.length&&(t.buffer.push(n),t.length+=t.objectMode?1:n.length)}t.ended=!0,E(e)}(e,s)):(r||(i=function(e,t){var n;o=t,c.isBuffer(o)||o instanceof u||"string"==typeof t||void 0===t||e.objectMode||(n=new TypeError("Invalid non-string/buffer chunk"));var o;return n}(s,t)),i?e.emit("error",i):s.objectMode||t&&t.length>0?("string"==typeof t||s.objectMode||Object.getPrototypeOf(t)===c.prototype||(t=function(e){return c.from(e)}(t)),o?s.endEmitted?e.emit("error",new Error("stream.unshift() after end event")):C(e,s,t,!0):s.ended?e.emit("error",new Error("stream.push() after EOF")):(s.reading=!1,s.decoder&&!n?(t=s.decoder.write(t),s.objectMode||0!==t.length?C(e,s,t,!1):D(e,s)):C(e,s,t,!1))):o||(s.reading=!1));return function(e){return!e.ended&&(e.needReadable||e.length<e.highWaterMark||0===e.length)}(s)}function C(e,t,n,o){t.flowing&&0===t.length&&!t.sync?(e.emit("data",n),e.read(0)):(t.length+=t.objectMode?1:n.length,o?t.buffer.unshift(n):t.buffer.push(n),t.needReadable&&E(e)),D(e,t)}Object.defineProperty(_.prototype,"destroyed",{get:function(){return void 0!==this._readableState&&this._readableState.destroyed},set:function(e){this._readableState&&(this._readableState.destroyed=e)}}),_.prototype.destroy=y.destroy,_.prototype._undestroy=y.undestroy,_.prototype._destroy=function(e,t){this.push(null),t(e)},_.prototype.push=function(e,t){var n,o=this._readableState;return o.objectMode?n=!0:"string"==typeof e&&((t=t||o.defaultEncoding)!==o.encoding&&(e=c.from(e,t),t=""),n=!0),v(this,e,t,!1,n)},_.prototype.unshift=function(e){return v(this,e,null,!0,!1)},_.prototype.isPaused=function(){return!1===this._readableState.flowing},_.prototype.setEncoding=function(e){return f||(f=n(78).StringDecoder),this._readableState.decoder=new f(e),this._readableState.encoding=e,this};var I=8388608;function P(e,t){return e<=0||0===t.length&&t.ended?0:t.objectMode?1:e!=e?t.flowing&&t.length?t.buffer.head.data.length:t.length:(e>t.highWaterMark&&(t.highWaterMark=function(e){return e>=I?e=I:(e--,e|=e>>>1,e|=e>>>2,e|=e>>>4,e|=e>>>8,e|=e>>>16,e++),e}(e)),e<=t.length?e:t.ended?t.length:(t.needReadable=!0,0))}function E(e){var t=e._readableState;t.needReadable=!1,t.emittedReadable||(h("emitReadable",t.flowing),t.emittedReadable=!0,t.sync?r.nextTick(S,e):S(e))}function S(e){h("emit readable"),e.emit("readable"),F(e)}function D(e,t){t.readingMore||(t.readingMore=!0,r.nextTick(w,e,t))}function w(e,t){for(var n=t.length;!t.reading&&!t.flowing&&!t.ended&&t.length<t.highWaterMark&&(h("maybeReadMore read 0"),e.read(0),n!==t.length);)n=t.length;t.readingMore=!1}function O(e){h("readable nexttick read 0"),e.read(0)}function T(e,t){t.reading||(h("resume read 0"),e.read(0)),t.resumeScheduled=!1,t.awaitDrain=0,e.emit("resume"),F(e),t.flowing&&!t.reading&&e.read(0)}function F(e){var t=e._readableState;for(h("flow",t.flowing);t.flowing&&null!==e.read(););}function M(e,t){return 0===t.length?null:(t.objectMode?n=t.buffer.shift():!e||e>=t.length?(n=t.decoder?t.buffer.join(""):1===t.buffer.length?t.buffer.head.data:t.buffer.concat(t.length),t.buffer.clear()):n=function(e,t,n){var o;e<t.head.data.length?(o=t.head.data.slice(0,e),t.head.data=t.head.data.slice(e)):o=e===t.head.data.length?t.shift():n?function(e,t){var n=t.head,o=1,r=n.data;e-=r.length;for(;n=n.next;){var i=n.data,s=e>i.length?i.length:e;if(s===i.length?r+=i:r+=i.slice(0,e),0===(e-=s)){s===i.length?(++o,n.next?t.head=n.next:t.head=t.tail=null):(t.head=n,n.data=i.slice(s));break}++o}return t.length-=o,r}(e,t):function(e,t){var n=c.allocUnsafe(e),o=t.head,r=1;o.data.copy(n),e-=o.data.length;for(;o=o.next;){var i=o.data,s=e>i.length?i.length:e;if(i.copy(n,n.length-e,0,s),0===(e-=s)){s===i.length?(++r,o.next?t.head=o.next:t.head=t.tail=null):(t.head=o,o.data=i.slice(s));break}++r}return t.length-=r,n}(e,t);return o}(e,t.buffer,t.decoder),n);var n}function x(e){var t=e._readableState;if(t.length>0)throw new Error('"endReadable()" called on non-empty stream');t.endEmitted||(t.ended=!0,r.nextTick(A,t,e))}function A(e,t){e.endEmitted||0!==e.length||(e.endEmitted=!0,t.readable=!1,t.emit("end"))}function k(e,t){for(var n=0,o=e.length;n<o;n++)if(e[n]===t)return n;return-1}_.prototype.read=function(e){h("read",e),e=parseInt(e,10);var t=this._readableState,n=e;if(0!==e&&(t.emittedReadable=!1),0===e&&t.needReadable&&(t.length>=t.highWaterMark||t.ended))return h("read: emitReadable",t.length,t.ended),0===t.length&&t.ended?x(this):E(this),null;if(0===(e=P(e,t))&&t.ended)return 0===t.length&&x(this),null;var o,r=t.needReadable;return h("need readable",r),(0===t.length||t.length-e<t.highWaterMark)&&h("length less than watermark",r=!0),t.ended||t.reading?h("reading or ended",r=!1):r&&(h("do read"),t.reading=!0,t.sync=!0,0===t.length&&(t.needReadable=!0),this._read(t.highWaterMark),t.sync=!1,t.reading||(e=P(n,t))),null===(o=e>0?M(e,t):null)?(t.needReadable=!0,e=0):t.length-=e,0===t.length&&(t.ended||(t.needReadable=!0),n!==e&&t.ended&&x(this)),null!==o&&this.emit("data",o),o},_.prototype._read=function(e){this.emit("error",new Error("_read() is not implemented"))},_.prototype.pipe=function(e,t){var n=this,i=this._readableState;switch(i.pipesCount){case 0:i.pipes=e;break;case 1:i.pipes=[i.pipes,e];break;default:i.pipes.push(e)}i.pipesCount+=1,h("pipe count=%d opts=%j",i.pipesCount,t);var l=(!t||!1!==t.end)&&e!==o.stdout&&e!==o.stderr?u:_;function c(t,o){h("onunpipe"),t===n&&o&&!1===o.hasUnpiped&&(o.hasUnpiped=!0,h("cleanup"),e.removeListener("close",b),e.removeListener("finish",g),e.removeListener("drain",p),e.removeListener("error",y),e.removeListener("unpipe",c),n.removeListener("end",u),n.removeListener("end",_),n.removeListener("data",m),d=!0,!i.awaitDrain||e._writableState&&!e._writableState.needDrain||p())}function u(){h("onend"),e.end()}i.endEmitted?r.nextTick(l):n.once("end",l),e.on("unpipe",c);var p=function(e){return function(){var t=e._readableState;h("pipeOnDrain",t.awaitDrain),t.awaitDrain&&t.awaitDrain--,0===t.awaitDrain&&a(e,"data")&&(t.flowing=!0,F(e))}}(n);e.on("drain",p);var d=!1;var f=!1;function m(t){h("ondata"),f=!1,!1!==e.write(t)||f||((1===i.pipesCount&&i.pipes===e||i.pipesCount>1&&-1!==k(i.pipes,e))&&!d&&(h("false write response, pause",n._readableState.awaitDrain),n._readableState.awaitDrain++,f=!0),n.pause())}function y(t){h("onerror",t),_(),e.removeListener("error",y),0===a(e,"error")&&e.emit("error",t)}function b(){e.removeListener("finish",g),_()}function g(){h("onfinish"),e.removeListener("close",b),_()}function _(){h("unpipe"),n.unpipe(e)}return n.on("data",m),function(e,t,n){if("function"==typeof e.prependListener)return e.prependListener(t,n);e._events&&e._events[t]?s(e._events[t])?e._events[t].unshift(n):e._events[t]=[n,e._events[t]]:e.on(t,n)}(e,"error",y),e.once("close",b),e.once("finish",g),e.emit("pipe",n),i.flowing||(h("pipe resume"),n.resume()),e},_.prototype.unpipe=function(e){var t=this._readableState,n={hasUnpiped:!1};if(0===t.pipesCount)return this;if(1===t.pipesCount)return e&&e!==t.pipes?this:(e||(e=t.pipes),t.pipes=null,t.pipesCount=0,t.flowing=!1,e&&e.emit("unpipe",this,n),this);if(!e){var o=t.pipes,r=t.pipesCount;t.pipes=null,t.pipesCount=0,t.flowing=!1;for(var i=0;i<r;i++)o[i].emit("unpipe",this,n);return this}var s=k(t.pipes,e);return-1===s?this:(t.pipes.splice(s,1),t.pipesCount-=1,1===t.pipesCount&&(t.pipes=t.pipes[0]),e.emit("unpipe",this,n),this)},_.prototype.on=function(e,t){var n=l.prototype.on.call(this,e,t);if("data"===e)!1!==this._readableState.flowing&&this.resume();else if("readable"===e){var o=this._readableState;o.endEmitted||o.readableListening||(o.readableListening=o.needReadable=!0,o.emittedReadable=!1,o.reading?o.length&&E(this):r.nextTick(O,this))}return n},_.prototype.addListener=_.prototype.on,_.prototype.resume=function(){var e=this._readableState;return e.flowing||(h("resume"),e.flowing=!0,function(e,t){t.resumeScheduled||(t.resumeScheduled=!0,r.nextTick(T,e,t))}(this,e)),this},_.prototype.pause=function(){return h("call pause flowing=%j",this._readableState.flowing),!1!==this._readableState.flowing&&(h("pause"),this._readableState.flowing=!1,this.emit("pause")),this},_.prototype.wrap=function(e){var t=this,n=this._readableState,o=!1;for(var r in e.on("end",function(){if(h("wrapped end"),n.decoder&&!n.ended){var e=n.decoder.end();e&&e.length&&t.push(e)}t.push(null)}),e.on("data",function(r){(h("wrapped data"),n.decoder&&(r=n.decoder.write(r)),n.objectMode&&null==r)||(n.objectMode||r&&r.length)&&(t.push(r)||(o=!0,e.pause()))}),e)void 0===this[r]&&"function"==typeof e[r]&&(this[r]=function(t){return function(){return e[t].apply(e,arguments)}}(r));for(var i=0;i<b.length;i++)e.on(b[i],this.emit.bind(this,b[i]));return this._read=function(t){h("wrapped _read",t),o&&(o=!1,e.resume())},this},Object.defineProperty(_.prototype,"readableHighWaterMark",{enumerable:!1,get:function(){return this._readableState.highWaterMark}}),_._fromList=M}).call(this,n(30),n(39))},function(e,t,n){e.exports=n(59).EventEmitter},function(e,t,n){"use strict";var o=n(60);function r(e,t){e.emit("error",t)}e.exports={destroy:function(e,t){var n=this,i=this._readableState&&this._readableState.destroyed,s=this._writableState&&this._writableState.destroyed;return i||s?(t?t(e):!e||this._writableState&&this._writableState.errorEmitted||o.nextTick(r,this,e),this):(this._readableState&&(this._readableState.destroyed=!0),this._writableState&&(this._writableState.destroyed=!0),this._destroy(e||null,function(e){!t&&e?(o.nextTick(r,n,e),n._writableState&&(n._writableState.errorEmitted=!0)):t&&t(e)}),this)},undestroy:function(){this._readableState&&(this._readableState.destroyed=!1,this._readableState.reading=!1,this._readableState.ended=!1,this._readableState.endEmitted=!1),this._writableState&&(this._writableState.destroyed=!1,this._writableState.ended=!1,this._writableState.ending=!1,this._writableState.finished=!1,this._writableState.errorEmitted=!1)}}},function(e,t,n){(function(e){var o=void 0!==e&&e||"undefined"!=typeof self&&self||window,r=Function.prototype.apply;function i(e,t){this._id=e,this._clearFn=t}t.setTimeout=function(){return new i(r.call(setTimeout,o,arguments),clearTimeout)},t.setInterval=function(){return new i(r.call(setInterval,o,arguments),clearInterval)},t.clearTimeout=t.clearInterval=function(e){e&&e.close()},i.prototype.unref=i.prototype.ref=function(){},i.prototype.close=function(){this._clearFn.call(o,this._id)},t.enroll=function(e,t){clearTimeout(e._idleTimeoutId),e._idleTimeout=t},t.unenroll=function(e){clearTimeout(e._idleTimeoutId),e._idleTimeout=-1},t._unrefActive=t.active=function(e){clearTimeout(e._idleTimeoutId);var t=e._idleTimeout;t>=0&&(e._idleTimeoutId=setTimeout(function(){e._onTimeout&&e._onTimeout()},t))},n(203),t.setImmediate="undefined"!=typeof self&&self.setImmediate||void 0!==e&&e.setImmediate||this&&this.setImmediate,t.clearImmediate="undefined"!=typeof self&&self.clearImmediate||void 0!==e&&e.clearImmediate||this&&this.clearImmediate}).call(this,n(30))},function(e,t,n){"use strict";e.exports=s;var o=n(31),r=n(40);function i(e,t){var n=this._transformState;n.transforming=!1;var o=n.writecb;if(!o)return this.emit("error",new Error("write callback called multiple times"));n.writechunk=null,n.writecb=null,null!=t&&this.push(t),o(e);var r=this._readableState;r.reading=!1,(r.needReadable||r.length<r.highWaterMark)&&this._read(r.highWaterMark)}function s(e){if(!(this instanceof s))return new s(e);o.call(this,e),this._transformState={afterTransform:i.bind(this),needTransform:!1,transforming:!1,writecb:null,writechunk:null,writeencoding:null},this._readableState.needReadable=!0,this._readableState.sync=!1,e&&("function"==typeof e.transform&&(this._transform=e.transform),"function"==typeof e.flush&&(this._flush=e.flush)),this.on("prefinish",a)}function a(){var e=this;"function"==typeof this._flush?this._flush(function(t,n){l(e,t,n)}):l(this,null,null)}function l(e,t,n){if(t)return e.emit("error",t);if(null!=n&&e.push(n),e._writableState.length)throw new Error("Calling transform done when ws.length != 0");if(e._transformState.transforming)throw new Error("Calling transform done when still transforming");return e.push(null)}r.inherits=n(36),r.inherits(s,o),s.prototype.push=function(e,t){return this._transformState.needTransform=!1,o.prototype.push.call(this,e,t)},s.prototype._transform=function(e,t,n){throw new Error("_transform() is not implemented")},s.prototype._write=function(e,t,n){var o=this._transformState;if(o.writecb=n,o.writechunk=e,o.writeencoding=t,!o.transforming){var r=this._readableState;(o.needTransform||r.needReadable||r.length<r.highWaterMark)&&this._read(r.highWaterMark)}},s.prototype._read=function(e){var t=this._transformState;null!==t.writechunk&&t.writecb&&!t.transforming?(t.transforming=!0,this._transform(t.writechunk,t.writeencoding,t.afterTransform)):t.needTransform=!0},s.prototype._destroy=function(e,t){var n=this;o.prototype._destroy.call(this,e,function(e){t(e),n.emit("close")})}},function(e,t){(function(){"use strict";var e;e=new RegExp(/(?!xmlns)^.*:/),t.normalize=function(e){return e.toLowerCase()},t.firstCharLowerCase=function(e){return e.charAt(0).toLowerCase()+e.slice(1)},t.stripPrefix=function(t){return t.replace(e,"")},t.parseNumbers=function(e){return isNaN(e)||(e=e%1==0?parseInt(e,10):parseFloat(e)),e},t.parseBooleans=function(e){return/^(?:true|false)$/i.test(e)&&(e="true"===e.toLowerCase()),e}}).call(this)},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.ResourceStrings={}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(20),r=n(23);function i(e,t,n){var i=n?" "+o.translate(r.strings.function_parameters.key)+": "+function(e){return e.map(function(e){return e?JSON.stringify(e):"undefined"}).join(", ")}(n)+".":"";return""+o.translateA(r.strings.invoke_method.key,[e,t])+i}t.getInfoMessage=i,t.LogInfoMessage=function(e,t,n){console.log(i(e,t,n))}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DefaultStatusTheme={Alert1:{Text:"#FFFFFF",Fill:"#ea0600"},Alert2:{Text:"#000000",Fill:"#ff0c00"},Priority1:{Text:"#FFFFFF",Fill:"#b22912"},Priority2:{Text:"#000000",Fill:"#ff5b45"},Priority3:{Text:"#000000",Fill:"#f2c624"},Positive1:{Text:"#FFFFFF",Fill:"#358717"},Positive2:{Text:"#000000",Fill:"#47c21d"},Info1:{Text:"#FFFFFF",Fill:"#3b79b7"},Neutral1:{Text:"#FFFFFF",Fill:"#666666"}},t.DefaultThemingDataStatusColors={neutral:"#FFFFFF",error:"#000000",warning:"#000000",success:"#000000",info:"#FFFFFF"},t.DefaultBaseColors={Red:{red1:"#ffa2a2",red2:"#ff0c00",red3:"#ea0600",red4:"#bf0900",red5:"#800600"},Orange:{orange1:"#ffd5d2",orange2:"#ff9685",orange3:"#ff5b45",orange4:"#b22912",orange5:"#80281a"},Yellow:{yellow1:"#fae8a7",yellow2:"#f7cf52",yellow3:"#f2c624",yellow4:"#bf991f",yellow5:"#725a0d"},Green:{green1:"#bdf2a7",green2:"#70bc57",green3:"#47c21d",green4:"#358717",green5:"#1c6512"},Blue:{blue1:"#a8d0ff",blue2:"#6aa6ff",blue3:"#3b79b7",blue4:"#315fa2",blue5:"#25477a"},Teal:{teal1:"#99ebed",teal2:"#00ced3",teal3:"#00b7c3",teal4:"#008992",teal5:"#005c62"},Purple:{purple1:"#e9bbff",purple2:"#a350c4",purple3:"#8c2ab5",purple4:"#691b88",purple5:"#46125b"},Clay:{clay1:"#f4c0b9",clay2:"#e2614f",clay3:"#db3923",clay4:"#a42b1a",clay5:"#6e1d12"},Pink:{pink1:"#ffddf2",pink2:"#ffc7ea",pink3:"#ffa8da",pink4:"#b26491",pink5:"#652f4e"},Grey:{grey1:"#efefef",grey2:"#e2e2e2",grey3:"#d8d8d8",grey4:"#b3b3b3",grey5:"#666666",grey6:"#444444",grey7:"#333333"},Violet:{violet1:"#e6bdee",violet2:"#b860c1",violet3:"#a638b2",violet4:"#6a1e7a",violet5:"#47104c"},White:"#FFFFFF",Black:"#000000",Transparent:"#FFFFFF",CalculateContrast:function(){}},t.DefaultThemingDataBaseColors={white:"#FFFFFF",black:"#000000",red:"#ffa2a2",orange:"#ffd5d2",yellow:"#fae8a7",green:"#bdf2a7",blue:"#a8d0ff",teal:"#99ebed",purple:"#e9bbff"},t.DefaultThemingDataLinkColors={default:"#1160B7",visited:"#F8FAFC",disabled:"#666666"},t.DefaultLinkColors={Normal:{Text:"#1160B7",Fill:"#FFFFFF"},Hover:{Text:"#E7EFF7",Fill:"#FFFFFF"},Visited:{Text:"#F8FAFC",Fill:"#FFFFFF"},Pressed:{Text:"#25477a",Fill:"#FFFFFF"},Disabled:{Text:"#666666",Fill:"#666666"}},t.DefaultThemingDataGrayColors={gray01:"#efefef",gray02:"#e2e2e2",gray03:"#d8d8d8",gray04:"#b3b3b3",gray05:"#666666",gray06:"#444444",gray07:"#333333",gray08:"#333333",gray09:"#333333"},t.DefaultThemingDataColors={whitebackground:"#FFFFFF",defaulttheming:"#3B79B7",navbarshelf:"#FFFFFF",header:"#F26151",globallink:"#1160B7",selectedlinkeffect:"#F26158",hoverlinkeffect:"#E7EFF7",processcontrol:"#41A053",defaultentity:"#666666",defaultcustomentity:"#00CCA3",controlshade:"#FFFFFF",controlborder:"#BDC3C7",statustheme:t.DefaultStatusTheme,status:t.DefaultThemingDataStatusColors,baseColor:t.DefaultBaseColors,base:t.DefaultThemingDataBaseColors,links:t.DefaultThemingDataLinkColors,linkstheme:t.DefaultLinkColors,grays:t.DefaultThemingDataGrayColors},t.DefaultThemingDataTextBox={fonticonsize:"1em",fontweight:400,contentfontweight:600,fontsize:"1em",errorfontsize:"0.9em",spacing:"0.25em",containerspacing:"0.75em",rightmargin:"2em",lineheight:"1.5em",linethickness:"1px",errorlinethickness:"2px",horizontalpadding:"0.5em",verticalpadding:"0.5em",maxlength:200,labelcolor:"#444444",contentcolor:"#000000",linecolor:"#DDDDDD",hoverboxcolor:"#0072C6",backgroundcolor:"#F2F8FF",errorbackgroundcolor:"#FFF5F5",redcolor:"#EA0600",bluecolor:"#0000FF",restmodecolor:"#FFFFFF"},t.DefaultThemingDataSpacings={xshorizontal:"0.5em",shorizontal:"0.5em",bhorizontal:"1em",mhorizontal:"2em",lhorizontal:"2.5em",xlhorizontal:"3.5em",xxlhorizontal:"4.5em",xsvertical:"0.5em",svertical:"0.5em",bvertical:"1em",mvertical:"2em",lvertical:"2.5em",xlvertical:"3.5em",xxlvertical:"4.5em"},t.DefaultThemingDataFontFamilies={semilight:"'SegoeUI-Light', 'Segoe UI Semilight', 'Segoe UI Regular', 'Segoe UI'",semibold:"'SegoeUI-Semibold', 'Segoe UI Semibold', 'Segoe UI Regular', 'Segoe UI'",regular:"'Segoe UI Regular', 'Segoe UI'",bold:"'SegoeUI-Bold', 'Segoe UI Bold', 'Segoe UI'"},t.DefaultThemingDataFontSizes={xsfontsize:"0.750rem",sfontsize:"0.875rem",bfontsize:"1rem",mfontsize:"1rem",lfontsize:"1.25rem",xlfontsize:"1.5rem",font225:"2.25rem",font200:"2.00rem",font175:"1.75rem",font150:"1.50rem",font125:"1.25rem",font115:"1.15rem",font100:"1.00rem",font085:"0.85rem",font075:"0.75rem"},t.DefaultThemingDataBreakpoints={dimensionxs:"320",dimensions:"480",dimensionm:"768",dimensionl:"1024",dimensionxl:"1024"},t.DefaultThemingDataMeasures={measure025:"0.25rem",measure050:"0.5rem",measure075:"0.75rem",measure100:"1.00rem",measure125:"1.25rem",measure150:"1.50rem",measure175:"1.75rem",measure200:"2.00rem",measure225:"2.25rem",measure250:"2.50rem",measure300:"3.00rem",measure350:"3.50rem",measure400:"4.00rem",measure450:"4.50rem",measure500:"5.00rem",measure550:"5.50rem",measure600:"6.00rem"},t.DefaultThemingDataLookup={tagpadding:"6px",tagmargin:"-5px",tagbackgroundcolor:"#ECF4FA"},t.DefaultThemingDataBorders={border01:"1px solid #efefef",border02:"1px solid #d8d8d8",border03:"1px dashed black"},t.DefaultThemingDataShadows={shadow01:"0px 2px 4px 0px rgba(0, 0, 0, 0.5);"},t.DefaultThemingDataButtons={button01primary:{borderColor:"transparent",backgroundColor:"#3b79b7",height:"2.50rem",minWidth:"6.00rem",cursor:"pointer",justifyContent:"center",alignItems:"center",paddingLeft:"1.00rem",paddingRight:"1.00rem",":focus":{outline:"1px dashed black"},":hover":{backgroundColor:"#25477a"},":active":{backgroundColor:"#25477a",outline:"1px solid #25477a",border:"1px solid white",":disabled":{outline:0,border:"1px solid transparent"}},":disabled":{backgroundColor:"#666666",cursor:"not-allowed","> span":{color:"#efefef"}}},button01secondary:{border:"1px solid #3b79b7",backgroundColor:"#FFFFFF",height:"2.50rem",minWidth:"6.00rem",cursor:"pointer",justifyContent:"center",alignItems:"center",paddingLeft:"1.00rem",paddingRight:"1.00rem",":focus":{outline:"1px dashed black"},":hover":{backgroundColor:"#25477a",borderColor:"transparent","> span":{color:"#FFFFFF"},":disabled":{"> span":{color:"#efefef"}}},":active":{backgroundColor:"#25477a",outline:"1px solid #25477a",border:"1px solid white",borderColor:"transparent","> span":{color:"#FFFFFF"},":disabled":{outline:0,border:"1px solid transparent"}},":disabled":{backgroundColor:"#666666",cursor:"not-allowed",borderColor:"transparent","> span":{color:"#efefef"}}},buttonprimarytext:{fontSize:"1.00rem",fontFamily:"'Segoe UI Regular', 'Segoe UI'",color:"#FFFFFF",textOverflow:"ellipsis",whiteSpace:"nowrap",overflow:"hidden"},buttonsecondarytext:{fontSize:"1.00rem",fontFamily:"'Segoe UI Regular', 'Segoe UI'",color:"#3b79b7",textOverflow:"ellipsis",whiteSpace:"nowrap",overflow:"hidden"},actioniconbutton01:{height:"2.50rem",width:"2.50rem",borderStyle:"none",backgroundColor:"transparent",justifyContent:"center",alignItems:"center",cursor:"pointer","> span":{fontSize:"1.00rem",color:"#333333"},":focus":{outline:"1px dashed black"},":hover":{backgroundColor:"#efefef"},":disabled":{cursor:"not-allowed","> span":{color:"#b3b3b3"}}},button02primary:{borderColor:"transparent",backgroundColor:"#3b79b7",height:"1.50rem",minWidth:"4.00rem",cursor:"pointer",justifyContent:"center",alignItems:"center",paddingLeft:"0.5rem",paddingRight:"0.5rem",":focus":{outline:"1px dashed black"},":hover":{backgroundColor:"#25477a"},":active":{backgroundColor:"#25477a",outline:"1px solid #25477a",border:"1px solid white",":disabled":{outline:0,border:"1px solid transparent"}},":disabled":{backgroundColor:"#666666",cursor:"not-allowed","> span":{color:"#efefef"}}},button02secondary:{border:"1px solid #3b79b7",backgroundColor:"#FFFFFF",height:"1.50rem",minWidth:"4.00rem",cursor:"pointer",justifyContent:"center",alignItems:"center",paddingLeft:"0.5rem",paddingRight:"0.5rem",":focus":{outline:"1px dashed black"},":hover":{backgroundColor:"#25477a",borderColor:"transparent","> span":{color:"#FFFFFF"},":disabled":{"> span":{color:"#efefef"}}},":active":{backgroundColor:"#25477a",outline:"1px solid #25477a",border:"1px solid white",borderColor:"transparent","> span":{color:"#FFFFFF"},":disabled":{outline:0,border:"1px solid transparent"}},":disabled":{backgroundColor:"#666666",cursor:"not-allowed",borderColor:"transparent","> span":{color:"#efefef"}}}},t.DefaultThemingData={defaultThemingData:{normalfontfamily:"'SegoeUI', 'Segoe UI'",normalfontcolor:"#F26197",normalfontsize:"13px",solidborderstyle:"solid",noneborderstyle:"none",colors:t.DefaultThemingDataColors,textbox:t.DefaultThemingDataTextBox,spacings:t.DefaultThemingDataSpacings,fontfamilies:t.DefaultThemingDataFontFamilies,fontsizes:t.DefaultThemingDataFontSizes,breakpoints:t.DefaultThemingDataBreakpoints,measures:t.DefaultThemingDataMeasures,lookup:t.DefaultThemingDataLookup,borders:t.DefaultThemingDataBorders,shadows:t.DefaultThemingDataShadows,buttons:t.DefaultThemingDataButtons},getEntityColor:function(e){return"blue"},fullScreenOverrideStyle:void 0}},function(e,t){e.exports=function(e,t){return e===t||e!=e&&t!=t}},function(e,t,n){var o=n(65),r=n(41),i="[object AsyncFunction]",s="[object Function]",a="[object GeneratorFunction]",l="[object Proxy]";e.exports=function(e){if(!r(e))return!1;var t=o(e);return t==s||t==a||t==i||t==l}},function(e,t,n){(function(t){var n="object"==typeof t&&t&&t.Object===Object&&t;e.exports=n}).call(this,n(30))},function(e,t){var n=Function.prototype.toString;e.exports=function(e){if(null!=e){try{return n.call(e)}catch(e){}try{return e+""}catch(e){}}return""}},function(e,t,n){var o=n(119),r=n(114),i=Object.prototype.hasOwnProperty;e.exports=function(e,t,n){var s=e[t];i.call(e,t)&&r(s,n)&&(void 0!==n||t in e)||o(e,t,n)}},function(e,t,n){var o=n(252);e.exports=function(e,t,n){"__proto__"==t&&o?o(e,t,{configurable:!0,enumerable:!0,value:n,writable:!0}):e[t]=n}},function(e,t,n){var o=n(254),r=n(255),i=n(83),s=n(121),a=n(258),l=n(259),c=Object.prototype.hasOwnProperty;e.exports=function(e,t){var n=i(e),u=!n&&r(e),p=!n&&!u&&s(e),d=!n&&!u&&!p&&l(e),h=n||u||p||d,f=h?o(e.length,String):[],m=f.length;for(var y in e)!t&&!c.call(e,y)||h&&("length"==y||p&&("offset"==y||"parent"==y)||d&&("buffer"==y||"byteLength"==y||"byteOffset"==y)||a(y,m))||f.push(y);return f}},function(e,t,n){(function(e){var o=n(22),r=n(257),i=t&&!t.nodeType&&t,s=i&&"object"==typeof e&&e&&!e.nodeType&&e,a=s&&s.exports===i?o.Buffer:void 0,l=(a?a.isBuffer:void 0)||r;e.exports=l}).call(this,n(84)(e))},function(e,t){var n=9007199254740991;e.exports=function(e){return"number"==typeof e&&e>-1&&e%1==0&&e<=n}},function(e,t){e.exports=function(e,t){return function(n){return e(t(n))}}},function(e,t,n){var o=n(115),r=n(122);e.exports=function(e){return null!=e&&r(e.length)&&!o(e)}},function(e,t,n){var o=n(120),r=n(264),i=n(124);e.exports=function(e){return i(e)?o(e,!0):r(e)}},function(e,t){e.exports=function(){return[]}},function(e,t,n){var o=n(128),r=n(129),i=n(88),s=n(126),a=Object.getOwnPropertySymbols?function(e){for(var t=[];e;)o(t,i(e)),e=r(e);return t}:s;e.exports=a},function(e,t){e.exports=function(e,t){for(var n=-1,o=t.length,r=e.length;++n<o;)e[r+n]=t[n];return e}},function(e,t,n){var o=n(123)(Object.getPrototypeOf,Object);e.exports=o},function(e,t,n){var o=n(128),r=n(83);e.exports=function(e,t,n){var i=t(e);return r(e)?i:o(i,n(e))}},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),s=n(143),a=n(291),l=n(293),c=n(69),u=n(294),p=n(79),d=n(295),h=n(20),f=n(23),m=function(e){function t(t){var n=e.call(this,t)||this;return n.state={loaded:!1,controlMetadata:void 0,controlInputs:{properties:{},datasets:{}},controlOutputs:{},message:h.translate(f.strings.loading_harness.key)},n.onInputValueChange=n.onInputValueChange.bind(n),n.onInputTypeChange=n.onInputTypeChange.bind(n),n.onOutputChange=n.onOutputChange.bind(n),n.onControlLoadingError=n.onControlLoadingError.bind(n),n}return r(t,e),t.prototype.initializeState=function(){var e=this;return this.props.resourceLoader.LoadManifest(c.getResourceInvoker).then(function(t){var n=u.GenerateControlMetadata(t),o={properties:d.SetDefaultPropertyValues(n),datasets:d.SetDefaultDatasetValues(n)};e.setState({loaded:!0,controlMetadata:n,controlInputs:o,controlOutputs:{}})},function(t){e.setState({loaded:!1,message:t})})},t.prototype.onInputValueChange=function(e,t){this.setState(function(n){var o=n.controlInputs;return o.properties[e]||(o.properties[e]={Value:void 0,SelectedType:void 0}),o.properties[e].Value=t,{controlInputs:o}})},t.prototype.onInputTypeChange=function(e,t){this.setState(function(n){var o=n.controlInputs;o.properties[e]||(o.properties[e]={Value:void 0,SelectedType:void 0});var r=o.properties[e].Value;return o.properties[e].SelectedType=t,o.properties[e].Value=p.ReformatInputValue(r,t),{controlInputs:o}})},t.prototype.onOutputChange=function(e,t){this.setState(function(n){var o=n.controlOutputs;return o[e]=t,{controlOutputs:o}})},t.prototype.onControlLoadingError=function(e){this.setState({loaded:!1,message:e})},t.prototype.componentDidMount=function(){this.initializeState()},t.prototype.render=function(){return this.state.loaded?i.createElement("div",{className:"harness-root"},i.createElement(s.ControlHost,{controlMetadata:this.state.controlMetadata,controlInputs:this.state.controlInputs,onInputChange:this.onInputValueChange,onOutputChange:this.onOutputChange,onLoadingError:this.onControlLoadingError}),i.createElement("div",{className:"io-pane"},i.createElement(a.InputControl,{controlMetadata:this.state.controlMetadata,controlInputs:this.state.controlInputs,onInputValueChange:this.onInputValueChange,onInputTypeChange:this.onInputTypeChange}),Object.keys(this.state.controlOutputs).length>0?i.createElement(l.OutputControl,{controlOutputs:this.state.controlOutputs}):void 0)):i.createElement("div",{className:"control-pane"},this.state.message)},t}(i.Component);t.ControlHarness=m},function(e,t,n){e.exports=n(145)},function(e,t,n){e.exports=n(172)},function(e,t,n){"use strict";n.d(t,"a",function(){return s});var o=n(0),r=n(43),i=n(25),s=function(){function e(e){this._popups={},this._host=e}return e.prototype._getKeyName=function(e){return{key:e}},e.prototype._createPopup=function(e){return o.createElement(r.a,Object(Object.assign({},e,this._getKeyName(e.name))))},e.prototype.createPopup=function(e){e.name&&(this._popups[e.name]=this._createPopup(e),this._host.forceUpdate())},e.prototype.openPopup=function(e){if(void 0===e&&(e=""),this._popups[e]){var t=this._popups[e].props;this._popups[e]=this._createPopup(Object.assign({},t,{popupToOpen:e})),this._host.forceUpdate()}},e.prototype.closePopup=function(e){if(void 0===e&&(e=""),this._popups[e]){var t=this._popups[e].props;this._popups[e]=this._createPopup(Object.assign({},t,{popupToOpen:""})),this._host.forceUpdate()}},e.prototype.updatePopup=function(e,t){if(void 0===e&&(e=""),this._popups[e]){var n=this._popups[e].props;this._popups[e]=this._createPopup(Object.assign({},n,t)),this._host.forceUpdate()}},e.prototype.deletePopup=function(e){void 0===e&&(e=""),this._popups[e]&&(delete this._popups[e],this._popupsId=void 0,this._host.forceUpdate())},e.prototype.getPopups=function(){var e=[];for(var t in this._popups)e.push(this._popups[t]);return e},e.prototype.setPopupsId=function(e){this._popupsId=e},e.prototype.getPopupsId=function(){return this._popupsId},e.prototype.renderPopups=function(){var e=this.getPopups(),t=this.getPopupsId();return e.length?o.createElement(i.b,{id:t,parentCustomControlId:this._host.props.controlId,openPopup:this._host.props.actions.openPopup,closePopup:this._host.props.actions.closePopup},e):null},e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var o=new(function(){function e(){this._initialized=!1}return e.prototype._logMessage=function(e,t,n){throw"_logMessage is not overrided by actual implementation"},e.prototype.setProps=function(e){!this._initialized&&e&&e.propBagMethods&&e.propBagMethods.utils&&e.propBagMethods.utils.logMessage&&(this._logMessage=e.propBagMethods.utils.logMessage,this._initialized=!0)},e.prototype.log=function(e,t){this._initialized&&this._logMessage(e,t,3)},e.prototype.warn=function(e,t){this._initialized&&this._logMessage(e,t,2)},e.prototype.error=function(e,t){this._initialized&&this._logMessage(e,t,1)},e}())},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var o=n(7),r=n(2),i=function(){function e(){this._memoizedMap={},this._newMemoizedMap={},this._isCompositing=!1,this._newIsCompositing=!1,this._midRender=!1,this._memoizedRoot=null,this._wrapperMap={},this.addCommandWrapper=this.addCommandWrapper.bind(this)}return e.prototype.startRenderFunction=function(){if(this._midRender){var e=new Error("Start render called without start");throw r.default.Reporting.reportFailure(o.a+".Components",e,"Start Render, midRender "+this._midRender,[{name:"APIName",value:o.a+".Components.CustomControlMemoizationHelper.startRenderFunction"}]),e}this._isCompositing=!1,this._midRender=!0},e.prototype.stopRenderFunction=function(){if(!this._midRender){var e=new Error("Stop render called without start");throw r.default.Reporting.reportFailure(o.a+".Components",e,"Stop Render, midRender "+this._midRender,[{name:"APIName",value:o.a+".Components.CustomControlMemoizationHelper.stopRenderFunction"}]),e}this._isCompositing=this._newIsCompositing,this._memoizedMap=this._newMemoizedMap,this._newMemoizedMap={},this._midRender=!1},e.prototype.destroy=function(){for(var e in this._wrapperMap)this._wrapperMap[e].unmount();this._wrapperMap=null,this._memoizedMap=null,this._newMemoizedMap=null,this._memoizedRoot=null,this._midRender=!1},e.prototype.getVirtualComponentByKey=function(e){return this._memoizedMap&&this._memoizedMap[e]?this._memoizedMap[e].virtualComponent:null},e.prototype.getReactElementByKey=function(e){return this._memoizedMap&&this._memoizedMap[e]?this._memoizedMap[e].reactElement:null},e.prototype.retainElement=function(e){this._midRender&&this._memoizedMap&&(this._newMemoizedMap[e]=this._memoizedMap[e])},e.prototype.addUpdatedEntry=function(e,t,n){this._midRender&&this._newMemoizedMap?this._newMemoizedMap[e]={reactElement:t,virtualComponent:n}:this._memoizedMap&&(this._memoizedMap[e]={reactElement:t,virtualComponent:n})},e.prototype.setIsCompositing=function(e){this._newIsCompositing=e},e.prototype.getIsCompositing=function(){return this._isCompositing},e.prototype.setRoot=function(e){this._memoizedRoot=e},e.prototype.getRoot=function(){return this._memoizedRoot},e.prototype.addCommandWrapper=function(e,t){this._wrapperMap[e]=t},e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return o});var o=function(){function e(){}return Object.defineProperty(e.prototype,"errorMessage",{get:function(){return this._errorMessage},set:function(e){this._errorMessage=e},enumerable:!0,configurable:!0}),Object.defineProperty(e.prototype,"errorDetails",{get:function(){return this._errorDetails},set:function(e){this._errorDetails=e},enumerable:!0,configurable:!0}),e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return d});var o=n(0),r=n(8),i=n(34),s=n(21),a=n(24),l=n(19),c=n(27),u=n(2),p=c.a.CCF+".CustomControlSeeMoreHelper",d=function(){function e(){this._seeMorePopupInfo=null,this._seeMorePopupStatus=-1,this._seeMorePopupAnimDiv=null,this._seeMoreTimeoutHelper=-1,this._animFadeInReference=this._seeMoreFadeIn.bind(this),this._animEndReference=this._seeMoreEnd.bind(this),this.shouldGivePoppedOutDimensions=this._shouldGivePoppedOutDimensions.bind(this)}return e.prototype.destroy=function(){-1!==this._seeMorePopupStatus&&l.a.getInstance().seeMoreClose(),this._seeMorePopupInfo=null,this._seeMorePopupAnimDiv=null,this._animFadeInReference=null,this._animEndReference=null},e.prototype.getSeeMorePopupInfo=function(){return this._seeMorePopupInfo},e.prototype.getSeeMorePopupStatus=function(){return this._seeMorePopupStatus},e.prototype._shouldGivePoppedOutDimensions=function(e){var t=this.getSeeMorePopupInfo(),n=this.getSeeMorePopupStatus();return t&&4!==n&&(e&&0!==n||!e&&3!==n)},e.prototype.seeMorePopup=function(e,t,n,o,r){void 0===o&&(o=!1),void 0===r&&(r=!1);var i=e.getBoundingClientRect();this._seeMoreCallback=t;switch(this._seeMorePopupStatus){case-1:if(!n)return;l.a.getInstance().seeMoreOpen(),this._seeMorePopupStatus=0;var s=document.body.getBoundingClientRect().width,a=!o||i.width>2/3*s?s:i.width>1/3*s?2/3*s:1/3*s,c=s<769,u=a===s&&!c;a-=u?80:0;var p=document.body.getBoundingClientRect().height-(c?0:80),d=.5*p-.5*i.height+(c?0:40),h=(u?40:0)+(u?a:s)/2-i.width/2;this._seeMorePopupInfo={startHeight:i.height,startWidth:i.width,startLeft:i.left,startTop:i.top,endTop:d,endLeft:h,endWidthInner:a-48,endHeightInner:p-48,endWidth:a,endHeight:p,isRTL:r},this._seeMoreCallback(!0);break;case 2:if(n)return;l.a.getInstance().seeMoreClose(),this._seeMorePopupStatus=3,this._seeMoreCallback(!0)}},e.prototype._getPopupDiv=function(e,t,n){switch(this._seeMorePopupStatus){case 0:case 3:return e?n.lastChild:n.parentElement.parentElement;case 4:return e?t?n.lastChild.lastChild:n:n.parentElement.parentElement;case 1:return e?n.lastChild.lastChild:n.parentElement.parentElement}return u.default.Diagnostics.traceInfo(p+"._getPopupDiv","Get pop div success"),n},e.prototype._getCloseElement=function(e){var t=e;if(t){t.id.endsWith("_outer")&&(t=t.firstChild);for(var n=0;n<t.children.length;n++)if("closeButtonContainer"===t.children[n].id)return t.children[n].firstChild}return null},e.prototype.checkOnPopupStatus=function(e,t,n){switch(-1!==this._seeMoreTimeoutHelper&&(window.clearTimeout(this._seeMoreTimeoutHelper),this._seeMoreTimeoutHelper=-1),this._seeMorePopupStatus){case 0:case 3:this._seeMorePopupAnimDiv=this._getPopupDiv(e,t,n),this._seeMorePopupAnimDiv.addEventListener("animationend",this._animFadeInReference),this._seeMorePopupAnimDiv.addEventListener("webkitAnimationEnd",this._animFadeInReference),this._seeMoreTimeoutHelper=window.setTimeout(this._seeMoreFadeIn.bind(this),2500);break;case 4:this._seeMorePopupAnimDiv=this._getPopupDiv(e,t,n),this._seeMorePopupAnimDiv.addEventListener("animationend",this._animEndReference),this._seeMorePopupAnimDiv.addEventListener("webkitAnimationEnd",this._animEndReference),this._seeMoreTimeoutHelper=window.setTimeout(this._seeMoreEnd.bind(this),1e3);break;case 1:this._seeMorePopupAnimDiv=this._getPopupDiv(e,t,n),this._seeMorePopupAnimDiv.addEventListener("animationend",this._animFadeInReference),this._seeMorePopupAnimDiv.addEventListener("webkitAnimationEnd",this._animFadeInReference),this._seeMoreTimeoutHelper=window.setTimeout(this._seeMoreFadeIn.bind(this),1e3)}},e.prototype._seeMoreFadeIn=function(){-1!==this._seeMoreTimeoutHelper&&(window.clearTimeout(this._seeMoreTimeoutHelper),this._seeMoreTimeoutHelper=-1);switch(this._seeMorePopupStatus){case 1:this._seeMorePopupStatus=2,this._getCloseElement(this._seeMorePopupAnimDiv).focus(),this._seeMorePopupAnimDiv.removeEventListener("animationend",this._animFadeInReference),this._seeMorePopupAnimDiv.removeEventListener("webkitAnimationEnd",this._animFadeInReference);break;case 0:this._seeMorePopupStatus=1,this._seeMoreTimeoutHelper=window.setTimeout(this._seeMoreFadeIn.bind(this),1500),this._seeMoreCallback(!1);break;case 3:this._seeMorePopupStatus=4,this._seeMorePopupAnimDiv.removeEventListener("animationend",this._animFadeInReference),this._seeMorePopupAnimDiv.removeEventListener("webkitAnimationEnd",this._animFadeInReference),this._seeMorePopupAnimDiv=null,this._seeMoreCallback(!1)}},e.prototype._seeMoreEnd=function(){-1!==this._seeMoreTimeoutHelper&&(window.clearTimeout(this._seeMoreTimeoutHelper),this._seeMoreTimeoutHelper=-1),this._seeMorePopupAnimDiv.removeEventListener("animationend",this._animEndReference),this._seeMorePopupAnimDiv.removeEventListener("webkitAnimationEnd",this._animEndReference),this._seeMorePopupAnimDiv=null,this._seeMorePopupStatus=-1,this._seeMorePopupInfo=null;this._seeMoreCallback(!0)},e.prototype.renderSpacer=function(e,t){if(void 0===e&&(e=!0),void 0===t&&(t=!1),e&&!t&&(-1===this._seeMorePopupStatus||4===this._seeMorePopupStatus))return u.default.Diagnostics.traceInfo(p+".renderSpacer","Render Spacer return null"),null;var n=1===this._seeMorePopupStatus||2===this._seeMorePopupStatus||3===this._seeMorePopupStatus?{height:"24px",width:"100%",backgroundColor:"white"}:{display:"none"};return o.createElement(r.a,{key:"ccf_spacer",style:n})},e.prototype.renderCloseButton=function(e,t,n,l){if(void 0===t&&(t=!0),void 0===n&&(n=!1),void 0===l&&(l=!1),t&&!n&&(-1===this._seeMorePopupStatus||4===this._seeMorePopupStatus))return null;var c={backgroundColor:"transparent",border:"none",position:"absolute",top:"0px",right:l?"":"-24px",left:l?"-24px":"",height:"48px",width:"48px",textAlign:"center",paddingTop:"16px",cursor:"pointer"},u=1===this._seeMorePopupStatus||2===this._seeMorePopupStatus||3===this._seeMorePopupStatus?{height:"48px",width:"100%",top:"-24px",position:"absolute"}:{display:"none"};return o.createElement(r.a,{key:"closeButtonContainer",id:"closeButtonContainer",style:u},o.createElement(i.a,{key:"closeButton",id:"closeButton",style:c,tabIndex:0,title:"Close Fullscreen Control button",onClick:e,accessibilityLabel:"Close Fullscreen Control button"},o.createElement(s.a,{key:"closeButtonIcon",style:{fontSize:"16px",color:"#333333",position:"absolute",top:"0px",right:"0px",left:"0px",height:"48px",width:"48px",textAlign:"center",paddingTop:"16px",cursor:"pointer"},type:a.a.Close})))},e}()},function(e,t,n){"use strict";n.d(t,"a",function(){return i});var o=n(3),r=function(){return(r=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},i=function(){function e(e){if(this._dependencyMap={},this._propertyValues={},e&&e.manifest&&e.authoringMode)for(var t in this._dependencyMap=this._getDependencyMap(e.manifest),this._dependencyMap)this._propertyValues[t]=null}return e.prototype.handleDependencyUpdate=function(e,t,n){if(!(e&&e.manifest&&e.authoringMode&&t))return Promise.resolve();var i={},s=!1,a=[];for(var l in this._dependencyMap){var c=this._getRawValue(e,l);(!o.c(c)&&c.equals?c.equals(this._propertyValues[l]):c===this._propertyValues[l])||(this._propertyValues[l]=c,i[l]=c,s=!0,this._dependencyMap[l].forEach(function(e){-1===a.indexOf(e)&&a.push(e)}))}if(!s)return Promise.resolve();var u={};for(var l in this._dependencyMap)u[l]={value:this._propertyValues[l],isAuthoringSource:!!i[l]};return t(n,u).then(function(t){var n=r({},t);for(var o in n)-1===a.indexOf(o)&&delete n[o];return Object.keys(n).length>0?e.actions.handleOutputSchemaChange(n):Promise.resolve()})},e.prototype._getRawValue=function(e,t){return e&&e.dynamicData&&e.dynamicData.parameters&&e.dynamicData.parameters[t]&&e.dynamicData.parameters[t].hasOwnProperty("raw")?e.dynamicData.parameters[t].raw:null},e.prototype._getDependencyMap=function(e){return-1!==e.ConstructorName.indexOf("ObjectDetector")?{ModelId:["VisionObjects"]}:-1!==e.ConstructorName.indexOf("FormRecognizer")||-1!==e.ConstructorName.indexOf("FormProcessor")?{ModelId:["FormContent"]}:{}},e}()},function(e,t,n){"use strict";var o=n(0),r=function(){function e(t,n,r,i){this._type=t,this._componentId=n,this._properties=Object.assign({},r),this._children=[],null!=i&&("string"==typeof i||"number"==typeof i||i instanceof e||o.isValidElement(i)?this._children=i:i instanceof Array&&(this._children=i.filter(function(t){return"string"==typeof t||"number"==typeof t||t instanceof e||o.isValidElement(t)}).slice()))}return e.prototype.getVirtualRepresentation=function(t){return new e(this._type,this._componentId,Object.assign(this._properties,t),null)},e.prototype.getType=function(){return this._type},e.prototype.getComponentId=function(){return this._componentId},e.prototype.getProperties=function(){return this._properties},e.prototype.getChildren=function(){return this._children instanceof Array?this._children.slice():this._children},e.prototype.setProperties=function(e){Object.assign(this._properties,e)},e}(),i=n(14),s=n(11),a=n(2),l=n(33),c=n(44),u=function(){function e(e,t){this._externalUtils=t,this._controlId=e.controlId}return e.prototype.addControlId=function(e){null==e&&(e=[]);var t={name:"CustomControlId",value:this._controlId};return e.push(t),e},e.prototype.reportSuccess=function(e,t){return this._externalUtils.xrmProxy.Reporting.reportSuccess(e,this.addControlId(t))},e.prototype.reportFailure=function(e,t,n,o){return this._externalUtils.xrmProxy.Reporting.reportFailure(e,t,n,this.addControlId(o))},e.prototype.reportEvent=function(e){var t=this.addControlId([]);return e.eventParameters.push(t[0]),this._externalUtils.xrmProxy.Reporting.reportEvent(e)},e}(),p=n(70),d=n(28),h=function(){function e(e){this._defaultFormatting={timeZoneUtcOffsetMinutes:(new Date).getTimezoneOffset(),dateTimeFormatInfo:d.CultureInfo.CurrentCulture.dateTimeFormat,numberFormatInfo:d.CultureInfo.CurrentCulture.numberFormat,timeZoneAdjusters:[],formatInfoCultureName:d.CultureInfo.CurrentCulture.name,formatter:p.SimpleFormatter,languagesByCode:{}};var t=e.propBagData.formattingData?Object.assign(this._defaultFormatting.formatter,e.propBagData.formattingData.formatter):this._defaultFormatting.formatter;this._formattingData=Object.assign(this._defaultFormatting,e.propBagData.formattingData,{formatter:t}),this._utilsData=e.propBagData.utilsData,this._adjusters=this._formattingData.timeZoneAdjusters,this._dateTimeFormatInfo=this._formattingData.dateTimeFormatInfo,this._currentCultureInfo=new d.CultureInfo(this._formattingData.formatInfoCultureName,this._formattingData.numberFormatInfo,this._formattingData.dateTimeFormatInfo),this._timeZoneOffsetMinutes=this._formattingData.timeZoneUtcOffsetMinutes}return e.prototype.parseDateFromString=function(e,t){var n={cultureInfo:this._currentCultureInfo};return this._formattingData.formatter.ParseDateFromString(e,t,this._currentCultureInfo,n)},e.prototype.formatDateShort=function(e,t){return t?this._formattingData.formatter.formatShortDateTimeValue(e,this._currentCultureInfo,0,this._timeZoneOffsetMinutes,this._adjusters):this._formattingData.formatter.formatShortDateValue(e,this._currentCultureInfo,0,this._timeZoneOffsetMinutes,this._adjusters)},e.prototype.formatDateLongAbbreviated=function(e){return this._formattingData.formatter.formatDateLongAbbreviated(e,this._currentCultureInfo,0,this._timeZoneOffsetMinutes,this._adjusters)},e.prototype.formatDateLong=function(e){return this._formattingData.formatter.formatLongDateValue(e,this._currentCultureInfo,0,this._timeZoneOffsetMinutes,this._adjusters)},e.prototype.formatDateYearMonth=function(e){return this._formattingData.formatter.formatDateYearMonthValue(e,this._currentCultureInfo,0,this._timeZoneOffsetMinutes,this._adjusters)},e.prototype.formatInteger=function(e){return this._formattingData.formatter.formatIntegerValue(e,this._currentCultureInfo)},e.prototype.formatDecimal=function(e,t){return this._formattingData.formatter.formatDecimalValue(e,this._currentCultureInfo,t)},e.prototype.formatCurrency=function(e,t,n){return this._formattingData.formatter.formatCurrencyValue(e,this._currentCultureInfo,n,t)},e.prototype.formatTime=function(e,t){return this._formattingData.formatter.formatShortDateTimeValue(e,this._currentCultureInfo,t,this._timeZoneOffsetMinutes,this._adjusters)},e.prototype.getWeekOfYear=function(e){return this._utilsData.dateTimeUtils.getWeekOfYear(e,this._dateTimeFormatInfo.firstDayOfWeek,this._dateTimeFormatInfo.calendarWeekRule)},e.prototype.formatDateAsFilterStringInUTC=function(e,t){return t?this._formattingData.formatter.formatSortableDateTimeValue(e,this._currentCultureInfo,0,this._timeZoneOffsetMinutes,this._adjusters):this._formattingData.formatter.formatSortableDateValue(e,this._currentCultureInfo,0)},e.prototype.formatLanguage=function(e){return this._formattingData.formatter.formatLanguageValue(e,this._formattingData.languagesByCode)},e}(),f=n(3),m=n(12),y=function(){function e(e,t){this._customControlProperties=e,this._externalUtils=t}return e.prototype.createElement=function(e,t,n){return new r(e,t?t.id:"",t,n)},e.prototype.createComponent=function(e,t,n){return new r(e,t,n,null)},e.prototype.bindDOMElement=function(e,t){this._externalUtils.bindDOMElement(e,t)},e.prototype.bindDOMComponent=function(e,t){this._externalUtils.bindDOMElement(e,t)},e.prototype.fireEvent=function(e,t){var n=this._customControlProperties.parentDefinedControlProps;if(!f.c(n)&&!f.c(n.eventListeners)){for(var o=-1,r=n.eventListeners,i=0;i<r.length;i++)r[i].eventname===e&&(o=i);if(-1!==o){var s=n.eventListeners[o];for(var i in s.eventhandler)f.c(s.eventhandler[i])||s.eventhandler[i](t)}}},e.prototype.getControlDefaultMapping=function(e,t){return Object(m.h)(e,t)},e.prototype.getPopupService=function(){return this._externalUtils.getPopupService()},e.prototype.requestRender=function(e){this._externalUtils.forceUpdate(e)},e.prototype.unbindDOMComponent=function(e){return this._externalUtils.unbindDOMComponent(e)},e.prototype.updateComponent=function(e,t){this._externalUtils.updateComponent(e,t)},e}(),b=function(){function e(e,t){this._traceLocation="CustomControl.",this._externalUtils=t,this._controlId=e.controlId}return e.prototype.addControlId=function(e){return e+"[CustomControlId = "+this._controlId+"]"},e.prototype.traceError=function(e,t){return this._externalUtils.xrmProxy.Diagnostics.traceError(this._traceLocation+e,this.addControlId(t))},e.prototype.traceWarning=function(e,t){return this._externalUtils.xrmProxy.Diagnostics.traceWarning(this._traceLocation+e,this.addControlId(t))},e.prototype.traceInfo=function(e,t){return this._externalUtils.xrmProxy.Diagnostics.traceInfo(this._traceLocation+e,this.addControlId(t))},e.prototype.traceDebug=function(e,t){return this._externalUtils.xrmProxy.Diagnostics.traceDebug(this._traceLocation+e,this.addControlId(t))},e}(),g=function(){function e(){}return e.prototype.getPredictionSchemaAsync=function(e,t){return a.default.IntelligenceApi.getPredictionSchemaAsync(e,t)},e.prototype.predictAsync=function(e,t){return a.default.IntelligenceApi.predictAsync(e,t)},e.prototype.getPreTrainedModelIdAsync=function(e){return a.default.IntelligenceApi.getPreTrainedModelIdAsync(e)},e.prototype.getLabelsForObjectDetectionModelAsync=function(e){return a.default.IntelligenceApi.getLabelsForObjectDetectionModelAsync(e)},e}(),_=function(){function e(e,t){this._event=e,this._parameters=t}return e.prototype.start=function(){this._stop=this._event.startStopwatch(this._parameters)},e.prototype.stop=function(e){this._stop(e)},e}(),v=n(7),C=function(){function e(e,t){this._customControlProperties=e,this._externalUtils=t,this._globalCommandManagerInitialized=e.globalCommandManagerInitialized,this._internalEventListeners=this._generateInternalEventListeners()}return e.prototype._generateInternalEventListeners=function(){return[{eventname:"systemKeyDown",eventhandler:[this._handleSystemKeydown.bind(this)]}]},e.prototype._handleSystemKeydown=function(e){this._customControlProperties.actions&&this._customControlProperties.actions.fireXrmEvent&&this._customControlProperties.controlId&&this._customControlProperties.actions.fireXrmEvent(this._customControlProperties.controlId.split(".")[0],this._customControlProperties.id,this._customControlProperties.contextToken,0,e)},e.prototype.doesControlExist=function(e){return this._customControlProperties&&this._customControlProperties.actions&&this._customControlProperties.actions.loadManifest?this._customControlProperties.actions.loadManifest(e).then(function(){return!0},function(){return!1}):Promise.resolve(!1)},e.prototype.beginSecureSessionForResource=function(e,t,n,o){return a.default.Utils.beginSecureSessionForResource(e,t,n,o)},e.prototype.createPerformanceMarker=function(e){i.a.createPerformanceEvent(e,this._customControlProperties.logLevel,this._customControlProperties.configuration.CustomControlId).createMarker()},e.prototype.createPerformanceStopwatch=function(e){return new _(i.a.createPerformanceEvent(e,this._customControlProperties.logLevel,this._customControlProperties.configuration.CustomControlId))},e.prototype.log=function(e,t,n){this._customControlProperties.propBagMethods.utils.logMessage(e,t,n)},e.prototype.getEntityMetadata=function(e,t){return a.default.Utils.getEntityMetadata(e,t)},e.prototype.getEntitiesMetadata=function(e){if(a.default.Utils.getEntitiesMetadata)return a.default.Utils.getEntitiesMetadata(e);var t=[];for(var n in e)t.push(a.default.Utils.getEntityMetadata(n,e[n]));return Promise.all(t).then(function(e){return e})},e.prototype.getParentControlName=function(){return this._customControlProperties&&this._customControlProperties.parentContextToken&&this._customControlProperties.parentContextToken.controlName||""},e.prototype.getResourceString=function(e,t){return a.default.Utils.getResourceString(e,t)},e.prototype.isFeatureEnabled=function(e){return a.default.Utils.isFeatureEnabled(e)},e.prototype.canOpenUrl=function(e){return a.default.Utils.canOpenUrl(e)},e.prototype.getFormId=function(e,t){return a.default.Utils.getFormId(e,t)},e.prototype.lookupObjects=function(e){return a.default.Utils.lookupObjects(e)},e.prototype.bindDOMElement=function(e,t){this._externalUtils.bindDOMElement(e,t)},e.prototype.fireEvent=function(e,t){var n=this._customControlProperties.parentDefinedControlProps;if(!f.c(n)&&!f.c(n.eventListeners)){for(var o=-1,r=n.eventListeners,i=0;i<r.length;i++)r[i].eventname===e&&(o=i);if(-1!==o){var s=n.eventListeners[o];for(var i in s.eventhandler)f.c(s.eventhandler[i])||s.eventhandler[i](t)}}if(!f.c(this._internalEventListeners))for(var a=0;a<this._internalEventListeners.length;a++)if(this._internalEventListeners[a].eventname===e){s=this._internalEventListeners[a];for(var l in s.eventhandler)f.c(s.eventhandler[l])||s.eventhandler[l](t)}},e.prototype.getControlDefaultMapping=function(e,t){return Object(m.h)(e,t)},e.prototype.getPopupService=function(){return this._externalUtils.getPopupService()},e.prototype.requestRender=function(e){this._externalUtils.forceUpdate(e)},e.prototype.unbindDOMComponent=function(e){return this._externalUtils.unbindDOMComponent(e)},e.prototype.updateComponent=function(e,t){this._externalUtils.updateComponent(e,t)},e.prototype.createCrmUri=function(e){return this._customControlProperties&&this._customControlProperties.propBagData&&this._customControlProperties.propBagData.clientData?Object(s.f)(e,this._customControlProperties.propBagData.clientData):e},e.prototype.createServerUri=function(e){return this._customControlProperties&&this._customControlProperties.propBagData&&this._customControlProperties.propBagData.clientData?Object(s.f)(e,this._customControlProperties.propBagData.clientData):e},e.prototype.openInBrowser=function(e){e&&window.open(e)},e.prototype.getServiceUri=function(){return""},e.prototype.setState=function(e){var t=this._customControlProperties.personalizationConfiguration;return t&&("form"===t.areaType&&this._customControlProperties.actions.setFieldControlPersonalization(t,e),"grid"===t.areaType&&this._customControlProperties.actions.setGridControlPersonalization(t,e),"dashboard"===t.areaType&&this._customControlProperties.actions.setDashboardControlPersonalization(t,e)),this._customControlProperties.propBagMethods.utils.setState(e)},e.prototype.crmUrlEncode=function(e){return this._customControlProperties.propBagData.utilsData.encoder.CrmUrlEncode(e)},e.prototype.hasEntityPrivilege=function(e,t,n){return this._customControlProperties.propBagData.utilsData.hasEntityPrivilege(e,t,n)},e.prototype.crmHtmlEncode=function(e){return this._customControlProperties.propBagData.utilsData.encoder.CrmHtmlEncode(e)},e.prototype.isNullOrUndefined=function(e){return f.c(e)},e.prototype.isNullOrEmptyString=function(e){return f.b(e)},e.prototype.notifyOutputChanged=function(){},e.prototype.eventListenerExists=function(e){var t=this._customControlProperties.parentDefinedControlProps;if(!f.c(t)&&!f.c(t.eventListeners))for(var n=t.eventListeners,o=0;o<n.length;o++)if(n[o].eventname.toLowerCase()===e.toLowerCase())return!0;return!1},e.prototype.getElementByRef=function(){return null},e.prototype.disablePanoramaScroll=function(){return!1},e.prototype.scrollToView=function(){},e.prototype.setNotification=function(){return!1},e.prototype.clearNotification=function(){return!1},e.prototype.triggerOfflineMetadataSync=function(){return this._customControlProperties.actions.triggerOfflineMetadataSync()},e.prototype.addGlobalNotification=function(e,t,n,o,r,i){return a.default.addGlobalNotification(e,t,n,o,r,i)},e.prototype.clearGlobalNotification=function(e){return a.default.clearGlobalNotification(e)},e.prototype.clearGlobalNotifications=function(){return a.default.clearGlobalNotifications()},e.prototype.retrieveChartDrilldownAttributes=function(e){return this._customControlProperties.actions.retrieveChartDrilldownAttributes(e)},e.prototype.retrieveFormWithAttributes=function(e,t,n){return this._customControlProperties.actions.retrieveFormWithAttributes(e,t,n)},e.prototype.getEntityName=function(e){return a.default.Utils.getEntityName(e)},e.prototype.retrieveRecordCommand=function(e,t,n,o,r,i){var s=this,l=this._customControlProperties&&this._customControlProperties.manifest&&this._customControlProperties.manifest.ConstructorName?this._customControlProperties.manifest.ConstructorName:null,c=this._customControlProperties.id;if("crm_header_global"===t){if(this._globalCommandManagerInitialized)return this._customControlProperties.actions.retrieveRecordCommand(e,t,this._customControlProperties.contextToken,n,o,r,i,l,!0,c);var u=this._externalUtils.getGlobalCommandManagerPromise();if(u)return u.isResolved()?(this._globalCommandManagerInitialized=!0,this._customControlProperties.actions.retrieveRecordCommand(e,t,this._customControlProperties.contextToken,n,o,r,i,l,!0,c)):u.then(function(){return s._globalCommandManagerInitialized=!0,s._customControlProperties.actions.retrieveRecordCommand(e,t,s._customControlProperties.contextToken,n,o,r,i,l,!0,c)},function(){var e=new Error("Global command manager initialization failed");throw a.default.Reporting.reportFailure(v.a+".Models",e,"Rejected promise",[{name:"commandManagerId",value:t},{name:"APIName",value:v.a+".Models.PropertyClasses.Utility.retrieveRecordCommand"}]),e});var p=this._customControlProperties.actions.addPendingCommandManagerId(c,this._customControlProperties.contextToken,this._customControlProperties.controlId,t);return this._externalUtils.setGlobalCommandManagerPromise(p),p.then(function(){return s._globalCommandManagerInitialized=!0,s._customControlProperties.actions.retrieveRecordCommand(e,t,s._customControlProperties.contextToken,n,o,r,i,l,!0,c)})}return this._customControlProperties.actions.retrieveRecordCommand(e,t,this._customControlProperties.contextToken,n,o,r,i,l,!0,c)},e}(),I=function(){function e(e){this._performanceEvents={},this._customControlProperties=e}return e.prototype.createPerformanceStopwatch=function(e,t,n){return void 0===n&&(n=!1),this._performanceEvents[e]||(this._performanceEvents[e]=i.a.createPerformanceEvent(e,n?void 0:this._customControlProperties.logLevel,this._customControlProperties.configuration.CustomControlId)),this._performanceEvents[e].startStopwatch(t)},e.prototype.trackWork=function(e){return i.a.trackWork(e)},e.prototype.addKeyPerformanceIndicator=function(e,t,n){i.a.addKeyPerformanceIndicator(e,t,n)},e.prototype.addKeyPerformanceIndicatorOnIdle=function(e,t){i.a.addKeyPerformanceIndicatorOnIdle(e,t)},e}(),P=function(){return function(e,t){this._customControlExposedOrgSettings=e.propBagData.clientData.orgSettingsData,this._xrmProxy=t.xrmProxy,this.languageId=this._xrmProxy.OrgSettings.languageId,this.attributes=this._xrmProxy.OrgSettings.attributes,this.uniqueName=this._xrmProxy.OrgSettings.uniqueName,this.isAutoSaveEnabled=this._xrmProxy.OrgSettings.isAutoSaveEnabled,this.isRTL=this._customControlExposedOrgSettings.isRTL,this.fiscalYearStartDate=this._customControlExposedOrgSettings.fiscalYearStartDate,this.fiscalPeriodFormat=this._customControlExposedOrgSettings.fiscalPeriodFormat,this.fiscalPeriodType=this._customControlExposedOrgSettings.fiscalPeriodType,this.fiscalYearFormatYear=this._customControlExposedOrgSettings.fiscalYearFormatYear,this.fiscalYearFormatPrefix=this._customControlExposedOrgSettings.fiscalYearFormatPrefix,this.fiscalYearFormatSuffix=this._customControlExposedOrgSettings.fiscalYearFormatSuffix,this.fiscalYearDisplayCode=this._customControlExposedOrgSettings.fiscalYearDisplayCode,this.fiscalPeriodConnector=this._customControlExposedOrgSettings.fiscalPeriodConnector,this.showWeekNumber=this._customControlExposedOrgSettings.showWeekNumber,this.boundDashboardDefaultCardExpanded=this._customControlExposedOrgSettings.boundDashboardDefaultCardExpanded,this.allowUnresolvedPartiesOnEmailSend=this._customControlExposedOrgSettings.allowUnresolvedPartiesOnEmailSend,this.webResourceHash=this._customControlExposedOrgSettings.webResourceHash,this.enableBingMapsIntegration=this._customControlExposedOrgSettings.enableBingMapsIntegration,this.bingMapsApiKey=this._customControlExposedOrgSettings.bingMapsApiKey,this.availableBingMapLocales=this._customControlExposedOrgSettings.availableBingMapLocales,this.excludedCountriesForMaps=this._customControlExposedOrgSettings.excludedCountriesForMaps,this.bFDatacenter=this._customControlExposedOrgSettings.bFDatacenter,this.securitySettingForEmail=this._customControlExposedOrgSettings.securitySettingForEmail,this.appointmentRichEditorExperience=this._customControlExposedOrgSettings.appointmentRichEditorExperience,this.gridTotalRecordCountLimit=this._customControlExposedOrgSettings.gridTotalRecordCountLimit}}(),E=function(){function e(e,t){this._formattingData=e.propBagData.formattingData,this._xrmProxy=t.xrmProxy,this._utilsData=e.propBagData.utilsData,this.userId=this._xrmProxy.UserSettings.userId,this.userName=this._xrmProxy.UserSettings.userName,this.dateFormattingInfo=this._formattingData.dateTimeFormatInfo,this.numberFormattingInfo=this._formattingData.numberFormatInfo,this.isRTL=this._xrmProxy.UserSettings.isRTL,this.languageId=this._xrmProxy.UserSettings.languageId,this.securityRoles=this._xrmProxy.UserSettings.securityRoles,this.isHighContrastEnabled=this._xrmProxy.UserSettings.isHighContrastEnabled,this.timeZoneUtcOffsetMinutes=this._formattingData.timeZoneUtcOffsetMinutes,this.pagingLimit=this._xrmProxy.UserSettings.pagingLimit}return e.prototype.getTimeZoneOffsetMinutes=function(e){return e?this._formattingData.timeZoneUtcOffsetMinutes+this._utilsData.dateTimeUtils.getDSTAdjustmentMinutes(e,this._formattingData.timeZoneAdjusters):this._formattingData.timeZoneUtcOffsetMinutes},e}(),S=function(){function e(e,t){this._externalUtils=t,this._customControlProperties=e,this._xrmProxy=t.xrmProxy}return e.prototype.getClient=function(){return this._externalUtils.xrmProxy.Client.getClient()},e.prototype.isOffline=function(){return"Offline"===this._externalUtils.xrmProxy.Client.getClientState()},e.prototype.getFormFactor=function(){return this._externalUtils.xrmProxy.Client.getFormFactor()},e.prototype.getClientState=function(){return null},e.prototype.updateClientBag=function(e){var t=this._customControlProperties.propBagData.formattingData,n=this._customControlProperties.propBagData.clientData,o=this._customControlProperties.propBagData.utilsData;this.formFactor=n.formFactor||this.getFormFactor(),this.userAgent=n.userAgent,this.languageCode=n.languageCode?n.languageCode.toString():null,this.isRTL=this._xrmProxy.UserSettings.isRTL,this.locale=n.locale,this.orgSettings=n.orgSettingsData,this.dateFormattingInfo=t.dateTimeFormatInfo,this.numberFormattingInfo=t.numberFormatInfo,this.userTimeZoneUtcOffsetMinutes=t.timeZoneUtcOffsetMinutes,this.getUserTimeZoneUtcOffset=function(e){return t.timeZoneUtcOffsetMinutes+o.dateTimeUtils.getDSTAdjustmentMinutes(e,t.timeZoneAdjusters)},this.allocatedWidth=f.c(e.allocatedWidth)?-1:e.allocatedWidth,this.allocatedHeight=f.c(e.allocatedHeight)?-1:e.allocatedHeight,this.trackContainerResize=e.trackResize,this.setFullScreen=e.updateFullscreen,this.setFullscreen=e.updateFullscreen,this.ignoreSelfUpdates=e.ignoreUpdates,this.disableScroll=n.disableScroll||!1},e}(),D=function(){function e(e){if(this._customControlProperties=e,e.manifest&&null!==e.manifest.Properties.DataSetDefinitions)for(var t in e.manifest.Properties.DataSetDefinitions)e.manifest.Properties.DataSetDefinitions[t].Primary&&(this._paramKey=t)}return e.prototype.openEditForm=function(e,t,n,o,r){if(t)this._customControlProperties.propBagMethods.navigation.openEditForm(e,t,n,o,r);else{var i=e.entityName||e.LogicalName,s=e.id||e.Id&&e.Id.toString(),l=this._getRecordSetQueryFromProps(this._paramKey);a.default.openForm({entityName:i,entityId:s,recordSetQueryKey:l,processInstanceId:n,selectedStageId:o,isCrossEntityNavigate:r})}},e.prototype.openGridPage=function(e,t,n,o,r){this._customControlProperties.propBagMethods.navigation.openGridPage(e,t,n,null,o,r)},e.prototype.openGrid=function(e,t,n,o,r,i,s){this._customControlProperties.propBagMethods.navigation.openGridPage(e,t,n,o,r,i,s)},e.prototype.openDashboard=function(e){this._customControlProperties.propBagMethods.navigation.openDashboard(e)},e.prototype.openCreateForm=function(e,t,n){this._customControlProperties.propBagMethods.navigation.openCreateForm(e,t,n)},e.prototype.openForm=function(e,t){return e.recordSetQueryKey=this._getRecordSetQueryFromProps(this._paramKey),this._customControlProperties.parentDefinedControlProps&&this._customControlProperties.parentDefinedControlProps.propertyBagOverrides&&this._customControlProperties.parentDefinedControlProps.propertyBagOverrides.openForm?this._customControlProperties.parentDefinedControlProps.propertyBagOverrides.openForm(e,t):a.default.openForm(e,t)},e.prototype.openSearch=function(e){this._customControlProperties.propBagMethods.navigation.openSearch(e)},e.prototype.openPowerBIFullScreenPage=function(e,t,n,o,r,i,s){this._customControlProperties.propBagMethods.navigation.openPowerBIFullScreenPage(e,t,n,o,r,i,s)},e.prototype.openUrl=function(e,t){a.default.openUrl(e,t)},e.prototype.openUrlWithProtocol=function(e,t){this._customControlProperties.propBagMethods.navigation.openUrlWithProtocol(e,t)},e.prototype.openPhoneNumber=function(e,t,n,o,r){var i=n||this._customControlProperties.propBagData.modeData.entityTypeName,s=o||this._customControlProperties.propBagData.modeData.entityId,a=r||this._customControlProperties.propBagData.modeData.entityRecordName;this._customControlProperties.propBagMethods.navigation.openPhoneNumber(e,i,s,a,t)},e.prototype.openMaps=function(e){this._customControlProperties.propBagMethods.navigation.openMaps(e)},e.prototype.openMap=function(e){this._customControlProperties.propBagMethods.navigation.openMap(e)},e.prototype.openAlertDialog=function(e,t){return a.default.openAlertDialog(e,t)},e.prototype.openConfirmDialog=function(e,t){return a.default.openConfirmDialog(e,t)},e.prototype.openErrorDialog=function(e){return a.default.openErrorDialog(e)},e.prototype.openDialog=function(e,t,n){return a.default.openDialog(e,t,n)},e.prototype.openFile=function(e,t){return a.default.openFile(e,t)},e.prototype.openTaskFlow=function(e,t,n){return a.default.openTaskFlow(e,t,n)},e.prototype.openWebResource=function(e,t,n){a.default.openWebResource(e,t,n)},e.prototype._getRecordSetQueryFromProps=function(e){var t=e&&this._customControlProperties.dynamicData?this._customControlProperties.dynamicData.parameters[e]:null;return this._customControlProperties.actions&&this._customControlProperties.actions.getRecordSetQueryKey&&null!==t?this._customControlProperties.actions.getRecordSetQueryKey(t):null},e}(),w=function(){function e(e,t,n){this.hasFocus=!0,this.isPreview=!1,this.isActive=!1,this.isRead=!1,this._customControlProperties=e,this._descriptor=e?e.descriptor:null,this._modeData=e?e.propBagData.modeData:null,this._hostData=n,this.allocatedWidth=f.c(this._hostData.allocatedWidth)?-1:this._hostData.allocatedWidth,this.allocatedHeight=f.c(this._hostData.allocatedHeight)?-1:this._hostData.allocatedHeight,this.trackContainerResize=this._hostData.trackResize,this.setFullScreen=this._hostData.updateFullscreen,this.isControlDisabled=!!this._descriptor&&this._descriptor.Disabled,this.isVisible=!this._descriptor||this._descriptor.Visible,this.label=this._descriptor&&this._descriptor.ShowLabel?this._descriptor.Label:"",this.accessibilityLabel=this._descriptor?this._descriptor.ShowLabel?null:this._descriptor.Label:null,this.isOffline=this._modeData.isOffline,this.isRead=!!this._modeData.isRead,this.fullPageParam=e&&e.descriptor&&e.descriptor.FullPageParamers?e.descriptor.FullPageParamers:null,this.rowSpan=this._customControlProperties?this._customControlProperties.rowSpan:0,this.contextInfo={entityTypeName:this._modeData&&this._modeData.entityTypeName,entityId:this._modeData&&this._modeData.entityId,entityRecordName:this._modeData&&this._modeData.entityRecordName}}return e.prototype.setNotification=function(e,t){if(e&&e.trim().length>0&&this.isVisible&&!this.isControlDisabled&&this._customControlProperties.descriptor.parentFieldSectionItem){var n=this._customControlProperties.descriptor.parentFieldSectionItem;return this._customControlProperties.propBagMethods.mode.setNotification(e,t,this._customControlProperties.id,n,this._customControlProperties.contextToken,this._modeData.entityTypeName,this._modeData.entityId)}return!1},e.prototype.clearNotification=function(e){if(this._customControlProperties.descriptor.parentFieldSectionItem){var t=this._customControlProperties.descriptor.parentFieldSectionItem;return this._customControlProperties.propBagMethods.mode.clearNotification(this._customControlProperties.id,t,this._customControlProperties.contextToken,this._modeData.entityTypeName,this._modeData.entityId,e)}return!1},e.prototype.setControlState=function(e,t){var n=this._customControlProperties.personalizationConfiguration;if(n){if(t)return void(this._customControlProperties.manifest.CustomControlId&&this._customControlProperties.actions.setGlobalControlPersonalization(this._customControlProperties.manifest.CustomControlId,e));"form"===n.areaType&&this._customControlProperties.actions.setFieldControlPersonalization(n,e),"grid"===n.areaType&&this._customControlProperties.actions.setGridControlPersonalization(n,e),"dashboard"===n.areaType&&this._customControlProperties.actions.setDashboardControlPersonalization(n,e)}return this._customControlProperties.propBagMethods.utils.setState(e)},e.prototype.blur=function(){},e.prototype.focus=function(){},e}(),O=function(){function e(e){this._bagProps=e.propBagMethods.device}return e.prototype.captureImage=function(e){return a.default.captureImage(e)},e.prototype.captureAudio=function(){return a.default.captureAudio()},e.prototype.captureVideo=function(){return a.default.captureVideo()},e.prototype.pickFile=function(e){return a.default.pickFile(e)},e.prototype.getBarcodeValue=function(){return a.default.getBarcodeValue()},e.prototype.getCurrentPosition=function(){return a.default.getCurrentPosition()},e.prototype.isGetBarcodeValueOperationAvailable=function(){return this._bagProps.isGetBarcodeValueOperationAvailable()},e.prototype.isTakePictureOperationAvailable=function(){return this._bagProps.isTakePictureOperationAvailable()},e.prototype.isCaptureVideoOperationAvailable=function(){return this._bagProps.isCaptureVideoOperationAvailable()},e.prototype.isCaptureAudioOperationAvailable=function(){return this._bagProps.isCaptureAudioOperationAvailable()},e}(),T=function(){function e(){}return e.prototype.getAvailableExternalContexts=function(){return a.default.getAvailableExternalContexts()},e.prototype.getExternalContextProperty=function(e,t,n){return a.default.getExternalContextProperty(e,t,n)},e.prototype.invokeExternalContextAction=function(e,t,n){return a.default.invokeExternalContextAction(e,t,n)},e.prototype.removeExternalContextPropertyListener=function(e,t,n){return a.default.removeExternalContextPropertyListener(e,t,n)},e}(),F=function(){function e(e){this.getPresenceMappedField=e.actions.getPresenceMappedField,this.isPresenceEnabled=e.actions.isPresenceEnabledEntity}return e.prototype.getPresenceMappedField=function(e){return null},e.prototype.isPresenceEnabled=function(e){return null},e}(),M=function(){function e(e){this._themingData=e.propBagData.themingData,this.normalfontcolor=this._themingData.defaultThemingData.normalfontcolor,this.normalfontfamily=this._themingData.defaultThemingData.normalfontfamily,this.normalfontsize=this._themingData.defaultThemingData.normalfontsize,this.solidborderstyle=this._themingData.defaultThemingData.solidborderstyle,this.noneborderstyle=this._themingData.defaultThemingData.noneborderstyle,this.colors=this._themingData.defaultThemingData.colors,this.textbox=this._themingData.defaultThemingData.textbox,this.spacings=this._themingData.defaultThemingData.spacings,this.fontfamilies=this._themingData.defaultThemingData.fontfamilies,this.fontsizes=this._themingData.defaultThemingData.fontsizes,this.breakpoints=this._themingData.defaultThemingData.breakpoints,this.measures=this._themingData.defaultThemingData.measures,this.lookup=this._themingData.defaultThemingData.lookup,this.borders=this._themingData.defaultThemingData.borders,this.shadows=this._themingData.defaultThemingData.shadows,this.buttons=this._themingData.defaultThemingData.buttons}return e.prototype.getEntityColor=function(e){return this._themingData.getEntityColor?this._themingData.getEntityColor(e):""},e.prototype.disableUiTransitions=function(){},e.prototype.rightAlignEdit=function(){},e.prototype.inlineLayout=function(){},e}(),x=function(){function e(e){this._manifest=e.manifest,this._getResource=e.actions.getResource,this._bagPropsResource=e.propBagData.resourcesData}return e.prototype.getString=function(e){return e&&this._bagPropsResource&&this._bagPropsResource.strings[e]?this._bagPropsResource.strings[e]:e},e.prototype.getResource=function(e,t,n){var o=this._manifest.Properties.Resources.filter(function(t){if(t)return t.Name.endsWith(e)})[0];o?this._getResource(o).then(function(e){t(e)},function(){n()}):n()},e}(),A=function(){function e(e){this._customControlProperties=e,this.assignedTabIndex=Object(s.c)(this._customControlProperties),this._accessibilityInternalData={keyboardShortcuts:[]},this.isHighContrastEnabled=Object(s.h)()}return e.prototype.registerShortcut=function(e,t,n,o,r,i){var s=this._customControlProperties.actions.createKeyboardShortcut(e,t,n,o,r,i);this._accessibilityInternalData.keyboardShortcuts.push(s)},e.prototype.getUniqueId=function(e){return Object(s.e)(this._customControlProperties,e)},e.prototype.focusElementById=function(e,t){Object(s.g)(this._customControlProperties,e,t)},e.prototype.blurElementById=function(e,t){Object(s.a)(this._customControlProperties,e,t)},Object.defineProperty(e.prototype,"accessibilityInternalData",{get:function(){return this._accessibilityInternalData},set:function(e){this._accessibilityInternalData=e},enumerable:!0,configurable:!0}),e}(),k=function(){function e(){}return e.prototype.retrieveRecord=function(e,t,n){return a.default.retrieveRecord(e,t,n)},e.prototype.createRecord=function(e,t){return a.default.createRecord(e,t)},e.prototype.updateRecord=function(e,t,n){return a.default.updateRecord(e,t,n)},e.prototype.deleteRecord=function(e,t){return a.default.deleteRecord(e,t)},e.prototype.retrieveMultipleRecords=function(e,t,n){return a.default.retrieveMultipleRecords(e,t,n)},e.prototype.execute=function(e){return a.default.execute(e)},e.prototype.executeMultiple=function(e){return a.default.executeMultiple(e)},e}(),R=function(){function e(e,t){this.updateBag(e),this.getClientUrl=function(){return t.xrmProxy.Page.getClientUrl()}}return e.prototype.updateBag=function(e){var t=e.propBagData.pageData,n=e.propBagData.modeData;this.appId=t.appId,this.entityTypeName=n.entityTypeName,this.entityId=n.entityId,this.isPageReadOnly=t.isPageReadOnly},e}(),L=function(){function e(e,t,n){this._customControlProperties=e,this._externalUtils=t,this._hostData=n}return e.prototype.getInstance=function(e){return new e(this._customControlProperties,this._externalUtils,this._hostData)},e}(),N={base:{font:{landing_48_600:'600 48px "Segoe UI", "-apple-system", BlinkMacSystemFont, Roboto, "Helvetica Neue", Helvetica, Ubuntu, Arial, sans-serif',subheader_34_600:'600 34px "Segoe UI", "-apple-system", BlinkMacSystemFont, Roboto, "Helvetica Neue", Helvetica, Ubuntu, Arial, sans-serif',pageheader_24_600:'600 24px "Segoe UI", "-apple-system", BlinkMacSystemFont, Roboto, "Helvetica Neue", Helvetica, Ubuntu, Arial, sans-serif',sectiontitle_20_600:'600 20px "Segoe UI", "-apple-system", BlinkMacSystemFont, Roboto, "Helvetica Neue", Helvetica, Ubuntu, Arial, sans-serif',smalltitle_16_600:'600 16px "Segoe UI", "-apple-system", BlinkMacSystemFont, Roboto, "Helvetica Neue", Helvetica, Ubuntu, Arial, sans-serif',lrgbody_16_400:'400 16px "Segoe UI", "-apple-system", BlinkMacSystemFont, Roboto, "Helvetica Neue", Helvetica, Ubuntu, Arial, sans-serif',body_14_600:'600 14px "Segoe UI", "-apple-system", BlinkMacSystemFont, Roboto, "Helvetica Neue", Helvetica, Ubuntu, Arial, sans-serif',body_14_400:'400 14px "Segoe UI", "-apple-system", BlinkMacSystemFont, Roboto, "Helvetica Neue", Helvetica, Ubuntu, Arial, sans-serif',cap_12_600:'600 12px "Segoe UI", "-apple-system", BlinkMacSystemFont, Roboto, "Helvetica Neue", Helvetica, Ubuntu, Arial, sans-serif',cap_12_400:'400 12px "Segoe UI", "-apple-system", BlinkMacSystemFont, Roboto, "Helvetica Neue", Helvetica, Ubuntu, Arial, sans-serif',button_14_600:'600 14px "Segoe UI", "-apple-system", BlinkMacSystemFont, Roboto, "Helvetica Neue", Helvetica, Ubuntu, Arial, sans-serif'},font_size:{px12:"12px",px14:"14px",px16:"16px",px20:"20px",px24:"24px",px34:"34px",px48:"48px"},font_weight:{semibold:"600",normal:"400"},font_family:{segoe_ui:'"Segoe UI", "-apple-system", BlinkMacSystemFont, Roboto, "Helvetica Neue", Helvetica, Ubuntu, Arial, sans-serif'},box_shadow:{box_shadow_1:"0px 0.3px 0.9px rgba(0, 0, 0, 0.108), 0px 1.6px 3.6px rgba(0, 0, 0, 0.132)",box_shadow_2:"0px 0.6px 1.8px rgba(0, 0, 0, 0.108), 0px 3.2px 7.2px rgba(0, 0, 0, 0.132)",box_shadow_3:"0px 1.2px 3.6px rgba(0, 0, 0, 0.108), 0px 6.4px 14.4px rgba(0, 0, 0, 0.132)",box_shadow_4:"0px 4.8px 14.4px rgba(0, 0, 0, 0.18), 0px 25.6px 57.6px rgba(0, 0, 0, 0.22)"},color:{grey_10:"#F8F8F9",grey_20:"#F1F2F4",grey_30:"#E8EAEC",grey_40:"#D8DADE",grey_50:"#CED0D4",grey_60:"#C6C8CC",grey_90:"#A4A6AC",grey_130:"#6E6F77",grey_150:"#3A3C42",grey_160:"#31333A",grey_190:"#1F2126"}},control:{button:{border_radius:"2px",border:"none",box_shadow:"0px 2px 4px rgba(0, 0, 0, 0.14)",font:'600 14px/20px "Segoe UI", "-apple-system", BlinkMacSystemFont, Roboto, "Helvetica Neue", Helvetica, Ubuntu, Arial, sans-serif',height:"32px",min_width:"100px",padding:"0 20px",_disabled:{background_color:"#E8EAEC",text_color:"#A4A6AD"},_enabled:{cursor:"pointer",_hover:{box_shadow:"0px 1.2px 3.6px rgba(0, 0, 0, 0.12), 0px 6.4px 7.2px rgba(0, 0, 0, 0.1)"},_primary:{text_color:"white",background_color:"#2266E3",_hover:{text_color:"#2266E3",background_color:"white"}},_secondary:{text_color:"#2266E3",background_color:"white",_hover:{text_color:"white",background_color:"#2266E3"}}}},label:{font:'600 12px/16px "Segoe UI", "-apple-system", BlinkMacSystemFont, Roboto, "Helvetica Neue", Helvetica, Ubuntu, Arial, sans-serif',text_color:"#6E6F77",_required:{asterisk_color:"#A80000"}},text_input:{box_sizing:"border-box",font:'400 14px/20px "Segoe UI", "-apple-system", BlinkMacSystemFont, Roboto, "Helvetica Neue", Helvetica, Ubuntu, Arial, sans-serif',height:"32px",border_radius:"2px 2px 0 0",padding:"6px",border_width:"0 0 1px 0",border_color:"#A4A6AC",_disabled:{text_color:"#A4A6AD",background_color:"#E8EAEC"},_enabled:{text_color:"#1F2126",background_color:"transparent",_valid:{_hover:{border_color:"#2266E3"},_focus:{border_color:"#2266E3"}},_invalid:{border_color:"#A80000"}}},form_field:{text_input_to_label_margin_top:"4px"}}},B=new(function(){function e(){this._map={}}return e.prototype.GetThemeData=function(e,t){t||(t=N);var n=e.ConstructorName;if(this._map.hasOwnProperty(n))return this._map[n];if(!e.DesignMap||!e.DesignMap.DesignMap)return{};var o={};for(var r in e.DesignMap.DesignMap){for(var i=e.DesignMap.DesignMap[r],s=i.split("."),a=t,l=0;l<s.length;l++){if(!a){a=i;break}a=a[s[l]]}o[r]=a||i}return this._map[n]=o,o},e}());n.d(t,"a",function(){return U});var U=function(){function e(e,t){this._accessibilityInternalData={keyboardShortcuts:[]};var n=new L(e,t),o=i.a.createPerformanceEvent("PropertyBag.constructor",e.logLevel).startStopwatch({controlId:e.controlId,manifestControlName:e.manifest.CustomControlId,parentId:Object(s.i)(e),level:(0).toString()});this._bagObject={formatting:n.getInstance(h),factory:n.getInstance(y),navigation:n.getInstance(D),reporting:n.getInstance(u),diagnostics:n.getInstance(b),resources:n.getInstance(x),theming:n.getInstance(M),design:B.GetThemeData(e.manifest,e.designLanguage),performance:n.getInstance(I),utils:n.getInstance(C),orgSettings:n.getInstance(P),userSettings:n.getInstance(E),offline:t.xrmProxy.Offline,learningPath:null,page:n.getInstance(R),webAPI:null,intelligenceApi:null,client:n.getInstance(S),parameters:{labelForPrefix:{type:"",raw:e.descriptor.DomId+"-"+e.descriptor.Id+"-"+e.descriptor.Id,error:!1,errorMessage:"",security:null}},mode:null,accessibility:null,updatedProperties:[],device:n.getInstance(O),externalContext:n.getInstance(T),communicationChannel:null},o()}return e.prototype.generateBag=function(e,t){var n=new L(e,null,t),o=i.a.createPerformanceEvent("PropertyBag.generateBag",e.logLevel).startStopwatch({controlId:e.controlId,manifestControlName:e.manifest.CustomControlId,parentId:Object(s.i)(e),level:1..toString()});return this._bagObject.accessibility=n.getInstance(A),this._bagObject.mode=n.getInstance(w),this._bagObject.parameters=this._updateLatestParameters(e),this._bagObject.children=this._getChildren(e.children),this._bagObject.resources=n.getInstance(x),this._bagObject.webAPI=n.getInstance(k),this._bagObject.intelligenceApi=n.getInstance(g),this._bagObject.offline=a.default.Offline,this._bagObject.learningPath=this._getLearningPathBag(e),this._bagObject.updatedProperties=this._getUpdatedPropertiesBag(e,t),this._bagObject.communicationChannel=n.getInstance(F),this._bagObject.decorators=null!=e.parentDefinedControlProps?e.parentDefinedControlProps.decorators:null,this._accessibilityInternalData=this._bagObject.accessibility.accessibilityInternalData,this._bagObject.client.updateClientBag(t),null!=e.propBagData.pageData&&this._bagObject.page.updateBag(e),o(),this._bagObject.utils.setNotification=this._bagObject.mode.setNotification.bind(this._bagObject.mode),this._bagObject.utils.clearNotification=this._bagObject.mode.clearNotification.bind(this._bagObject.mode),this._bagObject},e.prototype._getChildren=function(e){if(this._memoizedChildrenRaw!==e){this._memoizedChildrenRaw=e;var t={};for(var n in this._memoizedChildrenRaw){var o=this._memoizedChildrenRaw[n];t[n]=new r(o.CustomControlId,n,{parameters:o.Parameters},null)}this._memoizedChildrenConverted=t}return this._memoizedChildrenConverted},e.prototype._updateLatestParameters=function(e){var t={labelForPrefix:this._bagObject.parameters.labelForPrefix};e.dynamicData.generateDummySystemProps&&Object.assign(t,{deviceSizeMode:{Usage:1,Static:!0,Type:"WholeNumber.None",Value:0,Primary:!1},viewportSizeMode:{Usage:1,Static:!0,Type:"WholeNumber.None",Value:0,Primary:!1},scope:{Usage:1,Static:!0,Type:"WholeNumber.None",Value:1,Primary:!1},syncError:{Usage:1,Static:!0,Type:"TwoOptions",Value:!1,Primary:!1},isEmpty:{Usage:1,Static:!0,Type:"TwoOptions",Value:!1,Primary:!1}});var n=e.dynamicData&&e.dynamicData.parameters,o=function(o){var r=n[o];if(r&&r.attributes&&r.attributes.SourceType&&2===r.attributes.SourceType){var i=e.propBagData.modeData.entityTypeName,a=e.propBagData.modeData.entityId,c=r.attributes.LogicalName;r.attributes.recalculate=function(){e.actions.executeRollupRequest({entityType:i,id:a},c)}}if(n[o]&&n[o].getLatestData){var u=n[o],p=u.getLatestData();if(u&&u.ensureLookupMetaDataInitialization){if(!(e.descriptor.Parameters&&e.descriptor.Parameters.delayMetadataInitialization))u.ensureLookupMetaDataInitialization({retrieveLookupMetadataAction:e.actions.retrieveLookupMetadataAction,refreshDataSetParameter:e.actions.refreshDataSetParameter})}u.linkToParameter(p,{retrieveAction:e.actions.retrieveLookupData,retrieveViewAction:e.actions.retrieveView,retrieveViewSelectorAction:e.actions.retrieveViewSelector,retrieveLookupMetadataAction:e.actions.retrieveLookupMetadataAction,retrieveRecordDataForForm:e.actions.retrieveRecordDataForForm,updateFieldValue:e.actions.updateFieldValue,saveEmbeddedEntity:e.actions.saveEmbeddedEntity,refreshDataSetParameter:e.actions.refreshDataSetParameter,retrieveDataSetLookupCellParameter:e.actions.retrieveDataSetLookupCellParameter,executeAddOnLoad:e.actions.executeAddOnLoad,setPowerBISignedInState:e.actions.setPowerBISignedInState,beginSecureSessionForResource:e.actions.beginSecureSessionForResource,executeNotifyHandlersThatEventOccurred:e.actions.executeNotifyHandlersThatEventOccurred,addSessionTab:e.actions.addSessionTab,closeSessionTab:e.actions.closeSessionTab,updateSessionTab:e.actions.updateSessionTab,closeAllSessionTabs:e.actions.closeAllSessionTabs,dismissMessage:e.actions.dismissMessage,markActiveTab:e.actions.markActiveTab,initializeReferencePanelControl:e.actions.initializeReferencePanelControl,cleanReferencePanelState:e.actions.cleanReferencePanelState,openDatasetItem:s.m.bind(null,e,p,o),updateControlMemoizedDataSet:e.actions.updateControlMemoizedDataSet,executeRollupRequest:e.actions.executeRollupRequest,loadWebResource:e.actions.loadWebResource,updateChartFilterExpression:e.actions.updateChartFilterExpression,sendLookupRequest:e.actions.sendLookupRequest,runPreSearch:e.actions.runPreSearch});var d=u;if(d.applyDataSetInputs){var h=d.applyDataSetInputs(p),f=p;if(0!==h)switch(h){case 1:f.refresh&&f.refresh();break;case 2:f.paging&&f.paging.hasNextPage&&f.paging.loadNextPage&&f.paging.loadNextPage();break;case 3:f.paging&&f.paging.hasPreviousPage&&f.paging.loadPreviousPage&&f.paging.loadPreviousPage();break;case 6:var m=n[o]&&n[o]._wrapper&&n[o]._wrapper.previousAppliedSubParametersInput.pagingInput?n[o]._wrapper.previousAppliedSubParametersInput.pagingInput.raw:null,y=m?JSON.parse(m).firstPageNumber:null;f.paging&&f.paging.loadExactPage&&f.paging.loadExactPage(y)}}var b=l.a.getWrapperByCommandManagerId(e.id+":"+e.controlId);b&&p.getTargetEntityType&&b.linkParameterMethod(p),t[o]=p}else t[o]=n[o]};for(var r in n)o(r);return t},e.prototype.getAccessibilityData=function(){return this._accessibilityInternalData},e.prototype.getLearningPathBag=function(){return this._bagObject.learningPath},e.prototype.getCommunicationBag=function(){return this._bagObject.communicationChannel},e.prototype._getLearningPathBag=function(e){var t=c.a.getLearningPathControlId(e);return{DOMAttributeName:c.a.LEARNING_PATH_ATTRIBUTE,baseControlId:t}},e.prototype._getUpdatedPropertiesBag=function(e,t){var n=[];for(var o in t&&t.updatedProperties&&(n=t.updatedProperties),e.dynamicData.parameters)if(e.dynamicData.parameters[o]&&e.dynamicData.parameters[o].getUpdatedPropertiesDic){var r=e.dynamicData.parameters[o].getUpdatedPropertiesDic();for(var i in r)r[i]&&-1===n.indexOf(i)&&n.push(i);e.dynamicData.parameters[o].clearUpdatedPropertiesDic&&e.dynamicData.parameters[o].clearUpdatedPropertiesDic()}return n},e}()},function(e,t,n){"use strict";var o=function(){function e(){}return e._outerOutKeyframeGen=function(e){var t,n=e.endHeight/e.startHeight,o=e.endWidth/e.startWidth;return(t={})["0%"]={left:e.startLeft+"px",top:e.startTop+"px",transform:"scaleX(1) scaleY(1)"},t["25%"]={left:e.startLeft+"px",top:e.startTop+"px",transform:"scaleX(1) scaleY(1)"},t["65%"]={left:e.endLeft+"px",top:e.endTop+"px",transform:"scaleX(1) scaleY(1)"},t["70%"]={left:e.endLeft+"px",top:e.endTop+"px",transform:"scaleX(1) scaleY("+n+")"},t["75%"]={left:e.endLeft+"px",top:e.endTop+"px",transform:"scaleX("+o+") scaleY("+n+")"},t["100%"]={left:e.endLeft+"px",top:e.endTop+"px",transform:"scaleX("+o+") scaleY("+n+")"},t},e._outerInKeyframeGen=function(e){var t,n=e.endHeight/e.startHeight,o=e.endWidth/e.startWidth;return(t={})["100%"]={left:e.startLeft+"px",top:e.startTop+"px",transform:"scaleX(1) scaleY(1)"},t["75%"]={left:e.startLeft+"px",top:e.startTop+"px",transform:"scaleX(1) scaleY(1)"},t["35%"]={left:e.endLeft+"px",top:e.endTop+"px",transform:"scaleX(1) scaleY(1)"},t["30%"]={left:e.endLeft+"px",top:e.endTop+"px",transform:"scaleX(1) scaleY("+n+")"},t["25%"]={left:e.endLeft+"px",top:e.endTop+"px",transform:"scaleX("+o+") scaleY("+n+")"},t["0%"]={left:e.endLeft+"px",top:e.endTop+"px",transform:"scaleX("+o+") scaleY("+n+")"},t},e.generateOuterClass=function(t,n,o){var r={animationDuration:"1.5s",animationFillMode:"forwards",animationDirection:"normal",animationIterationCount:"1",animationName:"",position:"fixed",display:"initial",height:o.startHeight+"px",width:o.startWidth+"px",overflow:"hidden",backgroundColor:"#FFFFFF",transform:"",left:"",top:"",zIndex:1},i=o.endHeight/o.startHeight,s=o.endWidth/o.startWidth;switch(n){case 0:r.animationName=t.renderKeyframe(e._outerOutKeyframeGen,o);break;case 1:case 2:r.left=o.endLeft+"px",r.top=o.endTop+"px",r.transform="scaleX("+s+") scaleY("+i+")";break;case 3:r.animationName=t.renderKeyframe(e._outerInKeyframeGen,o);break;case 4:case-1:return null}return r},e}(),r=function(){function e(){}return e._innerOutKeyframeGen=function(e){var t;return(t={})["0%"]={opacity:1,height:e.startHeight+"px",width:e.startWidth+"px",transform:"scaleX(1) scaleY(1)",marginTop:"0px",marginLeft:"0px",marginRight:"0px",paddingTop:"0px"},t["25%"]={opacity:0,height:e.startHeight+"px",width:e.startWidth+"px",transform:"scaleX(1) scaleY(1)",marginTop:"0px",marginLeft:"0px",marginRight:"0px",paddingTop:"0px"},t["30%"]={opacity:0,height:e.endHeightInner+"px",width:e.endWidthInner+"px",transform:"scaleX(1) scaleY(1)",marginTop:"0px",marginLeft:"0px",marginRight:"0px",paddingTop:"0px"},t["40%"]={opacity:0,height:e.endHeightInner+"px",width:e.endWidthInner+"px",transform:"scaleX("+e.transX+") scaleY("+e.transY+")",marginTop:e.margTop+"px",marginLeft:e.isRTL?"0px":e.margLeft+"px",marginRight:e.isRTL?e.margLeft+"px":"0px",paddingTop:e.padTop},t["100%"]={opacity:0,height:e.endHeightInner+"px",width:e.endWidthInner+"px",transform:"scaleX("+e.transX+") scaleY("+e.transY+")",marginTop:e.margTop+"px",marginLeft:e.isRTL?"0px":e.margLeft+"px",marginRight:e.isRTL?e.margLeft+"px":"0px",paddingTop:e.padTop},t},e._innerInKeyframeGen=function(e){var t;return(t={})["0%"]={opacity:1,height:e.endHeightInner+"px",width:e.endWidthInner+"px",transform:"scaleX("+e.transX+") scaleY("+e.transY+")",marginTop:e.margTop+"px",marginLeft:e.isRTL?"0px":e.margLeft+"px",marginRight:e.isRTL?e.margLeft+"px":"0px",paddingTop:e.padTop},t["25%"]={opacity:0,height:e.endHeightInner+"px",width:e.endWidthInner+"px",transform:"scaleX("+e.transX+") scaleY("+e.transY+")",marginTop:e.margTop+"px",marginLeft:e.isRTL?"0px":e.margLeft+"px",marginRight:e.isRTL?e.margLeft+"px":"0px",paddingTop:e.padTop},t["60%"]={opacity:0,height:e.endHeightInner+"px",width:e.endWidthInner+"px",transform:"scaleX("+e.transX+") scaleY("+e.transY+")",marginTop:e.margTop+"px",marginLeft:e.isRTL?"0px":e.margLeft+"px",marginRight:e.isRTL?e.margLeft+"px":"0px",paddingTop:e.padTop},t["70%"]={opacity:0,height:e.endHeightInner+"px",width:e.endWidthInner+"px",transform:"scaleX(1) scaleY(1)",marginTop:"0px",marginLeft:"0px",marginRight:"0px",paddingTop:"0px"},t["75%"]={opacity:0,height:e.startHeight+"px",width:e.startWidth+"px",transform:"scaleX(1) scaleY(1)",marginTop:"0px",marginLeft:"0px",marginRight:"0px",paddingTop:"0px"},t["100%"]={opacity:0,height:e.startHeight+"px",width:e.startWidth+"px",transform:"scaleX(1) scaleY(1)",marginTop:"0px",marginLeft:"0px",marginRight:"0px",paddingTop:"0px"},t},e._fadeInAnimation=function(){var e;return(e={})["0%"]={opacity:0},e["100%"]={opacity:1},e},e._isIE=function(){return!!window.navigator.userAgent.match("MSIE")||!!window.navigator.userAgent.match("Trident")},e.generateInnerClass=function(t,n,o){var r={animationFillMode:"forwards",animationDirection:"normal",animationIterationCount:"1",display:"block",backgroundColor:"#FFFFFF",opacity:"",height:"",width:"",transform:"",marginTop:"",marginLeft:"",marginRight:"",paddingTop:"",animationName:"",animationDuration:"",webkitBackfaceVisibility:"hidden",backfaceVisibility:"hidden",position:""},i=o.startHeight/o.endHeight,s=o.startWidth/o.endWidth,a=-1*(o.endWidthInner-o.startWidth)/2,l=-1*(o.endHeightInner-o.startHeight)/2,c="";l!==Math.floor(l)&&(l=Math.floor(l),c="1px"),a!==Math.floor(a)&&(a=Math.floor(a));var u=Object.assign({},o,{margLeft:a,margTop:l,padTop:c,transX:s,transY:i});switch(n){case 0:r.animationName=t.renderKeyframe(e._innerOutKeyframeGen,u),r.animationDuration="1.4s";break;case 1:r.animationName=t.renderKeyframe(e._fadeInAnimation,u),r.animationDuration=".5s",r.height=o.endHeightInner+"px",r.width=o.endWidthInner+"px",r.transform="scaleX("+s+") scaleY("+i+")",r.marginTop=l+"px",r.paddingTop=c,r.marginLeft=o.isRTL?"0px":a+"px",r.marginRight=o.isRTL?a+"px":"0px",r.position=e._isIE()?"":"fixed";break;case 2:r.height=o.endHeightInner+"px",r.width=o.endWidthInner+"px",r.transform="scaleX("+s+") scaleY("+i+")",r.marginTop=l+"px",r.marginLeft=o.isRTL?"0px":a+"px",r.marginRight=o.isRTL?a+"px":"0px",r.opacity="1",r.position=e._isIE()?"":"fixed";break;case 3:r.animationName=t.renderKeyframe(e._innerInKeyframeGen,u),r.animationDuration="1.4s";break;case 4:r.animationDuration=".5s",r.width="100%",r.animationName=t.renderKeyframe(e._fadeInAnimation,u)}return r},e}(),i=function(){function e(){}return e._shadowOutKeyframeGen=function(){var e;return(e={})["0%"]={opacity:0},e["75%"]={opacity:.5},e["100%"]={opacity:.5},e},e._shadowInKeyframeGen=function(){var e;return(e={})["0%"]={opacity:.5},e["25%"]={opacity:.5},e["100%"]={opacity:0},e},e.generateFancyShadowInAnimationName=function(t){return e._shadowOutAnimationName||(e._shadowOutAnimationName=t.renderKeyframe(e._shadowOutKeyframeGen,null)),e._shadowOutAnimationName},e.generateFancyShadowOutAnimationName=function(t){return e._shadowInAnimationName||(e._shadowInAnimationName=t.renderKeyframe(e._shadowInKeyframeGen,null)),e._shadowInAnimationName},e.generateShadowClass=function(t,n){var o={width:"100%",height:"100%",top:"0px",left:"0px",backgroundColor:"#000000",position:"fixed",animationDuration:"2s",animationFillMode:"forwards",animationDirection:"normal",animationIterationCount:"1",zIndex:"1",animationName:null,opacity:null};switch(n){case 0:o.animationName=e.generateFancyShadowInAnimationName(t);break;case 1:case 2:o.opacity=".5";break;case 3:o.animationName=e.generateFancyShadowOutAnimationName(t);break;case 4:case-1:return{display:"none"}}return o},e._shadowOutAnimationName=null,e._shadowInAnimationName=null,e}();n.d(t,"a",function(){return s});var s=function(){function e(){}return e.getCustomControlFancyPopoutStyles=function(e,t,n){return{shadowStyle:i.generateShadowClass(e,t),outerStyle:o.generateOuterClass(e,t,n),innerStyle:r.generateInnerClass(e,t,n)}},e}()},function(e,t,n){"use strict";n.r(t);var o=n(0),r=n(10),i=n.n(r),s=n(131),a=n(69),l=n(20);n(296);var c=navigator.languages&&navigator.languages.length?navigator.languages[0]:navigator.userLanguage||navigator.language||navigator.browserLanguage||"en";console.log("Detected preferred language: ".concat(c)),Object(l.configureLocale)({directory:"./loc",diagnosticFileName:"diagnosticMessages.localized.json",locale:c||"en",runtime:"browser"}).then(function(){var e=document.getElementById("app-root");i.a.render(o.createElement(s.ControlHarness,{resourceLoader:a}),e)}).catch(function(e){console.log(e)})},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),i=this&&this.__assign||function(){return(i=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)};Object.defineProperty(t,"__esModule",{value:!0});var s,a=n(0),l=n(144),c=n(69),u=n(212),p=n(213),d=n(20),h=n(23);!function(e){e[e.LOADING=0]="LOADING",e[e.LOADED=1]="LOADED",e[e.UNLOADED=2]="UNLOADED"}(s||(s={}));var f=function(e){function t(t){var n=e.call(this,t)||this;return n.state={loadStatus:s.UNLOADED},u.InitializeXrm(),n.updateOutputs=n.updateOutputs.bind(n),n}return r(t,e),t.prototype.componentDidMount=function(){this.props.controlMetadata.Resources&&this.state.loadStatus===s.UNLOADED?(this.setState({loadStatus:s.LOADING}),this.processResources()):this.props.controlMetadata.Resources||this.state.loadStatus!==s.UNLOADED||this.setState({loadStatus:s.LOADED})},t.prototype.render=function(){if(this.state.loadStatus!==s.LOADED)return a.createElement("div",{className:"control-pane"},d.translate(h.strings.loading_control.key));var e=p.createWebClientWrapperProps(this.props.controlMetadata,this.props.controlInputs,this.updateOutputs);return a.createElement("div",{className:"control-pane"},a.createElement(l.CustomControlWebClientWrapper,i({},e)))},t.prototype.processResources=function(){var e=this;return c.ProcessResourcesInOrder(this.props.controlMetadata.Resources,c.loadResourceFile).then(function(){e.setState({loadStatus:s.LOADED})},function(t){e.props.onLoadingError(t)})},t.prototype.updateOutputs=function(e,t,n,o,r,i,s){var a=this,l=Object.keys(i);!l||l.length<1||l.forEach(function(e){a.props.onOutputChange(e,i[e].value),a.props.onInputChange(e,i[e].value)})},t}(a.Component);t.ControlHost=f},function(e,t,n){"use strict";n.r(t),n.d(t,"CustomControlWebClientWrapper",function(){return f});var o,r=n(0),i=n(132),s=n(133),a=n(18),l=n(91),c=n(17),u=n(2),p=n(12),d=(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)}),h=function(){return(h=Object.assign||function(e){for(var t,n=1,o=arguments.length;n<o;n++)for(var r in t=arguments[n])Object.prototype.hasOwnProperty.call(t,r)&&(e[r]=t[r]);return e}).apply(this,arguments)},f=function(e){function t(t){return e.call(this,t)||this}return d(t,e),t.prototype._initializeFela=function(){t._FelaInitialized||(t._FelaRenderer||(t._FelaRenderer=i.createRenderer()),t._FelaElement||(t._FelaElement=document.createElement("style"),t._FelaElement.id="stylesheet",document.head.appendChild(t._FelaElement)),s.render(t._FelaRenderer,t._FelaElement),t._FelaInitialized=!0)},t.prototype._forceUpdate=function(e){this.forceUpdate(e)},t.prototype.getChildContext=function(){return t._FelaInitialized||this._initializeFela(),{renderer:t._FelaRenderer}},t.prototype.componentDidMount=function(){this.props.setReRenderCallBack(this._forceUpdate.bind(this))},t.prototype.render=function(){return r.createElement(l.a,h({},this.props.givenHostProps))},t._FelaInitialized=!1,t._FelaRenderer=null,t._FelaElement=null,t}(r.Component);f.childContextTypes={renderer:a.object},window.CustomControls={},window.CustomControls.CustomControlHostRoot=l.a,window.CustomControls.CustomControlWebClientWrapper=f,window.CustomControls.MeasuringHandler=c.a.getInstance(),window.CustomControls.XrmProxy=u.default,window.CustomControls.Utilities={},window.CustomControls.Utilities.GetDefaultControlConfig=p.f,window.CustomControls.Utilities.GetDefaultControlManifest=p.g},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=s(n(146)),r=s(n(99)),i=s(n(171));function s(e){return e&&e.__esModule?e:{default:e}}t.default={createRenderer:o.default,combineRules:r.default,enhance:i.default},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e};t.default=function(){var e=arguments.length>0&&void 0!==arguments[0]?arguments[0]:{},t={listeners:[],keyframePrefixes:e.keyframePrefixes||["-webkit-","-moz-"],plugins:e.plugins||[],mediaQueryOrder:e.mediaQueryOrder||[],selectorPrefix:e.selectorPrefix||"",fontFaces:"",keyframes:"",statics:"",rules:"",mediaRules:(0,v.default)(e.mediaQueryOrder||[]),uniqueRuleIdentifier:0,uniqueKeyframeIdentifier:0,cache:{},renderRule:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=(0,C.default)(t.plugins,e(n),w.RULE_TYPE);return t._renderStyleToClassNames(o).slice(1)},renderKeyframe:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:{},o=e(n),r=JSON.stringify(o);if(!t.cache.hasOwnProperty(r)){var i=(0,l.default)(++t.uniqueKeyframeIdentifier),a=(0,C.default)(t.plugins,o,w.KEYFRAME_TYPE),c=(0,s.default)(a,i,t.keyframePrefixes);t.cache[r]=i,t.keyframes+=c,t._emitChange({name:i,keyframe:c,type:w.KEYFRAME_TYPE})}return t.cache[r]},renderFont:function(e,n){var r=arguments.length>2&&void 0!==arguments[2]?arguments[2]:{},s=e+JSON.stringify(r);if(!t.cache.hasOwnProperty(s)){var a=(0,I.default)(e),l=o({},r,{src:n.map(function(e){return"url("+(0,E.default)(e)+") format('"+(0,P.default)(e)+"')"}).join(","),fontFamily:a}),c=(0,i.default)(l);t.cache[s]=a,t.fontFaces+=c,t._emitChange({fontFamily:a,fontFace:c,type:w.FONT_TYPE})}return t.cache[s]},renderStatic:function(e,n){var o=(0,f.default)(e,n);if(!t.cache.hasOwnProperty(o)){var r=(0,h.default)(e,t.plugins);t.cache[o]="","string"==typeof e?(t.statics+=r,t._emitChange({type:w.STATIC_TYPE,css:r})):n&&(t.statics+=(0,p.default)(n,r),t._emitChange({selector:n,declaration:r,type:w.RULE_TYPE,static:!0,media:""}))}},renderToString:function(){var e=t.fontFaces+t.statics+t.keyframes+t.rules;return(0,S.default)(t.mediaRules,function(e,t,n){return e+(0,a.default)(n,t)},e)},subscribe:function(e){return t.listeners.push(e),{unsubscribe:function(){return t.listeners.splice(t.listeners.indexOf(e),1)}}},clear:function(){t.fontFaces="",t.keyframes="",t.statics="",t.rules="",t.mediaRules=(0,v.default)(t.mediaQueryOrder),t.uniqueRuleIdentifier=0,t.uniqueKeyframeIdentifier=0,t.cache={},t._emitChange({type:w.CLEAR_TYPE})},_renderStyleToClassNames:function(e){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"",o=arguments.length>2&&void 0!==arguments[2]?arguments[2]:"",i="";for(var s in e){var a=e[s];if((0,g.default)(a)){if((0,y.default)(s))i+=t._renderStyleToClassNames(a,n+(0,_.default)(s),o);else if((0,m.default)(s)){var l=(0,u.default)(o,s.slice(6).trim());i+=t._renderStyleToClassNames(a,n,l)}}else{var h=o+n+s+a;if(!t.cache.hasOwnProperty(h)){if((0,b.default)(a)){t.cache[h]="";continue}var f=t.selectorPrefix+(0,c.default)(++t.uniqueRuleIdentifier);t.cache[h]=f;var v=(0,r.default)(s,a),C=(0,d.default)(f,n),I=(0,p.default)(C,v);o.length>0?(t.mediaRules.hasOwnProperty(o)||(t.mediaRules[o]=""),t.mediaRules[o]+=I):t.rules+=I,t._emitChange({selector:C,declaration:v,media:o,type:w.RULE_TYPE})}i+=" "+t.cache[h]}}return i},_emitChange:function(e){(0,D.default)(t.listeners,function(t){return t(e)})}};t.keyframePrefixes.push(""),t.clear(),e.enhancers&&(0,D.default)(e.enhancers,function(e){t=e(t)});return t};var r=O(n(94)),i=O(n(149)),s=O(n(150)),a=O(n(151)),l=O(n(152)),c=O(n(153)),u=O(n(154)),p=O(n(155)),d=O(n(156)),h=O(n(157)),f=O(n(159)),m=O(n(160)),y=O(n(161)),b=O(n(162)),g=O(n(163)),_=O(n(164)),v=O(n(165)),C=O(n(96)),I=O(n(166)),P=O(n(167)),E=O(n(168)),S=O(n(95)),D=O(n(169)),w=n(72);function O(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,i.default)(e)};var o,r=n(148),i=(o=r)&&o.__esModule?o:{default:o};e.exports=t.default},function(e,t,n){"use strict";n.r(t);var o=/[A-Z]/g,r=/^ms-/,i={};function s(e){return"-"+e.toLowerCase()}t.default=function(e){if(i.hasOwnProperty(e))return i[e];var t=e.replace(o,s);return i[e]=r.test(t)?"-"+t:t}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return"@font-face{"+(0,i.default)(e)+"}"};var o,r=n(71),i=(o=r)&&o.__esModule?o:{default:o};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){var n=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[""],s=(0,i.default)(e,function(e,t,n){return""+e+n+"{"+(0,o.default)(t)+"}"},"");return(0,r.default)(n,function(e,n){return e+"@"+n+"keyframes "+t+"{"+s+"}"},"")};var o=s(n(71)),r=s(n(35)),i=s(n(95));function s(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(t)return"@media "+e+"{"+t+"}";return""},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return"k"+e},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function e(t){var n=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";if(t<=r)return o[t-1]+n;return e(t/r|0,o[t%r]+n)};var o="abcdefghijklmnopqrstuvwxyz",r=o.length;e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if(0===e.length)return t;return e+" and "+t},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return e+"{"+t+"}"},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"";return"."+e+t},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof e)return(0,r.default)(e);var n=(0,i.default)(t,e,s.STATIC_TYPE);return(0,o.default)(n)};var o=a(n(71)),r=a(n(158)),i=a(n(96)),s=n(72);function a(e){return e&&e.__esModule?e:{default:e}}e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e.replace(/\s{2,}/g,"")},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("string"==typeof e)return e;if(t)return t+JSON.stringify(e);return""},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return"@media"===e.substr(0,6)},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return o.test(e)};var o=/^(:|\[|>|&)/;e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return void 0===e||"string"==typeof e&&-1!==e.indexOf("undefined")},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol&&e!==Symbol.prototype?"symbol":typeof e};t.default=function(e){return"object"===(void 0===e?"undefined":o(e))&&!Array.isArray(e)},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){if("&"===e.charAt(0))return e.slice(1);return e},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return(0,i.default)(e,function(e,t){return e[t]="",e},{})};var o,r=n(35),i=(o=r)&&o.__esModule?o:{default:o};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){if('"'===e.charAt(0))return e;return'"'+e+'"'},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){for(var t=0,n=a.length;t<n;++t){var r=a[t];if(-1!==e.indexOf(r))return i[r]}if((0,o.default)(e))for(var c=0,u=l.length;c<u;++c){var p=l[c];if(-1!==e.indexOf(p))return s[p]}return""};r(n(97));var o=r(n(98));function r(e){return e&&e.__esModule?e:{default:e}}var i={".woff":"woff",".eot":"eot",".ttf":"truetype",".svg":"svg"},s={"image/svg+xml":"svg","application/x-font-woff":"woff","application/font-woff":"woff","application/x-font-woff2":"woff2","application/font-woff2":"woff2","font/woff2":"woff2","application/octet-stream":"ttf","application/x-font-ttf":"ttf","application/x-font-truetype":"ttf","application/x-font-opentype":"otf","application/vnd.ms-fontobject":"eot","application/font-sfnt":"sfnt"},a=Object.keys(i),l=Object.keys(s);e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){if((0,i.default)(e))return e;return"'"+e+"'"};var o,r=n(98),i=(o=r)&&o.__esModule?o:{default:o};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){for(var n=0,o=e.length;n<o;++n)t(e[n],n)},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o="function"==typeof Symbol&&"symbol"==typeof Symbol.iterator?function(e){return typeof e}:function(e){return e&&"function"==typeof Symbol&&e.constructor===Symbol?"symbol":typeof e};function r(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}t.default=function e(t){for(var n=arguments.length,i=Array(n>1?n-1:0),s=1;s<n;s++)i[s-1]=arguments[s];for(var a=0,l=i.length;a<l;++a){var c=i[a];for(var u in c){var p=c[u],d=t[u];if("object"===(void 0===d?"undefined":o(d))){if(Array.isArray(d)){Array.isArray(p)?t[u]=[].concat(r(d),r(p)):t[u]=[].concat(r(d),[p]);continue}if("object"===(void 0===p?"undefined":o(p))&&!Array.isArray(p)){t[u]=e({},d,p);continue}}t[u]=p}}return t},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(){for(var e=arguments.length,t=Array(e),n=0;n<e;n++)t[n]=arguments[n];return function(e){return function(n){return(0,i.default)(t,function(e,t){return e=t(e)},e(n))}}};var o,r=n(35),i=(o=r)&&o.__esModule?o:{default:o};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=n(100),i=(o=r)&&o.__esModule?o:{default:o};t.default={render:i.default},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return function(n){if(n.type!==o.RULE_TYPE||n.media)t.textContent=e.renderToString();else try{t.sheet.insertRule(n.selector+"{"+n.declaration+"}",t.sheet.cssRules.length)}catch(e){}}};var o=n(72);e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){return e&&1===e.nodeType},e.exports=t.default},function(e,t,n){"use strict";var o=n(176);function r(){}function i(){}i.resetWarningCache=r,e.exports=function(){function e(e,t,n,r,i,s){if(s!==o){var a=new Error("Calling PropTypes validators directly is not supported by the `prop-types` package. Use PropTypes.checkPropTypes() to call them. Read more at http://fb.me/use-check-prop-types");throw a.name="Invariant Violation",a}}function t(){return e}e.isRequired=e;var n={array:e,bool:e,func:e,number:e,object:e,string:e,symbol:e,any:e,arrayOf:t,element:e,elementType:e,instanceOf:t,node:e,objectOf:t,oneOf:t,oneOfType:t,shape:t,exact:t,checkPropTypes:i,resetWarningCache:r};return n.PropTypes=n,n}},function(e,t,n){"use strict";e.exports="SECRET_DO_NOT_PASS_THIS_OR_YOU_WILL_BE_FIRED"},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=a(n(178)),r=a(n(179)),i=a(n(182)),s=a(n(186));function a(e){return e&&e.__esModule?e:{default:e}}t.default={Provider:o.default,connect:r.default,createComponent:i.default,ThemeProvider:s.default},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),r=n(0),i=a(n(18)),s=a(n(100));function a(e){return e&&e.__esModule?e:{default:e}}var l=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,r.Component),o(t,[{key:"getChildContext",value:function(){return{renderer:this.props.renderer}}},{key:"componentDidMount",value:function(){var e=this.props,t=e.mountNode,n=e.renderer;t&&(0,s.default)(n,t)}},{key:"render",value:function(){return r.Children.only(this.props.children)}}]),t}();l.propTypes={renderer:i.default.object.isRequired},l.childContextTypes={renderer:i.default.object},t.default=l,e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=s(n(18)),i=s(n(180));function s(e){return e&&e.__esModule?e:{default:e}}t.default=(0,i.default)(o.Component,o.createElement,{renderer:r.default.object,theme:r.default.object}),e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},r=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}();t.default=function(e,t,n){return function(i){return function(s){var l=function(e){function n(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,n),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(n.__proto__||Object.getPrototypeOf(n)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(n,e),r(n,[{key:"render",value:function(){var e=this.context,n=e.renderer,r=e.theme,a=i(o({},this.props,{theme:r||{}}))(n);return t(s,o({},this.props,{styles:a}))}}]),n}(e);return l.displayName=(0,a.default)(s),n&&(l.contextTypes=o({},s.contextTypes,n)),l}}};var i,s=n(181),a=(i=s)&&i.__esModule?i:{default:i};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e){var t=e.displayName||e.name;if(t)return"Fela"+t;return"ConnectedFelaComponent"},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(0),r=s(n(18)),i=s(n(183));function s(e){return e&&e.__esModule?e:{default:e}}t.default=(0,i.default)(o.createElement,{renderer:r.default.object,theme:r.default.object}),e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e};t.default=function(e,t){return function(n){var a=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"div",c=arguments.length>2&&void 0!==arguments[2]?arguments[2]:[],u=function(t,u){var p=u.renderer,d=u.theme,h=t.children,f=t._felaRule,m=t.passThrough,y=void 0===m?[]:m,b=function(e,t){var n={};for(var o in e)t.indexOf(o)>=0||Object.prototype.hasOwnProperty.call(e,o)&&(n[o]=e[o]);return n}(t,["children","_felaRule","passThrough"]);if(!p)throw new Error("createComponent() can't render styles without the renderer in the context. Missing react-fela's <Provider /> at the app root?");var g=f?(0,s.default)(n,f):n,_=[].concat(l((0,i.default)(c,b)),l((0,i.default)(y,b)));if(a._isFelaComponent)return e(a,o({_felaRule:g,passThrough:_},b),h);var v=(0,r.default)(_,b);if(b.theme=d||{},p.isNativeRenderer){var C=p.renderRule(g,b);v.style=b.style?[b.style,C]:C}else{v.style=b.style;var I=b.className?b.className+" ":"";v.className=I+p.renderRule(g,b)}v.id=b.id,v.ref=b.innerRef;var P=b.is||a;return e(P,v,h)};return t&&(u.contextTypes=t),u.displayName=n.name?n.name:"FelaComponent",u._isFelaComponent=!0,u}};var r=a(n(184)),i=a(n(185)),s=a(n(99));function a(e){return e&&e.__esModule?e:{default:e}}function l(e){if(Array.isArray(e)){for(var t=0,n=Array(e.length);t<e.length;t++)n[t]=e[t];return n}return Array.from(e)}e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){return(0,i.default)(e,function(e,n){return e[n]=t[n],e},{})};var o,r=n(35),i=(o=r)&&o.__esModule?o:{default:o};e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.default=function(e,t){if("function"==typeof e)return Object.keys(e(t));return e},e.exports=t.default},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o,r=Object.assign||function(e){for(var t=1;t<arguments.length;t++){var n=arguments[t];for(var o in n)Object.prototype.hasOwnProperty.call(n,o)&&(e[o]=n[o])}return e},i=function(){function e(e,t){for(var n=0;n<t.length;n++){var o=t[n];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(e,o.key,o)}}return function(t,n,o){return n&&e(t.prototype,n),o&&e(t,o),t}}(),s=n(0),a=n(18),l=(o=a)&&o.__esModule?o:{default:o};var c=function(e){function t(){return function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,t),function(e,t){if(!e)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return!t||"object"!=typeof t&&"function"!=typeof t?e:t}(this,(t.__proto__||Object.getPrototypeOf(t)).apply(this,arguments))}return function(e,t){if("function"!=typeof t&&null!==t)throw new TypeError("Super expression must either be null or a function, not "+typeof t);e.prototype=Object.create(t&&t.prototype,{constructor:{value:e,enumerable:!1,writable:!0,configurable:!0}}),t&&(Object.setPrototypeOf?Object.setPrototypeOf(e,t):e.__proto__=t)}(t,s.Component),i(t,[{key:"getChildContext",value:function(){var e=this.props,t=e.overwrite,n=e.theme,o=this.context.theme;return{theme:r({},t?{}:o||{},n)}}},{key:"render",value:function(){return s.Children.only(this.props.children)}}]),t}();c.propTypes={theme:l.default.object.isRequired,overwrite:l.default.bool},c.childContextTypes={theme:l.default.object},c.contextTypes={theme:l.default.object},c.defaultProps={overwrite:!1},t.default=c,e.exports=t.default},function(e,t,n){(function(){"use strict";var e,o,r,i,s={}.hasOwnProperty;o=n(73),e=n(188),r=n(193),i=n(110),t.defaults=o.defaults,t.processors=i,t.ValidationError=function(e){function t(e){this.message=e}return function(e,t){for(var n in t)s.call(t,n)&&(e[n]=t[n]);function o(){this.constructor=e}o.prototype=t.prototype,e.prototype=new o,e.__super__=t.prototype}(t,Error),t}(),t.Builder=e.Builder,t.Parser=r.Parser,t.parseString=r.parseString}).call(this)},function(e,t,n){(function(){"use strict";var e,o,r,i,s,a={}.hasOwnProperty;e=n(189),o=n(73).defaults,i=function(e){return"string"==typeof e&&(e.indexOf("&")>=0||e.indexOf(">")>=0||e.indexOf("<")>=0)},s=function(e){return"<![CDATA["+r(e)+"]]>"},r=function(e){return e.replace("]]>","]]]]><![CDATA[>")},t.Builder=function(){function t(e){var t,n,r;for(t in this.options={},n=o[.2])a.call(n,t)&&(r=n[t],this.options[t]=r);for(t in e)a.call(e,t)&&(r=e[t],this.options[t]=r)}return t.prototype.buildObject=function(t){var n,r,l,c,u,p;return n=this.options.attrkey,r=this.options.charkey,1===Object.keys(t).length&&this.options.rootName===o[.2].rootName?t=t[u=Object.keys(t)[0]]:u=this.options.rootName,p=this,l=function(e,t){var o,c,u,d,h,f;if("object"!=typeof t)p.options.cdata&&i(t)?e.raw(s(t)):e.txt(t);else if(Array.isArray(t)){for(d in t)if(a.call(t,d))for(h in c=t[d])u=c[h],e=l(e.ele(h),u).up()}else for(h in t)if(a.call(t,h))if(c=t[h],h===n){if("object"==typeof c)for(o in c)f=c[o],e=e.att(o,f)}else if(h===r)e=p.options.cdata&&i(c)?e.raw(s(c)):e.txt(c);else if(Array.isArray(c))for(d in c)a.call(c,d)&&(e="string"==typeof(u=c[d])?p.options.cdata&&i(u)?e.ele(h).raw(s(u)).up():e.ele(h,u).up():l(e.ele(h),u).up());else"object"==typeof c?e=l(e.ele(h),c).up():"string"==typeof c&&p.options.cdata&&i(c)?e=e.ele(h).raw(s(c)).up():(null==c&&(c=""),e=e.ele(h,c.toString()).up());return e},c=e.create(u,this.options.xmldec,this.options.doctype,{headless:this.options.headless,allowSurrogateChars:this.options.allowSurrogateChars}),l(c,t).end(this.options.renderOpts)},t}()}).call(this)},function(e,t,n){(function(){var t,o,r,i,s,a,l;l=n(26),s=l.assign,a=l.isFunction,t=n(190),o=n(191),i=n(74),r=n(192),e.exports.create=function(e,n,o,r){var i,a;if(null==e)throw new Error("Root element needs a name");return r=s({},n,o,r),a=(i=new t(r)).element(e),r.headless||(i.declaration(r),null==r.pubID&&null==r.sysID||i.doctype(r)),a},e.exports.begin=function(e,n,r){var i;return a(e)&&(n=(i=[e,n])[0],r=i[1],e={}),n?new o(e,n,r):new t(e)},e.exports.stringWriter=function(e){return new i(e)},e.exports.streamWriter=function(e,t){return new r(e,t)}}).call(this)},function(e,t,n){(function(){var t,o,r,i,s={}.hasOwnProperty;i=n(26).isPlainObject,t=n(16),r=n(103),o=n(74),e.exports=function(e){function n(e){n.__super__.constructor.call(this,null),e||(e={}),e.writer||(e.writer=new o),this.options=e,this.stringify=new r(e),this.isDocument=!0}return function(e,t){for(var n in t)s.call(t,n)&&(e[n]=t[n]);function o(){this.constructor=e}o.prototype=t.prototype,e.prototype=new o,e.__super__=t.prototype}(n,t),n.prototype.end=function(e){var t;return e?i(e)&&(t=e,e=this.options.writer.set(t)):e=this.options.writer,e.document(this)},n.prototype.toString=function(e){return this.options.writer.set(e).document(this)},n}()}).call(this)},function(e,t,n){(function(){var t,o,r,i,s,a,l,c,u,p,d,h,f,m,y,b,g,_,v,C={}.hasOwnProperty;v=n(26),g=v.isObject,b=v.isFunction,_=v.isPlainObject,p=n(47),o=n(48),r=n(49),h=n(56),y=n(57),d=n(58),c=n(50),u=n(51),i=n(52),a=n(53),s=n(54),l=n(55),t=n(102),m=n(103),f=n(74),e.exports=function(){function e(e,t,n){var o;e||(e={}),e.writer?_(e.writer)&&(o=e.writer,e.writer=new f(o)):e.writer=new f(e),this.options=e,this.writer=e.writer,this.stringify=new m(e),this.onDataCallback=t||function(){},this.onEndCallback=n||function(){},this.currentNode=null,this.currentLevel=-1,this.openTags={},this.documentStarted=!1,this.documentCompleted=!1,this.root=null}return e.prototype.node=function(e,t,n){var o;if(null==e)throw new Error("Missing node name");if(this.root&&-1===this.currentLevel)throw new Error("Document can only have one root node");return this.openCurrent(),e=e.valueOf(),null==t&&(t={}),t=t.valueOf(),g(t)||(n=(o=[t,n])[0],t=o[1]),this.currentNode=new p(this,e,t),this.currentNode.children=!1,this.currentLevel++,this.openTags[this.currentLevel]=this.currentNode,null!=n&&this.text(n),this},e.prototype.element=function(e,t,n){return this.currentNode&&this.currentNode instanceof u?this.dtdElement.apply(this,arguments):this.node(e,t,n)},e.prototype.attribute=function(e,n){var o,r;if(!this.currentNode||this.currentNode.children)throw new Error("att() can only be used immediately after an ele() call in callback mode");if(null!=e&&(e=e.valueOf()),g(e))for(o in e)C.call(e,o)&&(r=e[o],this.attribute(o,r));else b(n)&&(n=n.apply()),this.options.skipNullAttributes&&null==n||(this.currentNode.attributes[e]=new t(this,e,n));return this},e.prototype.text=function(e){var t;return this.openCurrent(),t=new y(this,e),this.onData(this.writer.text(t,this.currentLevel+1)),this},e.prototype.cdata=function(e){var t;return this.openCurrent(),t=new o(this,e),this.onData(this.writer.cdata(t,this.currentLevel+1)),this},e.prototype.comment=function(e){var t;return this.openCurrent(),t=new r(this,e),this.onData(this.writer.comment(t,this.currentLevel+1)),this},e.prototype.raw=function(e){var t;return this.openCurrent(),t=new h(this,e),this.onData(this.writer.raw(t,this.currentLevel+1)),this},e.prototype.instruction=function(e,t){var n,o,r,i,s;if(this.openCurrent(),null!=e&&(e=e.valueOf()),null!=t&&(t=t.valueOf()),Array.isArray(e))for(n=0,i=e.length;n<i;n++)o=e[n],this.instruction(o);else if(g(e))for(o in e)C.call(e,o)&&(r=e[o],this.instruction(o,r));else b(t)&&(t=t.apply()),s=new d(this,e,t),this.onData(this.writer.processingInstruction(s,this.currentLevel+1));return this},e.prototype.declaration=function(e,t,n){var o;if(this.openCurrent(),this.documentStarted)throw new Error("declaration() must be the first node");return o=new c(this,e,t,n),this.onData(this.writer.declaration(o,this.currentLevel+1)),this},e.prototype.doctype=function(e,t,n){if(this.openCurrent(),null==e)throw new Error("Missing root node name");if(this.root)throw new Error("dtd() must come before the root node");return this.currentNode=new u(this,t,n),this.currentNode.rootNodeName=e,this.currentNode.children=!1,this.currentLevel++,this.openTags[this.currentLevel]=this.currentNode,this},e.prototype.dtdElement=function(e,t){var n;return this.openCurrent(),n=new s(this,e,t),this.onData(this.writer.dtdElement(n,this.currentLevel+1)),this},e.prototype.attList=function(e,t,n,o,r){var s;return this.openCurrent(),s=new i(this,e,t,n,o,r),this.onData(this.writer.dtdAttList(s,this.currentLevel+1)),this},e.prototype.entity=function(e,t){var n;return this.openCurrent(),n=new a(this,!1,e,t),this.onData(this.writer.dtdEntity(n,this.currentLevel+1)),this},e.prototype.pEntity=function(e,t){var n;return this.openCurrent(),n=new a(this,!0,e,t),this.onData(this.writer.dtdEntity(n,this.currentLevel+1)),this},e.prototype.notation=function(e,t){var n;return this.openCurrent(),n=new l(this,e,t),this.onData(this.writer.dtdNotation(n,this.currentLevel+1)),this},e.prototype.up=function(){if(this.currentLevel<0)throw new Error("The document node has no parent");return this.currentNode?(this.currentNode.children?this.closeNode(this.currentNode):this.openNode(this.currentNode),this.currentNode=null):this.closeNode(this.openTags[this.currentLevel]),delete this.openTags[this.currentLevel],this.currentLevel--,this},e.prototype.end=function(){for(;this.currentLevel>=0;)this.up();return this.onEnd()},e.prototype.openCurrent=function(){if(this.currentNode)return this.currentNode.children=!0,this.openNode(this.currentNode)},e.prototype.openNode=function(e){if(!e.isOpen)return!this.root&&0===this.currentLevel&&e instanceof p&&(this.root=e),this.onData(this.writer.openNode(e,this.currentLevel)),e.isOpen=!0},e.prototype.closeNode=function(e){if(!e.isClosed)return this.onData(this.writer.closeNode(e,this.currentLevel)),e.isClosed=!0},e.prototype.onData=function(e){return this.documentStarted=!0,this.onDataCallback(e)},e.prototype.onEnd=function(){return this.documentCompleted=!0,this.onEndCallback()},e.prototype.ele=function(){return this.element.apply(this,arguments)},e.prototype.nod=function(e,t,n){return this.node(e,t,n)},e.prototype.txt=function(e){return this.text(e)},e.prototype.dat=function(e){return this.cdata(e)},e.prototype.com=function(e){return this.comment(e)},e.prototype.ins=function(e,t){return this.instruction(e,t)},e.prototype.dec=function(e,t,n){return this.declaration(e,t,n)},e.prototype.dtd=function(e,t,n){return this.doctype(e,t,n)},e.prototype.e=function(e,t,n){return this.element(e,t,n)},e.prototype.n=function(e,t,n){return this.node(e,t,n)},e.prototype.t=function(e){return this.text(e)},e.prototype.d=function(e){return this.cdata(e)},e.prototype.c=function(e){return this.comment(e)},e.prototype.r=function(e){return this.raw(e)},e.prototype.i=function(e,t){return this.instruction(e,t)},e.prototype.att=function(){return this.currentNode&&this.currentNode instanceof u?this.attList.apply(this,arguments):this.attribute.apply(this,arguments)},e.prototype.a=function(){return this.currentNode&&this.currentNode instanceof u?this.attList.apply(this,arguments):this.attribute.apply(this,arguments)},e.prototype.ent=function(e,t){return this.entity(e,t)},e.prototype.pent=function(e,t){return this.pEntity(e,t)},e.prototype.not=function(e,t){return this.notation(e,t)},e}()}).call(this)},function(e,t,n){(function(){var t,o,r,i,s,a,l,c,u,p,d,h,f,m={}.hasOwnProperty;l=n(50),c=n(51),t=n(48),o=n(49),u=n(47),d=n(56),h=n(57),p=n(58),r=n(52),i=n(54),s=n(53),a=n(55),f=n(104),e.exports=function(e){function n(e,t){n.__super__.constructor.call(this,t),this.stream=e}return function(e,t){for(var n in t)m.call(t,n)&&(e[n]=t[n]);function o(){this.constructor=e}o.prototype=t.prototype,e.prototype=new o,e.__super__=t.prototype}(n,f),n.prototype.document=function(e){var t,n,r,i,s,a,u,d;for(n=0,i=(a=e.children).length;n<i;n++)(t=a[n]).isLastRootNode=!1;for(e.children[e.children.length-1].isLastRootNode=!0,d=[],r=0,s=(u=e.children).length;r<s;r++)switch(t=u[r],!1){case!(t instanceof l):d.push(this.declaration(t));break;case!(t instanceof c):d.push(this.docType(t));break;case!(t instanceof o):d.push(this.comment(t));break;case!(t instanceof p):d.push(this.processingInstruction(t));break;default:d.push(this.element(t))}return d},n.prototype.attribute=function(e){return this.stream.write(" "+e.name+'="'+e.value+'"')},n.prototype.cdata=function(e,t){return this.stream.write(this.space(t)+"<![CDATA["+e.text+"]]>"+this.endline(e))},n.prototype.comment=function(e,t){return this.stream.write(this.space(t)+"\x3c!-- "+e.text+" --\x3e"+this.endline(e))},n.prototype.declaration=function(e,t){return this.stream.write(this.space(t)),this.stream.write('<?xml version="'+e.version+'"'),null!=e.encoding&&this.stream.write(' encoding="'+e.encoding+'"'),null!=e.standalone&&this.stream.write(' standalone="'+e.standalone+'"'),this.stream.write(this.spacebeforeslash+"?>"),this.stream.write(this.endline(e))},n.prototype.docType=function(e,n){var l,c,u,d;if(n||(n=0),this.stream.write(this.space(n)),this.stream.write("<!DOCTYPE "+e.root().name),e.pubID&&e.sysID?this.stream.write(' PUBLIC "'+e.pubID+'" "'+e.sysID+'"'):e.sysID&&this.stream.write(' SYSTEM "'+e.sysID+'"'),e.children.length>0){for(this.stream.write(" ["),this.stream.write(this.endline(e)),c=0,u=(d=e.children).length;c<u;c++)switch(l=d[c],!1){case!(l instanceof r):this.dtdAttList(l,n+1);break;case!(l instanceof i):this.dtdElement(l,n+1);break;case!(l instanceof s):this.dtdEntity(l,n+1);break;case!(l instanceof a):this.dtdNotation(l,n+1);break;case!(l instanceof t):this.cdata(l,n+1);break;case!(l instanceof o):this.comment(l,n+1);break;case!(l instanceof p):this.processingInstruction(l,n+1);break;default:throw new Error("Unknown DTD node type: "+l.constructor.name)}this.stream.write("]")}return this.stream.write(this.spacebeforeslash+">"),this.stream.write(this.endline(e))},n.prototype.element=function(e,n){var r,i,s,a,l,c,f,y;for(l in n||(n=0),y=this.space(n),this.stream.write(y+"<"+e.name),c=e.attributes)m.call(c,l)&&(r=c[l],this.attribute(r));if(0===e.children.length||e.children.every(function(e){return""===e.value}))this.allowEmpty?this.stream.write("></"+e.name+">"):this.stream.write(this.spacebeforeslash+"/>");else if(this.pretty&&1===e.children.length&&null!=e.children[0].value)this.stream.write(">"),this.stream.write(e.children[0].value),this.stream.write("</"+e.name+">");else{for(this.stream.write(">"+this.newline),s=0,a=(f=e.children).length;s<a;s++)switch(i=f[s],!1){case!(i instanceof t):this.cdata(i,n+1);break;case!(i instanceof o):this.comment(i,n+1);break;case!(i instanceof u):this.element(i,n+1);break;case!(i instanceof d):this.raw(i,n+1);break;case!(i instanceof h):this.text(i,n+1);break;case!(i instanceof p):this.processingInstruction(i,n+1);break;default:throw new Error("Unknown XML node type: "+i.constructor.name)}this.stream.write(y+"</"+e.name+">")}return this.stream.write(this.endline(e))},n.prototype.processingInstruction=function(e,t){return this.stream.write(this.space(t)+"<?"+e.target),e.value&&this.stream.write(" "+e.value),this.stream.write(this.spacebeforeslash+"?>"+this.endline(e))},n.prototype.raw=function(e,t){return this.stream.write(this.space(t)+e.value+this.endline(e))},n.prototype.text=function(e,t){return this.stream.write(this.space(t)+e.value+this.endline(e))},n.prototype.dtdAttList=function(e,t){return this.stream.write(this.space(t)+"<!ATTLIST "+e.elementName+" "+e.attributeName+" "+e.attributeType),"#DEFAULT"!==e.defaultValueType&&this.stream.write(" "+e.defaultValueType),e.defaultValue&&this.stream.write(' "'+e.defaultValue+'"'),this.stream.write(this.spacebeforeslash+">"+this.endline(e))},n.prototype.dtdElement=function(e,t){return this.stream.write(this.space(t)+"<!ELEMENT "+e.name+" "+e.value),this.stream.write(this.spacebeforeslash+">"+this.endline(e))},n.prototype.dtdEntity=function(e,t){return this.stream.write(this.space(t)+"<!ENTITY"),e.pe&&this.stream.write(" %"),this.stream.write(" "+e.name),e.value?this.stream.write(' "'+e.value+'"'):(e.pubID&&e.sysID?this.stream.write(' PUBLIC "'+e.pubID+'" "'+e.sysID+'"'):e.sysID&&this.stream.write(' SYSTEM "'+e.sysID+'"'),e.nData&&this.stream.write(" NDATA "+e.nData)),this.stream.write(this.spacebeforeslash+">"+this.endline(e))},n.prototype.dtdNotation=function(e,t){return this.stream.write(this.space(t)+"<!NOTATION "+e.name),e.pubID&&e.sysID?this.stream.write(' PUBLIC "'+e.pubID+'" "'+e.sysID+'"'):e.pubID?this.stream.write(' PUBLIC "'+e.pubID+'"'):e.sysID&&this.stream.write(' SYSTEM "'+e.sysID+'"'),this.stream.write(this.spacebeforeslash+">"+this.endline(e))},n.prototype.endline=function(e){return e.isLastRootNode?"":this.newline},n}()}).call(this)},function(e,t,n){(function(){"use strict";var e,o,r,i,s,a,l,c,u=function(e,t){return function(){return e.apply(t,arguments)}},p={}.hasOwnProperty;l=n(194),r=n(59),e=n(210),a=n(110),c=n(108).setImmediate,o=n(73).defaults,i=function(e){return"object"==typeof e&&null!=e&&0===Object.keys(e).length},s=function(e,t,n){var o,r;for(o=0,r=e.length;o<r;o++)t=(0,e[o])(t,n);return t},t.Parser=function(n){function d(e){var n,r,i;if(this.parseString=u(this.parseString,this),this.reset=u(this.reset,this),this.assignOrPush=u(this.assignOrPush,this),this.processAsync=u(this.processAsync,this),!(this instanceof t.Parser))return new t.Parser(e);for(n in this.options={},r=o[.2])p.call(r,n)&&(i=r[n],this.options[n]=i);for(n in e)p.call(e,n)&&(i=e[n],this.options[n]=i);this.options.xmlns&&(this.options.xmlnskey=this.options.attrkey+"ns"),this.options.normalizeTags&&(this.options.tagNameProcessors||(this.options.tagNameProcessors=[]),this.options.tagNameProcessors.unshift(a.normalize)),this.reset()}return function(e,t){for(var n in t)p.call(t,n)&&(e[n]=t[n]);function o(){this.constructor=e}o.prototype=t.prototype,e.prototype=new o,e.__super__=t.prototype}(d,r.EventEmitter),d.prototype.processAsync=function(){var e,t;try{return this.remaining.length<=this.options.chunkSize?(e=this.remaining,this.remaining="",this.saxParser=this.saxParser.write(e),this.saxParser.close()):(e=this.remaining.substr(0,this.options.chunkSize),this.remaining=this.remaining.substr(this.options.chunkSize,this.remaining.length),this.saxParser=this.saxParser.write(e),c(this.processAsync))}catch(e){if(t=e,!this.saxParser.errThrown)return this.saxParser.errThrown=!0,this.emit(t)}},d.prototype.assignOrPush=function(e,t,n){return t in e?(e[t]instanceof Array||(e[t]=[e[t]]),e[t].push(n)):this.options.explicitArray?e[t]=[n]:e[t]=n},d.prototype.reset=function(){var e,t,n,o,r;return this.removeAllListeners(),this.saxParser=l.parser(this.options.strict,{trim:!1,normalize:!1,xmlns:this.options.xmlns}),this.saxParser.errThrown=!1,this.saxParser.onerror=(r=this,function(e){if(r.saxParser.resume(),!r.saxParser.errThrown)return r.saxParser.errThrown=!0,r.emit("error",e)}),this.saxParser.onend=function(e){return function(){if(!e.saxParser.ended)return e.saxParser.ended=!0,e.emit("end",e.resultObject)}}(this),this.saxParser.ended=!1,this.EXPLICIT_CHARKEY=this.options.explicitCharkey,this.resultObject=null,o=[],e=this.options.attrkey,t=this.options.charkey,this.saxParser.onopentag=function(n){return function(r){var i,a,l,c,u;if((l={})[t]="",!n.options.ignoreAttrs)for(i in u=r.attributes)p.call(u,i)&&(e in l||n.options.mergeAttrs||(l[e]={}),a=n.options.attrValueProcessors?s(n.options.attrValueProcessors,r.attributes[i],i):r.attributes[i],c=n.options.attrNameProcessors?s(n.options.attrNameProcessors,i):i,n.options.mergeAttrs?n.assignOrPush(l,c,a):l[e][c]=a);return l["#name"]=n.options.tagNameProcessors?s(n.options.tagNameProcessors,r.name):r.name,n.options.xmlns&&(l[n.options.xmlnskey]={uri:r.uri,local:r.local}),o.push(l)}}(this),this.saxParser.onclosetag=function(e){return function(){var n,r,a,l,c,u,d,h,f,m;if(u=o.pop(),c=u["#name"],e.options.explicitChildren&&e.options.preserveChildrenOrder||delete u["#name"],!0===u.cdata&&(n=u.cdata,delete u.cdata),f=o[o.length-1],u[t].match(/^\s*$/)&&!n?(r=u[t],delete u[t]):(e.options.trim&&(u[t]=u[t].trim()),e.options.normalize&&(u[t]=u[t].replace(/\s{2,}/g," ").trim()),u[t]=e.options.valueProcessors?s(e.options.valueProcessors,u[t],c):u[t],1===Object.keys(u).length&&t in u&&!e.EXPLICIT_CHARKEY&&(u=u[t])),i(u)&&(u=""!==e.options.emptyTag?e.options.emptyTag:r),null!=e.options.validator&&(m="/"+function(){var e,t,n;for(n=[],e=0,t=o.length;e<t;e++)l=o[e],n.push(l["#name"]);return n}().concat(c).join("/"),function(){var t;try{u=e.options.validator(m,f&&f[c],u)}catch(n){return t=n,e.emit("error",t)}}()),e.options.explicitChildren&&!e.options.mergeAttrs&&"object"==typeof u)if(e.options.preserveChildrenOrder){if(f){for(a in f[e.options.childkey]=f[e.options.childkey]||[],d={},u)p.call(u,a)&&(d[a]=u[a]);f[e.options.childkey].push(d),delete u["#name"],1===Object.keys(u).length&&t in u&&!e.EXPLICIT_CHARKEY&&(u=u[t])}}else l={},e.options.attrkey in u&&(l[e.options.attrkey]=u[e.options.attrkey],delete u[e.options.attrkey]),!e.options.charsAsChildren&&e.options.charkey in u&&(l[e.options.charkey]=u[e.options.charkey],delete u[e.options.charkey]),Object.getOwnPropertyNames(u).length>0&&(l[e.options.childkey]=u),u=l;return o.length>0?e.assignOrPush(f,c,u):(e.options.explicitRoot&&(h=u,(u={})[c]=h),e.resultObject=u,e.saxParser.ended=!0,e.emit("end",e.resultObject))}}(this),n=function(e){return function(n){var r,i;if(i=o[o.length-1])return i[t]+=n,e.options.explicitChildren&&e.options.preserveChildrenOrder&&e.options.charsAsChildren&&(e.options.includeWhiteChars||""!==n.replace(/\\n/g,"").trim())&&(i[e.options.childkey]=i[e.options.childkey]||[],(r={"#name":"__text__"})[t]=n,e.options.normalize&&(r[t]=r[t].replace(/\s{2,}/g," ").trim()),i[e.options.childkey].push(r)),i}}(this),this.saxParser.ontext=n,this.saxParser.oncdata=function(e){var t;if(t=n(e))return t.cdata=!0}},d.prototype.parseString=function(t,n){var o;null!=n&&"function"==typeof n&&(this.on("end",function(e){return this.reset(),n(null,e)}),this.on("error",function(e){return this.reset(),n(e)}));try{return""===(t=t.toString()).trim()?(this.emit("end",null),!0):(t=e.stripBOM(t),this.options.async?(this.remaining=t,c(this.processAsync),this.saxParser):this.saxParser.write(t).close())}catch(e){if(o=e,!this.saxParser.errThrown&&!this.saxParser.ended)return this.emit("error",o),this.saxParser.errThrown=!0;if(this.saxParser.ended)throw o}},d}(),t.parseString=function(e,n,o){var r,i;return null!=o?("function"==typeof o&&(r=o),"object"==typeof n&&(i=n)):("function"==typeof n&&(r=n),i={}),new t.Parser(i).parseString(e,r)}}).call(this)},function(e,t,n){(function(e){!function(t){t.parser=function(e,t){return new i(e,t)},t.SAXParser=i,t.SAXStream=a,t.createStream=function(e,t){return new a(e,t)},t.MAX_BUFFER_LENGTH=65536;var o,r=["comment","sgmlDecl","textNode","tagName","doctype","procInstName","procInstBody","entity","attribName","attribValue","cdata","script"];function i(e,n){if(!(this instanceof i))return new i(e,n);!function(e){for(var t=0,n=r.length;t<n;t++)e[r[t]]=""}(this),this.q=this.c="",this.bufferCheckPosition=t.MAX_BUFFER_LENGTH,this.opt=n||{},this.opt.lowercase=this.opt.lowercase||this.opt.lowercasetags,this.looseCase=this.opt.lowercase?"toLowerCase":"toUpperCase",this.tags=[],this.closed=this.closedRoot=this.sawRoot=!1,this.tag=this.error=null,this.strict=!!e,this.noscript=!(!e&&!this.opt.noscript),this.state=S.BEGIN,this.strictEntities=this.opt.strictEntities,this.ENTITIES=this.strictEntities?Object.create(t.XML_ENTITIES):Object.create(t.ENTITIES),this.attribList=[],this.opt.xmlns&&(this.ns=Object.create(d)),this.trackPosition=!1!==this.opt.position,this.trackPosition&&(this.position=this.line=this.column=0),w(this,"onready")}t.EVENTS=["text","processinginstruction","sgmldeclaration","doctype","comment","opentagstart","attribute","opentag","closetag","opencdata","cdata","closecdata","error","end","ready","script","opennamespace","closenamespace"],Object.create||(Object.create=function(e){function t(){}return t.prototype=e,new t}),Object.keys||(Object.keys=function(e){var t=[];for(var n in e)e.hasOwnProperty(n)&&t.push(n);return t}),i.prototype={end:function(){x(this)},write:function(e){if(this.error)throw this.error;if(this.closed)return M(this,"Cannot write after close. Assign an onready handler.");if(null===e)return x(this);"object"==typeof e&&(e=e.toString());var n=0,o="";for(;o=W(e,n++),this.c=o,o;)switch(this.trackPosition&&(this.position++,"\n"===o?(this.line++,this.column=0):this.column++),this.state){case S.BEGIN:if(this.state=S.BEGIN_WHITESPACE,"\ufeff"===o)continue;j(this,o);continue;case S.BEGIN_WHITESPACE:j(this,o);continue;case S.TEXT:if(this.sawRoot&&!this.closedRoot){for(var i=n-1;o&&"<"!==o&&"&"!==o;)(o=W(e,n++))&&this.trackPosition&&(this.position++,"\n"===o?(this.line++,this.column=0):this.column++);this.textNode+=e.substring(i,n-1)}"<"!==o||this.sawRoot&&this.closedRoot&&!this.strict?(b(o)||this.sawRoot&&!this.closedRoot||A(this,"Text data outside of root node."),"&"===o?this.state=S.TEXT_ENTITY:this.textNode+=o):(this.state=S.OPEN_WAKA,this.startTagPosition=this.position);continue;case S.SCRIPT:"<"===o?this.state=S.SCRIPT_ENDING:this.script+=o;continue;case S.SCRIPT_ENDING:"/"===o?this.state=S.CLOSE_TAG:(this.script+="<"+o,this.state=S.SCRIPT);continue;case S.OPEN_WAKA:if("!"===o)this.state=S.SGML_DECL,this.sgmlDecl="";else if(b(o));else if(v(h,o))this.state=S.OPEN_TAG,this.tagName=o;else if("/"===o)this.state=S.CLOSE_TAG,this.tagName="";else if("?"===o)this.state=S.PROC_INST,this.procInstName=this.procInstBody="";else{if(A(this,"Unencoded <"),this.startTagPosition+1<this.position){var s=this.position-this.startTagPosition;o=new Array(s).join(" ")+o}this.textNode+="<"+o,this.state=S.TEXT}continue;case S.SGML_DECL:(this.sgmlDecl+o).toUpperCase()===l?(O(this,"onopencdata"),this.state=S.CDATA,this.sgmlDecl="",this.cdata=""):this.sgmlDecl+o==="--"?(this.state=S.COMMENT,this.comment="",this.sgmlDecl=""):(this.sgmlDecl+o).toUpperCase()===c?(this.state=S.DOCTYPE,(this.doctype||this.sawRoot)&&A(this,"Inappropriately located doctype declaration"),this.doctype="",this.sgmlDecl=""):">"===o?(O(this,"onsgmldeclaration",this.sgmlDecl),this.sgmlDecl="",this.state=S.TEXT):g(o)?(this.state=S.SGML_DECL_QUOTED,this.sgmlDecl+=o):this.sgmlDecl+=o;continue;case S.SGML_DECL_QUOTED:o===this.q&&(this.state=S.SGML_DECL,this.q=""),this.sgmlDecl+=o;continue;case S.DOCTYPE:">"===o?(this.state=S.TEXT,O(this,"ondoctype",this.doctype),this.doctype=!0):(this.doctype+=o,"["===o?this.state=S.DOCTYPE_DTD:g(o)&&(this.state=S.DOCTYPE_QUOTED,this.q=o));continue;case S.DOCTYPE_QUOTED:this.doctype+=o,o===this.q&&(this.q="",this.state=S.DOCTYPE);continue;case S.DOCTYPE_DTD:this.doctype+=o,"]"===o?this.state=S.DOCTYPE:g(o)&&(this.state=S.DOCTYPE_DTD_QUOTED,this.q=o);continue;case S.DOCTYPE_DTD_QUOTED:this.doctype+=o,o===this.q&&(this.state=S.DOCTYPE_DTD,this.q="");continue;case S.COMMENT:"-"===o?this.state=S.COMMENT_ENDING:this.comment+=o;continue;case S.COMMENT_ENDING:"-"===o?(this.state=S.COMMENT_ENDED,this.comment=F(this.opt,this.comment),this.comment&&O(this,"oncomment",this.comment),this.comment=""):(this.comment+="-"+o,this.state=S.COMMENT);continue;case S.COMMENT_ENDED:">"!==o?(A(this,"Malformed comment"),this.comment+="--"+o,this.state=S.COMMENT):this.state=S.TEXT;continue;case S.CDATA:"]"===o?this.state=S.CDATA_ENDING:this.cdata+=o;continue;case S.CDATA_ENDING:"]"===o?this.state=S.CDATA_ENDING_2:(this.cdata+="]"+o,this.state=S.CDATA);continue;case S.CDATA_ENDING_2:">"===o?(this.cdata&&O(this,"oncdata",this.cdata),O(this,"onclosecdata"),this.cdata="",this.state=S.TEXT):"]"===o?this.cdata+="]":(this.cdata+="]]"+o,this.state=S.CDATA);continue;case S.PROC_INST:"?"===o?this.state=S.PROC_INST_ENDING:b(o)?this.state=S.PROC_INST_BODY:this.procInstName+=o;continue;case S.PROC_INST_BODY:if(!this.procInstBody&&b(o))continue;"?"===o?this.state=S.PROC_INST_ENDING:this.procInstBody+=o;continue;case S.PROC_INST_ENDING:">"===o?(O(this,"onprocessinginstruction",{name:this.procInstName,body:this.procInstBody}),this.procInstName=this.procInstBody="",this.state=S.TEXT):(this.procInstBody+="?"+o,this.state=S.PROC_INST_BODY);continue;case S.OPEN_TAG:v(f,o)?this.tagName+=o:(k(this),">"===o?N(this):"/"===o?this.state=S.OPEN_TAG_SLASH:(b(o)||A(this,"Invalid character in tag name"),this.state=S.ATTRIB));continue;case S.OPEN_TAG_SLASH:">"===o?(N(this,!0),B(this)):(A(this,"Forward-slash in opening tag not followed by >"),this.state=S.ATTRIB);continue;case S.ATTRIB:if(b(o))continue;">"===o?N(this):"/"===o?this.state=S.OPEN_TAG_SLASH:v(h,o)?(this.attribName=o,this.attribValue="",this.state=S.ATTRIB_NAME):A(this,"Invalid attribute name");continue;case S.ATTRIB_NAME:"="===o?this.state=S.ATTRIB_VALUE:">"===o?(A(this,"Attribute without value"),this.attribValue=this.attribName,L(this),N(this)):b(o)?this.state=S.ATTRIB_NAME_SAW_WHITE:v(f,o)?this.attribName+=o:A(this,"Invalid attribute name");continue;case S.ATTRIB_NAME_SAW_WHITE:if("="===o)this.state=S.ATTRIB_VALUE;else{if(b(o))continue;A(this,"Attribute without value"),this.tag.attributes[this.attribName]="",this.attribValue="",O(this,"onattribute",{name:this.attribName,value:""}),this.attribName="",">"===o?N(this):v(h,o)?(this.attribName=o,this.state=S.ATTRIB_NAME):(A(this,"Invalid attribute name"),this.state=S.ATTRIB)}continue;case S.ATTRIB_VALUE:if(b(o))continue;g(o)?(this.q=o,this.state=S.ATTRIB_VALUE_QUOTED):(A(this,"Unquoted attribute value"),this.state=S.ATTRIB_VALUE_UNQUOTED,this.attribValue=o);continue;case S.ATTRIB_VALUE_QUOTED:if(o!==this.q){"&"===o?this.state=S.ATTRIB_VALUE_ENTITY_Q:this.attribValue+=o;continue}L(this),this.q="",this.state=S.ATTRIB_VALUE_CLOSED;continue;case S.ATTRIB_VALUE_CLOSED:b(o)?this.state=S.ATTRIB:">"===o?N(this):"/"===o?this.state=S.OPEN_TAG_SLASH:v(h,o)?(A(this,"No whitespace between attributes"),this.attribName=o,this.attribValue="",this.state=S.ATTRIB_NAME):A(this,"Invalid attribute name");continue;case S.ATTRIB_VALUE_UNQUOTED:if(!_(o)){"&"===o?this.state=S.ATTRIB_VALUE_ENTITY_U:this.attribValue+=o;continue}L(this),">"===o?N(this):this.state=S.ATTRIB;continue;case S.CLOSE_TAG:if(this.tagName)">"===o?B(this):v(f,o)?this.tagName+=o:this.script?(this.script+="</"+this.tagName,this.tagName="",this.state=S.SCRIPT):(b(o)||A(this,"Invalid tagname in closing tag"),this.state=S.CLOSE_TAG_SAW_WHITE);else{if(b(o))continue;C(h,o)?this.script?(this.script+="</"+o,this.state=S.SCRIPT):A(this,"Invalid tagname in closing tag."):this.tagName=o}continue;case S.CLOSE_TAG_SAW_WHITE:if(b(o))continue;">"===o?B(this):A(this,"Invalid characters in closing tag");continue;case S.TEXT_ENTITY:case S.ATTRIB_VALUE_ENTITY_Q:case S.ATTRIB_VALUE_ENTITY_U:var a,u;switch(this.state){case S.TEXT_ENTITY:a=S.TEXT,u="textNode";break;case S.ATTRIB_VALUE_ENTITY_Q:a=S.ATTRIB_VALUE_QUOTED,u="attribValue";break;case S.ATTRIB_VALUE_ENTITY_U:a=S.ATTRIB_VALUE_UNQUOTED,u="attribValue"}";"===o?(this[u]+=U(this),this.entity="",this.state=a):v(this.entity.length?y:m,o)?this.entity+=o:(A(this,"Invalid character in entity name"),this[u]+="&"+this.entity+o,this.entity="",this.state=a);continue;default:throw new Error(this,"Unknown state: "+this.state)}this.position>=this.bufferCheckPosition&&function(e){for(var n=Math.max(t.MAX_BUFFER_LENGTH,10),o=0,i=0,s=r.length;i<s;i++){var a=e[r[i]].length;if(a>n)switch(r[i]){case"textNode":T(e);break;case"cdata":O(e,"oncdata",e.cdata),e.cdata="";break;case"script":O(e,"onscript",e.script),e.script="";break;default:M(e,"Max buffer length exceeded: "+r[i])}o=Math.max(o,a)}var l=t.MAX_BUFFER_LENGTH-o;e.bufferCheckPosition=l+e.position}(this);return this}
/*! http://mths.be/fromcodepoint v0.1.0 by @mathias */,resume:function(){return this.error=null,this},close:function(){return this.write(null)},flush:function(){var e;T(e=this),""!==e.cdata&&(O(e,"oncdata",e.cdata),e.cdata=""),""!==e.script&&(O(e,"onscript",e.script),e.script="")}};try{o=n(198).Stream}catch(e){o=function(){}}var s=t.EVENTS.filter(function(e){return"error"!==e&&"end"!==e});function a(e,t){if(!(this instanceof a))return new a(e,t);o.apply(this),this._parser=new i(e,t),this.writable=!0,this.readable=!0;var n=this;this._parser.onend=function(){n.emit("end")},this._parser.onerror=function(e){n.emit("error",e),n._parser.error=null},this._decoder=null,s.forEach(function(e){Object.defineProperty(n,"on"+e,{get:function(){return n._parser["on"+e]},set:function(t){if(!t)return n.removeAllListeners(e),n._parser["on"+e]=t,t;n.on(e,t)},enumerable:!0,configurable:!1})})}a.prototype=Object.create(o.prototype,{constructor:{value:a}}),a.prototype.write=function(t){if("function"==typeof e&&"function"==typeof e.isBuffer&&e.isBuffer(t)){if(!this._decoder){var o=n(78).StringDecoder;this._decoder=new o("utf8")}t=this._decoder.write(t)}return this._parser.write(t.toString()),this.emit("data",t),!0},a.prototype.end=function(e){return e&&e.length&&this.write(e),this._parser.end(),!0},a.prototype.on=function(e,t){var n=this;return n._parser["on"+e]||-1===s.indexOf(e)||(n._parser["on"+e]=function(){var t=1===arguments.length?[arguments[0]]:Array.apply(null,arguments);t.splice(0,0,e),n.emit.apply(n,t)}),o.prototype.on.call(n,e,t)};var l="[CDATA[",c="DOCTYPE",u="http://www.w3.org/XML/1998/namespace",p="http://www.w3.org/2000/xmlns/",d={xml:u,xmlns:p},h=/[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,f=/[:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/,m=/[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD]/,y=/[#:_A-Za-z\u00C0-\u00D6\u00D8-\u00F6\u00F8-\u02FF\u0370-\u037D\u037F-\u1FFF\u200C-\u200D\u2070-\u218F\u2C00-\u2FEF\u3001-\uD7FF\uF900-\uFDCF\uFDF0-\uFFFD\u00B7\u0300-\u036F\u203F-\u2040.\d-]/;function b(e){return" "===e||"\n"===e||"\r"===e||"\t"===e}function g(e){return'"'===e||"'"===e}function _(e){return">"===e||b(e)}function v(e,t){return e.test(t)}function C(e,t){return!v(e,t)}var I,P,E,S=0;for(var D in t.STATE={BEGIN:S++,BEGIN_WHITESPACE:S++,TEXT:S++,TEXT_ENTITY:S++,OPEN_WAKA:S++,SGML_DECL:S++,SGML_DECL_QUOTED:S++,DOCTYPE:S++,DOCTYPE_QUOTED:S++,DOCTYPE_DTD:S++,DOCTYPE_DTD_QUOTED:S++,COMMENT_STARTING:S++,COMMENT:S++,COMMENT_ENDING:S++,COMMENT_ENDED:S++,CDATA:S++,CDATA_ENDING:S++,CDATA_ENDING_2:S++,PROC_INST:S++,PROC_INST_BODY:S++,PROC_INST_ENDING:S++,OPEN_TAG:S++,OPEN_TAG_SLASH:S++,ATTRIB:S++,ATTRIB_NAME:S++,ATTRIB_NAME_SAW_WHITE:S++,ATTRIB_VALUE:S++,ATTRIB_VALUE_QUOTED:S++,ATTRIB_VALUE_CLOSED:S++,ATTRIB_VALUE_UNQUOTED:S++,ATTRIB_VALUE_ENTITY_Q:S++,ATTRIB_VALUE_ENTITY_U:S++,CLOSE_TAG:S++,CLOSE_TAG_SAW_WHITE:S++,SCRIPT:S++,SCRIPT_ENDING:S++},t.XML_ENTITIES={amp:"&",gt:">",lt:"<",quot:'"',apos:"'"},t.ENTITIES={amp:"&",gt:">",lt:"<",quot:'"',apos:"'",AElig:198,Aacute:193,Acirc:194,Agrave:192,Aring:197,Atilde:195,Auml:196,Ccedil:199,ETH:208,Eacute:201,Ecirc:202,Egrave:200,Euml:203,Iacute:205,Icirc:206,Igrave:204,Iuml:207,Ntilde:209,Oacute:211,Ocirc:212,Ograve:210,Oslash:216,Otilde:213,Ouml:214,THORN:222,Uacute:218,Ucirc:219,Ugrave:217,Uuml:220,Yacute:221,aacute:225,acirc:226,aelig:230,agrave:224,aring:229,atilde:227,auml:228,ccedil:231,eacute:233,ecirc:234,egrave:232,eth:240,euml:235,iacute:237,icirc:238,igrave:236,iuml:239,ntilde:241,oacute:243,ocirc:244,ograve:242,oslash:248,otilde:245,ouml:246,szlig:223,thorn:254,uacute:250,ucirc:251,ugrave:249,uuml:252,yacute:253,yuml:255,copy:169,reg:174,nbsp:160,iexcl:161,cent:162,pound:163,curren:164,yen:165,brvbar:166,sect:167,uml:168,ordf:170,laquo:171,not:172,shy:173,macr:175,deg:176,plusmn:177,sup1:185,sup2:178,sup3:179,acute:180,micro:181,para:182,middot:183,cedil:184,ordm:186,raquo:187,frac14:188,frac12:189,frac34:190,iquest:191,times:215,divide:247,OElig:338,oelig:339,Scaron:352,scaron:353,Yuml:376,fnof:402,circ:710,tilde:732,Alpha:913,Beta:914,Gamma:915,Delta:916,Epsilon:917,Zeta:918,Eta:919,Theta:920,Iota:921,Kappa:922,Lambda:923,Mu:924,Nu:925,Xi:926,Omicron:927,Pi:928,Rho:929,Sigma:931,Tau:932,Upsilon:933,Phi:934,Chi:935,Psi:936,Omega:937,alpha:945,beta:946,gamma:947,delta:948,epsilon:949,zeta:950,eta:951,theta:952,iota:953,kappa:954,lambda:955,mu:956,nu:957,xi:958,omicron:959,pi:960,rho:961,sigmaf:962,sigma:963,tau:964,upsilon:965,phi:966,chi:967,psi:968,omega:969,thetasym:977,upsih:978,piv:982,ensp:8194,emsp:8195,thinsp:8201,zwnj:8204,zwj:8205,lrm:8206,rlm:8207,ndash:8211,mdash:8212,lsquo:8216,rsquo:8217,sbquo:8218,ldquo:8220,rdquo:8221,bdquo:8222,dagger:8224,Dagger:8225,bull:8226,hellip:8230,permil:8240,prime:8242,Prime:8243,lsaquo:8249,rsaquo:8250,oline:8254,frasl:8260,euro:8364,image:8465,weierp:8472,real:8476,trade:8482,alefsym:8501,larr:8592,uarr:8593,rarr:8594,darr:8595,harr:8596,crarr:8629,lArr:8656,uArr:8657,rArr:8658,dArr:8659,hArr:8660,forall:8704,part:8706,exist:8707,empty:8709,nabla:8711,isin:8712,notin:8713,ni:8715,prod:8719,sum:8721,minus:8722,lowast:8727,radic:8730,prop:8733,infin:8734,ang:8736,and:8743,or:8744,cap:8745,cup:8746,int:8747,there4:8756,sim:8764,cong:8773,asymp:8776,ne:8800,equiv:8801,le:8804,ge:8805,sub:8834,sup:8835,nsub:8836,sube:8838,supe:8839,oplus:8853,otimes:8855,perp:8869,sdot:8901,lceil:8968,rceil:8969,lfloor:8970,rfloor:8971,lang:9001,rang:9002,loz:9674,spades:9824,clubs:9827,hearts:9829,diams:9830},Object.keys(t.ENTITIES).forEach(function(e){var n=t.ENTITIES[e],o="number"==typeof n?String.fromCharCode(n):n;t.ENTITIES[e]=o}),t.STATE)t.STATE[t.STATE[D]]=D;function w(e,t,n){e[t]&&e[t](n)}function O(e,t,n){e.textNode&&T(e),w(e,t,n)}function T(e){e.textNode=F(e.opt,e.textNode),e.textNode&&w(e,"ontext",e.textNode),e.textNode=""}function F(e,t){return e.trim&&(t=t.trim()),e.normalize&&(t=t.replace(/\s+/g," ")),t}function M(e,t){return T(e),e.trackPosition&&(t+="\nLine: "+e.line+"\nColumn: "+e.column+"\nChar: "+e.c),t=new Error(t),e.error=t,w(e,"onerror",t),e}function x(e){return e.sawRoot&&!e.closedRoot&&A(e,"Unclosed root tag"),e.state!==S.BEGIN&&e.state!==S.BEGIN_WHITESPACE&&e.state!==S.TEXT&&M(e,"Unexpected end"),T(e),e.c="",e.closed=!0,w(e,"onend"),i.call(e,e.strict,e.opt),e}function A(e,t){if("object"!=typeof e||!(e instanceof i))throw new Error("bad call to strictFail");e.strict&&M(e,t)}function k(e){e.strict||(e.tagName=e.tagName[e.looseCase]());var t=e.tags[e.tags.length-1]||e,n=e.tag={name:e.tagName,attributes:{}};e.opt.xmlns&&(n.ns=t.ns),e.attribList.length=0,O(e,"onopentagstart",n)}function R(e,t){var n=e.indexOf(":")<0?["",e]:e.split(":"),o=n[0],r=n[1];return t&&"xmlns"===e&&(o="xmlns",r=""),{prefix:o,local:r}}function L(e){if(e.strict||(e.attribName=e.attribName[e.looseCase]()),-1!==e.attribList.indexOf(e.attribName)||e.tag.attributes.hasOwnProperty(e.attribName))e.attribName=e.attribValue="";else{if(e.opt.xmlns){var t=R(e.attribName,!0),n=t.prefix,o=t.local;if("xmlns"===n)if("xml"===o&&e.attribValue!==u)A(e,"xml: prefix must be bound to "+u+"\nActual: "+e.attribValue);else if("xmlns"===o&&e.attribValue!==p)A(e,"xmlns: prefix must be bound to "+p+"\nActual: "+e.attribValue);else{var r=e.tag,i=e.tags[e.tags.length-1]||e;r.ns===i.ns&&(r.ns=Object.create(i.ns)),r.ns[o]=e.attribValue}e.attribList.push([e.attribName,e.attribValue])}else e.tag.attributes[e.attribName]=e.attribValue,O(e,"onattribute",{name:e.attribName,value:e.attribValue});e.attribName=e.attribValue=""}}function N(e,t){if(e.opt.xmlns){var n=e.tag,o=R(e.tagName);n.prefix=o.prefix,n.local=o.local,n.uri=n.ns[o.prefix]||"",n.prefix&&!n.uri&&(A(e,"Unbound namespace prefix: "+JSON.stringify(e.tagName)),n.uri=o.prefix);var r=e.tags[e.tags.length-1]||e;n.ns&&r.ns!==n.ns&&Object.keys(n.ns).forEach(function(t){O(e,"onopennamespace",{prefix:t,uri:n.ns[t]})});for(var i=0,s=e.attribList.length;i<s;i++){var a=e.attribList[i],l=a[0],c=a[1],u=R(l,!0),p=u.prefix,d=u.local,h=""===p?"":n.ns[p]||"",f={name:l,value:c,prefix:p,local:d,uri:h};p&&"xmlns"!==p&&!h&&(A(e,"Unbound namespace prefix: "+JSON.stringify(p)),f.uri=p),e.tag.attributes[l]=f,O(e,"onattribute",f)}e.attribList.length=0}e.tag.isSelfClosing=!!t,e.sawRoot=!0,e.tags.push(e.tag),O(e,"onopentag",e.tag),t||(e.noscript||"script"!==e.tagName.toLowerCase()?e.state=S.TEXT:e.state=S.SCRIPT,e.tag=null,e.tagName=""),e.attribName=e.attribValue="",e.attribList.length=0}function B(e){if(!e.tagName)return A(e,"Weird empty close tag."),e.textNode+="</>",void(e.state=S.TEXT);if(e.script){if("script"!==e.tagName)return e.script+="</"+e.tagName+">",e.tagName="",void(e.state=S.SCRIPT);O(e,"onscript",e.script),e.script=""}var t=e.tags.length,n=e.tagName;e.strict||(n=n[e.looseCase]());for(var o=n;t--;){if(e.tags[t].name===o)break;A(e,"Unexpected close tag")}if(t<0)return A(e,"Unmatched closing tag: "+e.tagName),e.textNode+="</"+e.tagName+">",void(e.state=S.TEXT);e.tagName=n;for(var r=e.tags.length;r-- >t;){var i=e.tag=e.tags.pop();e.tagName=e.tag.name,O(e,"onclosetag",e.tagName);var s={};for(var a in i.ns)s[a]=i.ns[a];var l=e.tags[e.tags.length-1]||e;e.opt.xmlns&&i.ns!==l.ns&&Object.keys(i.ns).forEach(function(t){var n=i.ns[t];O(e,"onclosenamespace",{prefix:t,uri:n})})}0===t&&(e.closedRoot=!0),e.tagName=e.attribValue=e.attribName="",e.attribList.length=0,e.state=S.TEXT}function U(e){var t,n=e.entity,o=n.toLowerCase(),r="";return e.ENTITIES[n]?e.ENTITIES[n]:e.ENTITIES[o]?e.ENTITIES[o]:("#"===(n=o).charAt(0)&&("x"===n.charAt(1)?(n=n.slice(2),r=(t=parseInt(n,16)).toString(16)):(n=n.slice(1),r=(t=parseInt(n,10)).toString(10))),n=n.replace(/^0+/,""),isNaN(t)||r.toLowerCase()!==n?(A(e,"Invalid character entity"),"&"+e.entity+";"):String.fromCodePoint(t))}function j(e,t){"<"===t?(e.state=S.OPEN_WAKA,e.startTagPosition=e.position):b(t)||(A(e,"Non-whitespace before first tag."),e.textNode=t,e.state=S.TEXT)}function W(e,t){var n="";return t<e.length&&(n=e.charAt(t)),n}S=t.STATE,String.fromCodePoint||(I=String.fromCharCode,P=Math.floor,E=function(){var e,t,n=[],o=-1,r=arguments.length;if(!r)return"";for(var i="";++o<r;){var s=Number(arguments[o]);if(!isFinite(s)||s<0||s>1114111||P(s)!==s)throw RangeError("Invalid code point: "+s);s<=65535?n.push(s):(e=55296+((s-=65536)>>10),t=s%1024+56320,n.push(e,t)),(o+1===r||n.length>16384)&&(i+=I.apply(null,n),n.length=0)}return i},Object.defineProperty?Object.defineProperty(String,"fromCodePoint",{value:E,configurable:!0,writable:!0}):String.fromCodePoint=E)}(t)}).call(this,n(75).Buffer)},function(e,t,n){"use strict";t.byteLength=function(e){var t=c(e),n=t[0],o=t[1];return 3*(n+o)/4-o},t.toByteArray=function(e){for(var t,n=c(e),o=n[0],s=n[1],a=new i(function(e,t,n){return 3*(t+n)/4-n}(0,o,s)),l=0,u=s>0?o-4:o,p=0;p<u;p+=4)t=r[e.charCodeAt(p)]<<18|r[e.charCodeAt(p+1)]<<12|r[e.charCodeAt(p+2)]<<6|r[e.charCodeAt(p+3)],a[l++]=t>>16&255,a[l++]=t>>8&255,a[l++]=255&t;2===s&&(t=r[e.charCodeAt(p)]<<2|r[e.charCodeAt(p+1)]>>4,a[l++]=255&t);1===s&&(t=r[e.charCodeAt(p)]<<10|r[e.charCodeAt(p+1)]<<4|r[e.charCodeAt(p+2)]>>2,a[l++]=t>>8&255,a[l++]=255&t);return a},t.fromByteArray=function(e){for(var t,n=e.length,r=n%3,i=[],s=0,a=n-r;s<a;s+=16383)i.push(u(e,s,s+16383>a?a:s+16383));1===r?(t=e[n-1],i.push(o[t>>2]+o[t<<4&63]+"==")):2===r&&(t=(e[n-2]<<8)+e[n-1],i.push(o[t>>10]+o[t>>4&63]+o[t<<2&63]+"="));return i.join("")};for(var o=[],r=[],i="undefined"!=typeof Uint8Array?Uint8Array:Array,s="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/",a=0,l=s.length;a<l;++a)o[a]=s[a],r[s.charCodeAt(a)]=a;function c(e){var t=e.length;if(t%4>0)throw new Error("Invalid string. Length must be a multiple of 4");var n=e.indexOf("=");return-1===n&&(n=t),[n,n===t?0:4-n%4]}function u(e,t,n){for(var r,i,s=[],a=t;a<n;a+=3)r=(e[a]<<16&16711680)+(e[a+1]<<8&65280)+(255&e[a+2]),s.push(o[(i=r)>>18&63]+o[i>>12&63]+o[i>>6&63]+o[63&i]);return s.join("")}r["-".charCodeAt(0)]=62,r["_".charCodeAt(0)]=63},function(e,t){t.read=function(e,t,n,o,r){var i,s,a=8*r-o-1,l=(1<<a)-1,c=l>>1,u=-7,p=n?r-1:0,d=n?-1:1,h=e[t+p];for(p+=d,i=h&(1<<-u)-1,h>>=-u,u+=a;u>0;i=256*i+e[t+p],p+=d,u-=8);for(s=i&(1<<-u)-1,i>>=-u,u+=o;u>0;s=256*s+e[t+p],p+=d,u-=8);if(0===i)i=1-c;else{if(i===l)return s?NaN:1/0*(h?-1:1);s+=Math.pow(2,o),i-=c}return(h?-1:1)*s*Math.pow(2,i-o)},t.write=function(e,t,n,o,r,i){var s,a,l,c=8*i-r-1,u=(1<<c)-1,p=u>>1,d=23===r?Math.pow(2,-24)-Math.pow(2,-77):0,h=o?0:i-1,f=o?1:-1,m=t<0||0===t&&1/t<0?1:0;for(t=Math.abs(t),isNaN(t)||t===1/0?(a=isNaN(t)?1:0,s=u):(s=Math.floor(Math.log(t)/Math.LN2),t*(l=Math.pow(2,-s))<1&&(s--,l*=2),(t+=s+p>=1?d/l:d*Math.pow(2,1-p))*l>=2&&(s++,l/=2),s+p>=u?(a=0,s=u):s+p>=1?(a=(t*l-1)*Math.pow(2,r),s+=p):(a=t*Math.pow(2,p-1)*Math.pow(2,r),s=0));r>=8;e[n+h]=255&a,h+=f,a/=256,r-=8);for(s=s<<r|a,c+=r;c>0;e[n+h]=255&s,h+=f,s/=256,c-=8);e[n+h-f]|=128*m}},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t,n){e.exports=r;var o=n(59).EventEmitter;function r(){o.call(this)}n(36)(r,o),r.Readable=n(76),r.Writable=n(206),r.Duplex=n(207),r.Transform=n(208),r.PassThrough=n(209),r.Stream=r,r.prototype.pipe=function(e,t){var n=this;function r(t){e.writable&&!1===e.write(t)&&n.pause&&n.pause()}function i(){n.readable&&n.resume&&n.resume()}n.on("data",r),e.on("drain",i),e._isStdio||t&&!1===t.end||(n.on("end",a),n.on("close",l));var s=!1;function a(){s||(s=!0,e.end())}function l(){s||(s=!0,"function"==typeof e.destroy&&e.destroy())}function c(e){if(u(),0===o.listenerCount(this,"error"))throw e}function u(){n.removeListener("data",r),e.removeListener("drain",i),n.removeListener("end",a),n.removeListener("close",l),n.removeListener("error",c),e.removeListener("error",c),n.removeListener("end",u),n.removeListener("close",u),e.removeListener("close",u)}return n.on("error",c),e.on("error",c),n.on("end",u),n.on("close",u),e.on("close",u),e.emit("pipe",n),e}},function(e,t){var n={}.toString;e.exports=Array.isArray||function(e){return"[object Array]"==n.call(e)}},function(e,t){},function(e,t,n){"use strict";var o=n(61).Buffer,r=n(202);e.exports=function(){function e(){!function(e,t){if(!(e instanceof t))throw new TypeError("Cannot call a class as a function")}(this,e),this.head=null,this.tail=null,this.length=0}return e.prototype.push=function(e){var t={data:e,next:null};this.length>0?this.tail.next=t:this.head=t,this.tail=t,++this.length},e.prototype.unshift=function(e){var t={data:e,next:this.head};0===this.length&&(this.tail=t),this.head=t,++this.length},e.prototype.shift=function(){if(0!==this.length){var e=this.head.data;return 1===this.length?this.head=this.tail=null:this.head=this.head.next,--this.length,e}},e.prototype.clear=function(){this.head=this.tail=null,this.length=0},e.prototype.join=function(e){if(0===this.length)return"";for(var t=this.head,n=""+t.data;t=t.next;)n+=e+t.data;return n},e.prototype.concat=function(e){if(0===this.length)return o.alloc(0);if(1===this.length)return this.head.data;for(var t,n,r,i=o.allocUnsafe(e>>>0),s=this.head,a=0;s;)t=s.data,n=i,r=a,t.copy(n,r),a+=s.data.length,s=s.next;return i},e}(),r&&r.inspect&&r.inspect.custom&&(e.exports.prototype[r.inspect.custom]=function(){var e=r.inspect({length:this.length});return this.constructor.name+" "+e})},function(e,t){},function(e,t,n){(function(e,t){!function(e,n){"use strict";if(!e.setImmediate){var o,r,i,s,a,l=1,c={},u=!1,p=e.document,d=Object.getPrototypeOf&&Object.getPrototypeOf(e);d=d&&d.setTimeout?d:e,"[object process]"==={}.toString.call(e.process)?o=function(e){t.nextTick(function(){f(e)})}:!function(){if(e.postMessage&&!e.importScripts){var t=!0,n=e.onmessage;return e.onmessage=function(){t=!1},e.postMessage("","*"),e.onmessage=n,t}}()?e.MessageChannel?((i=new MessageChannel).port1.onmessage=function(e){f(e.data)},o=function(e){i.port2.postMessage(e)}):p&&"onreadystatechange"in p.createElement("script")?(r=p.documentElement,o=function(e){var t=p.createElement("script");t.onreadystatechange=function(){f(e),t.onreadystatechange=null,r.removeChild(t),t=null},r.appendChild(t)}):o=function(e){setTimeout(f,0,e)}:(s="setImmediate$"+Math.random()+"$",a=function(t){t.source===e&&"string"==typeof t.data&&0===t.data.indexOf(s)&&f(+t.data.slice(s.length))},e.addEventListener?e.addEventListener("message",a,!1):e.attachEvent("onmessage",a),o=function(t){e.postMessage(s+t,"*")}),d.setImmediate=function(e){"function"!=typeof e&&(e=new Function(""+e));for(var t=new Array(arguments.length-1),n=0;n<t.length;n++)t[n]=arguments[n+1];var r={callback:e,args:t};return c[l]=r,o(l),l++},d.clearImmediate=h}function h(e){delete c[e]}function f(e){if(u)setTimeout(f,0,e);else{var t=c[e];if(t){u=!0;try{!function(e){var t=e.callback,o=e.args;switch(o.length){case 0:t();break;case 1:t(o[0]);break;case 2:t(o[0],o[1]);break;case 3:t(o[0],o[1],o[2]);break;default:t.apply(n,o)}}(t)}finally{h(e),u=!1}}}}}("undefined"==typeof self?void 0===e?this:e:self)}).call(this,n(30),n(39))},function(e,t,n){(function(t){function n(e){try{if(!t.localStorage)return!1}catch(e){return!1}var n=t.localStorage[e];return null!=n&&"true"===String(n).toLowerCase()}e.exports=function(e,t){if(n("noDeprecation"))return e;var o=!1;return function(){if(!o){if(n("throwDeprecation"))throw new Error(t);n("traceDeprecation")?console.trace(t):console.warn(t),o=!0}return e.apply(this,arguments)}}}).call(this,n(30))},function(e,t,n){"use strict";e.exports=i;var o=n(109),r=n(40);function i(e){if(!(this instanceof i))return new i(e);o.call(this,e)}r.inherits=n(36),r.inherits(i,o),i.prototype._transform=function(e,t,n){n(null,e)}},function(e,t,n){e.exports=n(77)},function(e,t,n){e.exports=n(31)},function(e,t,n){e.exports=n(76).Transform},function(e,t,n){e.exports=n(76).PassThrough},function(e,t){(function(){"use strict";t.stripBOM=function(e){return"\ufeff"===e[0]?e.substring(1):e}}).call(this)},function(e,t){},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(2),r=n(112),i=n(20),s=n(23);t.XRMINIT=!1;var a="Utility",l="UserSettings",c="Device",u="Navigation",p="WebApi";t.InitializeXrm=function(){if(!t.XRMINIT){var e=o.default;e.setClient({getClient:function(){return"Mock Client"},getClientState:function(){return"Online"},getFormFactor:function(){return 1}}),e.setUtils({getEntityMetadata:function(e,t){return r.LogInfoMessage("getEntityMetadata",a,[e,t]),Promise.resolve({})},lookupObjects:function(e){return r.LogInfoMessage("lookupObjects",a,[e]),Promise.resolve([])}}),e.setUserSettings({getTimeZoneOffsetMinutes:function(e){return r.LogInfoMessage("getTimeZoneOffsetMinutes",l,[e]),0},userId:"Mock User Id",userName:"Mock User Name",languageId:1033,securityRoles:[],isRTL:!1}),e.setDeviceContext({captureImage:function(e){return r.LogInfoMessage("captureImage",c,[e]),Promise.resolve({fileContent:"foo",fileName:"foo.jpeg",fileSize:1,mimeType:""})},captureAudio:function(){return r.LogInfoMessage("captureAudio",c),Promise.resolve({fileContent:"foo",fileName:"foo.mp3",fileSize:1,mimeType:""})},captureVideo:function(){return r.LogInfoMessage("captureVideo",c),Promise.resolve({fileContent:"foo",fileName:"foo.mp4",fileSize:1,mimeType:""})},pickFile:function(e){return r.LogInfoMessage("pickFile",c,[e]),Promise.resolve([{fileContent:"foo",fileName:"foo.txt",fileSize:1,mimeType:""}])},getBarcodeValue:function(){return r.LogInfoMessage("getBarcodeValue",c),Promise.resolve("")},isGetBarcodeValueAvailable:function(){return r.LogInfoMessage("isGetBarcodeValueAvailable",c),!0},getCurrentPosition:function(){return r.LogInfoMessage("getCurrentPosition",c),Promise.resolve({coords:void 0,timestamp:void 0})}}),e.setNavigationContext({openAlertDialog:function(e,t){return r.LogInfoMessage("openAlertDialog",u,[e,t]),new Promise(function(t,n){try{window.alert(e.text),t({})}catch(e){n({})}})},openConfirmDialog:function(e,t){return r.LogInfoMessage("openConfirmDialog",u,[e,t]),new Promise(function(t,n){try{t({confirmed:window.confirm(e.text)})}catch(e){n({confirmed:!1})}})},openDialog:function(e,t,n){return r.LogInfoMessage("openDialo",u,[e,t]),new Promise(function(e,t){try{e({parameters:n})}catch(e){t({})}})},openErrorDialog:function(e){r.LogInfoMessage("openErrorDialog",u,[e]);var t=[i.translate(s.strings.message.key)+": "+e.message,i.translate(s.strings.details.key)+": "+e.details,i.translate(s.strings.error_code.key)+": "+e.errorCode].join("\n");return new Promise(function(e,n){try{window.alert(t),e({})}catch(e){n({})}})},openFile:function(e,t){return r.LogInfoMessage("openFile",u,[e,t]),Promise.resolve()},openForm:function(e,t){return r.LogInfoMessage("openForm",u,[e,t]),Promise.resolve({savedEntityReference:[]})},openTaskFlow:function(e,t,n){return r.LogInfoMessage("openTaskFlow",u,[t,n]),Promise.resolve({parameters:n})},openUrl:function(e,t){r.LogInfoMessage("openUrl",u,[e,t])},openWebResource:function(e,t,n){r.LogInfoMessage("openWebResource",u,[e,t,n])}});var n={createRecord:function(e,t){return r.LogInfoMessage("createRecord",p,[e,t]),Promise.resolve({})},deleteRecord:function(e,t){return r.LogInfoMessage("deleteRecord",p,[e,t]),Promise.resolve({})},updateRecord:function(e,t,n){return r.LogInfoMessage("updateRecord",p,[e,t,n]),Promise.resolve({})},retrieveMultipleRecords:function(e,t,n){return r.LogInfoMessage("retrieveMultipleRecords",p,[e,t,n]),Promise.resolve({})},retrieveRecord:function(e,t,n){return r.LogInfoMessage("retrieveRecord",p,[e,t,n]),Promise.resolve({})}};e.setWebApi({offline:n,online:n}),e.setReporting({reportSuccess:function(e,t){},reportFailure:function(e,t,n,o){return e+" error: "+t},reportEvent:function(e){}}),e.setDiagnostics({traceError:function(e,t){return e+" error: "+t},traceWarning:function(e,t){},traceInfo:function(e,t){return e+" message: "+t},traceDebug:function(e,t){}}),t.XRMINIT=!0}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(214),r=n(113),i=n(216),s=n(79),a=n(111),l=n(62),c=n(218),u=n(290);function p(e,t){var n=d(e,t),s=h(e),c=m(e,t,n.Parameters),u=y(e),p=i.DefaultPropBagData;return p.resourcesData.strings=a.ResourceStrings,{controlId:"",id:"",systemDefinedProperties:{},configuration:n,descriptor:u,formInfo:void 0,parentDefinedControlProps:{height:-1,width:-1},rowSpan:1,themingData:r.DefaultThemingData,children:void 0,contextString:"default",logLevel:2,stateToPropsMappingError:!1,dynamicData:c,manifest:s,personalizationState:void 0,propBagData:p,personalizationConfiguration:void 0,pageType:"EditForm",popupStack:[],contextToken:{contextTokenType:1,entityTypeName:l.DefaultEntity.EntityLogicalName},internalCommandManagerEtns:[],updatedProperties:[],internalCommandManagerIds:[],globalCommandManagerInitialized:!1,portalFlyoutToDialogId:"",propBagMethods:o.DefaultHostDispatchProps.propBagMethods,actions:o.DefaultHostDispatchProps.actions}}function d(e,t){var n={},o=e.Properties,r=e.DataSetDefinitions;return o&&Object.keys(o).forEach(function(e){t.properties[e]&&(n[e]={Usage:o[e].Usage,Static:o[e].Static,Type:t.properties[e].SelectedType,Value:t.properties[e].Value,Primary:o[e].IsPrimary})}),r&&Object.keys(r).forEach(function(e){if(t.datasets[e]){var o;o=Object.keys(t.datasets[e].SelectedTypes).map(function(n){return{Alias:n,DisplayName:n+"'s Display Name",DataType:t.datasets[e].SelectedTypes[n],Name:n+"'s Logical Name",Type:void 0}}),n[e]={Name:e,Columns:o,ViewId:l.DefaultEntity.ViewId,TargetEntityType:l.DefaultEntity.EntityLogicalName}}}),{FormFactor:1,CustomControlId:e.ConstructorName,Name:e.ConstructorName,DisplayNameKey:e.DisplayNameKey,Version:e.Version,Parameters:n,ShouldOverrideControlVisible:!1}}function h(e){var t=f(e.Properties),n={};return e.DataSetDefinitions&&Object.keys(e.DataSetDefinitions).forEach(function(t){var o=f(e.DataSetDefinitions[t].Columns);n[t]={DisplayName:e.DataSetDefinitions[t].DisplayName,Type:e.DataSetDefinitions[t].Type,Columns:o,Primary:e.DataSetDefinitions[t].Primary}}),{ConstructorName:e.ConstructorName,CustomControlId:e.ConstructorName,IsVirtual:e.IsVirtual,Properties:{Resources:e.Resources,GroupDefinitions:e.GroupDefinitions,DataSetDefinitions:n,Properties:t}}}function f(e){var t={};return e&&Object.keys(e).forEach(function(n){t[n]={Required:e[n].Required,DefaultValue:e[n].DefaultValue,Usage:e[n].Usage,Name:n}}),t}function m(e,t,n){var o={updated:!0,dataReady:!0,parameters:{}};return e.Properties&&Object.keys(e.Properties).forEach(function(n){var r=t.properties[n],i=s.ParseRaw(r.Value,r.SelectedType),a=s.GenerateFormatted(i,r.SelectedType),l=0===e.Properties[n].Usage,c=t.properties[n].SelectedType;o.parameters[n]={raw:i,formatted:l?a:void 0,attributes:l?u.CreateAttributesFromProp(n,c):void 0,type:c,error:!1,errorMessage:void 0,notifications:void 0,security:{secured:!1,editable:!0,readable:!0}}}),e.DataSetDefinitions&&Object.keys(e.DataSetDefinitions).forEach(function(e){o.parameters[e]=c.CreateIDataSetParameter(n[e],t.datasets[e],e)}),o}function y(e){return{Id:e.ConstructorName,Name:e.ConstructorName,DomId:e.ConstructorName,Visible:!0,Disabled:!1,Label:"",ShowLabel:!1,ClassId:void 0,UniqueId:void 0,Parameters:[],parentFieldSectionItem:void 0}}t.createWebClientWrapperProps=function(e,t,n){var o=p(e,t);return o.actions.updateOutputs=n,{givenHostProps:o,setReRenderCallBack:function(e){}}},t.createDefaultHostProps=p,t.createControlConfiguration=d,t.createControlManifest=h,t.createDynamicData=m,t.createDescriptor=y},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(215);t.DefaultUtilsDispatch={setState:function(e){return console.log("Invoked method setState()"),!1},logMessage:function(e,t,n){console.log("Invoked method logMessage()")}},t.DefaultNavigationDispatch={openEditForm:function(e,t,n,o,r){console.log("Invoked method openEditForm()")},openGridPage:function(e,t,n,o,r,i,s){console.log("Invoked method openGridPage()")},openDashboard:function(e){console.log("Invoked method openDashboard()")},openCreateForm:function(e,t,n){console.log("Invoked method openCreateForm()")},openSearch:function(e){console.log("Invoked method openSearch()")},openPowerBIFullScreenPage:function(e,t,n,o,r,i,s){console.log("Invoked method openPowerBIFullScreenPage()")},openUrl:function(e,t){console.log("Invoked method openUrl()")},openUrlWithProtocol:function(e,t){console.log("Invoked method openUrlWithProtocol()")},openPhoneNumber:function(e,t,n,o,r){console.log("Invoked method openPhoneNumber()")},openMaps:function(e){console.log("Invoked method openMaps()")},openMap:function(e){console.log("Invoked method openMap()")}},t.DefaultDeviceDispatch={isGetBarcodeValueOperationAvailable:function(){return console.log("Invoked method isGetBarcodeValueOperationAvailable()"),!1},isTakePictureOperationAvailable:function(){return console.log("Invoked method isTakePictureOperationAvailable()"),!1},isCaptureVideoOperationAvailable:function(){return console.log("Invoked method isCaptureVideoOperationAvailable()"),!1},isCaptureAudioOperationAvailable:function(){return console.log("Invoked method isCaptureAudioOperationAvailable()"),!1}},t.DefaultModeDispatch={setNotification:function(e,t,n,o,r,i,s){return console.log("Invoked method setNotification()"),!1},clearNotification:function(e,t,n,o,r,i){return console.log("Invoked method clearNotification()"),!1}},t.DefaultHostDispatchProps={propBagMethods:{utils:t.DefaultUtilsDispatch,navigation:t.DefaultNavigationDispatch,device:t.DefaultDeviceDispatch,mode:t.DefaultModeDispatch},actions:o.DefaultDispatchPropsActions}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0}),t.DefaultDispatchPropsActions={clearNestedChild:function(e){return!1},createAccessibilityComponent:function(e){},createCommandManagerUXComponent:function(){},createKeyboardShortcut:function(e,t,n,o,r,i){},createXrmForm:function(e,t,n,o){return!1},createXrmGrid:function(e,t,n,o){return!1},registerNewControl:function(e,t,n,o){return!1},executeAddOnLoad:function(e,t){},executeNotifyHandlersThatEventOccurred:function(e){return new Promise(function(e){e()})},getRecordSetQueryKey:function(e){return""},addSessionTab:function(e){return new Promise(function(e){e()})},closeSessionTab:function(e){return new Promise(function(e){e()})},updateSessionTab:function(e){return new Promise(function(e){e()})},closeAllSessionTabs:function(){return new Promise(function(e){e()})},dismissMessage:function(){return new Promise(function(e){e()})},initializeReferencePanelControl:function(e){return new Promise(function(e){e()})},cleanReferencePanelState:function(){return new Promise(function(e){e()})},markActiveTab:function(e,t){return new Promise(function(e){e()})},getResource:function(e){return new Promise(function(e){e()})},initializeCommandManager:function(e,t,n,o){return new Promise(function(e){e()})},loadManifest:function(e,t){return new Promise(function(e){e()})},loadResources:function(e){return new Promise(function(e){e()})},loadResourceStrings:function(e){return new Promise(function(e){e()})},triggerOfflineMetadataSync:function(){return new Promise(function(e){e()})},retrieveFormWithAttributes:function(e,t,n){return new Promise(function(e){e()})},refreshDataSetParameter:function(e,t){},retrieveDataSetLookupCellParameter:function(e,t,n){},renderNestedCustomControl:function(e,t,n){},renderReactSubtree:function(e,t,n){},retrieveGridData:function(e){},retrieveLookupData:function(e){},retrieveLookupMetadataAction:function(e){},addPendingCommandManagerId:function(e,t,n,o){},retrieveRecordCommand:function(e,t,n,o,r,i,s,a,l,c){},retrieveRecordDataForForm:function(e,t,n,o,r){return new Promise(function(e){e()})},retrieveForm:function(e,t){return new Promise(function(e){e()})},retrieveEntityData:function(e){return new Promise(function(e){e()})},retrieveChartDrilldownAttributes:function(e){return new Promise(function(e){e()})},retrieveView:function(e,t,n,o){},retrieveViewSelector:function(e,t){},save:function(e,t){return new Promise(function(e){e()})},saveEmbeddedEntity:function(e,t,n,o,r){return new Promise(function(e){e()})},setFieldControlPersonalization:function(e,t){},setGridControlPersonalization:function(e,t){},setDashboardControlPersonalization:function(e,t){},setGlobalControlPersonalization:function(e,t){},setPowerBISignedInState:function(e,t){},setValue:function(e,t,n,o){return new Promise(function(e){e("")})},setXrmObject:function(e){},updateFieldValue:function(e,t,n,o,r,i){},updateOutputs:function(e,t,n,o,r,i,s){},openPopup:function(e){return new Promise(function(e){e()})},closePopup:function(e){return new Promise(function(e){e()})},updateControlMemoizedDataSet:function(e,t,n){},executeRollupRequest:function(e,t){},isPresenceEnabledEntity:function(e){},getPresenceMappedField:function(e){}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(217),r=n(113),i=n(62);t.DefaultClientData={orgSettingsData:{isRTL:!1,fiscalYearStartDate:new Date("2017-01-01T18:59:00.000Z"),fiscalPeriodFormat:1,fiscalPeriodType:2002,fiscalYearFormatYear:1,fiscalYearFormatPrefix:1,fiscalYearFormatSuffix:3,fiscalYearDisplayCode:1,fiscalPeriodConnector:"s",showWeekNumber:!1,boundDashboardDefaultCardExpanded:!1,organizationId:"{E534EEBD-1E20-4C07-894A-99CD76927368}",isActionCardEnabled:!1,isEmailMonitoringAllowed:!1,allowUnresolvedPartiesOnEmailSend:!1},languageCode:1033,isRTL:!1,showWeekNumber:!1,locale:"en-US",userAgent:{isWin:!0,isAndroid:!1,isAndroidModern:!1,isIos:!1,isBrowserIE:!1,isBrowserChrome:!0,isBrowserFirefox:!1},usePathBasedUrls:!1,organizationUniqueName:"OneFarm",disableScroll:!1,formFactor:2},t.DefaultUtilsData={encoder:{CrmHtmlEncode:function(){},CrmUrlEncode:function(){}},dateTimeUtils:{getDSTAdjustmentMinutes:function(e,t){return 0},getWeekOfYear:function(e,t,n){return 0}},scheduleRender:function(e){},hasEntityPrivilege:function(e,t,n){return!1}},t.DefaultResourceData={strings:{},stringsLoaded:!0},t.DefaultModeData={entityTypeName:i.DefaultEntity.EntityLogicalName,entityId:"4ff37e24-3c76-e711-8105-000d3aa167ac",entityRecordName:"A. Datum Corporation (sample)",isOffline:!1},t.DefaultPageData={appId:"047efa7c-0976-e711-8104-000d3aa167ac",isPageReadOnly:!1},t.DefaultPropBagData={formattingData:o.DefaultFormattingData,clientData:t.DefaultClientData,utilsData:t.DefaultUtilsData,themingData:r.DefaultThemingData,accessibilityData:{assignedTabIndex:0},resourcesData:t.DefaultResourceData,modeData:t.DefaultModeData,pageData:t.DefaultPageData}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(70);t.DefaultFormattingData={timeZoneUtcOffsetMinutes:-480,dateTimeFormatInfo:{AMDesignator:"AM",AbbreviatedDayNames:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],AbbreviatedMonthGenitiveNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec",""],AbbreviatedMonthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec",""],CalendarWeekRule:0,Calendar:{MinSupportedDateTime:new Date,MaxSupportedDateTime:new Date,AlgorithmType:1,CalendarType:1,Eras:[1],TwoDigitYearMax:2029,IsReadOnly:!1,minSupportedDateTime:new Date,maxSupportedDateTime:new Date,algorithmType:1,calendarType:1,eras:[1],twoDigitYearMax:2029,isReadOnly:!1},DateSeparator:"/",DayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],FirstDayOfWeek:0,FullDateTimePattern:"dddd, MMMM d, yyyy h:mm:ss tt",LongDatePattern:"dddd, MMMM d, yyyy",LongTimePattern:"h:mm:ss tt",MonthDayPattern:"MMMM dd",MonthGenitiveNames:["January","February","March","April","May","June","July","August","September","October","November","December",""],MonthNames:["January","February","March","April","May","June","July","August","September","October","November","December",""],PMDesignator:"PM",ShortDatePattern:"M/d/yyyy",ShortTimePattern:"h:mm tt",ShortestDayNames:["Su","Mo","Tu","We","Th","Fr","Sa"],SortableDateTimePattern:"yyyy'-'MM'-'dd'T'HH':'mm':'ss",TimeSeparator:":",UniversalSortableDateTimePattern:"yyyy'-'MM'-'dd HH':'mm':'ss'Z'",YearMonthPattern:"MMMM yyyy",amDesignator:"AM",abbreviatedDayNames:["Sun","Mon","Tue","Wed","Thu","Fri","Sat"],abbreviatedMonthGenitiveNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec",""],abbreviatedMonthNames:["Jan","Feb","Mar","Apr","May","Jun","Jul","Aug","Sep","Oct","Nov","Dec",""],calendarWeekRule:0,calendar:{MinSupportedDateTime:new Date,MaxSupportedDateTime:new Date,AlgorithmType:1,CalendarType:1,Eras:[1],TwoDigitYearMax:2029,IsReadOnly:!1,minSupportedDateTime:new Date,maxSupportedDateTime:new Date,algorithmType:1,calendarType:1,eras:[1],twoDigitYearMax:2029,isReadOnly:!1},dateSeparator:"/",dayNames:["Sunday","Monday","Tuesday","Wednesday","Thursday","Friday","Saturday"],firstDayOfWeek:0,fullDateTimePattern:"dddd, MMMM d, yyyy h:mm:ss tt",longDatePattern:"dddd, MMMM d, yyyy",longTimePattern:"h:mm:ss tt",monthDayPattern:"MMMM dd",monthGenitiveNames:["January","February","March","April","May","June","July","August","September","October","November","December",""],monthNames:["January","February","March","April","May","June","July","August","September","October","November","December",""],pmDesignator:"PM",shortDatePattern:"M/d/yyyy",shortTimePattern:"h:mm tt",shortestDayNames:["Su","Mo","Tu","We","Th","Fr","Sa"],sortableDateTimePattern:"yyyy'-'MM'-'dd'T'HH':'mm':'ss",timeSeparator:":",universalSortableDateTimePattern:"yyyy'-'MM'-'dd HH':'mm':'ss'Z'",yearMonthPattern:"MMMM yyyy"},numberFormatInfo:{CurrencyDecimalDigits:2,CurrencyDecimalSeparator:".",CurrencyGroupSeparator:",",CurrencyGroupSizes:[3],CurrencyNegativePattern:0,CurrencyPositivePattern:0,CurrencySymbol:"$",NativeDigits:["0","1","2","3","4","5","6","7","8","9"],NANSymbol:"",NegativeInfinitySymbol:"-Infinity",NegativeSign:"-",NumberDecimalDigits:2,NumberDecimalSeparator:".",NumberGroupSeparator:",",NumberGroupSizes:[3],NumberNegativePattern:1,PerMilleSymbol:"�",PercentDecimalDigits:2,PercentDecimalSeparator:".",PercentGroupSeparator:",",PercentGroupSizes:[3],PercentNegativePattern:0,PercentPositivePattern:0,PercentSymbol:"%",PositiveInfinitySymbol:"Infinity",PositiveSign:"+",currencyDecimalDigits:2,currencyDecimalSeparator:".",currencyGroupSeparator:",",currencyGroupSizes:[3],currencyNegativePattern:0,currencyPositivePattern:0,currencySymbol:"$",nativeDigits:["0","1","2","3","4","5","6","7","8","9"],nanSymbol:"",negativeInfinitySymbol:"-Infinity",negativeSign:"-",numberDecimalDigits:2,numberDecimalSeparator:".",numberGroupSeparator:",",numberGroupSizes:[3],numberNegativePattern:1,perMilleSymbol:"�",percentDecimalDigits:2,percentDecimalSeparator:".",percentGroupSeparator:",",percentGroupSizes:[3],percentNegativePattern:0,percentPositivePattern:0,percentSymbol:"%",positiveInfinitySymbol:"Infinity",positiveSign:"+"},timeZoneAdjusters:[],formatInfoCultureName:"en-US",formatter:o.SimpleFormatter,languagesByCode:{1033:"English","-1":"All Languages"}}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(62),r=n(79),i=n(112),s=n(219),a={},l="DataSet",c="Paging";function u(e){var t=[],n=0;return e.Columns.forEach(function(e){t.push({name:e.Alias,displayName:e.DisplayName,dataType:e.DataType,alias:e.Alias,order:n,visualSizeFactor:100,isHidden:!1,isPrimary:!0,disableSorting:!1}),n++}),t}function p(e){return{getFilter:function(){return a[e].filtering},setFilter:function(t){a[e].filtering=s(t)},clearFilter:function(){a[e].filtering=void 0}}}function d(e){return{getLinkedEntities:function(){return a[e].linkedEntities},addLinkedEntity:function(t){a[e].linkedEntities.push(t)}}}function h(e){var t={};return Object.keys(e.Entries).forEach(function(n){var o={getFormattedValue:function(t){var o=e.SelectedTypes[t],i=r.ParseRaw(e.Entries[n][t],o);return r.GenerateFormatted(i,o)},getRecordId:function(){return n},getValue:function(t){return r.ParseRaw(e.Entries[n][t],e.SelectedTypes[t])},getNamedReference:function(){return{id:n,entityType:"account",name:"account"}}};t[n]=o}),t}t.CreateIDataSetParameter=function(e,t,n){return a[n]={selectedRecordIds:void 0,filtering:void 0,linkedEntities:[]},{addColumn:function(e,t){i.LogInfoMessage("addColumn",l,[e,t])},columns:u(e),error:!1,errorMessage:void 0,filtering:p(n),linking:d(n),loading:!1,paging:(r=Object.keys(t.Entries).length,{totalResultCount:r,hasNextPage:!1,hasPreviousPage:!1,loadNextPage:function(){i.LogInfoMessage("loadNextPage",c)},loadPreviousPage:function(){i.LogInfoMessage("loadPreviousPage",c)},reset:function(){i.LogInfoMessage("reset",c)},setPageSize:function(e){i.LogInfoMessage("loadNextPage",c,[e])}}),records:h(t),sortedRecordIds:Object.keys(t.Entries),sorting:void 0,clearSelectedRecordIds:function(){a[n].selectedRecordIds=void 0},getSelectedRecordIds:function(){return a[n].selectedRecordIds},getTargetEntityType:function(){return o.DefaultEntity.EntityLogicalName},getTitle:function(){return o.DefaultEntity.Title},getViewId:function(){return o.DefaultEntity.ViewId},openDatasetItem:function(e){i.LogInfoMessage("openDatasetItem",l,[e])},refresh:function(){i.LogInfoMessage("refresh",l)},setSelectedRecordIds:function(e){a[n].selectedRecordIds=s(e)}};var r}},function(e,t,n){var o=n(220),r=1,i=4;e.exports=function(e){return o(e,r|i)}},function(e,t,n){var o=n(221),r=n(251),i=n(118),s=n(253),a=n(263),l=n(266),c=n(267),u=n(268),p=n(270),d=n(271),h=n(272),f=n(89),m=n(277),y=n(278),b=n(284),g=n(83),_=n(121),v=n(286),C=n(41),I=n(288),P=n(82),E=1,S=2,D=4,w="[object Arguments]",O="[object Function]",T="[object GeneratorFunction]",F="[object Object]",M={};M[w]=M["[object Array]"]=M["[object ArrayBuffer]"]=M["[object DataView]"]=M["[object Boolean]"]=M["[object Date]"]=M["[object Float32Array]"]=M["[object Float64Array]"]=M["[object Int8Array]"]=M["[object Int16Array]"]=M["[object Int32Array]"]=M["[object Map]"]=M["[object Number]"]=M[F]=M["[object RegExp]"]=M["[object Set]"]=M["[object String]"]=M["[object Symbol]"]=M["[object Uint8Array]"]=M["[object Uint8ClampedArray]"]=M["[object Uint16Array]"]=M["[object Uint32Array]"]=!0,M["[object Error]"]=M[O]=M["[object WeakMap]"]=!1,e.exports=function e(t,n,x,A,k,R){var L,N=n&E,B=n&S,U=n&D;if(x&&(L=k?x(t,A,k,R):x(t)),void 0!==L)return L;if(!C(t))return t;var j=g(t);if(j){if(L=m(t),!N)return c(t,L)}else{var W=f(t),V=W==O||W==T;if(_(t))return l(t,N);if(W==F||W==w||V&&!k){if(L=B||V?{}:b(t),!N)return B?p(t,a(L,t)):u(t,s(L,t))}else{if(!M[W])return k?t:{};L=y(t,W,N)}}R||(R=new o);var H=R.get(t);if(H)return H;if(R.set(t,L),I(t))return t.forEach(function(o){L.add(e(o,n,x,o,t,R))}),L;if(v(t))return t.forEach(function(o,r){L.set(r,e(o,n,x,r,t,R))}),L;var K=U?B?h:d:B?keysIn:P,z=j?void 0:K(t);return r(z||t,function(o,r){z&&(o=t[r=o]),i(L,r,e(o,n,x,r,t,R))}),L}},function(e,t,n){var o=n(63),r=n(227),i=n(228),s=n(229),a=n(230),l=n(231);function c(e){var t=this.__data__=new o(e);this.size=t.size}c.prototype.clear=r,c.prototype.delete=i,c.prototype.get=s,c.prototype.has=a,c.prototype.set=l,e.exports=c},function(e,t){e.exports=function(){this.__data__=[],this.size=0}},function(e,t,n){var o=n(64),r=Array.prototype.splice;e.exports=function(e){var t=this.__data__,n=o(t,e);return!(n<0||(n==t.length-1?t.pop():r.call(t,n,1),--this.size,0))}},function(e,t,n){var o=n(64);e.exports=function(e){var t=this.__data__,n=o(t,e);return n<0?void 0:t[n][1]}},function(e,t,n){var o=n(64);e.exports=function(e){return o(this.__data__,e)>-1}},function(e,t,n){var o=n(64);e.exports=function(e,t){var n=this.__data__,r=o(n,e);return r<0?(++this.size,n.push([e,t])):n[r][1]=t,this}},function(e,t,n){var o=n(63);e.exports=function(){this.__data__=new o,this.size=0}},function(e,t){e.exports=function(e){var t=this.__data__,n=t.delete(e);return this.size=t.size,n}},function(e,t){e.exports=function(e){return this.__data__.get(e)}},function(e,t){e.exports=function(e){return this.__data__.has(e)}},function(e,t,n){var o=n(63),r=n(80),i=n(238),s=200;e.exports=function(e,t){var n=this.__data__;if(n instanceof o){var a=n.__data__;if(!r||a.length<s-1)return a.push([e,t]),this.size=++n.size,this;n=this.__data__=new i(a)}return n.set(e,t),this.size=n.size,this}},function(e,t,n){var o=n(115),r=n(235),i=n(41),s=n(117),a=/^\[object .+?Constructor\]$/,l=Function.prototype,c=Object.prototype,u=l.toString,p=c.hasOwnProperty,d=RegExp("^"+u.call(p).replace(/[\\^$.*+?()[\]{}|]/g,"\\$&").replace(/hasOwnProperty|(function).*?(?=\\\()| for .+?(?=\\\])/g,"$1.*?")+"$");e.exports=function(e){return!(!i(e)||r(e))&&(o(e)?d:a).test(s(e))}},function(e,t,n){var o=n(81),r=Object.prototype,i=r.hasOwnProperty,s=r.toString,a=o?o.toStringTag:void 0;e.exports=function(e){var t=i.call(e,a),n=e[a];try{e[a]=void 0;var o=!0}catch(e){}var r=s.call(e);return o&&(t?e[a]=n:delete e[a]),r}},function(e,t){var n=Object.prototype.toString;e.exports=function(e){return n.call(e)}},function(e,t,n){var o,r=n(236),i=(o=/[^.]+$/.exec(r&&r.keys&&r.keys.IE_PROTO||""))?"Symbol(src)_1."+o:"";e.exports=function(e){return!!i&&i in e}},function(e,t,n){var o=n(22)["__core-js_shared__"];e.exports=o},function(e,t){e.exports=function(e,t){return null==e?void 0:e[t]}},function(e,t,n){var o=n(239),r=n(246),i=n(248),s=n(249),a=n(250);function l(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var o=e[t];this.set(o[0],o[1])}}l.prototype.clear=o,l.prototype.delete=r,l.prototype.get=i,l.prototype.has=s,l.prototype.set=a,e.exports=l},function(e,t,n){var o=n(240),r=n(63),i=n(80);e.exports=function(){this.size=0,this.__data__={hash:new o,map:new(i||r),string:new o}}},function(e,t,n){var o=n(241),r=n(242),i=n(243),s=n(244),a=n(245);function l(e){var t=-1,n=null==e?0:e.length;for(this.clear();++t<n;){var o=e[t];this.set(o[0],o[1])}}l.prototype.clear=o,l.prototype.delete=r,l.prototype.get=i,l.prototype.has=s,l.prototype.set=a,e.exports=l},function(e,t,n){var o=n(66);e.exports=function(){this.__data__=o?o(null):{},this.size=0}},function(e,t){e.exports=function(e){var t=this.has(e)&&delete this.__data__[e];return this.size-=t?1:0,t}},function(e,t,n){var o=n(66),r="__lodash_hash_undefined__",i=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;if(o){var n=t[e];return n===r?void 0:n}return i.call(t,e)?t[e]:void 0}},function(e,t,n){var o=n(66),r=Object.prototype.hasOwnProperty;e.exports=function(e){var t=this.__data__;return o?void 0!==t[e]:r.call(t,e)}},function(e,t,n){var o=n(66),r="__lodash_hash_undefined__";e.exports=function(e,t){var n=this.__data__;return this.size+=this.has(e)?0:1,n[e]=o&&void 0===t?r:t,this}},function(e,t,n){var o=n(67);e.exports=function(e){var t=o(this,e).delete(e);return this.size-=t?1:0,t}},function(e,t){e.exports=function(e){var t=typeof e;return"string"==t||"number"==t||"symbol"==t||"boolean"==t?"__proto__"!==e:null===e}},function(e,t,n){var o=n(67);e.exports=function(e){return o(this,e).get(e)}},function(e,t,n){var o=n(67);e.exports=function(e){return o(this,e).has(e)}},function(e,t,n){var o=n(67);e.exports=function(e,t){var n=o(this,e),r=n.size;return n.set(e,t),this.size+=n.size==r?0:1,this}},function(e,t){e.exports=function(e,t){for(var n=-1,o=null==e?0:e.length;++n<o&&!1!==t(e[n],n,e););return e}},function(e,t,n){var o=n(32),r=function(){try{var e=o(Object,"defineProperty");return e({},"",{}),e}catch(e){}}();e.exports=r},function(e,t,n){var o=n(68),r=n(82);e.exports=function(e,t){return e&&o(t,r(t),e)}},function(e,t){e.exports=function(e,t){for(var n=-1,o=Array(e);++n<e;)o[n]=t(n);return o}},function(e,t,n){var o=n(256),r=n(42),i=Object.prototype,s=i.hasOwnProperty,a=i.propertyIsEnumerable,l=o(function(){return arguments}())?o:function(e){return r(e)&&s.call(e,"callee")&&!a.call(e,"callee")};e.exports=l},function(e,t,n){var o=n(65),r=n(42),i="[object Arguments]";e.exports=function(e){return r(e)&&o(e)==i}},function(e,t){e.exports=function(){return!1}},function(e,t){var n=9007199254740991,o=/^(?:0|[1-9]\d*)$/;e.exports=function(e,t){var r=typeof e;return!!(t=null==t?n:t)&&("number"==r||"symbol"!=r&&o.test(e))&&e>-1&&e%1==0&&e<t}},function(e,t,n){var o=n(260),r=n(85),i=n(86),s=i&&i.isTypedArray,a=s?r(s):o;e.exports=a},function(e,t,n){var o=n(65),r=n(122),i=n(42),s={};s["[object Float32Array]"]=s["[object Float64Array]"]=s["[object Int8Array]"]=s["[object Int16Array]"]=s["[object Int32Array]"]=s["[object Uint8Array]"]=s["[object Uint8ClampedArray]"]=s["[object Uint16Array]"]=s["[object Uint32Array]"]=!0,s["[object Arguments]"]=s["[object Array]"]=s["[object ArrayBuffer]"]=s["[object Boolean]"]=s["[object DataView]"]=s["[object Date]"]=s["[object Error]"]=s["[object Function]"]=s["[object Map]"]=s["[object Number]"]=s["[object Object]"]=s["[object RegExp]"]=s["[object Set]"]=s["[object String]"]=s["[object WeakMap]"]=!1,e.exports=function(e){return i(e)&&r(e.length)&&!!s[o(e)]}},function(e,t,n){var o=n(87),r=n(262),i=Object.prototype.hasOwnProperty;e.exports=function(e){if(!o(e))return r(e);var t=[];for(var n in Object(e))i.call(e,n)&&"constructor"!=n&&t.push(n);return t}},function(e,t,n){var o=n(123)(Object.keys,Object);e.exports=o},function(e,t,n){var o=n(68),r=n(125);e.exports=function(e,t){return e&&o(t,r(t),e)}},function(e,t,n){var o=n(41),r=n(87),i=n(265),s=Object.prototype.hasOwnProperty;e.exports=function(e){if(!o(e))return i(e);var t=r(e),n=[];for(var a in e)("constructor"!=a||!t&&s.call(e,a))&&n.push(a);return n}},function(e,t){e.exports=function(e){var t=[];if(null!=e)for(var n in Object(e))t.push(n);return t}},function(e,t,n){(function(e){var o=n(22),r=t&&!t.nodeType&&t,i=r&&"object"==typeof e&&e&&!e.nodeType&&e,s=i&&i.exports===r?o.Buffer:void 0,a=s?s.allocUnsafe:void 0;e.exports=function(e,t){if(t)return e.slice();var n=e.length,o=a?a(n):new e.constructor(n);return e.copy(o),o}}).call(this,n(84)(e))},function(e,t){e.exports=function(e,t){var n=-1,o=e.length;for(t||(t=Array(o));++n<o;)t[n]=e[n];return t}},function(e,t,n){var o=n(68),r=n(88);e.exports=function(e,t){return o(e,r(e),t)}},function(e,t){e.exports=function(e,t){for(var n=-1,o=null==e?0:e.length,r=0,i=[];++n<o;){var s=e[n];t(s,n,e)&&(i[r++]=s)}return i}},function(e,t,n){var o=n(68),r=n(127);e.exports=function(e,t){return o(e,r(e),t)}},function(e,t,n){var o=n(130),r=n(88),i=n(82);e.exports=function(e){return o(e,i,r)}},function(e,t,n){var o=n(130),r=n(127),i=n(125);e.exports=function(e){return o(e,i,r)}},function(e,t,n){var o=n(32)(n(22),"DataView");e.exports=o},function(e,t,n){var o=n(32)(n(22),"Promise");e.exports=o},function(e,t,n){var o=n(32)(n(22),"Set");e.exports=o},function(e,t,n){var o=n(32)(n(22),"WeakMap");e.exports=o},function(e,t){var n=Object.prototype.hasOwnProperty;e.exports=function(e){var t=e.length,o=new e.constructor(t);return t&&"string"==typeof e[0]&&n.call(e,"index")&&(o.index=e.index,o.input=e.input),o}},function(e,t,n){var o=n(90),r=n(280),i=n(281),s=n(282),a=n(283),l="[object Boolean]",c="[object Date]",u="[object Map]",p="[object Number]",d="[object RegExp]",h="[object Set]",f="[object String]",m="[object Symbol]",y="[object ArrayBuffer]",b="[object DataView]",g="[object Float32Array]",_="[object Float64Array]",v="[object Int8Array]",C="[object Int16Array]",I="[object Int32Array]",P="[object Uint8Array]",E="[object Uint8ClampedArray]",S="[object Uint16Array]",D="[object Uint32Array]";e.exports=function(e,t,n){var w=e.constructor;switch(t){case y:return o(e);case l:case c:return new w(+e);case b:return r(e,n);case g:case _:case v:case C:case I:case P:case E:case S:case D:return a(e,n);case u:return new w;case p:case f:return new w(e);case d:return i(e);case h:return new w;case m:return s(e)}}},function(e,t,n){var o=n(22).Uint8Array;e.exports=o},function(e,t,n){var o=n(90);e.exports=function(e,t){var n=t?o(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.byteLength)}},function(e,t){var n=/\w*$/;e.exports=function(e){var t=new e.constructor(e.source,n.exec(e));return t.lastIndex=e.lastIndex,t}},function(e,t,n){var o=n(81),r=o?o.prototype:void 0,i=r?r.valueOf:void 0;e.exports=function(e){return i?Object(i.call(e)):{}}},function(e,t,n){var o=n(90);e.exports=function(e,t){var n=t?o(e.buffer):e.buffer;return new e.constructor(n,e.byteOffset,e.length)}},function(e,t,n){var o=n(285),r=n(129),i=n(87);e.exports=function(e){return"function"!=typeof e.constructor||i(e)?{}:o(r(e))}},function(e,t,n){var o=n(41),r=Object.create,i=function(){function e(){}return function(t){if(!o(t))return{};if(r)return r(t);e.prototype=t;var n=new e;return e.prototype=void 0,n}}();e.exports=i},function(e,t,n){var o=n(287),r=n(85),i=n(86),s=i&&i.isMap,a=s?r(s):o;e.exports=a},function(e,t,n){var o=n(89),r=n(42),i="[object Map]";e.exports=function(e){return r(e)&&o(e)==i}},function(e,t,n){var o=n(289),r=n(85),i=n(86),s=i&&i.isSet,a=s?r(s):o;e.exports=a},function(e,t,n){var o=n(89),r=n(42),i="[object Set]";e.exports=function(e){return r(e)&&o(e)==i}},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(1),r={"SingleLine.Text":"Text","SingleLine.Phone":"Phone","SingleLine.TextArea":"Text Area","SingleLine.Ticker":"Ticker Symbol","SingleLine.Email":"E-mail","SingleLine.URL":"Url","Whole.None":"None","DateAndTime.DateAndTime":"Date and Time","DateAndTime.DateOnly":"Date Only"};t.CreateAttributesFromProp=function(e,t){var n,i={DisplayName:e+"'s Display Name",LogicalName:e+"_logical_name",RequiredLevel:-1,IsSecured:!0,SourceType:0,Description:"Property "+e+"'s description",Format:r[t]};switch(t){case o.ManifestType.SingleLineText:case o.ManifestType.SingleLineEmail:case o.ManifestType.SingleLinePhone:n={MaxLength:200,ImeMode:2};break;case o.ManifestType.SingleLineURL:n={MaxLength:500,ImeMode:2};break;case o.ManifestType.SingleLineTickerSymbol:n={MaxLength:10,ImeMode:2};break;case o.ManifestType.SingleLineTextArea:n={MaxLength:4e3,ImeMode:2};break;case o.ManifestType.Multiple:n={MaxLength:1048576,ImeMode:2};break;case o.ManifestType.WholeNone:n={MaxValue:1e11,MinValue:-1e11,ImeMode:2,LanguageByCode:{},TimeZoneByCode:{}};break;case o.ManifestType.Currency:n={MaxValue:922337203685477,MinValue:-922337203685477,ImeMode:2,Precision:2};break;case o.ManifestType.Decimal:n={MaxValue:1e11,MinValue:-1e11,ImeMode:2,Precision:10};break;case o.ManifestType.FP:n={MaxValue:1e11,MinValue:-1e11,ImeMode:2,Precision:5};break;case o.ManifestType.DateAndTimeDateAndTime:case o.ManifestType.DateAndTimeDateOnly:n={Behavior:0,ImeMode:2};break;case o.ManifestType.OptionSet:n={Options:[{Label:"Option A",Value:0,Color:void 0},{Label:"Option B",Value:1,Color:void 0},{Label:"Option C",Value:2,Color:void 0}],DefaultValue:0};break;case o.ManifestType.TwoOptions:n={Options:[{Label:"Yes",Value:0,Color:void 0},{Label:"No",Value:1,Color:void 0}],DefaultValue:0};break;default:n={MaxLength:200,Format:"Text",ImeMode:2}}return Object.assign(i,n)}},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),s=n(292),a=n(20),l=n(23),c=function(e){function t(t){return e.call(this,t)||this}return r(t,e),t.prototype.render=function(){return i.createElement("div",{className:"io-section"},i.createElement("h3",{className:"heading"},a.translate(l.strings.inputs.key)),this.renderDataInputs())},t.prototype.renderDataInputs=function(){var e=this,t=this.props.controlMetadata.Properties,n=this.props.controlMetadata.DataSetDefinitions;return t&&Object.keys(t).length>0?Object.keys(t).map(function(t){return i.createElement("div",{className:"io-item",key:t},i.createElement("div",{className:"key-value-pair"},i.createElement("span",{className:"key-value-pair-key"},a.translate(l.strings.property.key)),i.createElement("span",{className:"key-value-pair-value"},t)),i.createElement("div",{className:"key-value-pair"},i.createElement("span",{className:"key-value-pair-key"},a.translate(l.strings.value.key)),e.createInputFormBasedOnProperty(t)),i.createElement("div",{className:"key-value-pair"},i.createElement("span",{className:"key-value-pair-key"},a.translate(l.strings.type.key)),e.createDropdownListForTypes(t)))}):n&&Object.keys(n).length>0?i.createElement("div",{className:"io-item",key:"dataset"},i.createElement("span",null,"Datasets inputs customization coming soon")):void 0},t.prototype.createInputFormBasedOnProperty=function(e){var t=this,n=this.props.controlMetadata.Properties[e],o=this.props.controlInputs.properties[e],r=o.SelectedType,a=n.EnumValues;return"Enum"===r?i.createElement("select",{value:o.Value,className:"key-value-pair-value",onChange:function(n){return t.onInputValueChange(n,e)}},a.map(function(e){return i.createElement("option",{key:e.name,value:e.value},e.name)})):"TwoOptions"===r?i.createElement("select",{value:o.Value,className:"key-value-pair-value",onChange:function(n){return t.onInputValueChange(n,e)}},i.createElement("option",{value:"true"},"True"),i.createElement("option",{value:"false"},"False")):i.createElement("input",{className:"key-value-pair-value",type:s.GetInputFormType(r),value:o.Value,onChange:function(n){return t.onInputValueChange(n,e)}})},t.prototype.createDropdownListForTypes=function(e){var t=this,n=this.props.controlInputs.properties[e].SelectedType,o=this.props.controlMetadata.Properties[e],r=s.GetAllCompatibleTypesFromProp(o,this.props.controlMetadata.GroupDefinitions);return 1===r.length?i.createElement("span",{className:"key-value-pair-value"},r[0]):i.createElement("select",{className:"key-value-pair-value",value:n,onChange:function(n){return t.onInputTypeChange(n,e)}},r.map(function(e){return i.createElement("option",{key:e,value:e},e)}))},t.prototype.onInputValueChange=function(e,t){var n=e.target.value;this.props.onInputValueChange(t,n)},t.prototype.onInputTypeChange=function(e,t){var n=e.target.value;this.props.onInputTypeChange(t,n)},t}(i.Component);t.InputControl=c},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(1),r=n(20),i=n(23);t.GetAllCompatibleTypesFromProp=function(e,t){var n=t||{};if(e.Type)return[e.Type];if(e.TypeGroup){var o=e.TypeGroup;if(!n[o])throw Error(r.translateA(i.strings.unrecognized_type_group.key,[o]));return n[o]}throw Error(r.translate(i.strings.property_missing_type.key))},t.GetInputFormType=function(e){switch(e){case o.ManifestType.WholeNone:case o.ManifestType.Decimal:case o.ManifestType.FP:case o.ManifestType.Currency:case o.ManifestType.OptionSet:return"number";case o.ManifestType.DateAndTimeDateOnly:return"date";case o.ManifestType.DateAndTimeDateAndTime:return"datetime-local";default:return"text"}}},function(e,t,n){"use strict";var o,r=this&&this.__extends||(o=function(e,t){return(o=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(e,t){e.__proto__=t}||function(e,t){for(var n in t)t.hasOwnProperty(n)&&(e[n]=t[n])})(e,t)},function(e,t){function n(){this.constructor=e}o(e,t),e.prototype=null===t?Object.create(t):(n.prototype=t.prototype,new n)});Object.defineProperty(t,"__esModule",{value:!0});var i=n(0),s=n(20),a=n(23),l=function(e){function t(t){return e.call(this,t)||this}return r(t,e),t.prototype.render=function(){var e=this;return i.createElement("div",{className:"io-section"},i.createElement("h3",{className:"heading"},s.translate(a.strings.outputs.key)),Object.keys(this.props.controlOutputs).map(function(t){return i.createElement("div",{className:"output-item",key:t},i.createElement("div",{className:"key-value-pair"},i.createElement("span",{className:"key-value-pair-key"},t),i.createElement("input",{className:"key-value-pair-value",type:"text",disabled:!0,value:e.props.controlOutputs[t]})))}))},t}(i.Component);t.OutputControl=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(20),r=n(23);function i(e){var t=[];return e&&(e.library&&e.library.forEach(function(e){e.packaged_library.forEach(function(n){t.push({Name:n.$.path,LoadOrder:e.$.order,Type:0,LibraryName:e.$.name})})}),e.code&&e.code.forEach(function(e){t.push({Name:e.$.path,LoadOrder:e.$.order,Type:0})}),e.css&&e.css.forEach(function(e){t.push({Name:e.$.path,LoadOrder:e.$.order,Type:1})}),e.resx&&e.resx.forEach(function(e){t.push({Name:e.$.path,LoadOrder:0,Type:5})}),e.html&&e.html.forEach(function(e){t.push({Name:e.$.path,LoadOrder:e.$.order,Type:3})}),e.img&&e.img.forEach(function(e){t.push({Name:e.$.path,LoadOrder:0,Type:2})})),t}function s(e){var t={};return e&&e.forEach(function(e){var n=e.$.name,o=e.type,r=[];o.forEach(function(e){r.push(e)}),t[n]=r}),t}function a(e){var t={};return e&&e.forEach(function(e){var n;switch(e.$.usage){case"bound":n=0;break;case"input":n=1;break;case"output":n=2;break;default:throw new Error(o.translate(r.strings.unknown_property_usage.key)+" "+e.$.usage+".")}var i=[];e.value&&e.value.forEach(function(e){i.push({name:e.$.name,value:e._})}),t[e.$.name]={Required:"true"===e.$.required,DefaultValue:void 0,Usage:n,Hidden:"true"===e.$.hidden,Static:!0,Type:e.$["of-type"],TypeGroup:e.$["of-type-group"],EnumValues:i,IsPrimary:!0}}),t}function l(e){var t={};return e&&e.forEach(function(e){var n=a(e["property-set"]);t[e.$.name]={DisplayName:e.$["display-name-key"],Type:void 0,Columns:n,Primary:void 0}}),t}t.GenerateControlMetadata=function(e){var t=e.manifest.control,n=t.$.namespace+"."+t.$.constructor,o={ConstructorName:n,CustomControlId:n,DisplayNameKey:t.$["display-name-key"],Version:t.$.version,IsVirtual:"virtual"===t.$["control-type"],Resources:[],GroupDefinitions:void 0,DataSetDefinitions:void 0,Properties:void 0};return o.Resources=i(t.resources),o.GroupDefinitions=s(t["type-group"]),o.Properties=a(t.property),o.DataSetDefinitions=l(t["data-set"]),o},t.InitializeResourceMetadata=i,t.InitializeTypeGroupMetadata=s,t.InitializePropertyMetadata=a,t.InitializeDatasetMetadata=l},function(e,t,n){"use strict";Object.defineProperty(t,"__esModule",{value:!0});var o=n(62);function r(e,t){switch(e){case"Whole.None":case"OptionSet":return"0";case"Currency":return"0.00";case"FP":case"Decimal":return"0.0";case"Enum":return t.EnumValues[0].value;case"TwoOptions":return"true";case"DateAndTime.DateOnly":return"2019-01-01";case"DateAndTime.DateAndTime":return"2019-01-01T12:00";default:return"val"}}t.DefaultDatasetRecordCount=3,t.SetDefaultPropertyValues=function(e){var t={},n=e.Properties;return n&&Object.keys(n).map(function(o){var i,s=n[o],a=r(i=s.TypeGroup?e.GroupDefinitions[s.TypeGroup][0]:(s.EnumValues&&s.EnumValues.length,s.Type),s);t[o]={Value:a,SelectedType:i}}),t},t.SetDefaultDatasetValues=function(e){var n={},i=e.DataSetDefinitions;return i&&Object.keys(i).forEach(function(s){var a={},l={},c=Object.keys(i[s].Columns).length?i[s].Columns:o.DefaultColumns;Object.keys(c).forEach(function(t){var n,o=c[t];n=o.TypeGroup?e.GroupDefinitions[o.TypeGroup][0]:o.Type,a[t]=r(n,o),l[t]=n});for(var u={},p=0;p<t.DefaultDatasetRecordCount;p++)u["id"+p]=a;n[s]={Entries:u,SelectedTypes:l}}),n},t.GetDefaultValueFromSelectedType=r},function(e,t,n){var o=n(297);"string"==typeof o&&(o=[[e.i,o,""]]);var r={hmr:!0,transform:void 0,insertInto:void 0};n(299)(o,r);o.locals&&(e.exports=o.locals)},function(e,t,n){(e.exports=n(298)(!1)).push([e.i,'body {\r\n  padding: 0;\r\n  margin: 0;\r\n  width: 100vw;\r\n  height: 100vh;\r\n  display: flex;\r\n}\r\n\r\n#app-root {\r\n  width: 100vw;\r\n  height: 100vh;\r\n  display: flex;\r\n}\r\n\r\n.harness-root {\r\n  display: flex;\r\n  flex: 1 0 auto;\r\n}\r\n\r\n.control-pane {\r\n  flex: 1 0 auto;\r\n  padding: 20px;\r\n  text-align: center;\r\n  max-width: 75vw;\r\n}\r\n\r\n.io-pane {\r\n  flex: 0 0 auto;\r\n  border-left: 1px solid lightgray;\r\n  overflow-y: auto;\r\n  width: fit-content;\r\n  min-width: 20%;\r\n  padding: 16px;\r\n  font-family: -apple-system,system-ui,BlinkMacSystemFont,"Segoe UI",Roboto,Oxygen-Sans,Ubuntu,Cantarell,"Helvetica Neue",Arial,sans-serif;\r\n}\r\n\r\n.heading {\r\n  margin: 0 0 12px 0;\r\n  font-size: 24px;\r\n  font-weight: 600;\r\n}\r\n\r\n.io-item {\r\n  margin-bottom: 4px;\r\n}\r\n\r\n.io-item + .io-item {\r\n  margin-top: 12px;\r\n  border-top: 1px solid lightgrey;\r\n  padding-top: 12px;\r\n}\r\n\r\n.io-section + .io-section {\r\n  margin-top: 20px;\r\n  border-top: 1px solid black;\r\n  padding-top: 16px;\r\n}\r\n\r\n.key-value-pair {\r\n  margin: 0 0 4px 0;\r\n}\r\n\r\n.key-value-pair-key {\r\n  font-size: 12px;\r\n  color: grey;\r\n  display: inline-block;\r\n  width: 50px;\r\n  padding-right: 8px;\r\n  text-align: right;\r\n}\r\n\r\n.key-value-pair-value {\r\n  font-size: 12px;\r\n  width: 180px;\r\n  padding: 4px 0px 4px 0px;\r\n}\r\n',""])},function(e,t,n){"use strict";e.exports=function(e){var t=[];return t.toString=function(){return this.map(function(t){var n=function(e,t){var n=e[1]||"",o=e[3];if(!o)return n;if(t&&"function"==typeof btoa){var r=(s=o,"/*# sourceMappingURL=data:application/json;charset=utf-8;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(s))))+" */"),i=o.sources.map(function(e){return"/*# sourceURL="+o.sourceRoot+e+" */"});return[n].concat(i).concat([r]).join("\n")}var s;return[n].join("\n")}(t,e);return t[2]?"@media "+t[2]+"{"+n+"}":n}).join("")},t.i=function(e,n){"string"==typeof e&&(e=[[null,e,""]]);for(var o={},r=0;r<this.length;r++){var i=this[r][0];null!=i&&(o[i]=!0)}for(r=0;r<e.length;r++){var s=e[r];null!=s[0]&&o[s[0]]||(n&&!s[2]?s[2]=n:n&&(s[2]="("+s[2]+") and ("+n+")"),t.push(s))}},t}},function(e,t,n){var o,r,i={},s=(o=function(){return window&&document&&document.all&&!window.atob},function(){return void 0===r&&(r=o.apply(this,arguments)),r}),a=function(e){var t={};return function(e,n){if("function"==typeof e)return e();if(void 0===t[e]){var o=function(e,t){return t?t.querySelector(e):document.querySelector(e)}.call(this,e,n);if(window.HTMLIFrameElement&&o instanceof window.HTMLIFrameElement)try{o=o.contentDocument.head}catch(e){o=null}t[e]=o}return t[e]}}(),l=null,c=0,u=[],p=n(300);function d(e,t){for(var n=0;n<e.length;n++){var o=e[n],r=i[o.id];if(r){r.refs++;for(var s=0;s<r.parts.length;s++)r.parts[s](o.parts[s]);for(;s<o.parts.length;s++)r.parts.push(g(o.parts[s],t))}else{var a=[];for(s=0;s<o.parts.length;s++)a.push(g(o.parts[s],t));i[o.id]={id:o.id,refs:1,parts:a}}}}function h(e,t){for(var n=[],o={},r=0;r<e.length;r++){var i=e[r],s=t.base?i[0]+t.base:i[0],a={css:i[1],media:i[2],sourceMap:i[3]};o[s]?o[s].parts.push(a):n.push(o[s]={id:s,parts:[a]})}return n}function f(e,t){var n=a(e.insertInto);if(!n)throw new Error("Couldn't find a style target. This probably means that the value for the 'insertInto' parameter is invalid.");var o=u[u.length-1];if("top"===e.insertAt)o?o.nextSibling?n.insertBefore(t,o.nextSibling):n.appendChild(t):n.insertBefore(t,n.firstChild),u.push(t);else if("bottom"===e.insertAt)n.appendChild(t);else{if("object"!=typeof e.insertAt||!e.insertAt.before)throw new Error("[Style Loader]\n\n Invalid value for parameter 'insertAt' ('options.insertAt') found.\n Must be 'top', 'bottom', or Object.\n (https://github.com/webpack-contrib/style-loader#insertat)\n");var r=a(e.insertAt.before,n);n.insertBefore(t,r)}}function m(e){if(null===e.parentNode)return!1;e.parentNode.removeChild(e);var t=u.indexOf(e);t>=0&&u.splice(t,1)}function y(e){var t=document.createElement("style");if(void 0===e.attrs.type&&(e.attrs.type="text/css"),void 0===e.attrs.nonce){var o=function(){0;return n.nc}();o&&(e.attrs.nonce=o)}return b(t,e.attrs),f(e,t),t}function b(e,t){Object.keys(t).forEach(function(n){e.setAttribute(n,t[n])})}function g(e,t){var n,o,r,i;if(t.transform&&e.css){if(!(i="function"==typeof t.transform?t.transform(e.css):t.transform.default(e.css)))return function(){};e.css=i}if(t.singleton){var s=c++;n=l||(l=y(t)),o=C.bind(null,n,s,!1),r=C.bind(null,n,s,!0)}else e.sourceMap&&"function"==typeof URL&&"function"==typeof URL.createObjectURL&&"function"==typeof URL.revokeObjectURL&&"function"==typeof Blob&&"function"==typeof btoa?(n=function(e){var t=document.createElement("link");return void 0===e.attrs.type&&(e.attrs.type="text/css"),e.attrs.rel="stylesheet",b(t,e.attrs),f(e,t),t}(t),o=function(e,t,n){var o=n.css,r=n.sourceMap,i=void 0===t.convertToAbsoluteUrls&&r;(t.convertToAbsoluteUrls||i)&&(o=p(o));r&&(o+="\n/*# sourceMappingURL=data:application/json;base64,"+btoa(unescape(encodeURIComponent(JSON.stringify(r))))+" */");var s=new Blob([o],{type:"text/css"}),a=e.href;e.href=URL.createObjectURL(s),a&&URL.revokeObjectURL(a)}.bind(null,n,t),r=function(){m(n),n.href&&URL.revokeObjectURL(n.href)}):(n=y(t),o=function(e,t){var n=t.css,o=t.media;o&&e.setAttribute("media",o);if(e.styleSheet)e.styleSheet.cssText=n;else{for(;e.firstChild;)e.removeChild(e.firstChild);e.appendChild(document.createTextNode(n))}}.bind(null,n),r=function(){m(n)});return o(e),function(t){if(t){if(t.css===e.css&&t.media===e.media&&t.sourceMap===e.sourceMap)return;o(e=t)}else r()}}e.exports=function(e,t){if("undefined"!=typeof DEBUG&&DEBUG&&"object"!=typeof document)throw new Error("The style-loader cannot be used in a non-browser environment");(t=t||{}).attrs="object"==typeof t.attrs?t.attrs:{},t.singleton||"boolean"==typeof t.singleton||(t.singleton=s()),t.insertInto||(t.insertInto="head"),t.insertAt||(t.insertAt="bottom");var n=h(e,t);return d(n,t),function(e){for(var o=[],r=0;r<n.length;r++){var s=n[r];(a=i[s.id]).refs--,o.push(a)}e&&d(h(e,t),t);for(r=0;r<o.length;r++){var a;if(0===(a=o[r]).refs){for(var l=0;l<a.parts.length;l++)a.parts[l]();delete i[a.id]}}}};var _,v=(_=[],function(e,t){return _[e]=t,_.filter(Boolean).join("\n")});function C(e,t,n,o){var r=n?"":o.css;if(e.styleSheet)e.styleSheet.cssText=v(t,r);else{var i=document.createTextNode(r),s=e.childNodes;s[t]&&e.removeChild(s[t]),s.length?e.insertBefore(i,s[t]):e.appendChild(i)}}},function(e,t){e.exports=function(e){var t="undefined"!=typeof window&&window.location;if(!t)throw new Error("fixUrls requires window.location");if(!e||"string"!=typeof e)return e;var n=t.protocol+"//"+t.host,o=n+t.pathname.replace(/\/[^\/]*$/,"/");return e.replace(/url\s*\(((?:[^)(]|\((?:[^)(]+|\([^)(]*\))*\))*)\)/gi,function(e,t){var r,i=t.trim().replace(/^"(.*)"$/,function(e,t){return t}).replace(/^'(.*)'$/,function(e,t){return t});return/^(#|data:|http:\/\/|https:\/\/|file:\/\/\/|\s*$)/i.test(i)?e:(r=0===i.indexOf("//")?i:0===i.indexOf("/")?n+i:o+i.replace(/^\.\//,""),"url("+JSON.stringify(r)+")")})}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,